
build/debug/DW_resp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080019c0  080019c0  000119c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019fc  080019fc  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000033  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ab8d  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017f9  00000000  00000000  0002abfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000670  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000600  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000897e  00000000  00000000  0002d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002599  00000000  00000000  000359e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e34  00000000  00000000  00037f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000750f  00000000  00000000  00038db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	2000000c 	.word	0x2000000c
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080019a8 	.word	0x080019a8

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080019a8 	.word	0x080019a8

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f001 fbba 	bl	80019a8 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	3401      	adds	r4, #1
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	080019f8 	.word	0x080019f8
 800024c:	080019f8 	.word	0x080019f8
 8000250:	080019fc 	.word	0x080019fc
 8000254:	080019f8 	.word	0x080019f8

08000258 <memset>:
 8000258:	0783      	lsls	r3, r0, #30
 800025a:	b530      	push	{r4, r5, lr}
 800025c:	d048      	beq.n	80002f0 <memset+0x98>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03f      	beq.n	80002e4 <memset+0x8c>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e001      	b.n	800026e <memset+0x16>
 800026a:	3c01      	subs	r4, #1
 800026c:	d33a      	bcc.n	80002e4 <memset+0x8c>
 800026e:	f803 2b01 	strb.w	r2, [r3], #1
 8000272:	079d      	lsls	r5, r3, #30
 8000274:	d1f9      	bne.n	800026a <memset+0x12>
 8000276:	2c03      	cmp	r4, #3
 8000278:	d92d      	bls.n	80002d6 <memset+0x7e>
 800027a:	b2cd      	uxtb	r5, r1
 800027c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000280:	2c0f      	cmp	r4, #15
 8000282:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000286:	d936      	bls.n	80002f6 <memset+0x9e>
 8000288:	f1a4 0210 	sub.w	r2, r4, #16
 800028c:	f022 0c0f 	bic.w	ip, r2, #15
 8000290:	f103 0e20 	add.w	lr, r3, #32
 8000294:	44e6      	add	lr, ip
 8000296:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800029a:	f103 0210 	add.w	r2, r3, #16
 800029e:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a6:	3210      	adds	r2, #16
 80002a8:	4572      	cmp	r2, lr
 80002aa:	d1f8      	bne.n	800029e <memset+0x46>
 80002ac:	f10c 0201 	add.w	r2, ip, #1
 80002b0:	f014 0f0c 	tst.w	r4, #12
 80002b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b8:	f004 0c0f 	and.w	ip, r4, #15
 80002bc:	d013      	beq.n	80002e6 <memset+0x8e>
 80002be:	f1ac 0304 	sub.w	r3, ip, #4
 80002c2:	f023 0303 	bic.w	r3, r3, #3
 80002c6:	3304      	adds	r3, #4
 80002c8:	4413      	add	r3, r2
 80002ca:	f842 5b04 	str.w	r5, [r2], #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d1fb      	bne.n	80002ca <memset+0x72>
 80002d2:	f00c 0403 	and.w	r4, ip, #3
 80002d6:	b12c      	cbz	r4, 80002e4 <memset+0x8c>
 80002d8:	b2ca      	uxtb	r2, r1
 80002da:	441c      	add	r4, r3
 80002dc:	f803 2b01 	strb.w	r2, [r3], #1
 80002e0:	429c      	cmp	r4, r3
 80002e2:	d1fb      	bne.n	80002dc <memset+0x84>
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	4664      	mov	r4, ip
 80002e8:	4613      	mov	r3, r2
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	d1f4      	bne.n	80002d8 <memset+0x80>
 80002ee:	e7f9      	b.n	80002e4 <memset+0x8c>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4614      	mov	r4, r2
 80002f4:	e7bf      	b.n	8000276 <memset+0x1e>
 80002f6:	461a      	mov	r2, r3
 80002f8:	46a4      	mov	ip, r4
 80002fa:	e7e0      	b.n	80002be <memset+0x66>

080002fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002fc:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_GPIO_Init+0x2c>)
 8000300:	695a      	ldr	r2, [r3, #20]
 8000302:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	695a      	ldr	r2, [r3, #20]
 800030a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800030e:	9200      	str	r2, [sp, #0]
 8000310:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	695a      	ldr	r2, [r3, #20]
 8000314:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000318:	615a      	str	r2, [r3, #20]
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	9b01      	ldr	r3, [sp, #4]

}
 8000324:	b002      	add	sp, #8
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000

0800032c <UART_SendDouble>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void UART_SendDouble(double number)
{
 800032c:	b500      	push	{lr}
 800032e:	b085      	sub	sp, #20
 8000330:	ed8d 0b00 	vstr	d0, [sp]
    uint8_t buffer[8];  
    memcpy(buffer, &number, sizeof(double));  
 8000334:	f10d 0c08 	add.w	ip, sp, #8
 8000338:	466b      	mov	r3, sp
 800033a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800033e:	e88c 0003 	stmia.w	ip, {r0, r1}

    HAL_UART_Transmit(&huart1, buffer, sizeof(double), HAL_MAX_DELAY); 
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000346:	2208      	movs	r2, #8
 8000348:	4661      	mov	r1, ip
 800034a:	4803      	ldr	r0, [pc, #12]	; (8000358 <UART_SendDouble+0x2c>)
 800034c:	f001 f9a4 	bl	8001698 <HAL_UART_Transmit>
}
 8000350:	b005      	add	sp, #20
 8000352:	f85d fb04 	ldr.w	pc, [sp], #4
 8000356:	bf00      	nop
 8000358:	2000002c 	.word	0x2000002c

0800035c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035e:	e7fe      	b.n	800035e <Error_Handler+0x2>

08000360 <SystemClock_Config>:
{
 8000360:	b500      	push	{lr}
 8000362:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000364:	2228      	movs	r2, #40	; 0x28
 8000366:	2100      	movs	r1, #0
 8000368:	a814      	add	r0, sp, #80	; 0x50
 800036a:	f7ff ff75 	bl	8000258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036e:	2100      	movs	r1, #0
 8000370:	910f      	str	r1, [sp, #60]	; 0x3c
 8000372:	9110      	str	r1, [sp, #64]	; 0x40
 8000374:	9111      	str	r1, [sp, #68]	; 0x44
 8000376:	9112      	str	r1, [sp, #72]	; 0x48
 8000378:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037a:	223c      	movs	r2, #60	; 0x3c
 800037c:	4668      	mov	r0, sp
 800037e:	f7ff ff6b 	bl	8000258 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800038a:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800038c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000390:	2302      	movs	r3, #2
 8000392:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000394:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039a:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	a814      	add	r0, sp, #80	; 0x50
 800039e:	f000 f9f3 	bl	8000788 <HAL_RCC_OscConfig>
 80003a2:	b9c0      	cbnz	r0, 80003d6 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2102      	movs	r1, #2
 80003aa:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003b4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b8:	a80f      	add	r0, sp, #60	; 0x3c
 80003ba:	f000 fd2f 	bl	8000e1c <HAL_RCC_ClockConfig>
 80003be:	b960      	cbnz	r0, 80003da <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003c4:	2300      	movs	r3, #0
 80003c6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c8:	4668      	mov	r0, sp
 80003ca:	f000 fe2d 	bl	8001028 <HAL_RCCEx_PeriphCLKConfig>
 80003ce:	b930      	cbnz	r0, 80003de <SystemClock_Config+0x7e>
}
 80003d0:	b01f      	add	sp, #124	; 0x7c
 80003d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80003d6:	f7ff ffc1 	bl	800035c <Error_Handler>
    Error_Handler();
 80003da:	f7ff ffbf 	bl	800035c <Error_Handler>
    Error_Handler();
 80003de:	f7ff ffbd 	bl	800035c <Error_Handler>
 80003e2:	0000      	movs	r0, r0
 80003e4:	0000      	movs	r0, r0
	...

080003e8 <main>:
{
 80003e8:	b508      	push	{r3, lr}
  HAL_Init();
 80003ea:	f000 f83b 	bl	8000464 <HAL_Init>
  SystemClock_Config();
 80003ee:	f7ff ffb7 	bl	8000360 <SystemClock_Config>
  MX_GPIO_Init();
 80003f2:	f7ff ff83 	bl	80002fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003f6:	f001 fa5d 	bl	80018b4 <MX_USART1_UART_Init>
    UART_SendDouble(value);  // Send the number
 80003fa:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8000410 <main+0x28>
 80003fe:	f7ff ff95 	bl	800032c <UART_SendDouble>
    HAL_Delay(500);
 8000402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000406:	f000 f851 	bl	80004ac <HAL_Delay>
  while (1)
 800040a:	e7f6      	b.n	80003fa <main+0x12>
 800040c:	f3af 8000 	nop.w
 8000410:	1a9fbe77 	.word	0x1a9fbe77
 8000414:	405edd2f 	.word	0x405edd2f

08000418 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b510      	push	{r4, lr}
 800041a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_InitTick+0x40>)
 800041e:	7818      	ldrb	r0, [r3, #0]
 8000420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000424:	fbb3 f3f0 	udiv	r3, r3, r0
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <HAL_InitTick+0x44>)
 800042a:	6810      	ldr	r0, [r2, #0]
 800042c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000430:	f000 f89a 	bl	8000568 <HAL_SYSTICK_Config>
 8000434:	b968      	cbnz	r0, 8000452 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000436:	2c0f      	cmp	r4, #15
 8000438:	d901      	bls.n	800043e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800043a:	2001      	movs	r0, #1
 800043c:	e00a      	b.n	8000454 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800043e:	2200      	movs	r2, #0
 8000440:	4621      	mov	r1, r4
 8000442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000446:	f000 f857 	bl	80004f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_InitTick+0x48>)
 800044c:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 800044e:	2000      	movs	r0, #0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000452:	2001      	movs	r0, #1
}
 8000454:	bd10      	pop	{r4, pc}
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	20000008 	.word	0x20000008
 8000460:	20000004 	.word	0x20000004

08000464 <HAL_Init>:
{
 8000464:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_Init+0x20>)
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000470:	2003      	movs	r0, #3
 8000472:	f000 f82f 	bl	80004d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000476:	200f      	movs	r0, #15
 8000478:	f7ff ffce 	bl	8000418 <HAL_InitTick>
  HAL_MspInit();
 800047c:	f000 f96c 	bl	8000758 <HAL_MspInit>
}
 8000480:	2000      	movs	r0, #0
 8000482:	bd08      	pop	{r3, pc}
 8000484:	40022000 	.word	0x40022000

08000488 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000488:	4a03      	ldr	r2, [pc, #12]	; (8000498 <HAL_IncTick+0x10>)
 800048a:	6811      	ldr	r1, [r2, #0]
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <HAL_IncTick+0x14>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	440b      	add	r3, r1
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028
 800049c:	20000000 	.word	0x20000000

080004a0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <HAL_GetTick+0x8>)
 80004a2:	6818      	ldr	r0, [r3, #0]
}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000028 	.word	0x20000028

080004ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004ac:	b538      	push	{r3, r4, r5, lr}
 80004ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004b0:	f7ff fff6 	bl	80004a0 <HAL_GetTick>
 80004b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80004ba:	d002      	beq.n	80004c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_Delay+0x24>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004c2:	f7ff ffed 	bl	80004a0 <HAL_GetTick>
 80004c6:	1b40      	subs	r0, r0, r5
 80004c8:	42a0      	cmp	r0, r4
 80004ca:	d3fa      	bcc.n	80004c2 <HAL_Delay+0x16>
  {
  }
}
 80004cc:	bd38      	pop	{r3, r4, r5, pc}
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000

080004d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80004d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004dc:	041b      	lsls	r3, r3, #16
 80004de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004e0:	0200      	lsls	r0, r0, #8
 80004e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80004e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80004f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80004f2:	4770      	bx	lr
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <HAL_NVIC_SetPriority+0x68>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000502:	f1c3 0c07 	rsb	ip, r3, #7
 8000506:	f1bc 0f04 	cmp.w	ip, #4
 800050a:	bf28      	it	cs
 800050c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000510:	f103 0e04 	add.w	lr, r3, #4
 8000514:	f1be 0f06 	cmp.w	lr, #6
 8000518:	d918      	bls.n	800054c <HAL_NVIC_SetPriority+0x54>
 800051a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800051c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000520:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000524:	ea21 010c 	bic.w	r1, r1, ip
 8000528:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800052a:	fa0e f303 	lsl.w	r3, lr, r3
 800052e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000532:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000534:	2800      	cmp	r0, #0
 8000536:	db0b      	blt.n	8000550 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	b2c9      	uxtb	r1, r1
 800053c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000540:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000544:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000548:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054c:	2300      	movs	r3, #0
 800054e:	e7e5      	b.n	800051c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	f000 000f 	and.w	r0, r0, #15
 8000554:	0109      	lsls	r1, r1, #4
 8000556:	b2c9      	uxtb	r1, r1
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <HAL_NVIC_SetPriority+0x6c>)
 800055a:	5419      	strb	r1, [r3, r0]
 800055c:	e7f4      	b.n	8000548 <HAL_NVIC_SetPriority+0x50>
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	e000ed14 	.word	0xe000ed14

08000568 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000568:	3801      	subs	r0, #1
 800056a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800056e:	d20b      	bcs.n	8000588 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000570:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000574:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <HAL_SYSTICK_Config+0x24>)
 8000578:	21f0      	movs	r1, #240	; 0xf0
 800057a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800057e:	2000      	movs	r0, #0
 8000580:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000582:	2207      	movs	r2, #7
 8000584:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000586:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000588:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000594:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000596:	e062      	b.n	800065e <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000598:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800059a:	005e      	lsls	r6, r3, #1
 800059c:	2403      	movs	r4, #3
 800059e:	40b4      	lsls	r4, r6
 80005a0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005a4:	68cc      	ldr	r4, [r1, #12]
 80005a6:	40b4      	lsls	r4, r6
 80005a8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80005aa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ae:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005b2:	684c      	ldr	r4, [r1, #4]
 80005b4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80005b8:	409c      	lsls	r4, r3
 80005ba:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80005be:	6044      	str	r4, [r0, #4]
 80005c0:	e05e      	b.n	8000680 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80005c2:	08dd      	lsrs	r5, r3, #3
 80005c4:	3508      	adds	r5, #8
 80005c6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005ca:	f003 0407 	and.w	r4, r3, #7
 80005ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80005d2:	240f      	movs	r4, #15
 80005d4:	fa04 f40c 	lsl.w	r4, r4, ip
 80005d8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005dc:	690c      	ldr	r4, [r1, #16]
 80005de:	fa04 f40c 	lsl.w	r4, r4, ip
 80005e2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80005e6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80005ea:	e060      	b.n	80006ae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005ec:	2404      	movs	r4, #4
 80005ee:	e000      	b.n	80005f2 <HAL_GPIO_Init+0x62>
 80005f0:	2400      	movs	r4, #0
 80005f2:	fa04 f40e 	lsl.w	r4, r4, lr
 80005f6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005f8:	f10c 0c02 	add.w	ip, ip, #2
 80005fc:	4d52      	ldr	r5, [pc, #328]	; (8000748 <HAL_GPIO_Init+0x1b8>)
 80005fe:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000602:	4c52      	ldr	r4, [pc, #328]	; (800074c <HAL_GPIO_Init+0x1bc>)
 8000604:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8000606:	43d4      	mvns	r4, r2
 8000608:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800060c:	684f      	ldr	r7, [r1, #4]
 800060e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000612:	d001      	beq.n	8000618 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8000614:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000618:	4d4c      	ldr	r5, [pc, #304]	; (800074c <HAL_GPIO_Init+0x1bc>)
 800061a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800061c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800061e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000622:	684f      	ldr	r7, [r1, #4]
 8000624:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8000628:	d001      	beq.n	800062e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800062a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 800062e:	4d47      	ldr	r5, [pc, #284]	; (800074c <HAL_GPIO_Init+0x1bc>)
 8000630:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 8000632:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000634:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000638:	684f      	ldr	r7, [r1, #4]
 800063a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800063e:	d001      	beq.n	8000644 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8000640:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000644:	4d41      	ldr	r5, [pc, #260]	; (800074c <HAL_GPIO_Init+0x1bc>)
 8000646:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000648:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800064a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800064c:	684e      	ldr	r6, [r1, #4]
 800064e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000652:	d001      	beq.n	8000658 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8000654:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8000658:	4a3c      	ldr	r2, [pc, #240]	; (800074c <HAL_GPIO_Init+0x1bc>)
 800065a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800065c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065e:	680a      	ldr	r2, [r1, #0]
 8000660:	fa32 f403 	lsrs.w	r4, r2, r3
 8000664:	d06e      	beq.n	8000744 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000666:	f04f 0c01 	mov.w	ip, #1
 800066a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800066e:	ea1c 0202 	ands.w	r2, ip, r2
 8000672:	d0f3      	beq.n	800065c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000674:	684c      	ldr	r4, [r1, #4]
 8000676:	f004 0403 	and.w	r4, r4, #3
 800067a:	3c01      	subs	r4, #1
 800067c:	2c01      	cmp	r4, #1
 800067e:	d98b      	bls.n	8000598 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000680:	684c      	ldr	r4, [r1, #4]
 8000682:	f004 0403 	and.w	r4, r4, #3
 8000686:	2c03      	cmp	r4, #3
 8000688:	d00c      	beq.n	80006a4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800068a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800068c:	005d      	lsls	r5, r3, #1
 800068e:	f04f 0c03 	mov.w	ip, #3
 8000692:	fa0c fc05 	lsl.w	ip, ip, r5
 8000696:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800069a:	688c      	ldr	r4, [r1, #8]
 800069c:	40ac      	lsls	r4, r5
 800069e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80006a2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006a4:	684c      	ldr	r4, [r1, #4]
 80006a6:	f004 0403 	and.w	r4, r4, #3
 80006aa:	2c02      	cmp	r4, #2
 80006ac:	d089      	beq.n	80005c2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80006ae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006b4:	f04f 0c03 	mov.w	ip, #3
 80006b8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80006bc:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006c0:	684c      	ldr	r4, [r1, #4]
 80006c2:	f004 0403 	and.w	r4, r4, #3
 80006c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80006ca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80006ce:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80006d0:	684c      	ldr	r4, [r1, #4]
 80006d2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80006d6:	d0c1      	beq.n	800065c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4c1d      	ldr	r4, [pc, #116]	; (8000750 <HAL_GPIO_Init+0x1c0>)
 80006da:	69a5      	ldr	r5, [r4, #24]
 80006dc:	f045 0501 	orr.w	r5, r5, #1
 80006e0:	61a5      	str	r5, [r4, #24]
 80006e2:	69a4      	ldr	r4, [r4, #24]
 80006e4:	f004 0401 	and.w	r4, r4, #1
 80006e8:	9401      	str	r4, [sp, #4]
 80006ea:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006ec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80006f0:	f10c 0502 	add.w	r5, ip, #2
 80006f4:	4c14      	ldr	r4, [pc, #80]	; (8000748 <HAL_GPIO_Init+0x1b8>)
 80006f6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006fa:	f003 0403 	and.w	r4, r3, #3
 80006fe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8000702:	240f      	movs	r4, #15
 8000704:	fa04 f40e 	lsl.w	r4, r4, lr
 8000708:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800070c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000710:	f43f af6e 	beq.w	80005f0 <HAL_GPIO_Init+0x60>
 8000714:	4c0f      	ldr	r4, [pc, #60]	; (8000754 <HAL_GPIO_Init+0x1c4>)
 8000716:	42a0      	cmp	r0, r4
 8000718:	d00e      	beq.n	8000738 <HAL_GPIO_Init+0x1a8>
 800071a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800071e:	42a0      	cmp	r0, r4
 8000720:	d00c      	beq.n	800073c <HAL_GPIO_Init+0x1ac>
 8000722:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000726:	42a0      	cmp	r0, r4
 8000728:	d00a      	beq.n	8000740 <HAL_GPIO_Init+0x1b0>
 800072a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800072e:	42a0      	cmp	r0, r4
 8000730:	f43f af5c 	beq.w	80005ec <HAL_GPIO_Init+0x5c>
 8000734:	2405      	movs	r4, #5
 8000736:	e75c      	b.n	80005f2 <HAL_GPIO_Init+0x62>
 8000738:	2401      	movs	r4, #1
 800073a:	e75a      	b.n	80005f2 <HAL_GPIO_Init+0x62>
 800073c:	2402      	movs	r4, #2
 800073e:	e758      	b.n	80005f2 <HAL_GPIO_Init+0x62>
 8000740:	2403      	movs	r4, #3
 8000742:	e756      	b.n	80005f2 <HAL_GPIO_Init+0x62>
  }
}
 8000744:	b003      	add	sp, #12
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000748:	40010000 	.word	0x40010000
 800074c:	40010400 	.word	0x40010400
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_MspInit+0x2c>)
 800075c:	699a      	ldr	r2, [r3, #24]
 800075e:	f042 0201 	orr.w	r2, r2, #1
 8000762:	619a      	str	r2, [r3, #24]
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	f002 0201 	and.w	r2, r2, #1
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	69da      	ldr	r2, [r3, #28]
 8000770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000774:	61da      	str	r2, [r3, #28]
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	b002      	add	sp, #8
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000788:	2800      	cmp	r0, #0
 800078a:	f000 8301 	beq.w	8000d90 <HAL_RCC_OscConfig+0x608>
{
 800078e:	b570      	push	{r4, r5, r6, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000794:	6803      	ldr	r3, [r0, #0]
 8000796:	f013 0f01 	tst.w	r3, #1
 800079a:	d03b      	beq.n	8000814 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800079c:	4bb5      	ldr	r3, [pc, #724]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f003 030c 	and.w	r3, r3, #12
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d01e      	beq.n	80007e6 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007a8:	4bb2      	ldr	r3, [pc, #712]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d013      	beq.n	80007dc <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b4:	6863      	ldr	r3, [r4, #4]
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	d068      	beq.n	800088e <HAL_RCC_OscConfig+0x106>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f040 8092 	bne.w	80008e6 <HAL_RCC_OscConfig+0x15e>
 80007c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	e05d      	b.n	8000898 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007dc:	4ba5      	ldr	r3, [pc, #660]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80007e4:	d0e6      	beq.n	80007b4 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ea:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ee:	4ba1      	ldr	r3, [pc, #644]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f6:	fa93 f3a3 	rbit	r3, r3
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	2201      	movs	r2, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	420b      	tst	r3, r1
 800080a:	d003      	beq.n	8000814 <HAL_RCC_OscConfig+0x8c>
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 82c0 	beq.w	8000d94 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	f013 0f02 	tst.w	r3, #2
 800081a:	f000 80c5 	beq.w	80009a8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800081e:	4b95      	ldr	r3, [pc, #596]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f013 0f0c 	tst.w	r3, #12
 8000826:	f000 809c 	beq.w	8000962 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800082a:	4b92      	ldr	r3, [pc, #584]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 030c 	and.w	r3, r3, #12
 8000832:	2b08      	cmp	r3, #8
 8000834:	f000 808f 	beq.w	8000956 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000838:	6923      	ldr	r3, [r4, #16]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 80f2 	beq.w	8000a24 <HAL_RCC_OscConfig+0x29c>
 8000840:	2201      	movs	r2, #1
 8000842:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000846:	fab3 f383 	clz	r3, r3
 800084a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800084e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000856:	f7ff fe23 	bl	80004a0 <HAL_GetTick>
 800085a:	4605      	mov	r5, r0
 800085c:	2302      	movs	r3, #2
 800085e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000862:	4b84      	ldr	r3, [pc, #528]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	2302      	movs	r3, #2
 8000868:	fa93 f3a3 	rbit	r3, r3
 800086c:	fab3 f383 	clz	r3, r3
 8000870:	f003 031f 	and.w	r3, r3, #31
 8000874:	2201      	movs	r2, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	420b      	tst	r3, r1
 800087c:	f040 80c3 	bne.w	8000a06 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000880:	f7ff fe0e 	bl	80004a0 <HAL_GetTick>
 8000884:	1b40      	subs	r0, r0, r5
 8000886:	2802      	cmp	r0, #2
 8000888:	d9e8      	bls.n	800085c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 800088a:	2003      	movs	r0, #3
 800088c:	e28b      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088e:	4a79      	ldr	r2, [pc, #484]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000896:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000898:	4a76      	ldr	r2, [pc, #472]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800089a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800089c:	f023 030f 	bic.w	r3, r3, #15
 80008a0:	68a1      	ldr	r1, [r4, #8]
 80008a2:	430b      	orrs	r3, r1
 80008a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008a6:	6863      	ldr	r3, [r4, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d036      	beq.n	800091a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80008ac:	f7ff fdf8 	bl	80004a0 <HAL_GetTick>
 80008b0:	4605      	mov	r5, r0
 80008b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ba:	4b6e      	ldr	r3, [pc, #440]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80008bc:	6819      	ldr	r1, [r3, #0]
 80008be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008c2:	fa93 f3a3 	rbit	r3, r3
 80008c6:	fab3 f383 	clz	r3, r3
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	2201      	movs	r2, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	420b      	tst	r3, r1
 80008d6:	d19d      	bne.n	8000814 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fde2 	bl	80004a0 <HAL_GetTick>
 80008dc:	1b40      	subs	r0, r0, r5
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9e7      	bls.n	80008b2 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
 80008e4:	e25f      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ea:	d009      	beq.n	8000900 <HAL_RCC_OscConfig+0x178>
 80008ec:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e7cb      	b.n	8000898 <HAL_RCC_OscConfig+0x110>
 8000900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000904:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e7be      	b.n	8000898 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800091a:	f7ff fdc1 	bl	80004a0 <HAL_GetTick>
 800091e:	4605      	mov	r5, r0
 8000920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000924:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000928:	4b52      	ldr	r3, [pc, #328]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000930:	fa93 f3a3 	rbit	r3, r3
 8000934:	fab3 f383 	clz	r3, r3
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	2201      	movs	r2, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	420b      	tst	r3, r1
 8000944:	f43f af66 	beq.w	8000814 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000948:	f7ff fdaa 	bl	80004a0 <HAL_GetTick>
 800094c:	1b40      	subs	r0, r0, r5
 800094e:	2864      	cmp	r0, #100	; 0x64
 8000950:	d9e6      	bls.n	8000920 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000952:	2003      	movs	r0, #3
 8000954:	e227      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000956:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800095e:	f47f af6b 	bne.w	8000838 <HAL_RCC_OscConfig+0xb0>
 8000962:	2302      	movs	r3, #2
 8000964:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000968:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	f003 031f 	and.w	r3, r3, #31
 800097a:	2201      	movs	r2, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	420b      	tst	r3, r1
 8000982:	d003      	beq.n	800098c <HAL_RCC_OscConfig+0x204>
 8000984:	6923      	ldr	r3, [r4, #16]
 8000986:	4293      	cmp	r3, r2
 8000988:	f040 8206 	bne.w	8000d98 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098c:	4839      	ldr	r0, [pc, #228]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 800098e:	6803      	ldr	r3, [r0, #0]
 8000990:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000994:	6961      	ldr	r1, [r4, #20]
 8000996:	22f8      	movs	r2, #248	; 0xf8
 8000998:	fa92 f2a2 	rbit	r2, r2
 800099c:	fab2 f282 	clz	r2, r2
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	4313      	orrs	r3, r2
 80009a6:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	f013 0f08 	tst.w	r3, #8
 80009ae:	f000 808d 	beq.w	8000acc <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b2:	69a3      	ldr	r3, [r4, #24]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d061      	beq.n	8000a7c <HAL_RCC_OscConfig+0x2f4>
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <HAL_RCC_OscConfig+0x2f0>)
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ca:	f7ff fd69 	bl	80004a0 <HAL_GetTick>
 80009ce:	4605      	mov	r5, r0
 80009d0:	2302      	movs	r3, #2
 80009d2:	fa93 f2a3 	rbit	r2, r3
 80009d6:	fa93 f2a3 	rbit	r2, r3
 80009da:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 80009e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80009e2:	fa93 f3a3 	rbit	r3, r3
 80009e6:	fab3 f383 	clz	r3, r3
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	2201      	movs	r2, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	420b      	tst	r3, r1
 80009f6:	d169      	bne.n	8000acc <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f8:	f7ff fd52 	bl	80004a0 <HAL_GetTick>
 80009fc:	1b40      	subs	r0, r0, r5
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9e6      	bls.n	80009d0 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8000a02:	2003      	movs	r0, #3
 8000a04:	e1cf      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000a08:	6803      	ldr	r3, [r0, #0]
 8000a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a0e:	6961      	ldr	r1, [r4, #20]
 8000a10:	22f8      	movs	r2, #248	; 0xf8
 8000a12:	fa92 f2a2 	rbit	r2, r2
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	6003      	str	r3, [r0, #0]
 8000a22:	e7c1      	b.n	80009a8 <HAL_RCC_OscConfig+0x220>
 8000a24:	2301      	movs	r3, #1
 8000a26:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000a2a:	fab3 f383 	clz	r3, r3
 8000a2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fd30 	bl	80004a0 <HAL_GetTick>
 8000a40:	4605      	mov	r5, r0
 8000a42:	2302      	movs	r3, #2
 8000a44:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_RCC_OscConfig+0x2ec>)
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	fab3 f383 	clz	r3, r3
 8000a56:	f003 031f 	and.w	r3, r3, #31
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	420b      	tst	r3, r1
 8000a62:	d0a1      	beq.n	80009a8 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a64:	f7ff fd1c 	bl	80004a0 <HAL_GetTick>
 8000a68:	1b40      	subs	r0, r0, r5
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9e9      	bls.n	8000a42 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 8000a6e:	2003      	movs	r0, #3
 8000a70:	e199      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	10908120 	.word	0x10908120
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	4bb7      	ldr	r3, [pc, #732]	; (8000d64 <HAL_RCC_OscConfig+0x5dc>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a90:	f7ff fd06 	bl	80004a0 <HAL_GetTick>
 8000a94:	4605      	mov	r5, r0
 8000a96:	2302      	movs	r3, #2
 8000a98:	fa93 f2a3 	rbit	r2, r3
 8000a9c:	fa93 f2a3 	rbit	r2, r3
 8000aa0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa4:	4ab0      	ldr	r2, [pc, #704]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000aa6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	fab3 f383 	clz	r3, r3
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	420b      	tst	r3, r1
 8000abc:	d006      	beq.n	8000acc <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000abe:	f7ff fcef 	bl	80004a0 <HAL_GetTick>
 8000ac2:	1b40      	subs	r0, r0, r5
 8000ac4:	2802      	cmp	r0, #2
 8000ac6:	d9e6      	bls.n	8000a96 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8000ac8:	2003      	movs	r0, #3
 8000aca:	e16c      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f013 0f04 	tst.w	r3, #4
 8000ad2:	f000 80a9 	beq.w	8000c28 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4ba4      	ldr	r3, [pc, #656]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ade:	d120      	bne.n	8000b22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	4ba1      	ldr	r3, [pc, #644]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae8:	61da      	str	r2, [r3, #28]
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000af4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af6:	4b9d      	ldr	r3, [pc, #628]	; (8000d6c <HAL_RCC_OscConfig+0x5e4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000afe:	d012      	beq.n	8000b26 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b00:	68e3      	ldr	r3, [r4, #12]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d023      	beq.n	8000b4e <HAL_RCC_OscConfig+0x3c6>
 8000b06:	bb73      	cbnz	r3, 8000b66 <HAL_RCC_OscConfig+0x3de>
 8000b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b10:	6a1a      	ldr	r2, [r3, #32]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	621a      	str	r2, [r3, #32]
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	e01a      	b.n	8000b58 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8000b22:	2500      	movs	r5, #0
 8000b24:	e7e7      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b26:	4a91      	ldr	r2, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x5e4>)
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000b30:	f7ff fcb6 	bl	80004a0 <HAL_GetTick>
 8000b34:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b36:	4b8d      	ldr	r3, [pc, #564]	; (8000d6c <HAL_RCC_OscConfig+0x5e4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b3e:	d1df      	bne.n	8000b00 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b40:	f7ff fcae 	bl	80004a0 <HAL_GetTick>
 8000b44:	1b80      	subs	r0, r0, r6
 8000b46:	2864      	cmp	r0, #100	; 0x64
 8000b48:	d9f5      	bls.n	8000b36 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	e12b      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4e:	4a86      	ldr	r2, [pc, #536]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000b50:	6a13      	ldr	r3, [r2, #32]
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b58:	68e3      	ldr	r3, [r4, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d03c      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fc9f 	bl	80004a0 <HAL_GetTick>
 8000b62:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b64:	e02b      	b.n	8000bbe <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d009      	beq.n	8000b7e <HAL_RCC_OscConfig+0x3f6>
 8000b6a:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000b6c:	6a1a      	ldr	r2, [r3, #32]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	6a1a      	ldr	r2, [r3, #32]
 8000b76:	f022 0204 	bic.w	r2, r2, #4
 8000b7a:	621a      	str	r2, [r3, #32]
 8000b7c:	e7ec      	b.n	8000b58 <HAL_RCC_OscConfig+0x3d0>
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000b80:	6a1a      	ldr	r2, [r3, #32]
 8000b82:	f042 0204 	orr.w	r2, r2, #4
 8000b86:	621a      	str	r2, [r3, #32]
 8000b88:	6a1a      	ldr	r2, [r3, #32]
 8000b8a:	f042 0201 	orr.w	r2, r2, #1
 8000b8e:	621a      	str	r2, [r3, #32]
 8000b90:	e7e2      	b.n	8000b58 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b92:	4b75      	ldr	r3, [pc, #468]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000b94:	6a19      	ldr	r1, [r3, #32]
 8000b96:	2302      	movs	r3, #2
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	fab3 f383 	clz	r3, r3
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	4219      	tst	r1, r3
 8000bac:	d13b      	bne.n	8000c26 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bae:	f7ff fc77 	bl	80004a0 <HAL_GetTick>
 8000bb2:	1b80      	subs	r0, r0, r6
 8000bb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f200 80ef 	bhi.w	8000d9c <HAL_RCC_OscConfig+0x614>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	fa93 f2a3 	rbit	r2, r3
 8000bc4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e2      	bne.n	8000b92 <HAL_RCC_OscConfig+0x40a>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	4b65      	ldr	r3, [pc, #404]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000bd6:	e7de      	b.n	8000b96 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fc62 	bl	80004a0 <HAL_GetTick>
 8000bdc:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bde:	e015      	b.n	8000c0c <HAL_RCC_OscConfig+0x484>
 8000be0:	4b61      	ldr	r3, [pc, #388]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000be2:	6a19      	ldr	r1, [r3, #32]
 8000be4:	2302      	movs	r3, #2
 8000be6:	fa93 f3a3 	rbit	r3, r3
 8000bea:	fab3 f383 	clz	r3, r3
 8000bee:	f003 031f 	and.w	r3, r3, #31
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	4219      	tst	r1, r3
 8000bfa:	d014      	beq.n	8000c26 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fc50 	bl	80004a0 <HAL_GetTick>
 8000c00:	1b80      	subs	r0, r0, r6
 8000c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c06:	4298      	cmp	r0, r3
 8000c08:	f200 80ca 	bhi.w	8000da0 <HAL_RCC_OscConfig+0x618>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	fa93 f2a3 	rbit	r2, r3
 8000c12:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1e2      	bne.n	8000be0 <HAL_RCC_OscConfig+0x458>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000c22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c24:	e7de      	b.n	8000be4 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c26:	bbb5      	cbnz	r5, 8000c96 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c28:	69e3      	ldr	r3, [r4, #28]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80ba 	beq.w	8000da4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c30:	4a4d      	ldr	r2, [pc, #308]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000c32:	6852      	ldr	r2, [r2, #4]
 8000c34:	f002 020c 	and.w	r2, r2, #12
 8000c38:	2a08      	cmp	r2, #8
 8000c3a:	f000 8099 	beq.w	8000d70 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d02f      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x51a>
 8000c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c46:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc20 	bl	80004a0 <HAL_GetTick>
 8000c60:	4604      	mov	r4, r0
 8000c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c66:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000c6c:	6819      	ldr	r1, [r3, #0]
 8000c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	2201      	movs	r2, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	4219      	tst	r1, r3
 8000c86:	d06b      	beq.n	8000d60 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c88:	f7ff fc0a 	bl	80004a0 <HAL_GetTick>
 8000c8c:	1b00      	subs	r0, r0, r4
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d9e7      	bls.n	8000c62 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e087      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000c98:	69d3      	ldr	r3, [r2, #28]
 8000c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	e7c2      	b.n	8000c28 <HAL_RCC_OscConfig+0x4a0>
 8000ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ca6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fbf0 	bl	80004a0 <HAL_GetTick>
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cc6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	fab3 f383 	clz	r3, r3
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	2201      	movs	r2, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	4219      	tst	r1, r3
 8000ce6:	d006      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce8:	f7ff fbda 	bl	80004a0 <HAL_GetTick>
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d9e7      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	e057      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cf6:	491c      	ldr	r1, [pc, #112]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000cf8:	684b      	ldr	r3, [r1, #4]
 8000cfa:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000cfe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d00:	6a20      	ldr	r0, [r4, #32]
 8000d02:	4302      	orrs	r2, r0
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
 8000d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fbbd 	bl	80004a0 <HAL_GetTick>
 8000d26:	4604      	mov	r4, r0
 8000d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d2c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_RCC_OscConfig+0x5e0>)
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	f003 031f 	and.w	r3, r3, #31
 8000d44:	2201      	movs	r2, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	4219      	tst	r1, r3
 8000d4c:	d106      	bne.n	8000d5c <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4e:	f7ff fba7 	bl	80004a0 <HAL_GetTick>
 8000d52:	1b00      	subs	r0, r0, r4
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9e7      	bls.n	8000d28 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 8000d58:	2003      	movs	r0, #3
 8000d5a:	e024      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e022      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
 8000d60:	2000      	movs	r0, #0
 8000d62:	e020      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
 8000d64:	10908120 	.word	0x10908120
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d01a      	beq.n	8000daa <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_RCC_OscConfig+0x630>)
 8000d76:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000d78:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000d7c:	6a22      	ldr	r2, [r4, #32]
 8000d7e:	4291      	cmp	r1, r2
 8000d80:	d115      	bne.n	8000dae <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000d82:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d86:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d112      	bne.n	8000db2 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e00a      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
}
 8000d92:	4770      	bx	lr
        return HAL_ERROR;
 8000d94:	2001      	movs	r0, #1
 8000d96:	e006      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
 8000d9a:	e004      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	e002      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	e000      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8000da4:	2000      	movs	r0, #0
}
 8000da6:	b002      	add	sp, #8
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000daa:	2001      	movs	r0, #1
 8000dac:	e7fb      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
 8000db0:	e7f9      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
 8000db2:	2001      	movs	r0, #1
 8000db4:	e7f7      	b.n	8000da6 <HAL_RCC_OscConfig+0x61e>
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_RCC_GetSysClockFreq+0x48>)
 8000dbe:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000dc0:	f002 030c 	and.w	r3, r2, #12
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d018      	beq.n	8000dfa <HAL_RCC_GetSysClockFreq+0x3e>
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d118      	bne.n	8000dfe <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000dcc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8000dd0:	490d      	ldr	r1, [pc, #52]	; (8000e08 <HAL_RCC_GetSysClockFreq+0x4c>)
 8000dd2:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_RCC_GetSysClockFreq+0x48>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	490b      	ldr	r1, [pc, #44]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x50>)
 8000dde:	5cc9      	ldrb	r1, [r1, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000de0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000de4:	d005      	beq.n	8000df2 <HAL_RCC_GetSysClockFreq+0x36>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x54>)
 8000de8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dec:	fb03 f000 	mul.w	r0, r3, r0
 8000df0:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x58>)
 8000df4:	fb03 f000 	mul.w	r0, r3, r0
 8000df8:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x54>)
 8000dfc:	4770      	bx	lr
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x5c>)
      break;
    }
  }
  return sysclockfreq;
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	080019c0 	.word	0x080019c0
 8000e0c:	080019d0 	.word	0x080019d0
 8000e10:	00f42400 	.word	0x00f42400
 8000e14:	003d0900 	.word	0x003d0900
 8000e18:	007a1200 	.word	0x007a1200

08000e1c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	f000 80be 	beq.w	8000f9e <HAL_RCC_ClockConfig+0x182>
{
 8000e22:	b570      	push	{r4, r5, r6, lr}
 8000e24:	460d      	mov	r5, r1
 8000e26:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e28:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <HAL_RCC_ClockConfig+0x194>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d20b      	bcs.n	8000e4c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e34:	4a5e      	ldr	r2, [pc, #376]	; (8000fb0 <HAL_RCC_ClockConfig+0x194>)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f023 0307 	bic.w	r3, r3, #7
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e40:	6813      	ldr	r3, [r2, #0]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	428b      	cmp	r3, r1
 8000e48:	f040 80ab 	bne.w	8000fa2 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f013 0f02 	tst.w	r3, #2
 8000e52:	d006      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e54:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000e56:	6853      	ldr	r3, [r2, #4]
 8000e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e5c:	68a1      	ldr	r1, [r4, #8]
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	f013 0f01 	tst.w	r3, #1
 8000e68:	d05a      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6a:	6863      	ldr	r3, [r4, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d02d      	beq.n	8000ecc <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d040      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0xda>
 8000e74:	2202      	movs	r2, #2
 8000e76:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000e7c:	6810      	ldr	r0, [r2, #0]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	fa92 f2a2 	rbit	r2, r2
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4210      	tst	r0, r2
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e98:	4946      	ldr	r1, [pc, #280]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000e9a:	684a      	ldr	r2, [r1, #4]
 8000e9c:	f022 0203 	bic.w	r2, r2, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fafc 	bl	80004a0 <HAL_GetTick>
 8000ea8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	6862      	ldr	r2, [r4, #4]
 8000eb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000eb8:	d032      	beq.n	8000f20 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eba:	f7ff faf1 	bl	80004a0 <HAL_GetTick>
 8000ebe:	1b80      	subs	r0, r0, r6
 8000ec0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d9f0      	bls.n	8000eaa <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000ec8:	2003      	movs	r0, #3
 8000eca:	e067      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
 8000ecc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed4:	4a37      	ldr	r2, [pc, #220]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000ed6:	6810      	ldr	r0, [r2, #0]
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	fa92 f2a2 	rbit	r2, r2
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	f002 021f 	and.w	r2, r2, #31
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	4202      	tst	r2, r0
 8000ef0:	d1d2      	bne.n	8000e98 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	e052      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
 8000ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000efa:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efe:	4a2d      	ldr	r2, [pc, #180]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f06:	fa92 f2a2 	rbit	r2, r2
 8000f0a:	fab2 f282 	clz	r2, r2
 8000f0e:	f002 021f 	and.w	r2, r2, #31
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4210      	tst	r0, r2
 8000f1a:	d1bd      	bne.n	8000e98 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	e03d      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_RCC_ClockConfig+0x194>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	42ab      	cmp	r3, r5
 8000f2a:	d90a      	bls.n	8000f42 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_RCC_ClockConfig+0x194>)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f023 0307 	bic.w	r3, r3, #7
 8000f34:	432b      	orrs	r3, r5
 8000f36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	42ab      	cmp	r3, r5
 8000f40:	d133      	bne.n	8000faa <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	f013 0f04 	tst.w	r3, #4
 8000f48:	d006      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000f4c:	6853      	ldr	r3, [r2, #4]
 8000f4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f52:	68e1      	ldr	r1, [r4, #12]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	f013 0f08 	tst.w	r3, #8
 8000f5e:	d007      	beq.n	8000f70 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000f62:	6853      	ldr	r3, [r2, #4]
 8000f64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f68:	6921      	ldr	r1, [r4, #16]
 8000f6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f6e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f70:	f7ff ff24 	bl	8000dbc <HAL_RCC_GetSysClockFreq>
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_RCC_ClockConfig+0x198>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f7c:	22f0      	movs	r2, #240	; 0xf0
 8000f7e:	fa92 f2a2 	rbit	r2, r2
 8000f82:	fab2 f282 	clz	r2, r2
 8000f86:	40d3      	lsrs	r3, r2
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_RCC_ClockConfig+0x19c>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	40d8      	lsrs	r0, r3
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_ClockConfig+0x1a0>)
 8000f90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_RCC_ClockConfig+0x1a4>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f7ff fa3f 	bl	8000418 <HAL_InitTick>
  return HAL_OK;
 8000f9a:	2000      	movs	r0, #0
}
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
}
 8000fa0:	4770      	bx	lr
      return HAL_ERROR;
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	e7fa      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e7f8      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8000faa:	2001      	movs	r0, #1
 8000fac:	e7f6      	b.n	8000f9c <HAL_RCC_ClockConfig+0x180>
 8000fae:	bf00      	nop
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	080019e0 	.word	0x080019e0
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_RCC_GetHCLKFreq+0x8>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fd0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000fd2:	f7ff fff7 	bl	8000fc4 <HAL_RCC_GetHCLKFreq>
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	40d3      	lsrs	r3, r2
 8000fec:	4a02      	ldr	r2, [pc, #8]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000ff0:	40d8      	lsrs	r0, r3
 8000ff2:	bd08      	pop	{r3, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	080019f0 	.word	0x080019f0

08000ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ffc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ffe:	f7ff ffe1 	bl	8000fc4 <HAL_RCC_GetHCLKFreq>
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800100a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800100e:	fa92 f2a2 	rbit	r2, r2
 8001012:	fab2 f282 	clz	r2, r2
 8001016:	40d3      	lsrs	r3, r2
 8001018:	4a02      	ldr	r2, [pc, #8]	; (8001024 <HAL_RCC_GetPCLK2Freq+0x28>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800101c:	40d8      	lsrs	r0, r3
 800101e:	bd08      	pop	{r3, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	080019f0 	.word	0x080019f0

08001028 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800102e:	6803      	ldr	r3, [r0, #0]
 8001030:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001034:	d048      	beq.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001036:	4b91      	ldr	r3, [pc, #580]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800103e:	f040 80d4 	bne.w	80011ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b8e      	ldr	r3, [pc, #568]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800104a:	61da      	str	r2, [r3, #28]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001056:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001060:	f000 80c5 	beq.w	80011ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001064:	4b85      	ldr	r3, [pc, #532]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001068:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800106c:	d022      	beq.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800106e:	6862      	ldr	r2, [r4, #4]
 8001070:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001074:	429a      	cmp	r2, r3
 8001076:	d01d      	beq.n	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001078:	4880      	ldr	r0, [pc, #512]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800107a:	6a01      	ldr	r1, [r0, #32]
 800107c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001084:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001088:	fab2 f282 	clz	r2, r2
 800108c:	4f7d      	ldr	r7, [pc, #500]	; (8001284 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800108e:	443a      	add	r2, r7
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	f04f 0c01 	mov.w	ip, #1
 8001096:	f8c2 c000 	str.w	ip, [r2]
 800109a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	443b      	add	r3, r7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80010aa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010ac:	f011 0f01 	tst.w	r1, #1
 80010b0:	f040 80b2 	bne.w	8001218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80010b4:	4a71      	ldr	r2, [pc, #452]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80010b6:	6a13      	ldr	r3, [r2, #32]
 80010b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010bc:	6861      	ldr	r1, [r4, #4]
 80010be:	430b      	orrs	r3, r1
 80010c0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	f040 80cf 	bne.w	8001266 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f013 0f01 	tst.w	r3, #1
 80010ce:	d006      	beq.n	80010de <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80010d0:	4a6a      	ldr	r2, [pc, #424]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80010d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010d4:	f023 0303 	bic.w	r3, r3, #3
 80010d8:	68a1      	ldr	r1, [r4, #8]
 80010da:	430b      	orrs	r3, r1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f013 0f02 	tst.w	r3, #2
 80010e4:	d006      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80010e6:	4a65      	ldr	r2, [pc, #404]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80010e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80010ee:	68e1      	ldr	r1, [r4, #12]
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	f013 0f04 	tst.w	r3, #4
 80010fa:	d006      	beq.n	800110a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80010fc:	4a5f      	ldr	r2, [pc, #380]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80010fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001100:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001104:	6921      	ldr	r1, [r4, #16]
 8001106:	430b      	orrs	r3, r1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	f013 0f20 	tst.w	r3, #32
 8001110:	d006      	beq.n	8001120 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001112:	4a5a      	ldr	r2, [pc, #360]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001114:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001116:	f023 0310 	bic.w	r3, r3, #16
 800111a:	69e1      	ldr	r1, [r4, #28]
 800111c:	430b      	orrs	r3, r1
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001126:	d006      	beq.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800112a:	6853      	ldr	r3, [r2, #4]
 800112c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001130:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001132:	430b      	orrs	r3, r1
 8001134:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f013 0f40 	tst.w	r3, #64	; 0x40
 800113c:	d006      	beq.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800113e:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001140:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001142:	f023 0320 	bic.w	r3, r3, #32
 8001146:	6a21      	ldr	r1, [r4, #32]
 8001148:	430b      	orrs	r3, r1
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	f013 0f08 	tst.w	r3, #8
 8001152:	d006      	beq.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001154:	4a49      	ldr	r2, [pc, #292]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001156:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001158:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800115c:	6961      	ldr	r1, [r4, #20]
 800115e:	430b      	orrs	r3, r1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f013 0f10 	tst.w	r3, #16
 8001168:	d006      	beq.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800116a:	4a44      	ldr	r2, [pc, #272]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800116c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800116e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001172:	69a1      	ldr	r1, [r4, #24]
 8001174:	430b      	orrs	r3, r1
 8001176:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800117e:	d006      	beq.n	800118e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001182:	6853      	ldr	r3, [r2, #4]
 8001184:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001188:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800118a:	430b      	orrs	r3, r1
 800118c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001194:	d006      	beq.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001196:	4a39      	ldr	r2, [pc, #228]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001198:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800119a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800119e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011a0:	430b      	orrs	r3, r1
 80011a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011aa:	d006      	beq.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80011ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011b0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80011b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011b6:	430b      	orrs	r3, r1
 80011b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80011c0:	d006      	beq.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80011c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80011d6:	d04d      	beq.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80011da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011e2:	430b      	orrs	r3, r1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80011e6:	2000      	movs	r0, #0
 80011e8:	e045      	b.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 80011ea:	2500      	movs	r5, #0
 80011ec:	e734      	b.n	8001058 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011f8:	f7ff f952 	bl	80004a0 <HAL_GetTick>
 80011fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001206:	f47f af2d 	bne.w	8001064 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff f949 	bl	80004a0 <HAL_GetTick>
 800120e:	1b80      	subs	r0, r0, r6
 8001210:	2864      	cmp	r0, #100	; 0x64
 8001212:	d9f4      	bls.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001214:	2003      	movs	r0, #3
 8001216:	e02e      	b.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8001218:	f7ff f942 	bl	80004a0 <HAL_GetTick>
 800121c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121e:	e015      	b.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001222:	6a19      	ldr	r1, [r3, #32]
 8001224:	2302      	movs	r3, #2
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2201      	movs	r2, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	420b      	tst	r3, r1
 800123a:	f47f af3b 	bne.w	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff f92f 	bl	80004a0 <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	f241 3388 	movw	r3, #5000	; 0x1388
 8001248:	4298      	cmp	r0, r3
 800124a:	d811      	bhi.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800124c:	2302      	movs	r3, #2
 800124e:	fa93 f2a3 	rbit	r2, r3
 8001252:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1e2      	bne.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800125a:	2302      	movs	r3, #2
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001262:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001264:	e7de      	b.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	69d3      	ldr	r3, [r2, #28]
 8001268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	e72b      	b.n	80010c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8001270:	2003      	movs	r0, #3
 8001272:	e000      	b.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8001274:	2000      	movs	r0, #0
}
 8001276:	b003      	add	sp, #12
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	10908100 	.word	0x10908100

08001288 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001288:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800128a:	e852 3f00 	ldrex	r3, [r2]
 800128e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001292:	e842 3100 	strex	r1, r3, [r2]
 8001296:	2900      	cmp	r1, #0
 8001298:	d1f6      	bne.n	8001288 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800129a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800129c:	f102 0308 	add.w	r3, r2, #8
 80012a0:	e853 3f00 	ldrex	r3, [r3]
 80012a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012a8:	3208      	adds	r2, #8
 80012aa:	e842 3100 	strex	r1, r3, [r2]
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d1f3      	bne.n	800129a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012b2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d006      	beq.n	80012c6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012b8:	2320      	movs	r3, #32
 80012ba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012be:	2300      	movs	r3, #0
 80012c0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80012c2:	6683      	str	r3, [r0, #104]	; 0x68
}
 80012c4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012c8:	e852 3f00 	ldrex	r3, [r2]
 80012cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012d0:	e842 3100 	strex	r1, r3, [r2]
 80012d4:	2900      	cmp	r1, #0
 80012d6:	d1f6      	bne.n	80012c6 <UART_EndRxTransfer+0x3e>
 80012d8:	e7ee      	b.n	80012b8 <UART_EndRxTransfer+0x30>
	...

080012dc <UART_SetConfig>:
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012e0:	6883      	ldr	r3, [r0, #8]
 80012e2:	6902      	ldr	r2, [r0, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	6942      	ldr	r2, [r0, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	69c2      	ldr	r2, [r0, #28]
 80012ec:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80012ee:	6801      	ldr	r1, [r0, #0]
 80012f0:	680b      	ldr	r3, [r1, #0]
 80012f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80012f6:	f023 030c 	bic.w	r3, r3, #12
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012fe:	6802      	ldr	r2, [r0, #0]
 8001300:	6853      	ldr	r3, [r2, #4]
 8001302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001306:	68c1      	ldr	r1, [r0, #12]
 8001308:	430b      	orrs	r3, r1
 800130a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800130c:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800130e:	6a03      	ldr	r3, [r0, #32]
 8001310:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001312:	6801      	ldr	r1, [r0, #0]
 8001314:	688b      	ldr	r3, [r1, #8]
 8001316:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800131a:	4313      	orrs	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800131e:	6803      	ldr	r3, [r0, #0]
 8001320:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <UART_SetConfig+0x234>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <UART_SetConfig+0x66>
 8001326:	4a7b      	ldr	r2, [pc, #492]	; (8001514 <UART_SetConfig+0x238>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01c      	beq.n	8001366 <UART_SetConfig+0x8a>
 800132c:	4a7a      	ldr	r2, [pc, #488]	; (8001518 <UART_SetConfig+0x23c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d03a      	beq.n	80013a8 <UART_SetConfig+0xcc>
 8001332:	4a7a      	ldr	r2, [pc, #488]	; (800151c <UART_SetConfig+0x240>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d04a      	beq.n	80013ce <UART_SetConfig+0xf2>
 8001338:	4a79      	ldr	r2, [pc, #484]	; (8001520 <UART_SetConfig+0x244>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d05a      	beq.n	80013f4 <UART_SetConfig+0x118>
 800133e:	2310      	movs	r3, #16
 8001340:	e01f      	b.n	8001382 <UART_SetConfig+0xa6>
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <UART_SetConfig+0x248>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d809      	bhi.n	8001362 <UART_SetConfig+0x86>
 800134e:	e8df f003 	tbb	[pc, r3]
 8001352:	0402      	.short	0x0402
 8001354:	6406      	.short	0x6406
 8001356:	2301      	movs	r3, #1
 8001358:	e013      	b.n	8001382 <UART_SetConfig+0xa6>
 800135a:	2304      	movs	r3, #4
 800135c:	e011      	b.n	8001382 <UART_SetConfig+0xa6>
 800135e:	2308      	movs	r3, #8
 8001360:	e00f      	b.n	8001382 <UART_SetConfig+0xa6>
 8001362:	2310      	movs	r3, #16
 8001364:	e00d      	b.n	8001382 <UART_SetConfig+0xa6>
 8001366:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <UART_SetConfig+0x248>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001372:	d054      	beq.n	800141e <UART_SetConfig+0x142>
 8001374:	d813      	bhi.n	800139e <UART_SetConfig+0xc2>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d053      	beq.n	8001422 <UART_SetConfig+0x146>
 800137a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137e:	d152      	bne.n	8001426 <UART_SetConfig+0x14a>
 8001380:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001382:	69e0      	ldr	r0, [r4, #28]
 8001384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001388:	d069      	beq.n	800145e <UART_SetConfig+0x182>
    switch (clocksource)
 800138a:	2b08      	cmp	r3, #8
 800138c:	f200 80b9 	bhi.w	8001502 <UART_SetConfig+0x226>
 8001390:	e8df f003 	tbb	[pc, r3]
 8001394:	b790a892 	.word	0xb790a892
 8001398:	b7b7b7ab 	.word	0xb7b7b7ab
 800139c:	ae          	.byte	0xae
 800139d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800139e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013a2:	d142      	bne.n	800142a <UART_SetConfig+0x14e>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e7ec      	b.n	8001382 <UART_SetConfig+0xa6>
 80013a8:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <UART_SetConfig+0x248>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80013b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013b4:	d03b      	beq.n	800142e <UART_SetConfig+0x152>
 80013b6:	d805      	bhi.n	80013c4 <UART_SetConfig+0xe8>
 80013b8:	b3db      	cbz	r3, 8001432 <UART_SetConfig+0x156>
 80013ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013be:	d13a      	bne.n	8001436 <UART_SetConfig+0x15a>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e7de      	b.n	8001382 <UART_SetConfig+0xa6>
 80013c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013c8:	d137      	bne.n	800143a <UART_SetConfig+0x15e>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e7d9      	b.n	8001382 <UART_SetConfig+0xa6>
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <UART_SetConfig+0x248>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013da:	d030      	beq.n	800143e <UART_SetConfig+0x162>
 80013dc:	d805      	bhi.n	80013ea <UART_SetConfig+0x10e>
 80013de:	b383      	cbz	r3, 8001442 <UART_SetConfig+0x166>
 80013e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013e4:	d12f      	bne.n	8001446 <UART_SetConfig+0x16a>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e7cb      	b.n	8001382 <UART_SetConfig+0xa6>
 80013ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80013ee:	d12c      	bne.n	800144a <UART_SetConfig+0x16e>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e7c6      	b.n	8001382 <UART_SetConfig+0xa6>
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <UART_SetConfig+0x248>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80013fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001400:	d025      	beq.n	800144e <UART_SetConfig+0x172>
 8001402:	d805      	bhi.n	8001410 <UART_SetConfig+0x134>
 8001404:	b32b      	cbz	r3, 8001452 <UART_SetConfig+0x176>
 8001406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140a:	d124      	bne.n	8001456 <UART_SetConfig+0x17a>
 800140c:	2304      	movs	r3, #4
 800140e:	e7b8      	b.n	8001382 <UART_SetConfig+0xa6>
 8001410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001414:	d121      	bne.n	800145a <UART_SetConfig+0x17e>
 8001416:	2302      	movs	r3, #2
 8001418:	e7b3      	b.n	8001382 <UART_SetConfig+0xa6>
 800141a:	2302      	movs	r3, #2
 800141c:	e7b1      	b.n	8001382 <UART_SetConfig+0xa6>
 800141e:	2308      	movs	r3, #8
 8001420:	e7af      	b.n	8001382 <UART_SetConfig+0xa6>
 8001422:	2300      	movs	r3, #0
 8001424:	e7ad      	b.n	8001382 <UART_SetConfig+0xa6>
 8001426:	2310      	movs	r3, #16
 8001428:	e7ab      	b.n	8001382 <UART_SetConfig+0xa6>
 800142a:	2310      	movs	r3, #16
 800142c:	e7a9      	b.n	8001382 <UART_SetConfig+0xa6>
 800142e:	2308      	movs	r3, #8
 8001430:	e7a7      	b.n	8001382 <UART_SetConfig+0xa6>
 8001432:	2300      	movs	r3, #0
 8001434:	e7a5      	b.n	8001382 <UART_SetConfig+0xa6>
 8001436:	2310      	movs	r3, #16
 8001438:	e7a3      	b.n	8001382 <UART_SetConfig+0xa6>
 800143a:	2310      	movs	r3, #16
 800143c:	e7a1      	b.n	8001382 <UART_SetConfig+0xa6>
 800143e:	2308      	movs	r3, #8
 8001440:	e79f      	b.n	8001382 <UART_SetConfig+0xa6>
 8001442:	2300      	movs	r3, #0
 8001444:	e79d      	b.n	8001382 <UART_SetConfig+0xa6>
 8001446:	2310      	movs	r3, #16
 8001448:	e79b      	b.n	8001382 <UART_SetConfig+0xa6>
 800144a:	2310      	movs	r3, #16
 800144c:	e799      	b.n	8001382 <UART_SetConfig+0xa6>
 800144e:	2308      	movs	r3, #8
 8001450:	e797      	b.n	8001382 <UART_SetConfig+0xa6>
 8001452:	2300      	movs	r3, #0
 8001454:	e795      	b.n	8001382 <UART_SetConfig+0xa6>
 8001456:	2310      	movs	r3, #16
 8001458:	e793      	b.n	8001382 <UART_SetConfig+0xa6>
 800145a:	2310      	movs	r3, #16
 800145c:	e791      	b.n	8001382 <UART_SetConfig+0xa6>
    switch (clocksource)
 800145e:	2b08      	cmp	r3, #8
 8001460:	d849      	bhi.n	80014f6 <UART_SetConfig+0x21a>
 8001462:	e8df f003 	tbb	[pc, r3]
 8001466:	1f05      	.short	0x1f05
 8001468:	48224825 	.word	0x48224825
 800146c:	4848      	.short	0x4848
 800146e:	09          	.byte	0x09
 800146f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001470:	f7ff fdae 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001474:	2800      	cmp	r0, #0
 8001476:	d040      	beq.n	80014fa <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001478:	6862      	ldr	r2, [r4, #4]
 800147a:	0853      	lsrs	r3, r2, #1
 800147c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001480:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001484:	f1a0 0210 	sub.w	r2, r0, #16
 8001488:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800148c:	429a      	cmp	r2, r3
 800148e:	d836      	bhi.n	80014fe <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001490:	b283      	uxth	r3, r0
 8001492:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001496:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800149a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	60d8      	str	r0, [r3, #12]
 80014a0:	2000      	movs	r0, #0
 80014a2:	e01b      	b.n	80014dc <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 80014a4:	f7ff fdaa 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
        break;
 80014a8:	e7e4      	b.n	8001474 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 80014aa:	f7ff fc87 	bl	8000dbc <HAL_RCC_GetSysClockFreq>
        break;
 80014ae:	e7e1      	b.n	8001474 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 80014b0:	481d      	ldr	r0, [pc, #116]	; (8001528 <UART_SetConfig+0x24c>)
 80014b2:	e7e1      	b.n	8001478 <UART_SetConfig+0x19c>
    switch (clocksource)
 80014b4:	481c      	ldr	r0, [pc, #112]	; (8001528 <UART_SetConfig+0x24c>)
 80014b6:	e002      	b.n	80014be <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80014b8:	f7ff fd8a 	bl	8000fd0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80014bc:	b318      	cbz	r0, 8001506 <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80014c4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80014c8:	f1a0 0210 	sub.w	r2, r0, #16
 80014cc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d81a      	bhi.n	800150a <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	b280      	uxth	r0, r0
 80014d8:	60d8      	str	r0, [r3, #12]
 80014da:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80014e0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80014e2:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80014e4:	f7ff fd8a 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
        break;
 80014e8:	e7e8      	b.n	80014bc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80014ea:	f7ff fc67 	bl	8000dbc <HAL_RCC_GetSysClockFreq>
        break;
 80014ee:	e7e5      	b.n	80014bc <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 80014f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014f4:	e7e3      	b.n	80014be <UART_SetConfig+0x1e2>
    switch (clocksource)
 80014f6:	2001      	movs	r0, #1
 80014f8:	e7f0      	b.n	80014dc <UART_SetConfig+0x200>
 80014fa:	2000      	movs	r0, #0
 80014fc:	e7ee      	b.n	80014dc <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
 8001500:	e7ec      	b.n	80014dc <UART_SetConfig+0x200>
    switch (clocksource)
 8001502:	2001      	movs	r0, #1
 8001504:	e7ea      	b.n	80014dc <UART_SetConfig+0x200>
 8001506:	2000      	movs	r0, #0
 8001508:	e7e8      	b.n	80014dc <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	e7e6      	b.n	80014dc <UART_SetConfig+0x200>
 800150e:	bf00      	nop
 8001510:	40013800 	.word	0x40013800
 8001514:	40004400 	.word	0x40004400
 8001518:	40004800 	.word	0x40004800
 800151c:	40004c00 	.word	0x40004c00
 8001520:	40005000 	.word	0x40005000
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200

0800152c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800152c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800152e:	f013 0f08 	tst.w	r3, #8
 8001532:	d006      	beq.n	8001542 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001534:	6802      	ldr	r2, [r0, #0]
 8001536:	6853      	ldr	r3, [r2, #4]
 8001538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800153c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800153e:	430b      	orrs	r3, r1
 8001540:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001544:	f013 0f01 	tst.w	r3, #1
 8001548:	d006      	beq.n	8001558 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800154a:	6802      	ldr	r2, [r0, #0]
 800154c:	6853      	ldr	r3, [r2, #4]
 800154e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001552:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001554:	430b      	orrs	r3, r1
 8001556:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800155a:	f013 0f02 	tst.w	r3, #2
 800155e:	d006      	beq.n	800156e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001560:	6802      	ldr	r2, [r0, #0]
 8001562:	6853      	ldr	r3, [r2, #4]
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800156a:	430b      	orrs	r3, r1
 800156c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800156e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001570:	f013 0f04 	tst.w	r3, #4
 8001574:	d006      	beq.n	8001584 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001576:	6802      	ldr	r2, [r0, #0]
 8001578:	6853      	ldr	r3, [r2, #4]
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001580:	430b      	orrs	r3, r1
 8001582:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001586:	f013 0f10 	tst.w	r3, #16
 800158a:	d006      	beq.n	800159a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800158c:	6802      	ldr	r2, [r0, #0]
 800158e:	6893      	ldr	r3, [r2, #8]
 8001590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001594:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001596:	430b      	orrs	r3, r1
 8001598:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800159a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800159c:	f013 0f20 	tst.w	r3, #32
 80015a0:	d006      	beq.n	80015b0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015a2:	6802      	ldr	r2, [r0, #0]
 80015a4:	6893      	ldr	r3, [r2, #8]
 80015a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80015b6:	d00a      	beq.n	80015ce <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015b8:	6802      	ldr	r2, [r0, #0]
 80015ba:	6853      	ldr	r3, [r2, #4]
 80015bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015cc:	d00b      	beq.n	80015e6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80015d4:	d006      	beq.n	80015e4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015d6:	6802      	ldr	r2, [r0, #0]
 80015d8:	6853      	ldr	r3, [r2, #4]
 80015da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80015de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6053      	str	r3, [r2, #4]
}
 80015e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015e6:	6802      	ldr	r2, [r0, #0]
 80015e8:	6853      	ldr	r3, [r2, #4]
 80015ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80015ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6053      	str	r3, [r2, #4]
 80015f4:	e7eb      	b.n	80015ce <UART_AdvFeatureConfig+0xa2>

080015f6 <UART_WaitOnFlagUntilTimeout>:
{
 80015f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015fa:	4605      	mov	r5, r0
 80015fc:	460e      	mov	r6, r1
 80015fe:	4617      	mov	r7, r2
 8001600:	4699      	mov	r9, r3
 8001602:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001606:	682c      	ldr	r4, [r5, #0]
 8001608:	69e4      	ldr	r4, [r4, #28]
 800160a:	ea36 0304 	bics.w	r3, r6, r4
 800160e:	bf0c      	ite	eq
 8001610:	f04f 0c01 	moveq.w	ip, #1
 8001614:	f04f 0c00 	movne.w	ip, #0
 8001618:	45bc      	cmp	ip, r7
 800161a:	d136      	bne.n	800168a <UART_WaitOnFlagUntilTimeout+0x94>
    if (Timeout != HAL_MAX_DELAY)
 800161c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001620:	d0f1      	beq.n	8001606 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001622:	f7fe ff3d 	bl	80004a0 <HAL_GetTick>
 8001626:	eba0 0009 	sub.w	r0, r0, r9
 800162a:	4540      	cmp	r0, r8
 800162c:	d830      	bhi.n	8001690 <UART_WaitOnFlagUntilTimeout+0x9a>
 800162e:	f1b8 0f00 	cmp.w	r8, #0
 8001632:	d02f      	beq.n	8001694 <UART_WaitOnFlagUntilTimeout+0x9e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f012 0f04 	tst.w	r2, #4
 800163c:	d0e3      	beq.n	8001606 <UART_WaitOnFlagUntilTimeout+0x10>
 800163e:	2e80      	cmp	r6, #128	; 0x80
 8001640:	d0e1      	beq.n	8001606 <UART_WaitOnFlagUntilTimeout+0x10>
 8001642:	2e40      	cmp	r6, #64	; 0x40
 8001644:	d0df      	beq.n	8001606 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	f012 0f08 	tst.w	r2, #8
 800164c:	d111      	bne.n	8001672 <UART_WaitOnFlagUntilTimeout+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001654:	d0d7      	beq.n	8001606 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff fe13 	bl	8001288 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001662:	2320      	movs	r3, #32
 8001664:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8001668:	2300      	movs	r3, #0
 800166a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
 8001670:	e00c      	b.n	800168c <UART_WaitOnFlagUntilTimeout+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001672:	2408      	movs	r4, #8
 8001674:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff fe06 	bl	8001288 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800167c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8001680:	2300      	movs	r3, #0
 8001682:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
 8001688:	e000      	b.n	800168c <UART_WaitOnFlagUntilTimeout+0x96>
  return HAL_OK;
 800168a:	2000      	movs	r0, #0
}
 800168c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
 8001692:	e7fb      	b.n	800168c <UART_WaitOnFlagUntilTimeout+0x96>
 8001694:	2003      	movs	r0, #3
 8001696:	e7f9      	b.n	800168c <UART_WaitOnFlagUntilTimeout+0x96>

08001698 <HAL_UART_Transmit>:
{
 8001698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80016a0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d156      	bne.n	8001754 <HAL_UART_Transmit+0xbc>
 80016a6:	4604      	mov	r4, r0
 80016a8:	460d      	mov	r5, r1
 80016aa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d055      	beq.n	800175c <HAL_UART_Transmit+0xc4>
 80016b0:	b90a      	cbnz	r2, 80016b6 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
 80016b4:	e04f      	b.n	8001756 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016bc:	2321      	movs	r3, #33	; 0x21
 80016be:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80016c0:	f7fe feee 	bl	80004a0 <HAL_GetTick>
 80016c4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80016c6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80016ca:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ce:	68a3      	ldr	r3, [r4, #8]
 80016d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d4:	d002      	beq.n	80016dc <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 80016d6:	f04f 0800 	mov.w	r8, #0
 80016da:	e018      	b.n	800170e <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016dc:	6923      	ldr	r3, [r4, #16]
 80016de:	b113      	cbz	r3, 80016e6 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 80016e0:	f04f 0800 	mov.w	r8, #0
 80016e4:	e013      	b.n	800170e <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 80016e6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80016e8:	2500      	movs	r5, #0
 80016ea:	e010      	b.n	800170e <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80016ec:	2320      	movs	r3, #32
 80016ee:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e030      	b.n	8001756 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016f4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001700:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001704:	b292      	uxth	r2, r2
 8001706:	3a01      	subs	r2, #1
 8001708:	b292      	uxth	r2, r2
 800170a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800170e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001712:	b29b      	uxth	r3, r3
 8001714:	b17b      	cbz	r3, 8001736 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001716:	9600      	str	r6, [sp, #0]
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ff69 	bl	80015f6 <UART_WaitOnFlagUntilTimeout>
 8001724:	2800      	cmp	r0, #0
 8001726:	d1e1      	bne.n	80016ec <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8001728:	2d00      	cmp	r5, #0
 800172a:	d0e3      	beq.n	80016f4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001732:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001734:	e7e4      	b.n	8001700 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001736:	9600      	str	r6, [sp, #0]
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff ff59 	bl	80015f6 <UART_WaitOnFlagUntilTimeout>
 8001744:	b910      	cbnz	r0, 800174c <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8001746:	2320      	movs	r3, #32
 8001748:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800174a:	e004      	b.n	8001756 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 800174c:	2320      	movs	r3, #32
 800174e:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001750:	2003      	movs	r0, #3
 8001752:	e000      	b.n	8001756 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001754:	2002      	movs	r0, #2
}
 8001756:	b002      	add	sp, #8
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e7fa      	b.n	8001756 <HAL_UART_Transmit+0xbe>

08001760 <UART_CheckIdleState>:
{
 8001760:	b530      	push	{r4, r5, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800176c:	f7fe fe98 	bl	80004a0 <HAL_GetTick>
 8001770:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f012 0f08 	tst.w	r2, #8
 800177a:	d10f      	bne.n	800179c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f013 0f04 	tst.w	r3, #4
 8001784:	d126      	bne.n	80017d4 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8001786:	2320      	movs	r3, #32
 8001788:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800178a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800178e:	2000      	movs	r0, #0
 8001790:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001792:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8001794:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8001798:	b003      	add	sp, #12
 800179a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800179c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4603      	mov	r3, r0
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff ff23 	bl	80015f6 <UART_WaitOnFlagUntilTimeout>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d0e3      	beq.n	800177c <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80017b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017b6:	e852 3f00 	ldrex	r3, [r2]
 80017ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017be:	e842 3100 	strex	r1, r3, [r2]
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d1f6      	bne.n	80017b4 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 80017c6:	2320      	movs	r3, #32
 80017c8:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80017ca:	2300      	movs	r3, #0
 80017cc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 80017d0:	2003      	movs	r0, #3
 80017d2:	e7e1      	b.n	8001798 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	462b      	mov	r3, r5
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff ff07 	bl	80015f6 <UART_WaitOnFlagUntilTimeout>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d0cc      	beq.n	8001786 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ee:	e852 3f00 	ldrex	r3, [r2]
 80017f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f6:	e842 3100 	strex	r1, r3, [r2]
 80017fa:	2900      	cmp	r1, #0
 80017fc:	d1f6      	bne.n	80017ec <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001800:	f102 0308 	add.w	r3, r2, #8
 8001804:	e853 3f00 	ldrex	r3, [r3]
 8001808:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800180c:	3208      	adds	r2, #8
 800180e:	e842 3100 	strex	r1, r3, [r2]
 8001812:	2900      	cmp	r1, #0
 8001814:	d1f3      	bne.n	80017fe <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8001816:	2320      	movs	r3, #32
 8001818:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 800181c:	2300      	movs	r3, #0
 800181e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8001822:	2003      	movs	r0, #3
 8001824:	e7b8      	b.n	8001798 <UART_CheckIdleState+0x38>

08001826 <HAL_UART_Init>:
  if (huart == NULL)
 8001826:	b368      	cbz	r0, 8001884 <HAL_UART_Init+0x5e>
{
 8001828:	b510      	push	{r4, lr}
 800182a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800182c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800182e:	b303      	cbz	r3, 8001872 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001830:	2324      	movs	r3, #36	; 0x24
 8001832:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001834:	6822      	ldr	r2, [r4, #0]
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800183e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001840:	b9e3      	cbnz	r3, 800187c <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff fd4a 	bl	80012dc <UART_SetConfig>
 8001848:	2801      	cmp	r0, #1
 800184a:	d011      	beq.n	8001870 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	6853      	ldr	r3, [r2, #4]
 8001850:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001854:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	6893      	ldr	r3, [r2, #8]
 800185a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800185e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff ff78 	bl	8001760 <UART_CheckIdleState>
}
 8001870:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001872:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8001876:	f000 f839 	bl	80018ec <HAL_UART_MspInit>
 800187a:	e7d9      	b.n	8001830 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fe55 	bl	800152c <UART_AdvFeatureConfig>
 8001882:	e7de      	b.n	8001842 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8001884:	2001      	movs	r0, #1
}
 8001886:	4770      	bx	lr

08001888 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler>

0800188a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler>

0800188c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler>

0800188e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler>

08001890 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler>

08001892 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	4770      	bx	lr

08001898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001898:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f7fe fdf5 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bd08      	pop	{r3, pc}

080018a0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <SystemInit+0x10>)
 80018a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018b4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x30>)
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART1_UART_Init+0x34>)
 80018ba:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80018bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018c0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	2300      	movs	r3, #0
 80018c4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ca:	220c      	movs	r2, #12
 80018cc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	f7ff ffa6 	bl	8001826 <HAL_UART_Init>
 80018da:	b900      	cbnz	r0, 80018de <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018de:	f7fe fd3d 	bl	800035c <Error_Handler>
}
 80018e2:	e7fb      	b.n	80018dc <MX_USART1_UART_Init+0x28>
 80018e4:	2000002c 	.word	0x2000002c
 80018e8:	40013800 	.word	0x40013800

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b500      	push	{lr}
 80018ee:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	2300      	movs	r3, #0
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	9304      	str	r3, [sp, #16]
 80018f6:	9305      	str	r3, [sp, #20]
 80018f8:	9306      	str	r3, [sp, #24]
 80018fa:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 80018fc:	6802      	ldr	r2, [r0, #0]
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x64>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d002      	beq.n	800190a <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001904:	b009      	add	sp, #36	; 0x24
 8001906:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800190a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001932:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001940:	2307      	movs	r3, #7
 8001942:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	a903      	add	r1, sp, #12
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f7fe fe21 	bl	8000590 <HAL_GPIO_Init>
}
 800194e:	e7d9      	b.n	8001904 <HAL_UART_MspInit+0x18>
 8001950:	40013800 	.word	0x40013800

08001954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff ffa2 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopForever+0x6>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopForever+0xe>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopForever+0x16>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f7fe fc45 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001986:	f7fe fd2f 	bl	80003e8 <main>

0800198a <LoopForever>:

LoopForever:
    b LoopForever
 800198a:	e7fe      	b.n	800198a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800198c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001998:	08001a00 	.word	0x08001a00
  ldr r2, =_sbss
 800199c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019a0:	200000b4 	.word	0x200000b4

080019a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC1_2_IRQHandler>
	...

080019a8 <_init>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	bf00      	nop
 80019ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ae:	bc08      	pop	{r3}
 80019b0:	469e      	mov	lr, r3
 80019b2:	4770      	bx	lr

080019b4 <_fini>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr
