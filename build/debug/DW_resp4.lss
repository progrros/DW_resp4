
build/debug/DW_resp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009454  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08009618  08009618  00019618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd0  08009cd0  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08009cd0  08009cd0  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cd0  08009cd0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cd4  08009cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08009cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          0000049c  20000228  20000228  00020228  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006c4  200006c4  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .comment      00000033  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c893  00000000  00000000  0002028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009773  00000000  00000000  0005cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d28  00000000  00000000  00066298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b08  00000000  00000000  00067fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008b6d  00000000  00000000  0008aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00022637  00000000  00000000  00093635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001cb0  00000000  00000000  000b5c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e64  00000000  00000000  000b7920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000228 	.word	0x20000228
 80001d4:	20000228 	.word	0x20000228
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000228 	.word	0x20000228
 80001f8:	20000228 	.word	0x20000228
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000228 	.word	0x20000228
 8000220:	00000000 	.word	0x00000000
 8000224:	080095fc 	.word	0x080095fc

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	2000022c 	.word	0x2000022c
 8000244:	080095fc 	.word	0x080095fc

08000248 <__assert_func>:
 8000248:	b500      	push	{lr}
 800024a:	4c0b      	ldr	r4, [pc, #44]	; (8000278 <__assert_func+0x30>)
 800024c:	6825      	ldr	r5, [r4, #0]
 800024e:	4614      	mov	r4, r2
 8000250:	68ee      	ldr	r6, [r5, #12]
 8000252:	461a      	mov	r2, r3
 8000254:	b085      	sub	sp, #20
 8000256:	4603      	mov	r3, r0
 8000258:	460d      	mov	r5, r1
 800025a:	b14c      	cbz	r4, 8000270 <__assert_func+0x28>
 800025c:	4907      	ldr	r1, [pc, #28]	; (800027c <__assert_func+0x34>)
 800025e:	9500      	str	r5, [sp, #0]
 8000260:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8000264:	4630      	mov	r0, r6
 8000266:	4906      	ldr	r1, [pc, #24]	; (8000280 <__assert_func+0x38>)
 8000268:	f000 f828 	bl	80002bc <fiprintf>
 800026c:	f001 ff00 	bl	8002070 <abort>
 8000270:	4904      	ldr	r1, [pc, #16]	; (8000284 <__assert_func+0x3c>)
 8000272:	460c      	mov	r4, r1
 8000274:	e7f3      	b.n	800025e <__assert_func+0x16>
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	08009b98 	.word	0x08009b98
 8000280:	08009ba8 	.word	0x08009ba8
 8000284:	08009b34 	.word	0x08009b34

08000288 <__assert>:
 8000288:	b508      	push	{r3, lr}
 800028a:	4613      	mov	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	f7ff ffdb 	bl	8000248 <__assert_func>
 8000292:	bf00      	nop

08000294 <__errno>:
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <__errno+0x8>)
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000

080002a0 <_fiprintf_r>:
 80002a0:	b40c      	push	{r2, r3}
 80002a2:	b500      	push	{lr}
 80002a4:	b083      	sub	sp, #12
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f000 f905 	bl	80004bc <_vfiprintf_r>
 80002b2:	b003      	add	sp, #12
 80002b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr

080002bc <fiprintf>:
 80002bc:	b40e      	push	{r1, r2, r3}
 80002be:	b510      	push	{r4, lr}
 80002c0:	b083      	sub	sp, #12
 80002c2:	ab05      	add	r3, sp, #20
 80002c4:	4c06      	ldr	r4, [pc, #24]	; (80002e0 <fiprintf+0x24>)
 80002c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	4601      	mov	r1, r0
 80002ce:	6820      	ldr	r0, [r4, #0]
 80002d0:	f000 f8f4 	bl	80004bc <_vfiprintf_r>
 80002d4:	b003      	add	sp, #12
 80002d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002da:	b003      	add	sp, #12
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4d0d      	ldr	r5, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1b76      	subs	r6, r6, r5
 80002ec:	10b6      	asrs	r6, r6, #2
 80002ee:	d006      	beq.n	80002fe <__libc_init_array+0x1a>
 80002f0:	2400      	movs	r4, #0
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	3401      	adds	r4, #1
 80002f8:	4798      	blx	r3
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d1f9      	bne.n	80002f2 <__libc_init_array+0xe>
 80002fe:	4e09      	ldr	r6, [pc, #36]	; (8000324 <__libc_init_array+0x40>)
 8000300:	4d09      	ldr	r5, [pc, #36]	; (8000328 <__libc_init_array+0x44>)
 8000302:	1b76      	subs	r6, r6, r5
 8000304:	f009 f97a 	bl	80095fc <_init>
 8000308:	10b6      	asrs	r6, r6, #2
 800030a:	d006      	beq.n	800031a <__libc_init_array+0x36>
 800030c:	2400      	movs	r4, #0
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	3401      	adds	r4, #1
 8000314:	4798      	blx	r3
 8000316:	42a6      	cmp	r6, r4
 8000318:	d1f9      	bne.n	800030e <__libc_init_array+0x2a>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	08009cd0 	.word	0x08009cd0
 8000320:	08009cd0 	.word	0x08009cd0
 8000324:	08009cd4 	.word	0x08009cd4
 8000328:	08009cd0 	.word	0x08009cd0

0800032c <memcmp>:
 800032c:	2a03      	cmp	r2, #3
 800032e:	b570      	push	{r4, r5, r6, lr}
 8000330:	d915      	bls.n	800035e <memcmp+0x32>
 8000332:	ea40 0c01 	orr.w	ip, r0, r1
 8000336:	f01c 0f03 	tst.w	ip, #3
 800033a:	4604      	mov	r4, r0
 800033c:	460b      	mov	r3, r1
 800033e:	d121      	bne.n	8000384 <memcmp+0x58>
 8000340:	4619      	mov	r1, r3
 8000342:	4620      	mov	r0, r4
 8000344:	680e      	ldr	r6, [r1, #0]
 8000346:	6805      	ldr	r5, [r0, #0]
 8000348:	42b5      	cmp	r5, r6
 800034a:	f104 0404 	add.w	r4, r4, #4
 800034e:	f103 0304 	add.w	r3, r3, #4
 8000352:	d117      	bne.n	8000384 <memcmp+0x58>
 8000354:	3a04      	subs	r2, #4
 8000356:	2a03      	cmp	r2, #3
 8000358:	4620      	mov	r0, r4
 800035a:	4619      	mov	r1, r3
 800035c:	d8f0      	bhi.n	8000340 <memcmp+0x14>
 800035e:	1e54      	subs	r4, r2, #1
 8000360:	b1a2      	cbz	r2, 800038c <memcmp+0x60>
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000366:	3901      	subs	r1, #1
 8000368:	e001      	b.n	800036e <memcmp+0x42>
 800036a:	18c3      	adds	r3, r0, r3
 800036c:	d00c      	beq.n	8000388 <memcmp+0x5c>
 800036e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8000372:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000376:	4596      	cmp	lr, r2
 8000378:	eba4 030c 	sub.w	r3, r4, ip
 800037c:	d0f5      	beq.n	800036a <memcmp+0x3e>
 800037e:	ebae 0002 	sub.w	r0, lr, r2
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	1e54      	subs	r4, r2, #1
 8000386:	e7ec      	b.n	8000362 <memcmp+0x36>
 8000388:	4618      	mov	r0, r3
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	4610      	mov	r0, r2
 800038e:	bd70      	pop	{r4, r5, r6, pc}

08000390 <memset>:
 8000390:	0783      	lsls	r3, r0, #30
 8000392:	b530      	push	{r4, r5, lr}
 8000394:	d048      	beq.n	8000428 <memset+0x98>
 8000396:	1e54      	subs	r4, r2, #1
 8000398:	2a00      	cmp	r2, #0
 800039a:	d03f      	beq.n	800041c <memset+0x8c>
 800039c:	b2ca      	uxtb	r2, r1
 800039e:	4603      	mov	r3, r0
 80003a0:	e001      	b.n	80003a6 <memset+0x16>
 80003a2:	3c01      	subs	r4, #1
 80003a4:	d33a      	bcc.n	800041c <memset+0x8c>
 80003a6:	f803 2b01 	strb.w	r2, [r3], #1
 80003aa:	079d      	lsls	r5, r3, #30
 80003ac:	d1f9      	bne.n	80003a2 <memset+0x12>
 80003ae:	2c03      	cmp	r4, #3
 80003b0:	d92d      	bls.n	800040e <memset+0x7e>
 80003b2:	b2cd      	uxtb	r5, r1
 80003b4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003b8:	2c0f      	cmp	r4, #15
 80003ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003be:	d936      	bls.n	800042e <memset+0x9e>
 80003c0:	f1a4 0210 	sub.w	r2, r4, #16
 80003c4:	f022 0c0f 	bic.w	ip, r2, #15
 80003c8:	f103 0e20 	add.w	lr, r3, #32
 80003cc:	44e6      	add	lr, ip
 80003ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003d2:	f103 0210 	add.w	r2, r3, #16
 80003d6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003da:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003de:	3210      	adds	r2, #16
 80003e0:	4572      	cmp	r2, lr
 80003e2:	d1f8      	bne.n	80003d6 <memset+0x46>
 80003e4:	f10c 0201 	add.w	r2, ip, #1
 80003e8:	f014 0f0c 	tst.w	r4, #12
 80003ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003f0:	f004 0c0f 	and.w	ip, r4, #15
 80003f4:	d013      	beq.n	800041e <memset+0x8e>
 80003f6:	f1ac 0304 	sub.w	r3, ip, #4
 80003fa:	f023 0303 	bic.w	r3, r3, #3
 80003fe:	3304      	adds	r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	f842 5b04 	str.w	r5, [r2], #4
 8000406:	4293      	cmp	r3, r2
 8000408:	d1fb      	bne.n	8000402 <memset+0x72>
 800040a:	f00c 0403 	and.w	r4, ip, #3
 800040e:	b12c      	cbz	r4, 800041c <memset+0x8c>
 8000410:	b2ca      	uxtb	r2, r1
 8000412:	441c      	add	r4, r3
 8000414:	f803 2b01 	strb.w	r2, [r3], #1
 8000418:	429c      	cmp	r4, r3
 800041a:	d1fb      	bne.n	8000414 <memset+0x84>
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	4664      	mov	r4, ip
 8000420:	4613      	mov	r3, r2
 8000422:	2c00      	cmp	r4, #0
 8000424:	d1f4      	bne.n	8000410 <memset+0x80>
 8000426:	e7f9      	b.n	800041c <memset+0x8c>
 8000428:	4603      	mov	r3, r0
 800042a:	4614      	mov	r4, r2
 800042c:	e7bf      	b.n	80003ae <memset+0x1e>
 800042e:	461a      	mov	r2, r3
 8000430:	46a4      	mov	ip, r4
 8000432:	e7e0      	b.n	80003f6 <memset+0x66>

08000434 <__sfputc_r>:
 8000434:	6893      	ldr	r3, [r2, #8]
 8000436:	3b01      	subs	r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	da11      	bge.n	8000462 <__sfputc_r+0x2e>
 800043e:	b410      	push	{r4}
 8000440:	6994      	ldr	r4, [r2, #24]
 8000442:	42a3      	cmp	r3, r4
 8000444:	db09      	blt.n	800045a <__sfputc_r+0x26>
 8000446:	290a      	cmp	r1, #10
 8000448:	d007      	beq.n	800045a <__sfputc_r+0x26>
 800044a:	6813      	ldr	r3, [r2, #0]
 800044c:	1c58      	adds	r0, r3, #1
 800044e:	6010      	str	r0, [r2, #0]
 8000450:	7019      	strb	r1, [r3, #0]
 8000452:	4608      	mov	r0, r1
 8000454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800045e:	f001 bd21 	b.w	8001ea4 <__swbuf_r>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	1c58      	adds	r0, r3, #1
 8000466:	6010      	str	r0, [r2, #0]
 8000468:	7019      	strb	r1, [r3, #0]
 800046a:	4608      	mov	r0, r1
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <__sfputs_r>:
 8000470:	b19b      	cbz	r3, 800049a <__sfputs_r+0x2a>
 8000472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000474:	4413      	add	r3, r2
 8000476:	4606      	mov	r6, r0
 8000478:	460f      	mov	r7, r1
 800047a:	1e54      	subs	r4, r2, #1
 800047c:	1e5d      	subs	r5, r3, #1
 800047e:	e001      	b.n	8000484 <__sfputs_r+0x14>
 8000480:	42ac      	cmp	r4, r5
 8000482:	d008      	beq.n	8000496 <__sfputs_r+0x26>
 8000484:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000488:	463a      	mov	r2, r7
 800048a:	4630      	mov	r0, r6
 800048c:	f7ff ffd2 	bl	8000434 <__sfputc_r>
 8000490:	1c43      	adds	r3, r0, #1
 8000492:	d1f5      	bne.n	8000480 <__sfputs_r+0x10>
 8000494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000496:	2000      	movs	r0, #0
 8000498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800049a:	2000      	movs	r0, #0
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <__sprint_r>:
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	b510      	push	{r4, lr}
 80004a4:	4614      	mov	r4, r2
 80004a6:	b913      	cbnz	r3, 80004ae <__sprint_r+0xe>
 80004a8:	6053      	str	r3, [r2, #4]
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	f001 fff7 	bl	80024a0 <__sfvwrite_r>
 80004b2:	2300      	movs	r3, #0
 80004b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop

080004bc <_vfiprintf_r>:
 80004bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c0:	4688      	mov	r8, r1
 80004c2:	b09f      	sub	sp, #124	; 0x7c
 80004c4:	4615      	mov	r5, r2
 80004c6:	461c      	mov	r4, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	b118      	cbz	r0, 80004d4 <_vfiprintf_r+0x18>
 80004cc:	6983      	ldr	r3, [r0, #24]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 80a2 	beq.w	8000618 <_vfiprintf_r+0x15c>
 80004d4:	4b92      	ldr	r3, [pc, #584]	; (8000720 <_vfiprintf_r+0x264>)
 80004d6:	4598      	cmp	r8, r3
 80004d8:	f000 80a4 	beq.w	8000624 <_vfiprintf_r+0x168>
 80004dc:	4b91      	ldr	r3, [pc, #580]	; (8000724 <_vfiprintf_r+0x268>)
 80004de:	4598      	cmp	r8, r3
 80004e0:	f000 80b1 	beq.w	8000646 <_vfiprintf_r+0x18a>
 80004e4:	4b90      	ldr	r3, [pc, #576]	; (8000728 <_vfiprintf_r+0x26c>)
 80004e6:	4598      	cmp	r8, r3
 80004e8:	bf08      	it	eq
 80004ea:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80004ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80004f2:	0718      	lsls	r0, r3, #28
 80004f4:	f140 809d 	bpl.w	8000632 <_vfiprintf_r+0x176>
 80004f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	f000 8098 	beq.w	8000632 <_vfiprintf_r+0x176>
 8000502:	2300      	movs	r3, #0
 8000504:	930b      	str	r3, [sp, #44]	; 0x2c
 8000506:	7829      	ldrb	r1, [r5, #0]
 8000508:	4e88      	ldr	r6, [pc, #544]	; (800072c <_vfiprintf_r+0x270>)
 800050a:	9405      	str	r4, [sp, #20]
 800050c:	2320      	movs	r3, #32
 800050e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8000512:	2330      	movs	r3, #48	; 0x30
 8000514:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000518:	2701      	movs	r7, #1
 800051a:	2900      	cmp	r1, #0
 800051c:	d074      	beq.n	8000608 <_vfiprintf_r+0x14c>
 800051e:	462c      	mov	r4, r5
 8000520:	460b      	mov	r3, r1
 8000522:	e004      	b.n	800052e <_vfiprintf_r+0x72>
 8000524:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000528:	2b00      	cmp	r3, #0
 800052a:	f000 808f 	beq.w	800064c <_vfiprintf_r+0x190>
 800052e:	2b25      	cmp	r3, #37	; 0x25
 8000530:	d1f8      	bne.n	8000524 <_vfiprintf_r+0x68>
 8000532:	ebb4 0b05 	subs.w	fp, r4, r5
 8000536:	f040 808c 	bne.w	8000652 <_vfiprintf_r+0x196>
 800053a:	7823      	ldrb	r3, [r4, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d063      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000540:	2300      	movs	r3, #0
 8000542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000546:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800054a:	9306      	str	r3, [sp, #24]
 800054c:	9309      	str	r3, [sp, #36]	; 0x24
 800054e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000552:	931c      	str	r3, [sp, #112]	; 0x70
 8000554:	3401      	adds	r4, #1
 8000556:	e004      	b.n	8000562 <_vfiprintf_r+0xa6>
 8000558:	9a06      	ldr	r2, [sp, #24]
 800055a:	fa07 f303 	lsl.w	r3, r7, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	9306      	str	r3, [sp, #24]
 8000562:	4625      	mov	r5, r4
 8000564:	2205      	movs	r2, #5
 8000566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800056a:	4630      	mov	r0, r6
 800056c:	f002 fe38 	bl	80031e0 <memchr>
 8000570:	1b83      	subs	r3, r0, r6
 8000572:	2800      	cmp	r0, #0
 8000574:	d1f0      	bne.n	8000558 <_vfiprintf_r+0x9c>
 8000576:	9b06      	ldr	r3, [sp, #24]
 8000578:	06d9      	lsls	r1, r3, #27
 800057a:	bf44      	itt	mi
 800057c:	2220      	movmi	r2, #32
 800057e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000582:	7829      	ldrb	r1, [r5, #0]
 8000584:	071a      	lsls	r2, r3, #28
 8000586:	bf44      	itt	mi
 8000588:	222b      	movmi	r2, #43	; 0x2b
 800058a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800058e:	292a      	cmp	r1, #42	; 0x2a
 8000590:	d170      	bne.n	8000674 <_vfiprintf_r+0x1b8>
 8000592:	9a05      	ldr	r2, [sp, #20]
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	3204      	adds	r2, #4
 8000598:	2900      	cmp	r1, #0
 800059a:	9205      	str	r2, [sp, #20]
 800059c:	f2c0 809b 	blt.w	80006d6 <_vfiprintf_r+0x21a>
 80005a0:	9109      	str	r1, [sp, #36]	; 0x24
 80005a2:	7869      	ldrb	r1, [r5, #1]
 80005a4:	3501      	adds	r5, #1
 80005a6:	292e      	cmp	r1, #46	; 0x2e
 80005a8:	d076      	beq.n	8000698 <_vfiprintf_r+0x1dc>
 80005aa:	4c61      	ldr	r4, [pc, #388]	; (8000730 <_vfiprintf_r+0x274>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	4620      	mov	r0, r4
 80005b0:	f002 fe16 	bl	80031e0 <memchr>
 80005b4:	b138      	cbz	r0, 80005c6 <_vfiprintf_r+0x10a>
 80005b6:	9b06      	ldr	r3, [sp, #24]
 80005b8:	1b00      	subs	r0, r0, r4
 80005ba:	2440      	movs	r4, #64	; 0x40
 80005bc:	fa04 f000 	lsl.w	r0, r4, r0
 80005c0:	4303      	orrs	r3, r0
 80005c2:	9306      	str	r3, [sp, #24]
 80005c4:	3501      	adds	r5, #1
 80005c6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80005ca:	485a      	ldr	r0, [pc, #360]	; (8000734 <_vfiprintf_r+0x278>)
 80005cc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80005d0:	2206      	movs	r2, #6
 80005d2:	f002 fe05 	bl	80031e0 <memchr>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	f000 8083 	beq.w	80006e2 <_vfiprintf_r+0x226>
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <_vfiprintf_r+0x27c>)
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d06d      	beq.n	80006be <_vfiprintf_r+0x202>
 80005e2:	aa05      	add	r2, sp, #20
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <_vfiprintf_r+0x280>)
 80005e8:	4642      	mov	r2, r8
 80005ea:	a906      	add	r1, sp, #24
 80005ec:	4648      	mov	r0, r9
 80005ee:	f3af 8000 	nop.w
 80005f2:	9003      	str	r0, [sp, #12]
 80005f4:	9b03      	ldr	r3, [sp, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	d006      	beq.n	8000608 <_vfiprintf_r+0x14c>
 80005fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005fc:	9a03      	ldr	r2, [sp, #12]
 80005fe:	7829      	ldrb	r1, [r5, #0]
 8000600:	4413      	add	r3, r2
 8000602:	930b      	str	r3, [sp, #44]	; 0x2c
 8000604:	2900      	cmp	r1, #0
 8000606:	d18a      	bne.n	800051e <_vfiprintf_r+0x62>
 8000608:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800060c:	065b      	lsls	r3, r3, #25
 800060e:	d417      	bmi.n	8000640 <_vfiprintf_r+0x184>
 8000610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000612:	b01f      	add	sp, #124	; 0x7c
 8000614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000618:	f001 ff22 	bl	8002460 <__sinit>
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <_vfiprintf_r+0x264>)
 800061e:	4598      	cmp	r8, r3
 8000620:	f47f af5c 	bne.w	80004dc <_vfiprintf_r+0x20>
 8000624:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8000628:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800062c:	0718      	lsls	r0, r3, #28
 800062e:	f53f af63 	bmi.w	80004f8 <_vfiprintf_r+0x3c>
 8000632:	4641      	mov	r1, r8
 8000634:	4648      	mov	r0, r9
 8000636:	f001 fc99 	bl	8001f6c <__swsetup_r>
 800063a:	2800      	cmp	r0, #0
 800063c:	f43f af61 	beq.w	8000502 <_vfiprintf_r+0x46>
 8000640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000644:	e7e5      	b.n	8000612 <_vfiprintf_r+0x156>
 8000646:	f8d9 8008 	ldr.w	r8, [r9, #8]
 800064a:	e750      	b.n	80004ee <_vfiprintf_r+0x32>
 800064c:	ebb4 0b05 	subs.w	fp, r4, r5
 8000650:	d0da      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000652:	46aa      	mov	sl, r5
 8000654:	f1c5 0501 	rsb	r5, r5, #1
 8000658:	e003      	b.n	8000662 <_vfiprintf_r+0x1a6>
 800065a:	4593      	cmp	fp, r2
 800065c:	d936      	bls.n	80006cc <_vfiprintf_r+0x210>
 800065e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000662:	4642      	mov	r2, r8
 8000664:	4648      	mov	r0, r9
 8000666:	f7ff fee5 	bl	8000434 <__sfputc_r>
 800066a:	3001      	adds	r0, #1
 800066c:	eb05 020a 	add.w	r2, r5, sl
 8000670:	d1f3      	bne.n	800065a <_vfiprintf_r+0x19e>
 8000672:	e7c9      	b.n	8000608 <_vfiprintf_r+0x14c>
 8000674:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000678:	2a09      	cmp	r2, #9
 800067a:	d894      	bhi.n	80005a6 <_vfiprintf_r+0xea>
 800067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800067e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000686:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800068a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800068e:	2a09      	cmp	r2, #9
 8000690:	d9f5      	bls.n	800067e <_vfiprintf_r+0x1c2>
 8000692:	292e      	cmp	r1, #46	; 0x2e
 8000694:	9309      	str	r3, [sp, #36]	; 0x24
 8000696:	d188      	bne.n	80005aa <_vfiprintf_r+0xee>
 8000698:	7869      	ldrb	r1, [r5, #1]
 800069a:	292a      	cmp	r1, #42	; 0x2a
 800069c:	d12b      	bne.n	80006f6 <_vfiprintf_r+0x23a>
 800069e:	9b05      	ldr	r3, [sp, #20]
 80006a0:	78a9      	ldrb	r1, [r5, #2]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	9207      	str	r2, [sp, #28]
 80006a6:	3304      	adds	r3, #4
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	f105 0002 	add.w	r0, r5, #2
 80006ae:	9305      	str	r3, [sp, #20]
 80006b0:	bfb8      	it	lt
 80006b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80006b6:	4605      	mov	r5, r0
 80006b8:	bfb8      	it	lt
 80006ba:	9307      	strlt	r3, [sp, #28]
 80006bc:	e775      	b.n	80005aa <_vfiprintf_r+0xee>
 80006be:	9b05      	ldr	r3, [sp, #20]
 80006c0:	3307      	adds	r3, #7
 80006c2:	f023 0307 	bic.w	r3, r3, #7
 80006c6:	3308      	adds	r3, #8
 80006c8:	9305      	str	r3, [sp, #20]
 80006ca:	e796      	b.n	80005fa <_vfiprintf_r+0x13e>
 80006cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80006ce:	7823      	ldrb	r3, [r4, #0]
 80006d0:	445a      	add	r2, fp
 80006d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80006d4:	e732      	b.n	800053c <_vfiprintf_r+0x80>
 80006d6:	4249      	negs	r1, r1
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	9109      	str	r1, [sp, #36]	; 0x24
 80006de:	9306      	str	r3, [sp, #24]
 80006e0:	e75f      	b.n	80005a2 <_vfiprintf_r+0xe6>
 80006e2:	aa05      	add	r2, sp, #20
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_vfiprintf_r+0x280>)
 80006e8:	4642      	mov	r2, r8
 80006ea:	a906      	add	r1, sp, #24
 80006ec:	4648      	mov	r0, r9
 80006ee:	f000 f8cb 	bl	8000888 <_printf_i>
 80006f2:	9003      	str	r0, [sp, #12]
 80006f4:	e77e      	b.n	80005f4 <_vfiprintf_r+0x138>
 80006f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006fa:	2300      	movs	r3, #0
 80006fc:	2a09      	cmp	r2, #9
 80006fe:	9307      	str	r3, [sp, #28]
 8000700:	f105 0501 	add.w	r5, r5, #1
 8000704:	f63f af51 	bhi.w	80005aa <_vfiprintf_r+0xee>
 8000708:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800070c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000710:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000714:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000718:	2a09      	cmp	r2, #9
 800071a:	d9f5      	bls.n	8000708 <_vfiprintf_r+0x24c>
 800071c:	9307      	str	r3, [sp, #28]
 800071e:	e744      	b.n	80005aa <_vfiprintf_r+0xee>
 8000720:	080096b0 	.word	0x080096b0
 8000724:	08009690 	.word	0x08009690
 8000728:	08009670 	.word	0x08009670
 800072c:	08009bd8 	.word	0x08009bd8
 8000730:	08009be0 	.word	0x08009be0
 8000734:	08009be4 	.word	0x08009be4
 8000738:	00000000 	.word	0x00000000
 800073c:	08000471 	.word	0x08000471

08000740 <vfiprintf>:
 8000740:	b410      	push	{r4}
 8000742:	4c05      	ldr	r4, [pc, #20]	; (8000758 <vfiprintf+0x18>)
 8000744:	4684      	mov	ip, r0
 8000746:	4613      	mov	r3, r2
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800074e:	460a      	mov	r2, r1
 8000750:	4661      	mov	r1, ip
 8000752:	f7ff beb3 	b.w	80004bc <_vfiprintf_r>
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <_printf_common>:
 800075c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000760:	4692      	mov	sl, r2
 8000762:	461f      	mov	r7, r3
 8000764:	690a      	ldr	r2, [r1, #16]
 8000766:	688b      	ldr	r3, [r1, #8]
 8000768:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800076c:	429a      	cmp	r2, r3
 800076e:	bfb8      	it	lt
 8000770:	461a      	movlt	r2, r3
 8000772:	f8ca 2000 	str.w	r2, [sl]
 8000776:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800077a:	460c      	mov	r4, r1
 800077c:	4606      	mov	r6, r0
 800077e:	b113      	cbz	r3, 8000786 <_printf_common+0x2a>
 8000780:	3201      	adds	r2, #1
 8000782:	f8ca 2000 	str.w	r2, [sl]
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	0691      	lsls	r1, r2, #26
 800078a:	d55d      	bpl.n	8000848 <_printf_common+0xec>
 800078c:	f8da 3000 	ldr.w	r3, [sl]
 8000790:	3302      	adds	r3, #2
 8000792:	f8ca 3000 	str.w	r3, [sl]
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	f012 0f06 	tst.w	r2, #6
 800079c:	4611      	mov	r1, r2
 800079e:	d11e      	bne.n	80007de <_printf_common+0x82>
 80007a0:	68e1      	ldr	r1, [r4, #12]
 80007a2:	1acb      	subs	r3, r1, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bfd8      	it	le
 80007a8:	4611      	movle	r1, r2
 80007aa:	dd18      	ble.n	80007de <_printf_common+0x82>
 80007ac:	f104 0b19 	add.w	fp, r4, #25
 80007b0:	f04f 0800 	mov.w	r8, #0
 80007b4:	e005      	b.n	80007c2 <_printf_common+0x66>
 80007b6:	68e5      	ldr	r5, [r4, #12]
 80007b8:	f8da 3000 	ldr.w	r3, [sl]
 80007bc:	1aed      	subs	r5, r5, r3
 80007be:	4545      	cmp	r5, r8
 80007c0:	dd0c      	ble.n	80007dc <_printf_common+0x80>
 80007c2:	2301      	movs	r3, #1
 80007c4:	465a      	mov	r2, fp
 80007c6:	4639      	mov	r1, r7
 80007c8:	4630      	mov	r0, r6
 80007ca:	47c8      	blx	r9
 80007cc:	3001      	adds	r0, #1
 80007ce:	f108 0801 	add.w	r8, r8, #1
 80007d2:	d1f0      	bne.n	80007b6 <_printf_common+0x5a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007dc:	6821      	ldr	r1, [r4, #0]
 80007de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80007e2:	3b00      	subs	r3, #0
 80007e4:	bf18      	it	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	068a      	lsls	r2, r1, #26
 80007ea:	d50a      	bpl.n	8000802 <_printf_common+0xa6>
 80007ec:	18e1      	adds	r1, r4, r3
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	2030      	movs	r0, #48	; 0x30
 80007f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80007f6:	4422      	add	r2, r4
 80007f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80007fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000800:	3302      	adds	r3, #2
 8000802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000806:	4639      	mov	r1, r7
 8000808:	4630      	mov	r0, r6
 800080a:	47c8      	blx	r9
 800080c:	3001      	adds	r0, #1
 800080e:	d0e1      	beq.n	80007d4 <_printf_common+0x78>
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f003 0306 	and.w	r3, r3, #6
 8000816:	2b04      	cmp	r3, #4
 8000818:	d01d      	beq.n	8000856 <_printf_common+0xfa>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	6922      	ldr	r2, [r4, #16]
 800081e:	4293      	cmp	r3, r2
 8000820:	dd25      	ble.n	800086e <_printf_common+0x112>
 8000822:	f04f 0800 	mov.w	r8, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	4498      	add	r8, r3
 800082a:	341a      	adds	r4, #26
 800082c:	2500      	movs	r5, #0
 800082e:	e001      	b.n	8000834 <_printf_common+0xd8>
 8000830:	4545      	cmp	r5, r8
 8000832:	da1c      	bge.n	800086e <_printf_common+0x112>
 8000834:	2301      	movs	r3, #1
 8000836:	4622      	mov	r2, r4
 8000838:	4639      	mov	r1, r7
 800083a:	4630      	mov	r0, r6
 800083c:	47c8      	blx	r9
 800083e:	3001      	adds	r0, #1
 8000840:	f105 0501 	add.w	r5, r5, #1
 8000844:	d1f4      	bne.n	8000830 <_printf_common+0xd4>
 8000846:	e7c5      	b.n	80007d4 <_printf_common+0x78>
 8000848:	f012 0f06 	tst.w	r2, #6
 800084c:	d012      	beq.n	8000874 <_printf_common+0x118>
 800084e:	3b00      	subs	r3, #0
 8000850:	bf18      	it	ne
 8000852:	2301      	movne	r3, #1
 8000854:	e7d5      	b.n	8000802 <_printf_common+0xa6>
 8000856:	f8da 3000 	ldr.w	r3, [sl]
 800085a:	68e1      	ldr	r1, [r4, #12]
 800085c:	6922      	ldr	r2, [r4, #16]
 800085e:	1ac9      	subs	r1, r1, r3
 8000860:	68a3      	ldr	r3, [r4, #8]
 8000862:	4293      	cmp	r3, r2
 8000864:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8000868:	dcdd      	bgt.n	8000826 <_printf_common+0xca>
 800086a:	2900      	cmp	r1, #0
 800086c:	dcdd      	bgt.n	800082a <_printf_common+0xce>
 800086e:	2000      	movs	r0, #0
 8000870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000874:	68e1      	ldr	r1, [r4, #12]
 8000876:	f8da 3000 	ldr.w	r3, [sl]
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	bfd8      	it	le
 8000880:	4611      	movle	r1, r2
 8000882:	dc93      	bgt.n	80007ac <_printf_common+0x50>
 8000884:	e7ab      	b.n	80007de <_printf_common+0x82>
 8000886:	bf00      	nop

08000888 <_printf_i>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	460c      	mov	r4, r1
 800088e:	b084      	sub	sp, #16
 8000890:	4690      	mov	r8, r2
 8000892:	7e22      	ldrb	r2, [r4, #24]
 8000894:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000896:	4607      	mov	r7, r0
 8000898:	4699      	mov	r9, r3
 800089a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d033      	beq.n	800090a <_printf_i+0x82>
 80008a2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80008a6:	b2dd      	uxtb	r5, r3
 80008a8:	2d20      	cmp	r5, #32
 80008aa:	d867      	bhi.n	800097c <_printf_i+0xf4>
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d865      	bhi.n	800097c <_printf_i+0xf4>
 80008b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80008b4:	006400de 	.word	0x006400de
 80008b8:	00640064 	.word	0x00640064
 80008bc:	00640064 	.word	0x00640064
 80008c0:	00640064 	.word	0x00640064
 80008c4:	00640064 	.word	0x00640064
 80008c8:	00a30064 	.word	0x00a30064
 80008cc:	0064006e 	.word	0x0064006e
 80008d0:	00640064 	.word	0x00640064
 80008d4:	006e0064 	.word	0x006e0064
 80008d8:	00640064 	.word	0x00640064
 80008dc:	00640064 	.word	0x00640064
 80008e0:	007f0021 	.word	0x007f0021
 80008e4:	006400c0 	.word	0x006400c0
 80008e8:	00ae0064 	.word	0x00ae0064
 80008ec:	007f0064 	.word	0x007f0064
 80008f0:	00640064 	.word	0x00640064
 80008f4:	00e5      	.short	0x00e5
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	061a      	lsls	r2, r3, #24
 80008fa:	f140 8104 	bpl.w	8000b06 <_printf_i+0x27e>
 80008fe:	680b      	ldr	r3, [r1, #0]
 8000900:	6962      	ldr	r2, [r4, #20]
 8000902:	1d1d      	adds	r5, r3, #4
 8000904:	600d      	str	r5, [r1, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	4682      	mov	sl, r0
 800090e:	6123      	str	r3, [r4, #16]
 8000910:	f8cd 9000 	str.w	r9, [sp]
 8000914:	4643      	mov	r3, r8
 8000916:	aa03      	add	r2, sp, #12
 8000918:	4621      	mov	r1, r4
 800091a:	4638      	mov	r0, r7
 800091c:	f7ff ff1e 	bl	800075c <_printf_common>
 8000920:	3001      	adds	r0, #1
 8000922:	d020      	beq.n	8000966 <_printf_i+0xde>
 8000924:	6923      	ldr	r3, [r4, #16]
 8000926:	4652      	mov	r2, sl
 8000928:	4641      	mov	r1, r8
 800092a:	4638      	mov	r0, r7
 800092c:	47c8      	blx	r9
 800092e:	3001      	adds	r0, #1
 8000930:	d019      	beq.n	8000966 <_printf_i+0xde>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	68e0      	ldr	r0, [r4, #12]
 8000936:	9e03      	ldr	r6, [sp, #12]
 8000938:	079b      	lsls	r3, r3, #30
 800093a:	d519      	bpl.n	8000970 <_printf_i+0xe8>
 800093c:	1b83      	subs	r3, r0, r6
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd16      	ble.n	8000970 <_printf_i+0xe8>
 8000942:	f104 0a19 	add.w	sl, r4, #25
 8000946:	2500      	movs	r5, #0
 8000948:	e004      	b.n	8000954 <_printf_i+0xcc>
 800094a:	68e0      	ldr	r0, [r4, #12]
 800094c:	9e03      	ldr	r6, [sp, #12]
 800094e:	1b83      	subs	r3, r0, r6
 8000950:	42ab      	cmp	r3, r5
 8000952:	dd0d      	ble.n	8000970 <_printf_i+0xe8>
 8000954:	2301      	movs	r3, #1
 8000956:	4652      	mov	r2, sl
 8000958:	4641      	mov	r1, r8
 800095a:	4638      	mov	r0, r7
 800095c:	47c8      	blx	r9
 800095e:	3001      	adds	r0, #1
 8000960:	f105 0501 	add.w	r5, r5, #1
 8000964:	d1f1      	bne.n	800094a <_printf_i+0xc2>
 8000966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096a:	b004      	add	sp, #16
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	42b0      	cmp	r0, r6
 8000972:	bfb8      	it	lt
 8000974:	4630      	movlt	r0, r6
 8000976:	b004      	add	sp, #16
 8000978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097c:	2301      	movs	r3, #1
 800097e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000982:	6123      	str	r3, [r4, #16]
 8000984:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000988:	2300      	movs	r3, #0
 800098a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800098e:	e7bf      	b.n	8000910 <_printf_i+0x88>
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	061a      	lsls	r2, r3, #24
 8000994:	d402      	bmi.n	800099c <_printf_i+0x114>
 8000996:	065e      	lsls	r6, r3, #25
 8000998:	f100 80c1 	bmi.w	8000b1e <_printf_i+0x296>
 800099c:	680d      	ldr	r5, [r1, #0]
 800099e:	682a      	ldr	r2, [r5, #0]
 80009a0:	3504      	adds	r5, #4
 80009a2:	600d      	str	r5, [r1, #0]
 80009a4:	4615      	mov	r5, r2
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	db6b      	blt.n	8000a82 <_printf_i+0x1fa>
 80009aa:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000b30 <_printf_i+0x2a8>
 80009ae:	260a      	movs	r6, #10
 80009b0:	e010      	b.n	80009d4 <_printf_i+0x14c>
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	061d      	lsls	r5, r3, #24
 80009b6:	f140 809c 	bpl.w	8000af2 <_printf_i+0x26a>
 80009ba:	680b      	ldr	r3, [r1, #0]
 80009bc:	1d1d      	adds	r5, r3, #4
 80009be:	600d      	str	r5, [r1, #0]
 80009c0:	681d      	ldr	r5, [r3, #0]
 80009c2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8000b30 <_printf_i+0x2a8>
 80009c6:	2a6f      	cmp	r2, #111	; 0x6f
 80009c8:	bf0c      	ite	eq
 80009ca:	2608      	moveq	r6, #8
 80009cc:	260a      	movne	r6, #10
 80009ce:	2300      	movs	r3, #0
 80009d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80009d4:	6862      	ldr	r2, [r4, #4]
 80009d6:	60a2      	str	r2, [r4, #8]
 80009d8:	2a00      	cmp	r2, #0
 80009da:	db7f      	blt.n	8000adc <_printf_i+0x254>
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	f023 0304 	bic.w	r3, r3, #4
 80009e2:	6023      	str	r3, [r4, #0]
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d15b      	bne.n	8000aa0 <_printf_i+0x218>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d179      	bne.n	8000ae0 <_printf_i+0x258>
 80009ec:	4682      	mov	sl, r0
 80009ee:	2e08      	cmp	r6, #8
 80009f0:	d065      	beq.n	8000abe <_printf_i+0x236>
 80009f2:	eba0 000a 	sub.w	r0, r0, sl
 80009f6:	6120      	str	r0, [r4, #16]
 80009f8:	e78a      	b.n	8000910 <_printf_i+0x88>
 80009fa:	680b      	ldr	r3, [r1, #0]
 80009fc:	2201      	movs	r2, #1
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	3304      	adds	r3, #4
 8000a02:	600b      	str	r3, [r1, #0]
 8000a04:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000a08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8000a0c:	6122      	str	r2, [r4, #16]
 8000a0e:	e7bb      	b.n	8000988 <_printf_i+0x100>
 8000a10:	680b      	ldr	r3, [r1, #0]
 8000a12:	6862      	ldr	r2, [r4, #4]
 8000a14:	1d18      	adds	r0, r3, #4
 8000a16:	6008      	str	r0, [r1, #0]
 8000a18:	f8d3 a000 	ldr.w	sl, [r3]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4650      	mov	r0, sl
 8000a20:	f002 fbde 	bl	80031e0 <memchr>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	f000 8081 	beq.w	8000b2c <_printf_i+0x2a4>
 8000a2a:	eba0 000a 	sub.w	r0, r0, sl
 8000a2e:	6060      	str	r0, [r4, #4]
 8000a30:	6120      	str	r0, [r4, #16]
 8000a32:	e7a9      	b.n	8000988 <_printf_i+0x100>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	2278      	movs	r2, #120	; 0x78
 8000a3e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8000b34 <_printf_i+0x2ac>
 8000a42:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000a46:	680a      	ldr	r2, [r1, #0]
 8000a48:	1d15      	adds	r5, r2, #4
 8000a4a:	600d      	str	r5, [r1, #0]
 8000a4c:	061d      	lsls	r5, r3, #24
 8000a4e:	d443      	bmi.n	8000ad8 <_printf_i+0x250>
 8000a50:	0659      	lsls	r1, r3, #25
 8000a52:	d541      	bpl.n	8000ad8 <_printf_i+0x250>
 8000a54:	8815      	ldrh	r5, [r2, #0]
 8000a56:	07de      	lsls	r6, r3, #31
 8000a58:	bf44      	itt	mi
 8000a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8000a5e:	6023      	strmi	r3, [r4, #0]
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d144      	bne.n	8000aee <_printf_i+0x266>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	2610      	movs	r6, #16
 8000a6e:	e7ae      	b.n	80009ce <_printf_i+0x146>
 8000a70:	2358      	movs	r3, #88	; 0x58
 8000a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a76:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000b30 <_printf_i+0x2a8>
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	e7e3      	b.n	8000a46 <_printf_i+0x1be>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	e7dc      	b.n	8000a3c <_printf_i+0x1b4>
 8000a82:	6862      	ldr	r2, [r4, #4]
 8000a84:	60a2      	str	r2, [r4, #8]
 8000a86:	212d      	movs	r1, #45	; 0x2d
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	f1c5 0500 	rsb	r5, r5, #0
 8000a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000a92:	db02      	blt.n	8000a9a <_printf_i+0x212>
 8000a94:	f023 0304 	bic.w	r3, r3, #4
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8000b30 <_printf_i+0x2a8>
 8000a9e:	260a      	movs	r6, #10
 8000aa0:	4682      	mov	sl, r0
 8000aa2:	fbb5 f3f6 	udiv	r3, r5, r6
 8000aa6:	fb06 5113 	mls	r1, r6, r3, r5
 8000aaa:	462a      	mov	r2, r5
 8000aac:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8000ab0:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8000ab4:	42b2      	cmp	r2, r6
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	d2f3      	bcs.n	8000aa2 <_printf_i+0x21a>
 8000aba:	2e08      	cmp	r6, #8
 8000abc:	d199      	bne.n	80009f2 <_printf_i+0x16a>
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	07d9      	lsls	r1, r3, #31
 8000ac2:	d596      	bpl.n	80009f2 <_printf_i+0x16a>
 8000ac4:	6862      	ldr	r2, [r4, #4]
 8000ac6:	6923      	ldr	r3, [r4, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dc92      	bgt.n	80009f2 <_printf_i+0x16a>
 8000acc:	2330      	movs	r3, #48	; 0x30
 8000ace:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8000ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000ad6:	e78c      	b.n	80009f2 <_printf_i+0x16a>
 8000ad8:	6815      	ldr	r5, [r2, #0]
 8000ada:	e7bc      	b.n	8000a56 <_printf_i+0x1ce>
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d1df      	bne.n	8000aa0 <_printf_i+0x218>
 8000ae0:	f89c 3000 	ldrb.w	r3, [ip]
 8000ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ae8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000aec:	e77f      	b.n	80009ee <_printf_i+0x166>
 8000aee:	2610      	movs	r6, #16
 8000af0:	e76d      	b.n	80009ce <_printf_i+0x146>
 8000af2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000af6:	680b      	ldr	r3, [r1, #0]
 8000af8:	f103 0504 	add.w	r5, r3, #4
 8000afc:	600d      	str	r5, [r1, #0]
 8000afe:	bf0c      	ite	eq
 8000b00:	681d      	ldreq	r5, [r3, #0]
 8000b02:	881d      	ldrhne	r5, [r3, #0]
 8000b04:	e75d      	b.n	80009c2 <_printf_i+0x13a>
 8000b06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b0a:	680b      	ldr	r3, [r1, #0]
 8000b0c:	6962      	ldr	r2, [r4, #20]
 8000b0e:	f103 0504 	add.w	r5, r3, #4
 8000b12:	600d      	str	r5, [r1, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	bf14      	ite	ne
 8000b18:	801a      	strhne	r2, [r3, #0]
 8000b1a:	601a      	streq	r2, [r3, #0]
 8000b1c:	e6f5      	b.n	800090a <_printf_i+0x82>
 8000b1e:	680a      	ldr	r2, [r1, #0]
 8000b20:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000b24:	3204      	adds	r2, #4
 8000b26:	600a      	str	r2, [r1, #0]
 8000b28:	462a      	mov	r2, r5
 8000b2a:	e73c      	b.n	80009a6 <_printf_i+0x11e>
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	e77f      	b.n	8000a30 <_printf_i+0x1a8>
 8000b30:	08009bec 	.word	0x08009bec
 8000b34:	08009c00 	.word	0x08009c00

08000b38 <_siprintf_r>:
 8000b38:	b40c      	push	{r2, r3}
 8000b3a:	b510      	push	{r4, lr}
 8000b3c:	b09c      	sub	sp, #112	; 0x70
 8000b3e:	ab1e      	add	r3, sp, #120	; 0x78
 8000b40:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8000b44:	e9cd 1406 	strd	r1, r4, [sp, #24]
 8000b48:	9102      	str	r1, [sp, #8]
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <_siprintf_r+0x34>)
 8000b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b50:	9105      	str	r1, [sp, #20]
 8000b52:	a902      	add	r1, sp, #8
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	9404      	str	r4, [sp, #16]
 8000b58:	f003 fbee 	bl	8004338 <_svfiprintf_r>
 8000b5c:	9b02      	ldr	r3, [sp, #8]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	b01c      	add	sp, #112	; 0x70
 8000b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b68:	b002      	add	sp, #8
 8000b6a:	4770      	bx	lr
 8000b6c:	ffff0208 	.word	0xffff0208

08000b70 <siprintf>:
 8000b70:	b40e      	push	{r1, r2, r3}
 8000b72:	b510      	push	{r4, lr}
 8000b74:	b09d      	sub	sp, #116	; 0x74
 8000b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b7a:	ab1f      	add	r3, sp, #124	; 0x7c
 8000b7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000b80:	9104      	str	r1, [sp, #16]
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <siprintf+0x38>)
 8000b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b88:	9002      	str	r0, [sp, #8]
 8000b8a:	4c08      	ldr	r4, [pc, #32]	; (8000bac <siprintf+0x3c>)
 8000b8c:	6808      	ldr	r0, [r1, #0]
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	a902      	add	r1, sp, #8
 8000b92:	9405      	str	r4, [sp, #20]
 8000b94:	f003 fbd0 	bl	8004338 <_svfiprintf_r>
 8000b98:	9b02      	ldr	r3, [sp, #8]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	b01d      	add	sp, #116	; 0x74
 8000ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba4:	b003      	add	sp, #12
 8000ba6:	4770      	bx	lr
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	ffff0208 	.word	0xffff0208

08000bb0 <strcat>:
 8000bb0:	0783      	lsls	r3, r0, #30
 8000bb2:	b510      	push	{r4, lr}
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	d110      	bne.n	8000bda <strcat+0x2a>
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000bbe:	ea23 0302 	bic.w	r3, r3, r2
 8000bc2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000bc6:	d108      	bne.n	8000bda <strcat+0x2a>
 8000bc8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8000bcc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000bd0:	ea23 0302 	bic.w	r3, r3, r2
 8000bd4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000bd8:	d0f6      	beq.n	8000bc8 <strcat+0x18>
 8000bda:	7803      	ldrb	r3, [r0, #0]
 8000bdc:	b11b      	cbz	r3, 8000be6 <strcat+0x36>
 8000bde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1fb      	bne.n	8000bde <strcat+0x2e>
 8000be6:	f000 f803 	bl	8000bf0 <strcpy>
 8000bea:	4620      	mov	r0, r4
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	bf00      	nop

08000bf0 <strcpy>:
 8000bf0:	ea80 0201 	eor.w	r2, r0, r1
 8000bf4:	4684      	mov	ip, r0
 8000bf6:	f012 0f03 	tst.w	r2, #3
 8000bfa:	d14f      	bne.n	8000c9c <strcpy+0xac>
 8000bfc:	f011 0f03 	tst.w	r1, #3
 8000c00:	d132      	bne.n	8000c68 <strcpy+0x78>
 8000c02:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000c06:	f011 0f04 	tst.w	r1, #4
 8000c0a:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c0e:	d00b      	beq.n	8000c28 <strcpy+0x38>
 8000c10:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000c14:	439a      	bics	r2, r3
 8000c16:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000c1a:	bf04      	itt	eq
 8000c1c:	f84c 3b04 	streq.w	r3, [ip], #4
 8000c20:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000c24:	d116      	bne.n	8000c54 <strcpy+0x64>
 8000c26:	bf00      	nop
 8000c28:	f851 4b04 	ldr.w	r4, [r1], #4
 8000c2c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000c30:	439a      	bics	r2, r3
 8000c32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000c36:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8000c3a:	d10b      	bne.n	8000c54 <strcpy+0x64>
 8000c3c:	f84c 3b04 	str.w	r3, [ip], #4
 8000c40:	43a2      	bics	r2, r4
 8000c42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000c46:	bf04      	itt	eq
 8000c48:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000c4c:	f84c 4b04 	streq.w	r4, [ip], #4
 8000c50:	d0ea      	beq.n	8000c28 <strcpy+0x38>
 8000c52:	4623      	mov	r3, r4
 8000c54:	f80c 3b01 	strb.w	r3, [ip], #1
 8000c58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000c5c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000c60:	d1f8      	bne.n	8000c54 <strcpy+0x64>
 8000c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	f011 0f01 	tst.w	r1, #1
 8000c6c:	d006      	beq.n	8000c7c <strcpy+0x8c>
 8000c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000c72:	f80c 2b01 	strb.w	r2, [ip], #1
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f011 0f02 	tst.w	r1, #2
 8000c80:	d0bf      	beq.n	8000c02 <strcpy+0x12>
 8000c82:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000c86:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000c8a:	bf16      	itet	ne
 8000c8c:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000c90:	f88c 2000 	strbeq.w	r2, [ip]
 8000c94:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000c98:	d1b3      	bne.n	8000c02 <strcpy+0x12>
 8000c9a:	4770      	bx	lr
 8000c9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ca0:	f80c 2b01 	strb.w	r2, [ip], #1
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d1f9      	bne.n	8000c9c <strcpy+0xac>
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
	...

08000cc0 <strlen>:
 8000cc0:	f890 f000 	pld	[r0]
 8000cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000cc8:	f020 0107 	bic.w	r1, r0, #7
 8000ccc:	f06f 0c00 	mvn.w	ip, #0
 8000cd0:	f010 0407 	ands.w	r4, r0, #7
 8000cd4:	f891 f020 	pld	[r1, #32]
 8000cd8:	f040 8049 	bne.w	8000d6e <strlen+0xae>
 8000cdc:	f04f 0400 	mov.w	r4, #0
 8000ce0:	f06f 0007 	mvn.w	r0, #7
 8000ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ce8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000cec:	f100 0008 	add.w	r0, r0, #8
 8000cf0:	fa82 f24c 	uadd8	r2, r2, ip
 8000cf4:	faa4 f28c 	sel	r2, r4, ip
 8000cf8:	fa83 f34c 	uadd8	r3, r3, ip
 8000cfc:	faa2 f38c 	sel	r3, r2, ip
 8000d00:	bb4b      	cbnz	r3, 8000d56 <strlen+0x96>
 8000d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000d06:	fa82 f24c 	uadd8	r2, r2, ip
 8000d0a:	f100 0008 	add.w	r0, r0, #8
 8000d0e:	faa4 f28c 	sel	r2, r4, ip
 8000d12:	fa83 f34c 	uadd8	r3, r3, ip
 8000d16:	faa2 f38c 	sel	r3, r2, ip
 8000d1a:	b9e3      	cbnz	r3, 8000d56 <strlen+0x96>
 8000d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000d20:	fa82 f24c 	uadd8	r2, r2, ip
 8000d24:	f100 0008 	add.w	r0, r0, #8
 8000d28:	faa4 f28c 	sel	r2, r4, ip
 8000d2c:	fa83 f34c 	uadd8	r3, r3, ip
 8000d30:	faa2 f38c 	sel	r3, r2, ip
 8000d34:	b97b      	cbnz	r3, 8000d56 <strlen+0x96>
 8000d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000d3a:	f101 0120 	add.w	r1, r1, #32
 8000d3e:	fa82 f24c 	uadd8	r2, r2, ip
 8000d42:	f100 0008 	add.w	r0, r0, #8
 8000d46:	faa4 f28c 	sel	r2, r4, ip
 8000d4a:	fa83 f34c 	uadd8	r3, r3, ip
 8000d4e:	faa2 f38c 	sel	r3, r2, ip
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0c6      	beq.n	8000ce4 <strlen+0x24>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	bf04      	itt	eq
 8000d5a:	3004      	addeq	r0, #4
 8000d5c:	461a      	moveq	r2, r3
 8000d5e:	ba12      	rev	r2, r2
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000d6c:	4770      	bx	lr
 8000d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000d72:	f004 0503 	and.w	r5, r4, #3
 8000d76:	f1c4 0000 	rsb	r0, r4, #0
 8000d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000d7e:	f014 0f04 	tst.w	r4, #4
 8000d82:	f891 f040 	pld	[r1, #64]	; 0x40
 8000d86:	fa0c f505 	lsl.w	r5, ip, r5
 8000d8a:	ea62 0205 	orn	r2, r2, r5
 8000d8e:	bf1c      	itt	ne
 8000d90:	ea63 0305 	ornne	r3, r3, r5
 8000d94:	4662      	movne	r2, ip
 8000d96:	f04f 0400 	mov.w	r4, #0
 8000d9a:	e7a9      	b.n	8000cf0 <strlen+0x30>
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <_strtod_l>:
 8000da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da4:	461c      	mov	r4, r3
 8000da6:	ed2d 8b04 	vpush	{d8-d9}
 8000daa:	4b9d      	ldr	r3, [pc, #628]	; (8001020 <_strtod_l+0x280>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b09f      	sub	sp, #124	; 0x7c
 8000db0:	2500      	movs	r5, #0
 8000db2:	4682      	mov	sl, r0
 8000db4:	4618      	mov	r0, r3
 8000db6:	4688      	mov	r8, r1
 8000db8:	9207      	str	r2, [sp, #28]
 8000dba:	951a      	str	r5, [sp, #104]	; 0x68
 8000dbc:	9308      	str	r3, [sp, #32]
 8000dbe:	f7ff ff7f 	bl	8000cc0 <strlen>
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4683      	mov	fp, r0
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000dcc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8000dd0:	4642      	mov	r2, r8
 8000dd2:	4617      	mov	r7, r2
 8000dd4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000dd8:	2b2d      	cmp	r3, #45	; 0x2d
 8000dda:	d82f      	bhi.n	8000e3c <_strtod_l+0x9c>
 8000ddc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000de0:	002e00a4 	.word	0x002e00a4
 8000de4:	002e002e 	.word	0x002e002e
 8000de8:	002e002e 	.word	0x002e002e
 8000dec:	002e002e 	.word	0x002e002e
 8000df0:	00b4002e 	.word	0x00b4002e
 8000df4:	00b400b4 	.word	0x00b400b4
 8000df8:	00b400b4 	.word	0x00b400b4
 8000dfc:	002e002e 	.word	0x002e002e
 8000e00:	002e002e 	.word	0x002e002e
 8000e04:	002e002e 	.word	0x002e002e
 8000e08:	002e002e 	.word	0x002e002e
 8000e0c:	002e002e 	.word	0x002e002e
 8000e10:	002e002e 	.word	0x002e002e
 8000e14:	002e002e 	.word	0x002e002e
 8000e18:	002e002e 	.word	0x002e002e
 8000e1c:	002e002e 	.word	0x002e002e
 8000e20:	002e00b4 	.word	0x002e00b4
 8000e24:	002e002e 	.word	0x002e002e
 8000e28:	002e002e 	.word	0x002e002e
 8000e2c:	002e002e 	.word	0x002e002e
 8000e30:	002e002e 	.word	0x002e002e
 8000e34:	040e002e 	.word	0x040e002e
 8000e38:	0404002e 	.word	0x0404002e
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8000e40:	2b30      	cmp	r3, #48	; 0x30
 8000e42:	f000 8083 	beq.w	8000f4c <_strtod_l+0x1ac>
 8000e46:	2200      	movs	r2, #0
 8000e48:	920c      	str	r2, [sp, #48]	; 0x30
 8000e4a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	f240 854d 	bls.w	80018ec <_strtod_l+0xb4c>
 8000e52:	f04f 0900 	mov.w	r9, #0
 8000e56:	4638      	mov	r0, r7
 8000e58:	464e      	mov	r6, r9
 8000e5a:	464d      	mov	r5, r9
 8000e5c:	e012      	b.n	8000e84 <_strtod_l+0xe4>
 8000e5e:	3001      	adds	r0, #1
 8000e60:	2d08      	cmp	r5, #8
 8000e62:	9019      	str	r0, [sp, #100]	; 0x64
 8000e64:	bfc8      	it	gt
 8000e66:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
 8000e6a:	7804      	ldrb	r4, [r0, #0]
 8000e6c:	bfc6      	itte	gt
 8000e6e:	eb03 0349 	addgt.w	r3, r3, r9, lsl #1
 8000e72:	f1a3 0930 	subgt.w	r9, r3, #48	; 0x30
 8000e76:	f1a2 0630 	suble.w	r6, r2, #48	; 0x30
 8000e7a:	2c2f      	cmp	r4, #47	; 0x2f
 8000e7c:	f105 0501 	add.w	r5, r5, #1
 8000e80:	4623      	mov	r3, r4
 8000e82:	dd74      	ble.n	8000f6e <_strtod_l+0x1ce>
 8000e84:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000e88:	2c39      	cmp	r4, #57	; 0x39
 8000e8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000e8e:	dde6      	ble.n	8000e5e <_strtod_l+0xbe>
 8000e90:	9908      	ldr	r1, [sp, #32]
 8000e92:	465a      	mov	r2, fp
 8000e94:	f003 fd20 	bl	80048d8 <strncmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d135      	bne.n	8000f0a <_strtod_l+0x16a>
 8000e9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	445a      	add	r2, fp
 8000ea4:	9219      	str	r2, [sp, #100]	; 0x64
 8000ea6:	f811 400b 	ldrb.w	r4, [r1, fp]
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	f040 85a9 	bne.w	8001a02 <_strtod_l+0xc62>
 8000eb0:	2c30      	cmp	r4, #48	; 0x30
 8000eb2:	f040 8561 	bne.w	8001978 <_strtod_l+0xbd8>
 8000eb6:	f1c2 0101 	rsb	r1, r2, #1
 8000eba:	1853      	adds	r3, r2, r1
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	9219      	str	r2, [sp, #100]	; 0x64
 8000ec0:	7814      	ldrb	r4, [r2, #0]
 8000ec2:	2c30      	cmp	r4, #48	; 0x30
 8000ec4:	d0f9      	beq.n	8000eba <_strtod_l+0x11a>
 8000ec6:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
 8000eca:	2a08      	cmp	r2, #8
 8000ecc:	f200 8343 	bhi.w	8001556 <_strtod_l+0x7b6>
 8000ed0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8000ed4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000ed6:	f103 0b01 	add.w	fp, r3, #1
 8000eda:	2300      	movs	r3, #0
 8000edc:	2501      	movs	r5, #1
 8000ede:	4627      	mov	r7, r4
 8000ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8000ee2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8000ee6:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 8000eea:	2300      	movs	r3, #0
 8000eec:	1c62      	adds	r2, r4, #1
 8000eee:	9219      	str	r2, [sp, #100]	; 0x64
 8000ef0:	7864      	ldrb	r4, [r4, #1]
 8000ef2:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
 8000ef6:	2909      	cmp	r1, #9
 8000ef8:	f200 82f1 	bhi.w	80014de <_strtod_l+0x73e>
 8000efc:	3301      	adds	r3, #1
 8000efe:	468e      	mov	lr, r1
 8000f00:	2900      	cmp	r1, #0
 8000f02:	f040 84d2 	bne.w	80018aa <_strtod_l+0xb0a>
 8000f06:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8000f08:	e7f0      	b.n	8000eec <_strtod_l+0x14c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2c65      	cmp	r4, #101	; 0x65
 8000f0e:	950a      	str	r5, [sp, #40]	; 0x28
 8000f10:	469b      	mov	fp, r3
 8000f12:	469e      	mov	lr, r3
 8000f14:	d001      	beq.n	8000f1a <_strtod_l+0x17a>
 8000f16:	2c45      	cmp	r4, #69	; 0x45
 8000f18:	d136      	bne.n	8000f88 <_strtod_l+0x1e8>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	f040 8085 	bne.w	800102a <_strtod_l+0x28a>
 8000f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000f22:	431a      	orrs	r2, r3
 8000f24:	f040 8080 	bne.w	8001028 <_strtod_l+0x288>
 8000f28:	9b07      	ldr	r3, [sp, #28]
 8000f2a:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 8001018 <_strtod_l+0x278>
 8000f2e:	b113      	cbz	r3, 8000f36 <_strtod_l+0x196>
 8000f30:	9b07      	ldr	r3, [sp, #28]
 8000f32:	f8c3 8000 	str.w	r8, [r3]
 8000f36:	eeb0 0a48 	vmov.f32	s0, s16
 8000f3a:	eef0 0a68 	vmov.f32	s1, s17
 8000f3e:	b01f      	add	sp, #124	; 0x7c
 8000f40:	ecbd 8b04 	vpop	{d8-d9}
 8000f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f48:	9219      	str	r2, [sp, #100]	; 0x64
 8000f4a:	e742      	b.n	8000dd2 <_strtod_l+0x32>
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000f52:	2b58      	cmp	r3, #88	; 0x58
 8000f54:	f000 848d 	beq.w	8001872 <_strtod_l+0xad2>
 8000f58:	3701      	adds	r7, #1
 8000f5a:	9719      	str	r7, [sp, #100]	; 0x64
 8000f5c:	783b      	ldrb	r3, [r7, #0]
 8000f5e:	2b30      	cmp	r3, #48	; 0x30
 8000f60:	d0fa      	beq.n	8000f58 <_strtod_l+0x1b8>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80d3 	beq.w	800110e <_strtod_l+0x36e>
 8000f68:	2201      	movs	r2, #1
 8000f6a:	920c      	str	r2, [sp, #48]	; 0x30
 8000f6c:	e76d      	b.n	8000e4a <_strtod_l+0xaa>
 8000f6e:	9908      	ldr	r1, [sp, #32]
 8000f70:	465a      	mov	r2, fp
 8000f72:	f003 fcb1 	bl	80048d8 <strncmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f000 80db 	beq.w	8001134 <_strtod_l+0x394>
 8000f7e:	950a      	str	r5, [sp, #40]	; 0x28
 8000f80:	f04f 0b00 	mov.w	fp, #0
 8000f84:	465b      	mov	r3, fp
 8000f86:	46de      	mov	lr, fp
 8000f88:	2200      	movs	r2, #0
 8000f8a:	920d      	str	r2, [sp, #52]	; 0x34
 8000f8c:	2d00      	cmp	r5, #0
 8000f8e:	f000 8098 	beq.w	80010c2 <_strtod_l+0x322>
 8000f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f94:	4613      	mov	r3, r2
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	bf08      	it	eq
 8000f9a:	462b      	moveq	r3, r5
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8000fa0:	f003 fece 	bl	8004d40 <__aeabi_ui2d>
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000fae:	2d10      	cmp	r5, #16
 8000fb0:	eba3 030b 	sub.w	r3, r3, fp
 8000fb4:	462c      	mov	r4, r5
 8000fb6:	bfa8      	it	ge
 8000fb8:	2410      	movge	r4, #16
 8000fba:	2d09      	cmp	r5, #9
 8000fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8000fbe:	dd14      	ble.n	8000fea <_strtod_l+0x24a>
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <_strtod_l+0x284>)
 8000fc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000fc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8000fca:	f003 ff33 	bl	8004e34 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4648      	mov	r0, r9
 8000fd2:	4690      	mov	r8, r2
 8000fd4:	4689      	mov	r9, r1
 8000fd6:	f003 feb3 	bl	8004d40 <__aeabi_ui2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4640      	mov	r0, r8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	f003 fd71 	bl	8004ac8 <__adddf3>
 8000fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000fea:	2d0f      	cmp	r5, #15
 8000fec:	f300 80ab 	bgt.w	8001146 <_strtod_l+0x3a6>
 8000ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8434 	beq.w	8001860 <_strtod_l+0xac0>
 8000ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ffa:	f340 8382 	ble.w	8001702 <_strtod_l+0x962>
 8000ffe:	2b16      	cmp	r3, #22
 8001000:	f340 84f1 	ble.w	80019e6 <_strtod_l+0xc46>
 8001004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001006:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800100a:	4293      	cmp	r3, r2
 800100c:	f280 8504 	bge.w	8001a18 <_strtod_l+0xc78>
 8001010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001012:	1b2c      	subs	r4, r5, r4
 8001014:	441c      	add	r4, r3
 8001016:	e09c      	b.n	8001152 <_strtod_l+0x3b2>
	...
 8001020:	080097d0 	.word	0x080097d0
 8001024:	080097f0 	.word	0x080097f0
 8001028:	2500      	movs	r5, #0
 800102a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800102e:	f108 0201 	add.w	r2, r8, #1
 8001032:	9219      	str	r2, [sp, #100]	; 0x64
 8001034:	f898 4001 	ldrb.w	r4, [r8, #1]
 8001038:	2c2b      	cmp	r4, #43	; 0x2b
 800103a:	f000 8289 	beq.w	8001550 <_strtod_l+0x7b0>
 800103e:	2c2d      	cmp	r4, #45	; 0x2d
 8001040:	f000 821d 	beq.w	800147e <_strtod_l+0x6de>
 8001044:	2200      	movs	r2, #0
 8001046:	9208      	str	r2, [sp, #32]
 8001048:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800104c:	2a09      	cmp	r2, #9
 800104e:	f200 8211 	bhi.w	8001474 <_strtod_l+0x6d4>
 8001052:	2c30      	cmp	r4, #48	; 0x30
 8001054:	d105      	bne.n	8001062 <_strtod_l+0x2c2>
 8001056:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001058:	3201      	adds	r2, #1
 800105a:	9219      	str	r2, [sp, #100]	; 0x64
 800105c:	7814      	ldrb	r4, [r2, #0]
 800105e:	2c30      	cmp	r4, #48	; 0x30
 8001060:	d0fa      	beq.n	8001058 <_strtod_l+0x2b8>
 8001062:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
 8001066:	2a08      	cmp	r2, #8
 8001068:	d88e      	bhi.n	8000f88 <_strtod_l+0x1e8>
 800106a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800106c:	910d      	str	r1, [sp, #52]	; 0x34
 800106e:	1c4a      	adds	r2, r1, #1
 8001070:	9219      	str	r2, [sp, #100]	; 0x64
 8001072:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8001076:	784c      	ldrb	r4, [r1, #1]
 8001078:	2c2f      	cmp	r4, #47	; 0x2f
 800107a:	dc09      	bgt.n	8001090 <_strtod_l+0x2f0>
 800107c:	f000 bc44 	b.w	8001908 <_strtod_l+0xb68>
 8001080:	3201      	adds	r2, #1
 8001082:	9219      	str	r2, [sp, #100]	; 0x64
 8001084:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8001088:	2c2f      	cmp	r4, #47	; 0x2f
 800108a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800108e:	dd06      	ble.n	800109e <_strtod_l+0x2fe>
 8001090:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001094:	2c39      	cmp	r4, #57	; 0x39
 8001096:	4694      	mov	ip, r2
 8001098:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800109c:	ddf0      	ble.n	8001080 <_strtod_l+0x2e0>
 800109e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80010a0:	1a52      	subs	r2, r2, r1
 80010a2:	2a08      	cmp	r2, #8
 80010a4:	f340 8430 	ble.w	8001908 <_strtod_l+0xb68>
 80010a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010ac:	920d      	str	r2, [sp, #52]	; 0x34
 80010ae:	9a08      	ldr	r2, [sp, #32]
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	f43f af6b 	beq.w	8000f8c <_strtod_l+0x1ec>
 80010b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80010b8:	4252      	negs	r2, r2
 80010ba:	920d      	str	r2, [sp, #52]	; 0x34
 80010bc:	2d00      	cmp	r5, #0
 80010be:	f47f af68 	bne.w	8000f92 <_strtod_l+0x1f2>
 80010c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80010c4:	4313      	orrs	r3, r2
 80010c6:	d122      	bne.n	800110e <_strtod_l+0x36e>
 80010c8:	f1be 0f00 	cmp.w	lr, #0
 80010cc:	f47f af2c 	bne.w	8000f28 <_strtod_l+0x188>
 80010d0:	2c69      	cmp	r4, #105	; 0x69
 80010d2:	f000 8431 	beq.w	8001938 <_strtod_l+0xb98>
 80010d6:	f300 8352 	bgt.w	800177e <_strtod_l+0x9de>
 80010da:	2c49      	cmp	r4, #73	; 0x49
 80010dc:	f000 842c 	beq.w	8001938 <_strtod_l+0xb98>
 80010e0:	2c4e      	cmp	r4, #78	; 0x4e
 80010e2:	f47f af21 	bne.w	8000f28 <_strtod_l+0x188>
 80010e6:	49b8      	ldr	r1, [pc, #736]	; (80013c8 <_strtod_l+0x628>)
 80010e8:	a819      	add	r0, sp, #100	; 0x64
 80010ea:	f001 fed3 	bl	8002e94 <__match>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	f43f af1a 	beq.w	8000f28 <_strtod_l+0x188>
 80010f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b28      	cmp	r3, #40	; 0x28
 80010fa:	f000 8571 	beq.w	8001be0 <_strtod_l+0xe40>
 80010fe:	48b3      	ldr	r0, [pc, #716]	; (80013cc <_strtod_l+0x62c>)
 8001100:	f003 fa36 	bl	8004570 <nan>
 8001104:	eeb0 8a40 	vmov.f32	s16, s0
 8001108:	eef0 8a60 	vmov.f32	s17, s1
 800110c:	e001      	b.n	8001112 <_strtod_l+0x372>
 800110e:	ed9f 8baa 	vldr	d8, [pc, #680]	; 80013b8 <_strtod_l+0x618>
 8001112:	9a07      	ldr	r2, [sp, #28]
 8001114:	b10a      	cbz	r2, 800111a <_strtod_l+0x37a>
 8001116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800111c:	2b00      	cmp	r3, #0
 800111e:	f43f af0a 	beq.w	8000f36 <_strtod_l+0x196>
 8001122:	ee18 1a90 	vmov	r1, s17
 8001126:	ee18 2a10 	vmov	r2, s16
 800112a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800112e:	ec43 2b18 	vmov	d8, r2, r3
 8001132:	e700      	b.n	8000f36 <_strtod_l+0x196>
 8001134:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001136:	950a      	str	r5, [sp, #40]	; 0x28
 8001138:	eb02 010b 	add.w	r1, r2, fp
 800113c:	9119      	str	r1, [sp, #100]	; 0x64
 800113e:	f812 400b 	ldrb.w	r4, [r2, fp]
 8001142:	469b      	mov	fp, r3
 8001144:	e6d5      	b.n	8000ef2 <_strtod_l+0x152>
 8001146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001148:	1b2c      	subs	r4, r5, r4
 800114a:	441c      	add	r4, r3
 800114c:	2c00      	cmp	r4, #0
 800114e:	f340 831b 	ble.w	8001788 <_strtod_l+0x9e8>
 8001152:	f014 000f 	ands.w	r0, r4, #15
 8001156:	d00a      	beq.n	800116e <_strtod_l+0x3ce>
 8001158:	499d      	ldr	r1, [pc, #628]	; (80013d0 <_strtod_l+0x630>)
 800115a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800115e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001166:	f003 fe65 	bl	8004e34 <__aeabi_dmul>
 800116a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800116e:	f034 030f 	bics.w	r3, r4, #15
 8001172:	f040 8270 	bne.w	8001656 <_strtod_l+0x8b6>
 8001176:	2300      	movs	r3, #0
 8001178:	9308      	str	r3, [sp, #32]
 800117a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800117c:	9600      	str	r6, [sp, #0]
 800117e:	462b      	mov	r3, r5
 8001180:	4639      	mov	r1, r7
 8001182:	4650      	mov	r0, sl
 8001184:	f002 fa48 	bl	8003618 <__s2b>
 8001188:	9011      	str	r0, [sp, #68]	; 0x44
 800118a:	2800      	cmp	r0, #0
 800118c:	f000 836b 	beq.w	8001866 <_strtod_l+0xac6>
 8001190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001192:	ebab 0003 	sub.w	r0, fp, r3
 8001196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001198:	2b00      	cmp	r3, #0
 800119a:	bfb4      	ite	lt
 800119c:	4602      	movlt	r2, r0
 800119e:	2200      	movge	r2, #0
 80011a0:	f04f 0800 	mov.w	r8, #0
 80011a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011a8:	920d      	str	r2, [sp, #52]	; 0x34
 80011aa:	9310      	str	r3, [sp, #64]	; 0x40
 80011ac:	46c3      	mov	fp, r8
 80011ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80011b0:	4650      	mov	r0, sl
 80011b2:	6861      	ldr	r1, [r4, #4]
 80011b4:	f002 f97a 	bl	80034ac <_Balloc>
 80011b8:	4681      	mov	r9, r0
 80011ba:	2800      	cmp	r0, #0
 80011bc:	f000 8147 	beq.w	800144e <_strtod_l+0x6ae>
 80011c0:	6922      	ldr	r2, [r4, #16]
 80011c2:	ed9d 8b04 	vldr	d8, [sp, #16]
 80011c6:	3202      	adds	r2, #2
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	f104 010c 	add.w	r1, r4, #12
 80011ce:	300c      	adds	r0, #12
 80011d0:	f002 f856 	bl	8003280 <memcpy>
 80011d4:	eeb0 0a48 	vmov.f32	s0, s16
 80011d8:	eef0 0a68 	vmov.f32	s1, s17
 80011dc:	aa1c      	add	r2, sp, #112	; 0x70
 80011de:	a91b      	add	r1, sp, #108	; 0x6c
 80011e0:	4650      	mov	r0, sl
 80011e2:	f002 fdc3 	bl	8003d6c <__d2b>
 80011e6:	901a      	str	r0, [sp, #104]	; 0x68
 80011e8:	2800      	cmp	r0, #0
 80011ea:	f000 811d 	beq.w	8001428 <_strtod_l+0x688>
 80011ee:	2101      	movs	r1, #1
 80011f0:	4650      	mov	r0, sl
 80011f2:	f002 fabb 	bl	800376c <__i2b>
 80011f6:	4683      	mov	fp, r0
 80011f8:	2800      	cmp	r0, #0
 80011fa:	f000 8128 	beq.w	800144e <_strtod_l+0x6ae>
 80011fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001200:	2b00      	cmp	r3, #0
 8001202:	f2c0 8117 	blt.w	8001434 <_strtod_l+0x694>
 8001206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001208:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800120a:	189e      	adds	r6, r3, r2
 800120c:	9a08      	ldr	r2, [sp, #32]
 800120e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	4423      	add	r3, r4
 8001214:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <_strtod_l+0x634>)
 8001216:	3b01      	subs	r3, #1
 8001218:	4293      	cmp	r3, r2
 800121a:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 800121e:	f280 80b0 	bge.w	8001382 <_strtod_l+0x5e2>
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	2a1f      	cmp	r2, #31
 8001226:	eba4 0402 	sub.w	r4, r4, r2
 800122a:	f300 811c 	bgt.w	8001466 <_strtod_l+0x6c6>
 800122e:	2301      	movs	r3, #1
 8001230:	4093      	lsls	r3, r2
 8001232:	930a      	str	r3, [sp, #40]	; 0x28
 8001234:	2700      	movs	r7, #0
 8001236:	9b08      	ldr	r3, [sp, #32]
 8001238:	4425      	add	r5, r4
 800123a:	4434      	add	r4, r6
 800123c:	42a6      	cmp	r6, r4
 800123e:	441d      	add	r5, r3
 8001240:	4633      	mov	r3, r6
 8001242:	bfa8      	it	ge
 8001244:	4623      	movge	r3, r4
 8001246:	42ab      	cmp	r3, r5
 8001248:	bfa8      	it	ge
 800124a:	462b      	movge	r3, r5
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd02      	ble.n	8001256 <_strtod_l+0x4b6>
 8001250:	1ae4      	subs	r4, r4, r3
 8001252:	1aed      	subs	r5, r5, r3
 8001254:	1af6      	subs	r6, r6, r3
 8001256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001258:	2b00      	cmp	r3, #0
 800125a:	f300 80c5 	bgt.w	80013e8 <_strtod_l+0x648>
 800125e:	2c00      	cmp	r4, #0
 8001260:	f300 80d9 	bgt.w	8001416 <_strtod_l+0x676>
 8001264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001266:	2b00      	cmp	r3, #0
 8001268:	f300 80e8 	bgt.w	800143c <_strtod_l+0x69c>
 800126c:	2d00      	cmp	r5, #0
 800126e:	f300 80f0 	bgt.w	8001452 <_strtod_l+0x6b2>
 8001272:	2e00      	cmp	r6, #0
 8001274:	dd08      	ble.n	8001288 <_strtod_l+0x4e8>
 8001276:	4659      	mov	r1, fp
 8001278:	4632      	mov	r2, r6
 800127a:	4650      	mov	r0, sl
 800127c:	f002 fbaa 	bl	80039d4 <__lshift>
 8001280:	4683      	mov	fp, r0
 8001282:	2800      	cmp	r0, #0
 8001284:	f000 80e3 	beq.w	800144e <_strtod_l+0x6ae>
 8001288:	991a      	ldr	r1, [sp, #104]	; 0x68
 800128a:	464a      	mov	r2, r9
 800128c:	4650      	mov	r0, sl
 800128e:	f002 fc37 	bl	8003b00 <__mdiff>
 8001292:	4680      	mov	r8, r0
 8001294:	2800      	cmp	r0, #0
 8001296:	f000 80da 	beq.w	800144e <_strtod_l+0x6ae>
 800129a:	2300      	movs	r3, #0
 800129c:	68c2      	ldr	r2, [r0, #12]
 800129e:	60c3      	str	r3, [r0, #12]
 80012a0:	4659      	mov	r1, fp
 80012a2:	920e      	str	r2, [sp, #56]	; 0x38
 80012a4:	f002 fc0a 	bl	8003abc <__mcmp>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	f2c0 8475 	blt.w	8001b98 <_strtod_l+0xdf8>
 80012ae:	f000 83e5 	beq.w	8001a7c <_strtod_l+0xcdc>
 80012b2:	4659      	mov	r1, fp
 80012b4:	4640      	mov	r0, r8
 80012b6:	f002 fdc1 	bl	8003e3c <__ratio>
 80012ba:	ec55 4b10 	vmov	r4, r5, d0
 80012be:	ee10 0a10 	vmov	r0, s0
 80012c2:	2200      	movs	r2, #0
 80012c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c8:	4629      	mov	r1, r5
 80012ca:	f004 f82f 	bl	800532c <__aeabi_dcmple>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d05b      	beq.n	800138a <_strtod_l+0x5ea>
 80012d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80dd 	beq.w	8001494 <_strtod_l+0x6f4>
 80012da:	9b05      	ldr	r3, [sp, #20]
 80012dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <_strtod_l+0x638>)
 80012e0:	4d3d      	ldr	r5, [pc, #244]	; (80013d8 <_strtod_l+0x638>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80012e8:	2400      	movs	r4, #0
 80012ea:	4f3c      	ldr	r7, [pc, #240]	; (80013dc <_strtod_l+0x63c>)
 80012ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80012ee:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <_strtod_l+0x640>)
 80012f0:	ea02 0607 	and.w	r6, r2, r7
 80012f4:	429e      	cmp	r6, r3
 80012f6:	f000 80f8 	beq.w	80014ea <_strtod_l+0x74a>
 80012fa:	9b08      	ldr	r3, [sp, #32]
 80012fc:	b18b      	cbz	r3, 8001322 <_strtod_l+0x582>
 80012fe:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8001302:	d80e      	bhi.n	8001322 <_strtod_l+0x582>
 8001304:	a32e      	add	r3, pc, #184	; (adr r3, 80013c0 <_strtod_l+0x620>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f004 f80d 	bl	800532c <__aeabi_dcmple>
 8001312:	2800      	cmp	r0, #0
 8001314:	f040 8187 	bne.w	8001626 <_strtod_l+0x886>
 8001318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800131a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800131e:	1b9b      	subs	r3, r3, r6
 8001320:	930b      	str	r3, [sp, #44]	; 0x2c
 8001322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001326:	eeb0 0a48 	vmov.f32	s0, s16
 800132a:	eef0 0a68 	vmov.f32	s1, s17
 800132e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001332:	f002 fc8b 	bl	8003c4c <__ulp>
 8001336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	f003 fd79 	bl	8004e34 <__aeabi_dmul>
 8001342:	ec53 2b18 	vmov	r2, r3, d8
 8001346:	f003 fbbf 	bl	8004ac8 <__adddf3>
 800134a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800134e:	910a      	str	r1, [sp, #40]	; 0x28
 8001350:	9b08      	ldr	r3, [sp, #32]
 8001352:	b92b      	cbnz	r3, 8001360 <_strtod_l+0x5c0>
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <_strtod_l+0x63c>)
 8001356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001358:	4013      	ands	r3, r2
 800135a:	429e      	cmp	r6, r3
 800135c:	f000 8104 	beq.w	8001568 <_strtod_l+0x7c8>
 8001360:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001362:	4650      	mov	r0, sl
 8001364:	f002 f8e2 	bl	800352c <_Bfree>
 8001368:	4649      	mov	r1, r9
 800136a:	4650      	mov	r0, sl
 800136c:	f002 f8de 	bl	800352c <_Bfree>
 8001370:	4659      	mov	r1, fp
 8001372:	4650      	mov	r0, sl
 8001374:	f002 f8da 	bl	800352c <_Bfree>
 8001378:	4641      	mov	r1, r8
 800137a:	4650      	mov	r0, sl
 800137c:	f002 f8d6 	bl	800352c <_Bfree>
 8001380:	e715      	b.n	80011ae <_strtod_l+0x40e>
 8001382:	2301      	movs	r3, #1
 8001384:	2700      	movs	r7, #0
 8001386:	930a      	str	r3, [sp, #40]	; 0x28
 8001388:	e755      	b.n	8001236 <_strtod_l+0x496>
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <_strtod_l+0x644>)
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	2200      	movs	r2, #0
 8001392:	f003 fd4f 	bl	8004e34 <__aeabi_dmul>
 8001396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001398:	4604      	mov	r4, r0
 800139a:	460d      	mov	r5, r1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d176      	bne.n	800148e <_strtod_l+0x6ee>
 80013a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80013a4:	9012      	str	r0, [sp, #72]	; 0x48
 80013a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80013a8:	9b05      	ldr	r3, [sp, #20]
 80013aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80013ac:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80013b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80013b4:	e799      	b.n	80012ea <_strtod_l+0x54a>
 80013b6:	bf00      	nop
	...
 80013c0:	ffc00000 	.word	0xffc00000
 80013c4:	41dfffff 	.word	0x41dfffff
 80013c8:	08009c20 	.word	0x08009c20
 80013cc:	08009b34 	.word	0x08009b34
 80013d0:	080097f0 	.word	0x080097f0
 80013d4:	fffffc02 	.word	0xfffffc02
 80013d8:	3ff00000 	.word	0x3ff00000
 80013dc:	7ff00000 	.word	0x7ff00000
 80013e0:	7fe00000 	.word	0x7fe00000
 80013e4:	3fe00000 	.word	0x3fe00000
 80013e8:	4659      	mov	r1, fp
 80013ea:	461a      	mov	r2, r3
 80013ec:	4650      	mov	r0, sl
 80013ee:	f002 fa81 	bl	80038f4 <__pow5mult>
 80013f2:	4683      	mov	fp, r0
 80013f4:	b358      	cbz	r0, 800144e <_strtod_l+0x6ae>
 80013f6:	4601      	mov	r1, r0
 80013f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80013fa:	4650      	mov	r0, sl
 80013fc:	f002 f9cc 	bl	8003798 <__multiply>
 8001400:	b328      	cbz	r0, 800144e <_strtod_l+0x6ae>
 8001402:	900e      	str	r0, [sp, #56]	; 0x38
 8001404:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001406:	4650      	mov	r0, sl
 8001408:	f002 f890 	bl	800352c <_Bfree>
 800140c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800140e:	931a      	str	r3, [sp, #104]	; 0x68
 8001410:	2c00      	cmp	r4, #0
 8001412:	f77f af27 	ble.w	8001264 <_strtod_l+0x4c4>
 8001416:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001418:	4622      	mov	r2, r4
 800141a:	4650      	mov	r0, sl
 800141c:	f002 fada 	bl	80039d4 <__lshift>
 8001420:	901a      	str	r0, [sp, #104]	; 0x68
 8001422:	2800      	cmp	r0, #0
 8001424:	f47f af1e 	bne.w	8001264 <_strtod_l+0x4c4>
 8001428:	2322      	movs	r3, #34	; 0x22
 800142a:	ed9f 8bbf 	vldr	d8, [pc, #764]	; 8001728 <_strtod_l+0x988>
 800142e:	f8ca 3000 	str.w	r3, [sl]
 8001432:	e0c4      	b.n	80015be <_strtod_l+0x81e>
 8001434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001436:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001438:	1ad5      	subs	r5, r2, r3
 800143a:	e6e7      	b.n	800120c <_strtod_l+0x46c>
 800143c:	4649      	mov	r1, r9
 800143e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001440:	4650      	mov	r0, sl
 8001442:	f002 fa57 	bl	80038f4 <__pow5mult>
 8001446:	4681      	mov	r9, r0
 8001448:	2800      	cmp	r0, #0
 800144a:	f47f af0f 	bne.w	800126c <_strtod_l+0x4cc>
 800144e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001450:	e7ea      	b.n	8001428 <_strtod_l+0x688>
 8001452:	4649      	mov	r1, r9
 8001454:	462a      	mov	r2, r5
 8001456:	4650      	mov	r0, sl
 8001458:	f002 fabc 	bl	80039d4 <__lshift>
 800145c:	4681      	mov	r9, r0
 800145e:	2800      	cmp	r0, #0
 8001460:	f47f af07 	bne.w	8001272 <_strtod_l+0x4d2>
 8001464:	e7f3      	b.n	800144e <_strtod_l+0x6ae>
 8001466:	4fb8      	ldr	r7, [pc, #736]	; (8001748 <_strtod_l+0x9a8>)
 8001468:	1aff      	subs	r7, r7, r3
 800146a:	2301      	movs	r3, #1
 800146c:	fa03 f707 	lsl.w	r7, r3, r7
 8001470:	930a      	str	r3, [sp, #40]	; 0x28
 8001472:	e6e0      	b.n	8001236 <_strtod_l+0x496>
 8001474:	2200      	movs	r2, #0
 8001476:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 800147a:	920d      	str	r2, [sp, #52]	; 0x34
 800147c:	e586      	b.n	8000f8c <_strtod_l+0x1ec>
 800147e:	2201      	movs	r2, #1
 8001480:	9208      	str	r2, [sp, #32]
 8001482:	f108 0202 	add.w	r2, r8, #2
 8001486:	9219      	str	r2, [sp, #100]	; 0x64
 8001488:	f898 4002 	ldrb.w	r4, [r8, #2]
 800148c:	e5dc      	b.n	8001048 <_strtod_l+0x2a8>
 800148e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001492:	e789      	b.n	80013a8 <_strtod_l+0x608>
 8001494:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8001498:	2900      	cmp	r1, #0
 800149a:	f040 80b2 	bne.w	8001602 <_strtod_l+0x862>
 800149e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80014a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 80b2 	bne.w	800160e <_strtod_l+0x86e>
 80014aa:	4ba8      	ldr	r3, [pc, #672]	; (800174c <_strtod_l+0x9ac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f003 ff31 	bl	8005318 <__aeabi_dcmplt>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	f040 82a7 	bne.w	8001a0a <_strtod_l+0xc6a>
 80014bc:	4ba4      	ldr	r3, [pc, #656]	; (8001750 <_strtod_l+0x9b0>)
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	2200      	movs	r2, #0
 80014c4:	f003 fcb6 	bl	8004e34 <__aeabi_dmul>
 80014c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80014cc:	4604      	mov	r4, r0
 80014ce:	460d      	mov	r5, r1
 80014d0:	9016      	str	r0, [sp, #88]	; 0x58
 80014d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80014d4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80014d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80014dc:	e705      	b.n	80012ea <_strtod_l+0x54a>
 80014de:	2c65      	cmp	r4, #101	; 0x65
 80014e0:	f04f 0e01 	mov.w	lr, #1
 80014e4:	f43f ada1 	beq.w	800102a <_strtod_l+0x28a>
 80014e8:	e515      	b.n	8000f16 <_strtod_l+0x176>
 80014ea:	f1a2 7354 	sub.w	r3, r2, #55574528	; 0x3500000
 80014ee:	9305      	str	r3, [sp, #20]
 80014f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80014f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80014f8:	eeb0 0a47 	vmov.f32	s0, s14
 80014fc:	eef0 0a67 	vmov.f32	s1, s15
 8001500:	eeb0 9a47 	vmov.f32	s18, s14
 8001504:	eef0 9a67 	vmov.f32	s19, s15
 8001508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800150c:	f002 fb9e 	bl	8003c4c <__ulp>
 8001510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001514:	ec53 2b10 	vmov	r2, r3, d0
 8001518:	f003 fc8c 	bl	8004e34 <__aeabi_dmul>
 800151c:	ec53 2b19 	vmov	r2, r3, d9
 8001520:	f003 fad2 	bl	8004ac8 <__adddf3>
 8001524:	4b8b      	ldr	r3, [pc, #556]	; (8001754 <_strtod_l+0x9b4>)
 8001526:	400f      	ands	r7, r1
 8001528:	429f      	cmp	r7, r3
 800152a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800152e:	d975      	bls.n	800161c <_strtod_l+0x87c>
 8001530:	ee18 2a90 	vmov	r2, s17
 8001534:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8001538:	429a      	cmp	r2, r3
 800153a:	d103      	bne.n	8001544 <_strtod_l+0x7a4>
 800153c:	ee18 3a10 	vmov	r3, s16
 8001540:	3301      	adds	r3, #1
 8001542:	d084      	beq.n	800144e <_strtod_l+0x6ae>
 8001544:	4a84      	ldr	r2, [pc, #528]	; (8001758 <_strtod_l+0x9b8>)
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800154e:	e707      	b.n	8001360 <_strtod_l+0x5c0>
 8001550:	2200      	movs	r2, #0
 8001552:	9208      	str	r2, [sp, #32]
 8001554:	e795      	b.n	8001482 <_strtod_l+0x6e2>
 8001556:	2c65      	cmp	r4, #101	; 0x65
 8001558:	f000 810a 	beq.w	8001770 <_strtod_l+0x9d0>
 800155c:	2c45      	cmp	r4, #69	; 0x45
 800155e:	f000 8107 	beq.w	8001770 <_strtod_l+0x9d0>
 8001562:	f04f 0e01 	mov.w	lr, #1
 8001566:	e5ac      	b.n	80010c2 <_strtod_l+0x322>
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f003 ff82 	bl	8005474 <__aeabi_d2lz>
 8001570:	f003 fc32 	bl	8004dd8 <__aeabi_l2d>
 8001574:	460b      	mov	r3, r1
 8001576:	4602      	mov	r2, r0
 8001578:	4629      	mov	r1, r5
 800157a:	4620      	mov	r0, r4
 800157c:	f003 faa2 	bl	8004ac4 <__aeabi_dsub>
 8001580:	9c04      	ldr	r4, [sp, #16]
 8001582:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001584:	4327      	orrs	r7, r4
 8001586:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001588:	f3c4 0613 	ubfx	r6, r4, #0, #20
 800158c:	ea57 0306 	orrs.w	r3, r7, r6
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	f000 80ac 	beq.w	80016f0 <_strtod_l+0x950>
 8001598:	a365      	add	r3, pc, #404	; (adr r3, 8001730 <_strtod_l+0x990>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f003 febb 	bl	8005318 <__aeabi_dcmplt>
 80015a2:	b948      	cbnz	r0, 80015b8 <_strtod_l+0x818>
 80015a4:	a364      	add	r3, pc, #400	; (adr r3, 8001738 <_strtod_l+0x998>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f003 fed1 	bl	8005354 <__aeabi_dcmpgt>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	f43f aed4 	beq.w	8001360 <_strtod_l+0x5c0>
 80015b8:	ed9d 8b04 	vldr	d8, [sp, #16]
 80015bc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80015be:	4601      	mov	r1, r0
 80015c0:	4650      	mov	r0, sl
 80015c2:	f001 ffb3 	bl	800352c <_Bfree>
 80015c6:	4649      	mov	r1, r9
 80015c8:	4650      	mov	r0, sl
 80015ca:	f001 ffaf 	bl	800352c <_Bfree>
 80015ce:	4659      	mov	r1, fp
 80015d0:	4650      	mov	r0, sl
 80015d2:	f001 ffab 	bl	800352c <_Bfree>
 80015d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80015d8:	4650      	mov	r0, sl
 80015da:	f001 ffa7 	bl	800352c <_Bfree>
 80015de:	4641      	mov	r1, r8
 80015e0:	4650      	mov	r0, sl
 80015e2:	f001 ffa3 	bl	800352c <_Bfree>
 80015e6:	e594      	b.n	8001112 <_strtod_l+0x372>
 80015e8:	2301      	movs	r3, #1
 80015ea:	9309      	str	r3, [sp, #36]	; 0x24
 80015ec:	1c7a      	adds	r2, r7, #1
 80015ee:	9219      	str	r2, [sp, #100]	; 0x64
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f43f ac98 	beq.w	8000f28 <_strtod_l+0x188>
 80015f8:	4617      	mov	r7, r2
 80015fa:	e421      	b.n	8000e40 <_strtod_l+0xa0>
 80015fc:	2300      	movs	r3, #0
 80015fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001600:	e7f4      	b.n	80015ec <_strtod_l+0x84c>
 8001602:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8001606:	2901      	cmp	r1, #1
 8001608:	f000 8186 	beq.w	8001918 <_strtod_l+0xb78>
 800160c:	920f      	str	r2, [sp, #60]	; 0x3c
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <_strtod_l+0x9bc>)
 8001610:	4d4e      	ldr	r5, [pc, #312]	; (800174c <_strtod_l+0x9ac>)
 8001612:	2200      	movs	r2, #0
 8001614:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001618:	2400      	movs	r4, #0
 800161a:	e666      	b.n	80012ea <_strtod_l+0x54a>
 800161c:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
 8001620:	930a      	str	r3, [sp, #40]	; 0x28
 8001622:	9305      	str	r3, [sp, #20]
 8001624:	e694      	b.n	8001350 <_strtod_l+0x5b0>
 8001626:	4629      	mov	r1, r5
 8001628:	4620      	mov	r0, r4
 800162a:	f003 feb3 	bl	8005394 <__aeabi_d2uiz>
 800162e:	2801      	cmp	r0, #1
 8001630:	bf38      	it	cc
 8001632:	2001      	movcc	r0, #1
 8001634:	f003 fb84 	bl	8004d40 <__aeabi_ui2d>
 8001638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8177 	bne.w	8001932 <_strtod_l+0xb92>
 8001644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001648:	9014      	str	r0, [sp, #80]	; 0x50
 800164a:	9315      	str	r3, [sp, #84]	; 0x54
 800164c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8001650:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001654:	e660      	b.n	8001318 <_strtod_l+0x578>
 8001656:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800165a:	f300 8104 	bgt.w	8001866 <_strtod_l+0xac6>
 800165e:	111c      	asrs	r4, r3, #4
 8001660:	2b10      	cmp	r3, #16
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <_strtod_l+0x9c0>)
 8001664:	9308      	str	r3, [sp, #32]
 8001666:	f340 82d7 	ble.w	8001c18 <_strtod_l+0xe78>
 800166a:	4698      	mov	r8, r3
 800166c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001670:	f04f 0c00 	mov.w	ip, #0
 8001674:	46e1      	mov	r9, ip
 8001676:	f014 0f01 	tst.w	r4, #1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	ea4f 0464 	mov.w	r4, r4, asr #1
 8001682:	f109 0901 	add.w	r9, r9, #1
 8001686:	d007      	beq.n	8001698 <_strtod_l+0x8f8>
 8001688:	e9d8 2300 	ldrd	r2, r3, [r8]
 800168c:	f003 fbd2 	bl	8004e34 <__aeabi_dmul>
 8001690:	f04f 0c01 	mov.w	ip, #1
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	2c01      	cmp	r4, #1
 800169a:	f108 0808 	add.w	r8, r8, #8
 800169e:	d1ea      	bne.n	8001676 <_strtod_l+0x8d6>
 80016a0:	f1bc 0f00 	cmp.w	ip, #0
 80016a4:	d001      	beq.n	80016aa <_strtod_l+0x90a>
 80016a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016aa:	9b08      	ldr	r3, [sp, #32]
 80016ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80016b0:	9b05      	ldr	r3, [sp, #20]
 80016b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80016b6:	9305      	str	r3, [sp, #20]
 80016b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80016bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80016c0:	f003 fbb8 	bl	8004e34 <__aeabi_dmul>
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <_strtod_l+0x9c4>)
 80016c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80016ca:	400b      	ands	r3, r1
 80016cc:	460a      	mov	r2, r1
 80016ce:	4926      	ldr	r1, [pc, #152]	; (8001768 <_strtod_l+0x9c8>)
 80016d0:	428b      	cmp	r3, r1
 80016d2:	f200 80c8 	bhi.w	8001866 <_strtod_l+0xac6>
 80016d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80016da:	428b      	cmp	r3, r1
 80016dc:	f240 823b 	bls.w	8001b56 <_strtod_l+0xdb6>
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <_strtod_l+0x9b8>)
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e6:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80016ea:	2300      	movs	r3, #0
 80016ec:	9308      	str	r3, [sp, #32]
 80016ee:	e544      	b.n	800117a <_strtod_l+0x3da>
 80016f0:	a313      	add	r3, pc, #76	; (adr r3, 8001740 <_strtod_l+0x9a0>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f003 fe0f 	bl	8005318 <__aeabi_dcmplt>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	f43f ae30 	beq.w	8001360 <_strtod_l+0x5c0>
 8001700:	e75a      	b.n	80015b8 <_strtod_l+0x818>
 8001702:	3316      	adds	r3, #22
 8001704:	f6ff ad1f 	blt.w	8001146 <_strtod_l+0x3a6>
 8001708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800170a:	ebab 0a03 	sub.w	sl, fp, r3
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <_strtod_l+0x9cc>)
 8001710:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f003 fcb4 	bl	8005088 <__aeabi_ddiv>
 8001720:	ec41 0b18 	vmov	d8, r0, r1
 8001724:	e4f5      	b.n	8001112 <_strtod_l+0x372>
 8001726:	bf00      	nop
 8001728:	00000000 	.word	0x00000000
 800172c:	7ff00000 	.word	0x7ff00000
 8001730:	94a03595 	.word	0x94a03595
 8001734:	3fdfffff 	.word	0x3fdfffff
 8001738:	35afe535 	.word	0x35afe535
 800173c:	3fe00000 	.word	0x3fe00000
 8001740:	94a03595 	.word	0x94a03595
 8001744:	3fcfffff 	.word	0x3fcfffff
 8001748:	fffffbe2 	.word	0xfffffbe2
 800174c:	3ff00000 	.word	0x3ff00000
 8001750:	3fe00000 	.word	0x3fe00000
 8001754:	7c9fffff 	.word	0x7c9fffff
 8001758:	7fefffff 	.word	0x7fefffff
 800175c:	bff00000 	.word	0xbff00000
 8001760:	080098e0 	.word	0x080098e0
 8001764:	7ff00000 	.word	0x7ff00000
 8001768:	7ca00000 	.word	0x7ca00000
 800176c:	080097f0 	.word	0x080097f0
 8001770:	2200      	movs	r2, #0
 8001772:	920a      	str	r2, [sp, #40]	; 0x28
 8001774:	4693      	mov	fp, r2
 8001776:	f04f 0e01 	mov.w	lr, #1
 800177a:	f7ff bbd1 	b.w	8000f20 <_strtod_l+0x180>
 800177e:	2c6e      	cmp	r4, #110	; 0x6e
 8001780:	f43f acb1 	beq.w	80010e6 <_strtod_l+0x346>
 8001784:	f7ff bbd0 	b.w	8000f28 <_strtod_l+0x188>
 8001788:	f43f acf5 	beq.w	8001176 <_strtod_l+0x3d6>
 800178c:	4264      	negs	r4, r4
 800178e:	f014 020f 	ands.w	r2, r4, #15
 8001792:	d00a      	beq.n	80017aa <_strtod_l+0xa0a>
 8001794:	4bb2      	ldr	r3, [pc, #712]	; (8001a60 <_strtod_l+0xcc0>)
 8001796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800179a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f003 fc71 	bl	8005088 <__aeabi_ddiv>
 80017a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80017aa:	1124      	asrs	r4, r4, #4
 80017ac:	f43f ace3 	beq.w	8001176 <_strtod_l+0x3d6>
 80017b0:	2c1f      	cmp	r4, #31
 80017b2:	dc3e      	bgt.n	8001832 <_strtod_l+0xa92>
 80017b4:	f014 0310 	ands.w	r3, r4, #16
 80017b8:	bf18      	it	ne
 80017ba:	236a      	movne	r3, #106	; 0x6a
 80017bc:	9308      	str	r3, [sp, #32]
 80017be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80017c2:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8001a78 <_strtod_l+0xcd8>
 80017c6:	f04f 0c00 	mov.w	ip, #0
 80017ca:	f014 0f01 	tst.w	r4, #1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	d007      	beq.n	80017e4 <_strtod_l+0xa44>
 80017d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80017d8:	f003 fb2c 	bl	8004e34 <__aeabi_dmul>
 80017dc:	f04f 0c01 	mov.w	ip, #1
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	1064      	asrs	r4, r4, #1
 80017e6:	f108 0808 	add.w	r8, r8, #8
 80017ea:	d1ee      	bne.n	80017ca <_strtod_l+0xa2a>
 80017ec:	f1bc 0f00 	cmp.w	ip, #0
 80017f0:	d001      	beq.n	80017f6 <_strtod_l+0xa56>
 80017f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017f6:	9b08      	ldr	r3, [sp, #32]
 80017f8:	b193      	cbz	r3, 8001820 <_strtod_l+0xa80>
 80017fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80017fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8001802:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8001806:	2b00      	cmp	r3, #0
 8001808:	dd0a      	ble.n	8001820 <_strtod_l+0xa80>
 800180a:	2b1f      	cmp	r3, #31
 800180c:	f340 8230 	ble.w	8001c70 <_strtod_l+0xed0>
 8001810:	2000      	movs	r0, #0
 8001812:	2b34      	cmp	r3, #52	; 0x34
 8001814:	9004      	str	r0, [sp, #16]
 8001816:	f340 8236 	ble.w	8001c86 <_strtod_l+0xee6>
 800181a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800181e:	9305      	str	r3, [sp, #20]
 8001820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001824:	2200      	movs	r2, #0
 8001826:	2300      	movs	r3, #0
 8001828:	f003 fd6c 	bl	8005304 <__aeabi_dcmpeq>
 800182c:	2800      	cmp	r0, #0
 800182e:	f43f aca4 	beq.w	800117a <_strtod_l+0x3da>
 8001832:	2322      	movs	r3, #34	; 0x22
 8001834:	ed9f 8b84 	vldr	d8, [pc, #528]	; 8001a48 <_strtod_l+0xca8>
 8001838:	f8ca 3000 	str.w	r3, [sl]
 800183c:	e469      	b.n	8001112 <_strtod_l+0x372>
 800183e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001844:	f203 4233 	addw	r2, r3, #1075	; 0x433
 8001848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800184a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800184e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001852:	9305      	str	r3, [sp, #20]
 8001854:	0729      	lsls	r1, r5, #28
 8001856:	bf42      	ittt	mi
 8001858:	9b05      	ldrmi	r3, [sp, #20]
 800185a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800185e:	9305      	strmi	r3, [sp, #20]
 8001860:	ed9d 8b04 	vldr	d8, [sp, #16]
 8001864:	e455      	b.n	8001112 <_strtod_l+0x372>
 8001866:	2322      	movs	r3, #34	; 0x22
 8001868:	ed9f 8b79 	vldr	d8, [pc, #484]	; 8001a50 <_strtod_l+0xcb0>
 800186c:	f8ca 3000 	str.w	r3, [sl]
 8001870:	e44f      	b.n	8001112 <_strtod_l+0x372>
 8001872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	ab1a      	add	r3, sp, #104	; 0x68
 8001878:	9402      	str	r4, [sp, #8]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4a79      	ldr	r2, [pc, #484]	; (8001a64 <_strtod_l+0xcc4>)
 800187e:	ab1b      	add	r3, sp, #108	; 0x6c
 8001880:	a919      	add	r1, sp, #100	; 0x64
 8001882:	4650      	mov	r0, sl
 8001884:	f001 f81a 	bl	80028bc <__gethex>
 8001888:	f010 0407 	ands.w	r4, r0, #7
 800188c:	4605      	mov	r5, r0
 800188e:	f43f ac3e 	beq.w	800110e <_strtod_l+0x36e>
 8001892:	2c06      	cmp	r4, #6
 8001894:	d173      	bne.n	800197e <_strtod_l+0xbde>
 8001896:	9b07      	ldr	r3, [sp, #28]
 8001898:	ed9f 8b6b 	vldr	d8, [pc, #428]	; 8001a48 <_strtod_l+0xca8>
 800189c:	3701      	adds	r7, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f43f ab49 	beq.w	8000f36 <_strtod_l+0x196>
 80018a4:	601f      	str	r7, [r3, #0]
 80018a6:	f7ff bb46 	b.w	8000f36 <_strtod_l+0x196>
 80018aa:	1c6a      	adds	r2, r5, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80018b0:	449b      	add	fp, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	d015      	beq.n	80018e2 <_strtod_l+0xb42>
 80018b6:	442b      	add	r3, r5
 80018b8:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80018bc:	e003      	b.n	80018c6 <_strtod_l+0xb26>
 80018be:	0046      	lsls	r6, r0, #1
 80018c0:	4594      	cmp	ip, r2
 80018c2:	d00d      	beq.n	80018e0 <_strtod_l+0xb40>
 80018c4:	3201      	adds	r2, #1
 80018c6:	462b      	mov	r3, r5
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	4615      	mov	r5, r2
 80018cc:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 80018d0:	d9f5      	bls.n	80018be <_strtod_l+0xb1e>
 80018d2:	2a10      	cmp	r2, #16
 80018d4:	bfdc      	itt	le
 80018d6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
 80018da:	ea4f 0949 	movle.w	r9, r9, lsl #1
 80018de:	e7ef      	b.n	80018c0 <_strtod_l+0xb20>
 80018e0:	1c98      	adds	r0, r3, #2
 80018e2:	2d08      	cmp	r5, #8
 80018e4:	dc3e      	bgt.n	8001964 <_strtod_l+0xbc4>
 80018e6:	4605      	mov	r5, r0
 80018e8:	f7ff bafb 	b.w	8000ee2 <_strtod_l+0x142>
 80018ec:	9908      	ldr	r1, [sp, #32]
 80018ee:	465a      	mov	r2, fp
 80018f0:	4638      	mov	r0, r7
 80018f2:	f002 fff1 	bl	80048d8 <strncmp>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d06b      	beq.n	80019d2 <_strtod_l+0xc32>
 80018fa:	2300      	movs	r3, #0
 80018fc:	461d      	mov	r5, r3
 80018fe:	930a      	str	r3, [sp, #40]	; 0x28
 8001900:	4699      	mov	r9, r3
 8001902:	461e      	mov	r6, r3
 8001904:	f7ff bb3c 	b.w	8000f80 <_strtod_l+0x1e0>
 8001908:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800190c:	4290      	cmp	r0, r2
 800190e:	bfa8      	it	ge
 8001910:	4610      	movge	r0, r2
 8001912:	900d      	str	r0, [sp, #52]	; 0x34
 8001914:	f7ff bbcb 	b.w	80010ae <_strtod_l+0x30e>
 8001918:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800191c:	920f      	str	r2, [sp, #60]	; 0x3c
 800191e:	2a00      	cmp	r2, #0
 8001920:	f47f ae75 	bne.w	800160e <_strtod_l+0x86e>
 8001924:	2322      	movs	r3, #34	; 0x22
 8001926:	ed9f 8b48 	vldr	d8, [pc, #288]	; 8001a48 <_strtod_l+0xca8>
 800192a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800192c:	f8ca 3000 	str.w	r3, [sl]
 8001930:	e645      	b.n	80015be <_strtod_l+0x81e>
 8001932:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8001936:	e689      	b.n	800164c <_strtod_l+0x8ac>
 8001938:	494b      	ldr	r1, [pc, #300]	; (8001a68 <_strtod_l+0xcc8>)
 800193a:	a819      	add	r0, sp, #100	; 0x64
 800193c:	f001 faaa 	bl	8002e94 <__match>
 8001940:	2800      	cmp	r0, #0
 8001942:	f43f aaf1 	beq.w	8000f28 <_strtod_l+0x188>
 8001946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001948:	4948      	ldr	r1, [pc, #288]	; (8001a6c <_strtod_l+0xccc>)
 800194a:	3b01      	subs	r3, #1
 800194c:	a819      	add	r0, sp, #100	; 0x64
 800194e:	9319      	str	r3, [sp, #100]	; 0x64
 8001950:	f001 faa0 	bl	8002e94 <__match>
 8001954:	b910      	cbnz	r0, 800195c <_strtod_l+0xbbc>
 8001956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001958:	3301      	adds	r3, #1
 800195a:	9319      	str	r3, [sp, #100]	; 0x64
 800195c:	ed9f 8b3c 	vldr	d8, [pc, #240]	; 8001a50 <_strtod_l+0xcb0>
 8001960:	f7ff bbd7 	b.w	8001112 <_strtod_l+0x372>
 8001964:	2810      	cmp	r0, #16
 8001966:	bfdc      	itt	le
 8001968:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
 800196c:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
 8001970:	4605      	mov	r5, r0
 8001972:	2300      	movs	r3, #0
 8001974:	f7ff baba 	b.w	8000eec <_strtod_l+0x14c>
 8001978:	2300      	movs	r3, #0
 800197a:	f7ff baa4 	b.w	8000ec6 <_strtod_l+0x126>
 800197e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001980:	b13a      	cbz	r2, 8001992 <_strtod_l+0xbf2>
 8001982:	2135      	movs	r1, #53	; 0x35
 8001984:	a81c      	add	r0, sp, #112	; 0x70
 8001986:	f002 faa7 	bl	8003ed8 <__copybits>
 800198a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800198c:	4650      	mov	r0, sl
 800198e:	f001 fdcd 	bl	800352c <_Bfree>
 8001992:	3c01      	subs	r4, #1
 8001994:	2c04      	cmp	r4, #4
 8001996:	f63f af5d 	bhi.w	8001854 <_strtod_l+0xab4>
 800199a:	a301      	add	r3, pc, #4	; (adr r3, 80019a0 <_strtod_l+0xc00>)
 800199c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80019a0:	0800183f 	.word	0x0800183f
 80019a4:	080019c9 	.word	0x080019c9
 80019a8:	080019c3 	.word	0x080019c3
 80019ac:	080019b5 	.word	0x080019b5
 80019b0:	0800183f 	.word	0x0800183f
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80019bc:	e9cd 3004 	strd	r3, r0, [sp, #16]
 80019c0:	e748      	b.n	8001854 <_strtod_l+0xab4>
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <_strtod_l+0xcd0>)
 80019c4:	9305      	str	r3, [sp, #20]
 80019c6:	e745      	b.n	8001854 <_strtod_l+0xab4>
 80019c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80019ca:	9304      	str	r3, [sp, #16]
 80019cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019ce:	9305      	str	r3, [sp, #20]
 80019d0:	e740      	b.n	8001854 <_strtod_l+0xab4>
 80019d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80019d4:	4613      	mov	r3, r2
 80019d6:	445a      	add	r2, fp
 80019d8:	9219      	str	r2, [sp, #100]	; 0x64
 80019da:	f813 400b 	ldrb.w	r4, [r3, fp]
 80019de:	4606      	mov	r6, r0
 80019e0:	4681      	mov	r9, r0
 80019e2:	f7ff ba65 	b.w	8000eb0 <_strtod_l+0x110>
 80019e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019e8:	491d      	ldr	r1, [pc, #116]	; (8001a60 <_strtod_l+0xcc0>)
 80019ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80019ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f6:	f003 fa1d 	bl	8004e34 <__aeabi_dmul>
 80019fa:	ec41 0b18 	vmov	d8, r0, r1
 80019fe:	f7ff bb88 	b.w	8001112 <_strtod_l+0x372>
 8001a02:	950a      	str	r5, [sp, #40]	; 0x28
 8001a04:	4683      	mov	fp, r0
 8001a06:	f7ff ba74 	b.w	8000ef2 <_strtod_l+0x152>
 8001a0a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001a58 <_strtod_l+0xcb8>
 8001a0e:	4d19      	ldr	r5, [pc, #100]	; (8001a74 <_strtod_l+0xcd4>)
 8001a10:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001a14:	2400      	movs	r4, #0
 8001a16:	e55d      	b.n	80014d4 <_strtod_l+0x734>
 8001a18:	4c11      	ldr	r4, [pc, #68]	; (8001a60 <_strtod_l+0xcc0>)
 8001a1a:	f1c5 050f 	rsb	r5, r5, #15
 8001a1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8001a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a2a:	f003 fa03 	bl	8004e34 <__aeabi_dmul>
 8001a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a30:	1b5d      	subs	r5, r3, r5
 8001a32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001a36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a3a:	f003 f9fb 	bl	8004e34 <__aeabi_dmul>
 8001a3e:	ec41 0b18 	vmov	d8, r0, r1
 8001a42:	f7ff bb66 	b.w	8001112 <_strtod_l+0x372>
 8001a46:	bf00      	nop
	...
 8001a54:	7ff00000 	.word	0x7ff00000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	bfe00000 	.word	0xbfe00000
 8001a60:	080097f0 	.word	0x080097f0
 8001a64:	08009620 	.word	0x08009620
 8001a68:	08009c14 	.word	0x08009c14
 8001a6c:	08009c18 	.word	0x08009c18
 8001a70:	7ff00000 	.word	0x7ff00000
 8001a74:	3fe00000 	.word	0x3fe00000
 8001a78:	08009648 	.word	0x08009648
 8001a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d070      	beq.n	8001b64 <_strtod_l+0xdc4>
 8001a82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8001a86:	4b95      	ldr	r3, [pc, #596]	; (8001cdc <_strtod_l+0xf3c>)
 8001a88:	f3c5 0113 	ubfx	r1, r5, #0, #20
 8001a8c:	4299      	cmp	r1, r3
 8001a8e:	462a      	mov	r2, r5
 8001a90:	d03f      	beq.n	8001b12 <_strtod_l+0xd72>
 8001a92:	2f00      	cmp	r7, #0
 8001a94:	f000 80b8 	beq.w	8001c08 <_strtod_l+0xe68>
 8001a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a9c:	421f      	tst	r7, r3
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	d023      	beq.n	8001aea <_strtod_l+0xd4a>
 8001aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8001aa6:	eef0 0a68 	vmov.f32	s1, s17
 8001aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80b6 	beq.w	8001c1e <_strtod_l+0xe7e>
 8001ab2:	f002 f8cb 	bl	8003c4c <__ulp>
 8001ab6:	9b08      	ldr	r3, [sp, #32]
 8001ab8:	ec51 0b10 	vmov	r0, r1, d0
 8001abc:	b16b      	cbz	r3, 8001ada <_strtod_l+0xd3a>
 8001abe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8001ac2:	f1c4 046b 	rsb	r4, r4, #107	; 0x6b
 8001ac6:	2c00      	cmp	r4, #0
 8001ac8:	dd07      	ble.n	8001ada <_strtod_l+0xd3a>
 8001aca:	0524      	lsls	r4, r4, #20
 8001acc:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
 8001ad6:	f003 f9ad 	bl	8004e34 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec51 0b18 	vmov	r0, r1, d8
 8001ae2:	f002 fff1 	bl	8004ac8 <__adddf3>
 8001ae6:	ec41 0b18 	vmov	d8, r0, r1
 8001aea:	9b08      	ldr	r3, [sp, #32]
 8001aec:	b17b      	cbz	r3, 8001b0e <_strtod_l+0xd6e>
 8001aee:	ec51 0b18 	vmov	r0, r1, d8
 8001af2:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <_strtod_l+0xf40>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f003 f99d 	bl	8004e34 <__aeabi_dmul>
 8001afa:	ec41 0b18 	vmov	d8, r0, r1
 8001afe:	ee18 2a90 	vmov	r2, s17
 8001b02:	4603      	mov	r3, r0
 8001b04:	4313      	orrs	r3, r2
 8001b06:	bf04      	itt	eq
 8001b08:	2322      	moveq	r3, #34	; 0x22
 8001b0a:	f8ca 3000 	streq.w	r3, [sl]
 8001b0e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001b10:	e555      	b.n	80015be <_strtod_l+0x81e>
 8001b12:	9b08      	ldr	r3, [sp, #32]
 8001b14:	9904      	ldr	r1, [sp, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80b2 	beq.w	8001c80 <_strtod_l+0xee0>
 8001b1c:	4b71      	ldr	r3, [pc, #452]	; (8001ce4 <_strtod_l+0xf44>)
 8001b1e:	402b      	ands	r3, r5
 8001b20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8001b24:	f200 80ac 	bhi.w	8001c80 <_strtod_l+0xee0>
 8001b28:	0d1b      	lsrs	r3, r3, #20
 8001b2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b32:	fa00 f303 	lsl.w	r3, r0, r3
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d1ab      	bne.n	8001a92 <_strtod_l+0xcf2>
 8001b3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <_strtod_l+0xf48>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f000 80c7 	beq.w	8001cd0 <_strtod_l+0xf30>
 8001b42:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <_strtod_l+0xf44>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001b4a:	9305      	str	r3, [sp, #20]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	ed9d 8b04 	vldr	d8, [sp, #16]
 8001b54:	e7c9      	b.n	8001aea <_strtod_l+0xd4a>
 8001b56:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
 8001b5a:	9305      	str	r3, [sp, #20]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9308      	str	r3, [sp, #32]
 8001b60:	f7ff bb0b 	b.w	800117a <_strtod_l+0x3da>
 8001b64:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8001b68:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	d18f      	bne.n	8001a92 <_strtod_l+0xcf2>
 8001b72:	9b08      	ldr	r3, [sp, #32]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 80a0 	bne.w	8001cba <_strtod_l+0xf1a>
 8001b7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ce4 <_strtod_l+0xf44>)
 8001b7c:	4023      	ands	r3, r4
 8001b7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8001b82:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001b86:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001b8a:	9305      	str	r3, [sp, #20]
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b90:	9304      	str	r3, [sp, #16]
 8001b92:	ed9d 8b04 	vldr	d8, [sp, #16]
 8001b96:	e7a8      	b.n	8001aea <_strtod_l+0xd4a>
 8001b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	d1a3      	bne.n	8001aea <_strtod_l+0xd4a>
 8001ba2:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d19e      	bne.n	8001aea <_strtod_l+0xd4a>
 8001bac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001bb0:	0d1b      	lsrs	r3, r3, #20
 8001bb2:	051b      	lsls	r3, r3, #20
 8001bb4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8001bb8:	d997      	bls.n	8001aea <_strtod_l+0xd4a>
 8001bba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001bbe:	b91b      	cbnz	r3, 8001bc8 <_strtod_l+0xe28>
 8001bc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	dd90      	ble.n	8001aea <_strtod_l+0xd4a>
 8001bc8:	4641      	mov	r1, r8
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4650      	mov	r0, sl
 8001bce:	f001 ff01 	bl	80039d4 <__lshift>
 8001bd2:	4659      	mov	r1, fp
 8001bd4:	4680      	mov	r8, r0
 8001bd6:	f001 ff71 	bl	8003abc <__mcmp>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	dd85      	ble.n	8001aea <_strtod_l+0xd4a>
 8001bde:	e7c8      	b.n	8001b72 <_strtod_l+0xdd2>
 8001be0:	4942      	ldr	r1, [pc, #264]	; (8001cec <_strtod_l+0xf4c>)
 8001be2:	a819      	add	r0, sp, #100	; 0x64
 8001be4:	aa1c      	add	r2, sp, #112	; 0x70
 8001be6:	f001 f971 	bl	8002ecc <__hexnan>
 8001bea:	2805      	cmp	r0, #5
 8001bec:	f47f aa87 	bne.w	80010fe <_strtod_l+0x35e>
 8001bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001bf2:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8001bf6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8001bfa:	9305      	str	r3, [sp, #20]
 8001bfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001bfe:	9304      	str	r3, [sp, #16]
 8001c00:	ed9d 8b04 	vldr	d8, [sp, #16]
 8001c04:	f7ff ba85 	b.w	8001112 <_strtod_l+0x372>
 8001c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c0e:	4203      	tst	r3, r0
 8001c10:	f43f af6b 	beq.w	8001aea <_strtod_l+0xd4a>
 8001c14:	460c      	mov	r4, r1
 8001c16:	e744      	b.n	8001aa2 <_strtod_l+0xd02>
 8001c18:	f04f 0900 	mov.w	r9, #0
 8001c1c:	e545      	b.n	80016aa <_strtod_l+0x90a>
 8001c1e:	f002 f815 	bl	8003c4c <__ulp>
 8001c22:	9908      	ldr	r1, [sp, #32]
 8001c24:	ec53 2b10 	vmov	r2, r3, d0
 8001c28:	b3b9      	cbz	r1, 8001c9a <_strtod_l+0xefa>
 8001c2a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8001c2e:	f1c4 046b 	rsb	r4, r4, #107	; 0x6b
 8001c32:	2c00      	cmp	r4, #0
 8001c34:	dd0c      	ble.n	8001c50 <_strtod_l+0xeb0>
 8001c36:	0524      	lsls	r4, r4, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
 8001c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c40:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
 8001c44:	ee10 0a10 	vmov	r0, s0
 8001c48:	f003 f8f4 	bl	8004e34 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	ec51 0b18 	vmov	r0, r1, d8
 8001c54:	f002 ff36 	bl	8004ac4 <__aeabi_dsub>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b18 	vmov	d8, r2, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	2300      	movs	r3, #0
 8001c64:	f003 fb4e 	bl	8005304 <__aeabi_dcmpeq>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f43f af40 	beq.w	8001aee <_strtod_l+0xd4e>
 8001c6e:	e659      	b.n	8001924 <_strtod_l+0xb84>
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	9a04      	ldr	r2, [sp, #16]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	9204      	str	r2, [sp, #16]
 8001c7e:	e5cf      	b.n	8001820 <_strtod_l+0xa80>
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c84:	e757      	b.n	8001b36 <_strtod_l+0xd96>
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
 8001c8e:	fa03 f202 	lsl.w	r2, r3, r2
 8001c92:	ea02 0301 	and.w	r3, r2, r1
 8001c96:	9305      	str	r3, [sp, #20]
 8001c98:	e5c2      	b.n	8001820 <_strtod_l+0xa80>
 8001c9a:	ec51 0b18 	vmov	r0, r1, d8
 8001c9e:	f002 ff11 	bl	8004ac4 <__aeabi_dsub>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	ec43 2b18 	vmov	d8, r2, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	f003 fb29 	bl	8005304 <__aeabi_dcmpeq>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	f43f af2b 	beq.w	8001b0e <_strtod_l+0xd6e>
 8001cb8:	e634      	b.n	8001924 <_strtod_l+0xb84>
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <_strtod_l+0xf44>)
 8001cbc:	4023      	ands	r3, r4
 8001cbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8001cc2:	f73f af5c 	bgt.w	8001b7e <_strtod_l+0xdde>
 8001cc6:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8001cca:	f73f af10 	bgt.w	8001aee <_strtod_l+0xd4e>
 8001cce:	e629      	b.n	8001924 <_strtod_l+0xb84>
 8001cd0:	3101      	adds	r1, #1
 8001cd2:	f47f af36 	bne.w	8001b42 <_strtod_l+0xda2>
 8001cd6:	f7ff bbba 	b.w	800144e <_strtod_l+0x6ae>
 8001cda:	bf00      	nop
 8001cdc:	000fffff 	.word	0x000fffff
 8001ce0:	39500000 	.word	0x39500000
 8001ce4:	7ff00000 	.word	0x7ff00000
 8001ce8:	7fefffff 	.word	0x7fefffff
 8001cec:	08009634 	.word	0x08009634

08001cf0 <_strtod_r>:
 8001cf0:	4b01      	ldr	r3, [pc, #4]	; (8001cf8 <_strtod_r+0x8>)
 8001cf2:	f7ff b855 	b.w	8000da0 <_strtod_l>
 8001cf6:	bf00      	nop
 8001cf8:	20000068 	.word	0x20000068

08001cfc <strtod_l>:
 8001cfc:	b410      	push	{r4}
 8001cfe:	4c05      	ldr	r4, [pc, #20]	; (8001d14 <strtod_l+0x18>)
 8001d00:	4684      	mov	ip, r0
 8001d02:	4613      	mov	r3, r2
 8001d04:	6820      	ldr	r0, [r4, #0]
 8001d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	4661      	mov	r1, ip
 8001d0e:	f7ff b847 	b.w	8000da0 <_strtod_l>
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <strtod>:
 8001d18:	b410      	push	{r4}
 8001d1a:	4c05      	ldr	r4, [pc, #20]	; (8001d30 <strtod+0x18>)
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <strtod+0x1c>)
 8001d1e:	4684      	mov	ip, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	6820      	ldr	r0, [r4, #0]
 8001d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d28:	4661      	mov	r1, ip
 8001d2a:	f7ff b839 	b.w	8000da0 <_strtod_l>
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000068 	.word	0x20000068

08001d38 <strtof_l>:
 8001d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001de8 <strtof_l+0xb0>
 8001d40:	4604      	mov	r4, r0
 8001d42:	4613      	mov	r3, r2
 8001d44:	ed2d 8b02 	vpush	{d8}
 8001d48:	460a      	mov	r2, r1
 8001d4a:	f8d8 0000 	ldr.w	r0, [r8]
 8001d4e:	4621      	mov	r1, r4
 8001d50:	f7ff f826 	bl	8000da0 <_strtod_l>
 8001d54:	ec55 4b10 	vmov	r4, r5, d0
 8001d58:	ee10 2a10 	vmov	r2, s0
 8001d5c:	ee10 0a10 	vmov	r0, s0
 8001d60:	462b      	mov	r3, r5
 8001d62:	4629      	mov	r1, r5
 8001d64:	f003 fb00 	bl	8005368 <__aeabi_dcmpun>
 8001d68:	bb50      	cbnz	r0, 8001dc0 <strtof_l+0x88>
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f003 fb31 	bl	80053d4 <__aeabi_d2f>
 8001d72:	ee08 0a10 	vmov	s16, r0
 8001d76:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001ddc <strtof_l+0xa4>
 8001d7a:	eeb0 7ac8 	vabs.f32	s14, s16
 8001d7e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	dd15      	ble.n	8001db4 <strtof_l+0x7c>
 8001d88:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <strtof_l+0xa8>)
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d92:	4620      	mov	r0, r4
 8001d94:	4639      	mov	r1, r7
 8001d96:	f003 fae7 	bl	8005368 <__aeabi_dcmpun>
 8001d9a:	b938      	cbnz	r0, 8001dac <strtof_l+0x74>
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <strtof_l+0xa8>)
 8001d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da2:	4620      	mov	r0, r4
 8001da4:	4639      	mov	r1, r7
 8001da6:	f003 fac1 	bl	800532c <__aeabi_dcmple>
 8001daa:	b118      	cbz	r0, 8001db4 <strtof_l+0x7c>
 8001dac:	f8d8 3000 	ldr.w	r3, [r8]
 8001db0:	2222      	movs	r2, #34	; 0x22
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	eeb0 0a48 	vmov.f32	s0, s16
 8001db8:	ecbd 8b02 	vpop	{d8}
 8001dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <strtof_l+0xac>)
 8001dc4:	da04      	bge.n	8001dd0 <strtof_l+0x98>
 8001dc6:	f002 fbed 	bl	80045a4 <nanf>
 8001dca:	eeb1 8a40 	vneg.f32	s16, s0
 8001dce:	e7f1      	b.n	8001db4 <strtof_l+0x7c>
 8001dd0:	ecbd 8b02 	vpop	{d8}
 8001dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd8:	f002 bbe4 	b.w	80045a4 <nanf>
 8001ddc:	7f7fffff 	.word	0x7f7fffff
 8001de0:	7fefffff 	.word	0x7fefffff
 8001de4:	08009b34 	.word	0x08009b34
 8001de8:	20000000 	.word	0x20000000

08001dec <strtof>:
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001ea0 <strtof+0xb4>
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <strtof+0xa4>)
 8001df6:	4604      	mov	r4, r0
 8001df8:	460a      	mov	r2, r1
 8001dfa:	ed2d 8b02 	vpush	{d8}
 8001dfe:	4621      	mov	r1, r4
 8001e00:	f8d8 0000 	ldr.w	r0, [r8]
 8001e04:	f7fe ffcc 	bl	8000da0 <_strtod_l>
 8001e08:	ec55 4b10 	vmov	r4, r5, d0
 8001e0c:	ee10 2a10 	vmov	r2, s0
 8001e10:	ee10 0a10 	vmov	r0, s0
 8001e14:	462b      	mov	r3, r5
 8001e16:	4629      	mov	r1, r5
 8001e18:	f003 faa6 	bl	8005368 <__aeabi_dcmpun>
 8001e1c:	bb50      	cbnz	r0, 8001e74 <strtof+0x88>
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f003 fad7 	bl	80053d4 <__aeabi_d2f>
 8001e26:	ee08 0a10 	vmov	s16, r0
 8001e2a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8001e94 <strtof+0xa8>
 8001e2e:	eeb0 7ac8 	vabs.f32	s14, s16
 8001e32:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	dd15      	ble.n	8001e68 <strtof+0x7c>
 8001e3c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <strtof+0xac>)
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e46:	4620      	mov	r0, r4
 8001e48:	4639      	mov	r1, r7
 8001e4a:	f003 fa8d 	bl	8005368 <__aeabi_dcmpun>
 8001e4e:	b938      	cbnz	r0, 8001e60 <strtof+0x74>
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <strtof+0xac>)
 8001e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e56:	4620      	mov	r0, r4
 8001e58:	4639      	mov	r1, r7
 8001e5a:	f003 fa67 	bl	800532c <__aeabi_dcmple>
 8001e5e:	b118      	cbz	r0, 8001e68 <strtof+0x7c>
 8001e60:	f8d8 3000 	ldr.w	r3, [r8]
 8001e64:	2222      	movs	r2, #34	; 0x22
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	eeb0 0a48 	vmov.f32	s0, s16
 8001e6c:	ecbd 8b02 	vpop	{d8}
 8001e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <strtof+0xb0>)
 8001e78:	da04      	bge.n	8001e84 <strtof+0x98>
 8001e7a:	f002 fb93 	bl	80045a4 <nanf>
 8001e7e:	eeb1 8a40 	vneg.f32	s16, s0
 8001e82:	e7f1      	b.n	8001e68 <strtof+0x7c>
 8001e84:	ecbd 8b02 	vpop	{d8}
 8001e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8c:	f002 bb8a 	b.w	80045a4 <nanf>
 8001e90:	20000068 	.word	0x20000068
 8001e94:	7f7fffff 	.word	0x7f7fffff
 8001e98:	7fefffff 	.word	0x7fefffff
 8001e9c:	08009b34 	.word	0x08009b34
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <__swbuf_r>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	4606      	mov	r6, r0
 8001eac:	b108      	cbz	r0, 8001eb2 <__swbuf_r+0xe>
 8001eae:	6983      	ldr	r3, [r0, #24]
 8001eb0:	b343      	cbz	r3, 8001f04 <__swbuf_r+0x60>
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <__swbuf_r+0xa4>)
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	d02a      	beq.n	8001f0e <__swbuf_r+0x6a>
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <__swbuf_r+0xa8>)
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	d029      	beq.n	8001f12 <__swbuf_r+0x6e>
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <__swbuf_r+0xac>)
 8001ec0:	429c      	cmp	r4, r3
 8001ec2:	bf08      	it	eq
 8001ec4:	68f4      	ldreq	r4, [r6, #12]
 8001ec6:	89a3      	ldrh	r3, [r4, #12]
 8001ec8:	69a2      	ldr	r2, [r4, #24]
 8001eca:	60a2      	str	r2, [r4, #8]
 8001ecc:	071a      	lsls	r2, r3, #28
 8001ece:	d522      	bpl.n	8001f16 <__swbuf_r+0x72>
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	b303      	cbz	r3, 8001f16 <__swbuf_r+0x72>
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	6961      	ldr	r1, [r4, #20]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	b2ed      	uxtb	r5, r5
 8001edc:	4299      	cmp	r1, r3
 8001ede:	462f      	mov	r7, r5
 8001ee0:	dd29      	ble.n	8001f36 <__swbuf_r+0x92>
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	68a1      	ldr	r1, [r4, #8]
 8001ee6:	3901      	subs	r1, #1
 8001ee8:	60a1      	str	r1, [r4, #8]
 8001eea:	1c51      	adds	r1, r2, #1
 8001eec:	6021      	str	r1, [r4, #0]
 8001eee:	7015      	strb	r5, [r2, #0]
 8001ef0:	6962      	ldr	r2, [r4, #20]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d016      	beq.n	8001f24 <__swbuf_r+0x80>
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	07db      	lsls	r3, r3, #31
 8001efa:	d501      	bpl.n	8001f00 <__swbuf_r+0x5c>
 8001efc:	2d0a      	cmp	r5, #10
 8001efe:	d011      	beq.n	8001f24 <__swbuf_r+0x80>
 8001f00:	4638      	mov	r0, r7
 8001f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f04:	f000 faac 	bl	8002460 <__sinit>
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <__swbuf_r+0xa4>)
 8001f0a:	429c      	cmp	r4, r3
 8001f0c:	d1d4      	bne.n	8001eb8 <__swbuf_r+0x14>
 8001f0e:	6874      	ldr	r4, [r6, #4]
 8001f10:	e7d9      	b.n	8001ec6 <__swbuf_r+0x22>
 8001f12:	68b4      	ldr	r4, [r6, #8]
 8001f14:	e7d7      	b.n	8001ec6 <__swbuf_r+0x22>
 8001f16:	4621      	mov	r1, r4
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f000 f827 	bl	8001f6c <__swsetup_r>
 8001f1e:	b938      	cbnz	r0, 8001f30 <__swbuf_r+0x8c>
 8001f20:	6923      	ldr	r3, [r4, #16]
 8001f22:	e7d7      	b.n	8001ed4 <__swbuf_r+0x30>
 8001f24:	4621      	mov	r1, r4
 8001f26:	4630      	mov	r0, r6
 8001f28:	f000 f934 	bl	8002194 <_fflush_r>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d0e7      	beq.n	8001f00 <__swbuf_r+0x5c>
 8001f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f34:	e7e4      	b.n	8001f00 <__swbuf_r+0x5c>
 8001f36:	4621      	mov	r1, r4
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f000 f92b 	bl	8002194 <_fflush_r>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d1f6      	bne.n	8001f30 <__swbuf_r+0x8c>
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	e7cd      	b.n	8001ee4 <__swbuf_r+0x40>
 8001f48:	080096b0 	.word	0x080096b0
 8001f4c:	08009690 	.word	0x08009690
 8001f50:	08009670 	.word	0x08009670

08001f54 <__swbuf>:
 8001f54:	b410      	push	{r4}
 8001f56:	4c04      	ldr	r4, [pc, #16]	; (8001f68 <__swbuf+0x14>)
 8001f58:	4603      	mov	r3, r0
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7ff bf9e 	b.w	8001ea4 <__swbuf_r>
 8001f68:	20000000 	.word	0x20000000

08001f6c <__swsetup_r>:
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <__swsetup_r+0xf4>)
 8001f6e:	b570      	push	{r4, r5, r6, lr}
 8001f70:	681d      	ldr	r5, [r3, #0]
 8001f72:	4606      	mov	r6, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	b10d      	cbz	r5, 8001f7c <__swsetup_r+0x10>
 8001f78:	69ab      	ldr	r3, [r5, #24]
 8001f7a:	b1e3      	cbz	r3, 8001fb6 <__swsetup_r+0x4a>
 8001f7c:	4b39      	ldr	r3, [pc, #228]	; (8002064 <__swsetup_r+0xf8>)
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d01f      	beq.n	8001fc2 <__swsetup_r+0x56>
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <__swsetup_r+0xfc>)
 8001f84:	429c      	cmp	r4, r3
 8001f86:	d04d      	beq.n	8002024 <__swsetup_r+0xb8>
 8001f88:	4b38      	ldr	r3, [pc, #224]	; (800206c <__swsetup_r+0x100>)
 8001f8a:	429c      	cmp	r4, r3
 8001f8c:	bf08      	it	eq
 8001f8e:	68ec      	ldreq	r4, [r5, #12]
 8001f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f94:	0718      	lsls	r0, r3, #28
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	d519      	bpl.n	8001fce <__swsetup_r+0x62>
 8001f9a:	6921      	ldr	r1, [r4, #16]
 8001f9c:	b311      	cbz	r1, 8001fe4 <__swsetup_r+0x78>
 8001f9e:	f012 0001 	ands.w	r0, r2, #1
 8001fa2:	d02f      	beq.n	8002004 <__swsetup_r+0x98>
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	60a0      	str	r0, [r4, #8]
 8001fa8:	6960      	ldr	r0, [r4, #20]
 8001faa:	4240      	negs	r0, r0
 8001fac:	61a0      	str	r0, [r4, #24]
 8001fae:	2900      	cmp	r1, #0
 8001fb0:	d02e      	beq.n	8002010 <__swsetup_r+0xa4>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f000 fa52 	bl	8002460 <__sinit>
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <__swsetup_r+0xf8>)
 8001fbe:	429c      	cmp	r4, r3
 8001fc0:	d1df      	bne.n	8001f82 <__swsetup_r+0x16>
 8001fc2:	686c      	ldr	r4, [r5, #4]
 8001fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fc8:	0718      	lsls	r0, r3, #28
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	d4e5      	bmi.n	8001f9a <__swsetup_r+0x2e>
 8001fce:	06d1      	lsls	r1, r2, #27
 8001fd0:	d53e      	bpl.n	8002050 <__swsetup_r+0xe4>
 8001fd2:	0752      	lsls	r2, r2, #29
 8001fd4:	d428      	bmi.n	8002028 <__swsetup_r+0xbc>
 8001fd6:	6921      	ldr	r1, [r4, #16]
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	d1dc      	bne.n	8001f9e <__swsetup_r+0x32>
 8001fe4:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8001fe8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001fec:	d0d7      	beq.n	8001f9e <__swsetup_r+0x32>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f001 f841 	bl	8003078 <__smakebuf_r>
 8001ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ffa:	6921      	ldr	r1, [r4, #16]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	f012 0001 	ands.w	r0, r2, #1
 8002002:	d1cf      	bne.n	8001fa4 <__swsetup_r+0x38>
 8002004:	0795      	lsls	r5, r2, #30
 8002006:	bf58      	it	pl
 8002008:	6960      	ldrpl	r0, [r4, #20]
 800200a:	60a0      	str	r0, [r4, #8]
 800200c:	2900      	cmp	r1, #0
 800200e:	d1d0      	bne.n	8001fb2 <__swsetup_r+0x46>
 8002010:	0612      	lsls	r2, r2, #24
 8002012:	bf58      	it	pl
 8002014:	4608      	movpl	r0, r1
 8002016:	d5cd      	bpl.n	8001fb4 <__swsetup_r+0x48>
 8002018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201c:	81a3      	strh	r3, [r4, #12]
 800201e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	68ac      	ldr	r4, [r5, #8]
 8002026:	e7b3      	b.n	8001f90 <__swsetup_r+0x24>
 8002028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800202a:	b151      	cbz	r1, 8002042 <__swsetup_r+0xd6>
 800202c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8002030:	4291      	cmp	r1, r2
 8002032:	d004      	beq.n	800203e <__swsetup_r+0xd2>
 8002034:	4630      	mov	r0, r6
 8002036:	f001 ffbd 	bl	8003fb4 <_free_r>
 800203a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	6362      	str	r2, [r4, #52]	; 0x34
 8002042:	6921      	ldr	r1, [r4, #16]
 8002044:	2200      	movs	r2, #0
 8002046:	e9c4 1200 	strd	r1, r2, [r4]
 800204a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800204e:	e7c3      	b.n	8001fd8 <__swsetup_r+0x6c>
 8002050:	2209      	movs	r2, #9
 8002052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002056:	6032      	str	r2, [r6, #0]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	81a3      	strh	r3, [r4, #12]
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	080096b0 	.word	0x080096b0
 8002068:	08009690 	.word	0x08009690
 800206c:	08009670 	.word	0x08009670

08002070 <abort>:
 8002070:	b508      	push	{r3, lr}
 8002072:	2006      	movs	r0, #6
 8002074:	f002 fb30 	bl	80046d8 <raise>
 8002078:	2001      	movs	r0, #1
 800207a:	f007 f99b 	bl	80093b4 <_exit>
 800207e:	bf00      	nop

08002080 <__sflush_r>:
 8002080:	898b      	ldrh	r3, [r1, #12]
 8002082:	071a      	lsls	r2, r3, #28
 8002084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002088:	460c      	mov	r4, r1
 800208a:	4680      	mov	r8, r0
 800208c:	d43f      	bmi.n	800210e <__sflush_r+0x8e>
 800208e:	684a      	ldr	r2, [r1, #4]
 8002090:	2a00      	cmp	r2, #0
 8002092:	dd58      	ble.n	8002146 <__sflush_r+0xc6>
 8002094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002096:	2e00      	cmp	r6, #0
 8002098:	d052      	beq.n	8002140 <__sflush_r+0xc0>
 800209a:	2200      	movs	r2, #0
 800209c:	f8d8 5000 	ldr.w	r5, [r8]
 80020a0:	f8c8 2000 	str.w	r2, [r8]
 80020a4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 80020a8:	d151      	bne.n	800214e <__sflush_r+0xce>
 80020aa:	2301      	movs	r3, #1
 80020ac:	6a21      	ldr	r1, [r4, #32]
 80020ae:	4640      	mov	r0, r8
 80020b0:	47b0      	blx	r6
 80020b2:	1c43      	adds	r3, r0, #1
 80020b4:	d05e      	beq.n	8002174 <__sflush_r+0xf4>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020ba:	075f      	lsls	r7, r3, #29
 80020bc:	d505      	bpl.n	80020ca <__sflush_r+0x4a>
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	1ac0      	subs	r0, r0, r3
 80020c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020c4:	b10b      	cbz	r3, 80020ca <__sflush_r+0x4a>
 80020c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c8:	1ac0      	subs	r0, r0, r3
 80020ca:	6a21      	ldr	r1, [r4, #32]
 80020cc:	4602      	mov	r2, r0
 80020ce:	2300      	movs	r3, #0
 80020d0:	4640      	mov	r0, r8
 80020d2:	47b0      	blx	r6
 80020d4:	1c41      	adds	r1, r0, #1
 80020d6:	d13c      	bne.n	8002152 <__sflush_r+0xd2>
 80020d8:	f8d8 3000 	ldr.w	r3, [r8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d038      	beq.n	8002152 <__sflush_r+0xd2>
 80020e0:	2b1d      	cmp	r3, #29
 80020e2:	d001      	beq.n	80020e8 <__sflush_r+0x68>
 80020e4:	2b16      	cmp	r3, #22
 80020e6:	d14d      	bne.n	8002184 <__sflush_r+0x104>
 80020e8:	6923      	ldr	r3, [r4, #16]
 80020ea:	2200      	movs	r2, #0
 80020ec:	e9c4 3200 	strd	r3, r2, [r4]
 80020f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f2:	f8c8 5000 	str.w	r5, [r8]
 80020f6:	b319      	cbz	r1, 8002140 <__sflush_r+0xc0>
 80020f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020fc:	4299      	cmp	r1, r3
 80020fe:	d002      	beq.n	8002106 <__sflush_r+0x86>
 8002100:	4640      	mov	r0, r8
 8002102:	f001 ff57 	bl	8003fb4 <_free_r>
 8002106:	2000      	movs	r0, #0
 8002108:	6360      	str	r0, [r4, #52]	; 0x34
 800210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210e:	690e      	ldr	r6, [r1, #16]
 8002110:	b1b6      	cbz	r6, 8002140 <__sflush_r+0xc0>
 8002112:	680d      	ldr	r5, [r1, #0]
 8002114:	600e      	str	r6, [r1, #0]
 8002116:	079a      	lsls	r2, r3, #30
 8002118:	bf0c      	ite	eq
 800211a:	694b      	ldreq	r3, [r1, #20]
 800211c:	2300      	movne	r3, #0
 800211e:	1bad      	subs	r5, r5, r6
 8002120:	608b      	str	r3, [r1, #8]
 8002122:	e00b      	b.n	800213c <__sflush_r+0xbc>
 8002124:	462b      	mov	r3, r5
 8002126:	4632      	mov	r2, r6
 8002128:	6a21      	ldr	r1, [r4, #32]
 800212a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800212c:	4640      	mov	r0, r8
 800212e:	47b8      	blx	r7
 8002130:	f1b0 0c00 	subs.w	ip, r0, #0
 8002134:	eba5 050c 	sub.w	r5, r5, ip
 8002138:	4466      	add	r6, ip
 800213a:	dd13      	ble.n	8002164 <__sflush_r+0xe4>
 800213c:	2d00      	cmp	r5, #0
 800213e:	dcf1      	bgt.n	8002124 <__sflush_r+0xa4>
 8002140:	2000      	movs	r0, #0
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002146:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002148:	2a00      	cmp	r2, #0
 800214a:	dca3      	bgt.n	8002094 <__sflush_r+0x14>
 800214c:	e7f8      	b.n	8002140 <__sflush_r+0xc0>
 800214e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002150:	e7b3      	b.n	80020ba <__sflush_r+0x3a>
 8002152:	2300      	movs	r3, #0
 8002154:	6063      	str	r3, [r4, #4]
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	89a3      	ldrh	r3, [r4, #12]
 800215c:	04db      	lsls	r3, r3, #19
 800215e:	d5c7      	bpl.n	80020f0 <__sflush_r+0x70>
 8002160:	6560      	str	r0, [r4, #84]	; 0x54
 8002162:	e7c5      	b.n	80020f0 <__sflush_r+0x70>
 8002164:	89a3      	ldrh	r3, [r4, #12]
 8002166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800216e:	81a3      	strh	r3, [r4, #12]
 8002170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002174:	f8d8 3000 	ldr.w	r3, [r8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d09c      	beq.n	80020b6 <__sflush_r+0x36>
 800217c:	2b1d      	cmp	r3, #29
 800217e:	d006      	beq.n	800218e <__sflush_r+0x10e>
 8002180:	2b16      	cmp	r3, #22
 8002182:	d004      	beq.n	800218e <__sflush_r+0x10e>
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	e7d9      	b.n	8002142 <__sflush_r+0xc2>
 800218e:	f8c8 5000 	str.w	r5, [r8]
 8002192:	e7d5      	b.n	8002140 <__sflush_r+0xc0>

08002194 <_fflush_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	690b      	ldr	r3, [r1, #16]
 8002198:	b1bb      	cbz	r3, 80021ca <_fflush_r+0x36>
 800219a:	460d      	mov	r5, r1
 800219c:	4604      	mov	r4, r0
 800219e:	b108      	cbz	r0, 80021a4 <_fflush_r+0x10>
 80021a0:	6983      	ldr	r3, [r0, #24]
 80021a2:	b1b3      	cbz	r3, 80021d2 <_fflush_r+0x3e>
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <_fflush_r+0x48>)
 80021a6:	429d      	cmp	r5, r3
 80021a8:	d011      	beq.n	80021ce <_fflush_r+0x3a>
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <_fflush_r+0x4c>)
 80021ac:	429d      	cmp	r5, r3
 80021ae:	d013      	beq.n	80021d8 <_fflush_r+0x44>
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <_fflush_r+0x50>)
 80021b2:	429d      	cmp	r5, r3
 80021b4:	bf08      	it	eq
 80021b6:	68e5      	ldreq	r5, [r4, #12]
 80021b8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80021bc:	b12b      	cbz	r3, 80021ca <_fflush_r+0x36>
 80021be:	4629      	mov	r1, r5
 80021c0:	4620      	mov	r0, r4
 80021c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021c6:	f7ff bf5b 	b.w	8002080 <__sflush_r>
 80021ca:	2000      	movs	r0, #0
 80021cc:	bd38      	pop	{r3, r4, r5, pc}
 80021ce:	6865      	ldr	r5, [r4, #4]
 80021d0:	e7f2      	b.n	80021b8 <_fflush_r+0x24>
 80021d2:	f000 f945 	bl	8002460 <__sinit>
 80021d6:	e7e5      	b.n	80021a4 <_fflush_r+0x10>
 80021d8:	68a5      	ldr	r5, [r4, #8]
 80021da:	e7ed      	b.n	80021b8 <_fflush_r+0x24>
 80021dc:	080096b0 	.word	0x080096b0
 80021e0:	08009690 	.word	0x08009690
 80021e4:	08009670 	.word	0x08009670

080021e8 <fflush>:
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	b340      	cbz	r0, 800223e <fflush+0x56>
 80021ec:	6903      	ldr	r3, [r0, #16]
 80021ee:	4604      	mov	r4, r0
 80021f0:	b1e3      	cbz	r3, 800222c <fflush+0x44>
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <fflush+0x68>)
 80021f4:	681d      	ldr	r5, [r3, #0]
 80021f6:	b10d      	cbz	r5, 80021fc <fflush+0x14>
 80021f8:	69ab      	ldr	r3, [r5, #24]
 80021fa:	b1cb      	cbz	r3, 8002230 <fflush+0x48>
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <fflush+0x6c>)
 80021fe:	429c      	cmp	r4, r3
 8002200:	d00f      	beq.n	8002222 <fflush+0x3a>
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <fflush+0x70>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d021      	beq.n	800224c <fflush+0x64>
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <fflush+0x74>)
 800220a:	429c      	cmp	r4, r3
 800220c:	bf08      	it	eq
 800220e:	68ec      	ldreq	r4, [r5, #12]
 8002210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002214:	b153      	cbz	r3, 800222c <fflush+0x44>
 8002216:	4621      	mov	r1, r4
 8002218:	4628      	mov	r0, r5
 800221a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800221e:	f7ff bf2f 	b.w	8002080 <__sflush_r>
 8002222:	686c      	ldr	r4, [r5, #4]
 8002224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f4      	bne.n	8002216 <fflush+0x2e>
 800222c:	2000      	movs	r0, #0
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	4628      	mov	r0, r5
 8002232:	f000 f915 	bl	8002460 <__sinit>
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <fflush+0x6c>)
 8002238:	429c      	cmp	r4, r3
 800223a:	d1e2      	bne.n	8002202 <fflush+0x1a>
 800223c:	e7f1      	b.n	8002222 <fflush+0x3a>
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <fflush+0x78>)
 8002240:	4908      	ldr	r1, [pc, #32]	; (8002264 <fflush+0x7c>)
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002248:	f000 bac2 	b.w	80027d0 <_fwalk_reent>
 800224c:	68ac      	ldr	r4, [r5, #8]
 800224e:	e7df      	b.n	8002210 <fflush+0x28>
 8002250:	20000000 	.word	0x20000000
 8002254:	080096b0 	.word	0x080096b0
 8002258:	08009690 	.word	0x08009690
 800225c:	08009670 	.word	0x08009670
 8002260:	08009618 	.word	0x08009618
 8002264:	08002195 	.word	0x08002195

08002268 <__fp_lock>:
 8002268:	2000      	movs	r0, #0
 800226a:	4770      	bx	lr

0800226c <_cleanup_r>:
 800226c:	4901      	ldr	r1, [pc, #4]	; (8002274 <_cleanup_r+0x8>)
 800226e:	f000 baaf 	b.w	80027d0 <_fwalk_reent>
 8002272:	bf00      	nop
 8002274:	08002195 	.word	0x08002195

08002278 <__fp_unlock>:
 8002278:	2000      	movs	r0, #0
 800227a:	4770      	bx	lr

0800227c <__sfmoreglue>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2268      	movs	r2, #104	; 0x68
 8002280:	1e4d      	subs	r5, r1, #1
 8002282:	fb02 f505 	mul.w	r5, r2, r5
 8002286:	460e      	mov	r6, r1
 8002288:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800228c:	f001 fef4 	bl	8004078 <_malloc_r>
 8002290:	4604      	mov	r4, r0
 8002292:	b140      	cbz	r0, 80022a6 <__sfmoreglue+0x2a>
 8002294:	2100      	movs	r1, #0
 8002296:	300c      	adds	r0, #12
 8002298:	e9c4 1600 	strd	r1, r6, [r4]
 800229c:	60a0      	str	r0, [r4, #8]
 800229e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022a2:	f7fe f875 	bl	8000390 <memset>
 80022a6:	4620      	mov	r0, r4
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	bf00      	nop

080022ac <__sfp>:
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <__sfp+0xa0>)
 80022ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b2:	681e      	ldr	r6, [r3, #0]
 80022b4:	69b3      	ldr	r3, [r6, #24]
 80022b6:	4607      	mov	r7, r0
 80022b8:	b353      	cbz	r3, 8002310 <__sfp+0x64>
 80022ba:	3648      	adds	r6, #72	; 0x48
 80022bc:	f04f 0804 	mov.w	r8, #4
 80022c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	d504      	bpl.n	80022d2 <__sfp+0x26>
 80022c8:	e01e      	b.n	8002308 <__sfp+0x5c>
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80022d0:	d01a      	beq.n	8002308 <__sfp+0x5c>
 80022d2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	2d00      	cmp	r5, #0
 80022da:	d1f6      	bne.n	80022ca <__sfp+0x1e>
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <__sfp+0xa4>)
 80022de:	6665      	str	r5, [r4, #100]	; 0x64
 80022e0:	e9c4 5500 	strd	r5, r5, [r4]
 80022e4:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80022e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022ec:	61a5      	str	r5, [r4, #24]
 80022ee:	2208      	movs	r2, #8
 80022f0:	4629      	mov	r1, r5
 80022f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022f6:	f7fe f84b 	bl	8000390 <memset>
 80022fa:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022fe:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002302:	4620      	mov	r0, r4
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002308:	6835      	ldr	r5, [r6, #0]
 800230a:	b12d      	cbz	r5, 8002318 <__sfp+0x6c>
 800230c:	462e      	mov	r6, r5
 800230e:	e7d7      	b.n	80022c0 <__sfp+0x14>
 8002310:	4630      	mov	r0, r6
 8002312:	f000 f81f 	bl	8002354 <__sinit.part.0>
 8002316:	e7d0      	b.n	80022ba <__sfp+0xe>
 8002318:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800231c:	4638      	mov	r0, r7
 800231e:	f001 feab 	bl	8004078 <_malloc_r>
 8002322:	4604      	mov	r4, r0
 8002324:	b168      	cbz	r0, 8002342 <__sfp+0x96>
 8002326:	6005      	str	r5, [r0, #0]
 8002328:	f8c0 8004 	str.w	r8, [r0, #4]
 800232c:	300c      	adds	r0, #12
 800232e:	4629      	mov	r1, r5
 8002330:	60a0      	str	r0, [r4, #8]
 8002332:	4625      	mov	r5, r4
 8002334:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002338:	f7fe f82a 	bl	8000390 <memset>
 800233c:	6034      	str	r4, [r6, #0]
 800233e:	462e      	mov	r6, r5
 8002340:	e7be      	b.n	80022c0 <__sfp+0x14>
 8002342:	230c      	movs	r3, #12
 8002344:	6030      	str	r0, [r6, #0]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	e7db      	b.n	8002302 <__sfp+0x56>
 800234a:	bf00      	nop
 800234c:	08009618 	.word	0x08009618
 8002350:	ffff0001 	.word	0xffff0001

08002354 <__sinit.part.0>:
 8002354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <__sinit.part.0+0xd8>)
 800235a:	4935      	ldr	r1, [pc, #212]	; (8002430 <__sinit.part.0+0xdc>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	6281      	str	r1, [r0, #40]	; 0x28
 8002360:	4290      	cmp	r0, r2
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800236a:	6503      	str	r3, [r0, #80]	; 0x50
 800236c:	bf04      	itt	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	6183      	streq	r3, [r0, #24]
 8002372:	4605      	mov	r5, r0
 8002374:	f7ff ff9a 	bl	80022ac <__sfp>
 8002378:	6068      	str	r0, [r5, #4]
 800237a:	4628      	mov	r0, r5
 800237c:	f7ff ff96 	bl	80022ac <__sfp>
 8002380:	60a8      	str	r0, [r5, #8]
 8002382:	4628      	mov	r0, r5
 8002384:	f7ff ff92 	bl	80022ac <__sfp>
 8002388:	686f      	ldr	r7, [r5, #4]
 800238a:	60e8      	str	r0, [r5, #12]
 800238c:	2400      	movs	r4, #0
 800238e:	2304      	movs	r3, #4
 8002390:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8002394:	2208      	movs	r2, #8
 8002396:	4621      	mov	r1, r4
 8002398:	e9c7 4400 	strd	r4, r4, [r7]
 800239c:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80023a0:	667c      	str	r4, [r7, #100]	; 0x64
 80023a2:	61bc      	str	r4, [r7, #24]
 80023a4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80023a8:	f7fd fff2 	bl	8000390 <memset>
 80023ac:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800243c <__sinit.part.0+0xe8>
 80023b0:	68ae      	ldr	r6, [r5, #8]
 80023b2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002440 <__sinit.part.0+0xec>
 80023b6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002444 <__sinit.part.0+0xf0>
 80023ba:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002448 <__sinit.part.0+0xf4>
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <__sinit.part.0+0xe0>)
 80023c0:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 80023c4:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 80023c8:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 80023cc:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80023d0:	2208      	movs	r2, #8
 80023d2:	60f3      	str	r3, [r6, #12]
 80023d4:	e9c6 4400 	strd	r4, r4, [r6]
 80023d8:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80023dc:	6674      	str	r4, [r6, #100]	; 0x64
 80023de:	60b4      	str	r4, [r6, #8]
 80023e0:	61b4      	str	r4, [r6, #24]
 80023e2:	4621      	mov	r1, r4
 80023e4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80023e8:	f7fd ffd2 	bl	8000390 <memset>
 80023ec:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80023f0:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80023f4:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80023f8:	68ee      	ldr	r6, [r5, #12]
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <__sinit.part.0+0xe4>)
 80023fc:	60f3      	str	r3, [r6, #12]
 80023fe:	e9c6 4400 	strd	r4, r4, [r6]
 8002402:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8002406:	6674      	str	r4, [r6, #100]	; 0x64
 8002408:	60b4      	str	r4, [r6, #8]
 800240a:	61b4      	str	r4, [r6, #24]
 800240c:	4621      	mov	r1, r4
 800240e:	2208      	movs	r2, #8
 8002410:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8002414:	f7fd ffbc 	bl	8000390 <memset>
 8002418:	2301      	movs	r3, #1
 800241a:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 800241e:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 8002422:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8002426:	61ab      	str	r3, [r5, #24]
 8002428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242c:	08009618 	.word	0x08009618
 8002430:	0800226d 	.word	0x0800226d
 8002434:	00010009 	.word	0x00010009
 8002438:	00020012 	.word	0x00020012
 800243c:	08004849 	.word	0x08004849
 8002440:	08004871 	.word	0x08004871
 8002444:	080048b1 	.word	0x080048b1
 8002448:	080048d1 	.word	0x080048d1

0800244c <_cleanup>:
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <_cleanup+0xc>)
 800244e:	4903      	ldr	r1, [pc, #12]	; (800245c <_cleanup+0x10>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	f000 b9bd 	b.w	80027d0 <_fwalk_reent>
 8002456:	bf00      	nop
 8002458:	08009618 	.word	0x08009618
 800245c:	08002195 	.word	0x08002195

08002460 <__sinit>:
 8002460:	6983      	ldr	r3, [r0, #24]
 8002462:	b903      	cbnz	r3, 8002466 <__sinit+0x6>
 8002464:	e776      	b.n	8002354 <__sinit.part.0>
 8002466:	4770      	bx	lr

08002468 <__sfp_lock_acquire>:
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop

0800246c <__sfp_lock_release>:
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <__sinit_lock_acquire>:
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <__sinit_lock_release>:
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <__fp_lock_all>:
 8002478:	4b02      	ldr	r3, [pc, #8]	; (8002484 <__fp_lock_all+0xc>)
 800247a:	4903      	ldr	r1, [pc, #12]	; (8002488 <__fp_lock_all+0x10>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	f000 b987 	b.w	8002790 <_fwalk>
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000
 8002488:	08002269 	.word	0x08002269

0800248c <__fp_unlock_all>:
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <__fp_unlock_all+0xc>)
 800248e:	4903      	ldr	r1, [pc, #12]	; (800249c <__fp_unlock_all+0x10>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f000 b97d 	b.w	8002790 <_fwalk>
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000
 800249c:	08002279 	.word	0x08002279

080024a0 <__sfvwrite_r>:
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8085 	beq.w	80025b2 <__sfvwrite_r+0x112>
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80024b0:	460c      	mov	r4, r1
 80024b2:	0719      	lsls	r1, r3, #28
 80024b4:	4680      	mov	r8, r0
 80024b6:	b083      	sub	sp, #12
 80024b8:	4617      	mov	r7, r2
 80024ba:	b298      	uxth	r0, r3
 80024bc:	d525      	bpl.n	800250a <__sfvwrite_r+0x6a>
 80024be:	6923      	ldr	r3, [r4, #16]
 80024c0:	b31b      	cbz	r3, 800250a <__sfvwrite_r+0x6a>
 80024c2:	f010 0302 	ands.w	r3, r0, #2
 80024c6:	683d      	ldr	r5, [r7, #0]
 80024c8:	d02d      	beq.n	8002526 <__sfvwrite_r+0x86>
 80024ca:	f04f 0a00 	mov.w	sl, #0
 80024ce:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800278c <__sfvwrite_r+0x2ec>
 80024d2:	4656      	mov	r6, sl
 80024d4:	46b9      	mov	r9, r7
 80024d6:	455e      	cmp	r6, fp
 80024d8:	4633      	mov	r3, r6
 80024da:	4652      	mov	r2, sl
 80024dc:	bf28      	it	cs
 80024de:	465b      	movcs	r3, fp
 80024e0:	4640      	mov	r0, r8
 80024e2:	2e00      	cmp	r6, #0
 80024e4:	d052      	beq.n	800258c <__sfvwrite_r+0xec>
 80024e6:	6a21      	ldr	r1, [r4, #32]
 80024e8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80024ea:	47b8      	blx	r7
 80024ec:	2800      	cmp	r0, #0
 80024ee:	dd56      	ble.n	800259e <__sfvwrite_r+0xfe>
 80024f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80024f4:	1a1b      	subs	r3, r3, r0
 80024f6:	4482      	add	sl, r0
 80024f8:	1a36      	subs	r6, r6, r0
 80024fa:	f8c9 3008 	str.w	r3, [r9, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e9      	bne.n	80024d6 <__sfvwrite_r+0x36>
 8002502:	2000      	movs	r0, #0
 8002504:	b003      	add	sp, #12
 8002506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250a:	4621      	mov	r1, r4
 800250c:	4640      	mov	r0, r8
 800250e:	f7ff fd2d 	bl	8001f6c <__swsetup_r>
 8002512:	2800      	cmp	r0, #0
 8002514:	f040 8136 	bne.w	8002784 <__sfvwrite_r+0x2e4>
 8002518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251c:	683d      	ldr	r5, [r7, #0]
 800251e:	b298      	uxth	r0, r3
 8002520:	f010 0302 	ands.w	r3, r0, #2
 8002524:	d1d1      	bne.n	80024ca <__sfvwrite_r+0x2a>
 8002526:	f010 0901 	ands.w	r9, r0, #1
 800252a:	d144      	bne.n	80025b6 <__sfvwrite_r+0x116>
 800252c:	464e      	mov	r6, r9
 800252e:	9700      	str	r7, [sp, #0]
 8002530:	b346      	cbz	r6, 8002584 <__sfvwrite_r+0xe4>
 8002532:	0582      	lsls	r2, r0, #22
 8002534:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002538:	f140 8083 	bpl.w	8002642 <__sfvwrite_r+0x1a2>
 800253c:	45b3      	cmp	fp, r6
 800253e:	465a      	mov	r2, fp
 8002540:	f200 80b2 	bhi.w	80026a8 <__sfvwrite_r+0x208>
 8002544:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8002548:	f040 80bf 	bne.w	80026ca <__sfvwrite_r+0x22a>
 800254c:	6820      	ldr	r0, [r4, #0]
 800254e:	9201      	str	r2, [sp, #4]
 8002550:	4649      	mov	r1, r9
 8002552:	f000 ff2f 	bl	80033b4 <memmove>
 8002556:	68a3      	ldr	r3, [r4, #8]
 8002558:	9a01      	ldr	r2, [sp, #4]
 800255a:	eba3 010b 	sub.w	r1, r3, fp
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	60a1      	str	r1, [r4, #8]
 8002562:	4413      	add	r3, r2
 8002564:	46b2      	mov	sl, r6
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	2600      	movs	r6, #0
 800256a:	9b00      	ldr	r3, [sp, #0]
 800256c:	6898      	ldr	r0, [r3, #8]
 800256e:	eba0 000a 	sub.w	r0, r0, sl
 8002572:	44d1      	add	r9, sl
 8002574:	6098      	str	r0, [r3, #8]
 8002576:	2800      	cmp	r0, #0
 8002578:	d0c3      	beq.n	8002502 <__sfvwrite_r+0x62>
 800257a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800257e:	b280      	uxth	r0, r0
 8002580:	2e00      	cmp	r6, #0
 8002582:	d1d6      	bne.n	8002532 <__sfvwrite_r+0x92>
 8002584:	e9d5 9600 	ldrd	r9, r6, [r5]
 8002588:	3508      	adds	r5, #8
 800258a:	e7d1      	b.n	8002530 <__sfvwrite_r+0x90>
 800258c:	e9d5 a600 	ldrd	sl, r6, [r5]
 8002590:	3508      	adds	r5, #8
 8002592:	e7a0      	b.n	80024d6 <__sfvwrite_r+0x36>
 8002594:	4621      	mov	r1, r4
 8002596:	4640      	mov	r0, r8
 8002598:	f7ff fdfc 	bl	8002194 <_fflush_r>
 800259c:	b380      	cbz	r0, 8002600 <__sfvwrite_r+0x160>
 800259e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025aa:	81a3      	strh	r3, [r4, #12]
 80025ac:	b003      	add	sp, #12
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b2:	2000      	movs	r0, #0
 80025b4:	4770      	bx	lr
 80025b6:	461e      	mov	r6, r3
 80025b8:	46aa      	mov	sl, r5
 80025ba:	4699      	mov	r9, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	461d      	mov	r5, r3
 80025c0:	9700      	str	r7, [sp, #0]
 80025c2:	b356      	cbz	r6, 800261a <__sfvwrite_r+0x17a>
 80025c4:	b388      	cbz	r0, 800262a <__sfvwrite_r+0x18a>
 80025c6:	464a      	mov	r2, r9
 80025c8:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	42b2      	cmp	r2, r6
 80025d0:	bf28      	it	cs
 80025d2:	4632      	movcs	r2, r6
 80025d4:	4288      	cmp	r0, r1
 80025d6:	d905      	bls.n	80025e4 <__sfvwrite_r+0x144>
 80025d8:	68a1      	ldr	r1, [r4, #8]
 80025da:	eb03 0b01 	add.w	fp, r3, r1
 80025de:	455a      	cmp	r2, fp
 80025e0:	f300 80a6 	bgt.w	8002730 <__sfvwrite_r+0x290>
 80025e4:	4293      	cmp	r3, r2
 80025e6:	dc63      	bgt.n	80026b0 <__sfvwrite_r+0x210>
 80025e8:	6a21      	ldr	r1, [r4, #32]
 80025ea:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80025ec:	462a      	mov	r2, r5
 80025ee:	4640      	mov	r0, r8
 80025f0:	47b8      	blx	r7
 80025f2:	f1b0 0b00 	subs.w	fp, r0, #0
 80025f6:	ddd2      	ble.n	800259e <__sfvwrite_r+0xfe>
 80025f8:	ebb9 090b 	subs.w	r9, r9, fp
 80025fc:	d0ca      	beq.n	8002594 <__sfvwrite_r+0xf4>
 80025fe:	2001      	movs	r0, #1
 8002600:	9a00      	ldr	r2, [sp, #0]
 8002602:	6893      	ldr	r3, [r2, #8]
 8002604:	eba3 030b 	sub.w	r3, r3, fp
 8002608:	445d      	add	r5, fp
 800260a:	eba6 060b 	sub.w	r6, r6, fp
 800260e:	6093      	str	r3, [r2, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f43f af76 	beq.w	8002502 <__sfvwrite_r+0x62>
 8002616:	2e00      	cmp	r6, #0
 8002618:	d1d4      	bne.n	80025c4 <__sfvwrite_r+0x124>
 800261a:	f10a 0308 	add.w	r3, sl, #8
 800261e:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8002622:	469a      	mov	sl, r3
 8002624:	3308      	adds	r3, #8
 8002626:	2e00      	cmp	r6, #0
 8002628:	d0f9      	beq.n	800261e <__sfvwrite_r+0x17e>
 800262a:	4632      	mov	r2, r6
 800262c:	210a      	movs	r1, #10
 800262e:	4628      	mov	r0, r5
 8002630:	f000 fdd6 	bl	80031e0 <memchr>
 8002634:	2800      	cmp	r0, #0
 8002636:	f000 809c 	beq.w	8002772 <__sfvwrite_r+0x2d2>
 800263a:	3001      	adds	r0, #1
 800263c:	eba0 0905 	sub.w	r9, r0, r5
 8002640:	e7c1      	b.n	80025c6 <__sfvwrite_r+0x126>
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	4298      	cmp	r0, r3
 8002648:	d816      	bhi.n	8002678 <__sfvwrite_r+0x1d8>
 800264a:	6963      	ldr	r3, [r4, #20]
 800264c:	42b3      	cmp	r3, r6
 800264e:	d813      	bhi.n	8002678 <__sfvwrite_r+0x1d8>
 8002650:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002654:	42b2      	cmp	r2, r6
 8002656:	bf28      	it	cs
 8002658:	4632      	movcs	r2, r6
 800265a:	6a21      	ldr	r1, [r4, #32]
 800265c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002660:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4640      	mov	r0, r8
 8002668:	464a      	mov	r2, r9
 800266a:	47b8      	blx	r7
 800266c:	f1b0 0a00 	subs.w	sl, r0, #0
 8002670:	dd95      	ble.n	800259e <__sfvwrite_r+0xfe>
 8002672:	eba6 060a 	sub.w	r6, r6, sl
 8002676:	e778      	b.n	800256a <__sfvwrite_r+0xca>
 8002678:	45b3      	cmp	fp, r6
 800267a:	46da      	mov	sl, fp
 800267c:	bf28      	it	cs
 800267e:	46b2      	movcs	sl, r6
 8002680:	4652      	mov	r2, sl
 8002682:	4649      	mov	r1, r9
 8002684:	f000 fe96 	bl	80033b4 <memmove>
 8002688:	68a3      	ldr	r3, [r4, #8]
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	eba3 030a 	sub.w	r3, r3, sl
 8002690:	4452      	add	r2, sl
 8002692:	60a3      	str	r3, [r4, #8]
 8002694:	6022      	str	r2, [r4, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1eb      	bne.n	8002672 <__sfvwrite_r+0x1d2>
 800269a:	4621      	mov	r1, r4
 800269c:	4640      	mov	r0, r8
 800269e:	f7ff fd79 	bl	8002194 <_fflush_r>
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d0e5      	beq.n	8002672 <__sfvwrite_r+0x1d2>
 80026a6:	e77a      	b.n	800259e <__sfvwrite_r+0xfe>
 80026a8:	6820      	ldr	r0, [r4, #0]
 80026aa:	46b3      	mov	fp, r6
 80026ac:	4632      	mov	r2, r6
 80026ae:	e74e      	b.n	800254e <__sfvwrite_r+0xae>
 80026b0:	4629      	mov	r1, r5
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	f000 fe7e 	bl	80033b4 <memmove>
 80026b8:	9a01      	ldr	r2, [sp, #4]
 80026ba:	68a3      	ldr	r3, [r4, #8]
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	60a3      	str	r3, [r4, #8]
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	4693      	mov	fp, r2
 80026c8:	e796      	b.n	80025f8 <__sfvwrite_r+0x158>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	6921      	ldr	r1, [r4, #16]
 80026ce:	eba3 0b01 	sub.w	fp, r3, r1
 80026d2:	6963      	ldr	r3, [r4, #20]
 80026d4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 80026d8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80026dc:	f10b 0301 	add.w	r3, fp, #1
 80026e0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 80026e4:	4433      	add	r3, r6
 80026e6:	4553      	cmp	r3, sl
 80026e8:	4652      	mov	r2, sl
 80026ea:	bf84      	itt	hi
 80026ec:	469a      	movhi	sl, r3
 80026ee:	4652      	movhi	r2, sl
 80026f0:	0543      	lsls	r3, r0, #21
 80026f2:	d52c      	bpl.n	800274e <__sfvwrite_r+0x2ae>
 80026f4:	4611      	mov	r1, r2
 80026f6:	4640      	mov	r0, r8
 80026f8:	f001 fcbe 	bl	8004078 <_malloc_r>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d03b      	beq.n	8002778 <__sfvwrite_r+0x2d8>
 8002700:	465a      	mov	r2, fp
 8002702:	6921      	ldr	r1, [r4, #16]
 8002704:	9001      	str	r0, [sp, #4]
 8002706:	f000 fdbb 	bl	8003280 <memcpy>
 800270a:	89a2      	ldrh	r2, [r4, #12]
 800270c:	9b01      	ldr	r3, [sp, #4]
 800270e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8002712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002716:	81a2      	strh	r2, [r4, #12]
 8002718:	eb03 000b 	add.w	r0, r3, fp
 800271c:	6123      	str	r3, [r4, #16]
 800271e:	ebaa 030b 	sub.w	r3, sl, fp
 8002722:	f8c4 a014 	str.w	sl, [r4, #20]
 8002726:	60a3      	str	r3, [r4, #8]
 8002728:	6020      	str	r0, [r4, #0]
 800272a:	46b3      	mov	fp, r6
 800272c:	4632      	mov	r2, r6
 800272e:	e70e      	b.n	800254e <__sfvwrite_r+0xae>
 8002730:	4629      	mov	r1, r5
 8002732:	465a      	mov	r2, fp
 8002734:	f000 fe3e 	bl	80033b4 <memmove>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	445b      	add	r3, fp
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	4621      	mov	r1, r4
 8002740:	4640      	mov	r0, r8
 8002742:	f7ff fd27 	bl	8002194 <_fflush_r>
 8002746:	2800      	cmp	r0, #0
 8002748:	f43f af56 	beq.w	80025f8 <__sfvwrite_r+0x158>
 800274c:	e727      	b.n	800259e <__sfvwrite_r+0xfe>
 800274e:	4640      	mov	r0, r8
 8002750:	f001 fcec 	bl	800412c <_realloc_r>
 8002754:	4603      	mov	r3, r0
 8002756:	2800      	cmp	r0, #0
 8002758:	d1de      	bne.n	8002718 <__sfvwrite_r+0x278>
 800275a:	6921      	ldr	r1, [r4, #16]
 800275c:	4640      	mov	r0, r8
 800275e:	f001 fc29 	bl	8003fb4 <_free_r>
 8002762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002766:	220c      	movs	r2, #12
 8002768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276c:	f8c8 2000 	str.w	r2, [r8]
 8002770:	e717      	b.n	80025a2 <__sfvwrite_r+0x102>
 8002772:	1c72      	adds	r2, r6, #1
 8002774:	4691      	mov	r9, r2
 8002776:	e727      	b.n	80025c8 <__sfvwrite_r+0x128>
 8002778:	220c      	movs	r2, #12
 800277a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800277e:	f8c8 2000 	str.w	r2, [r8]
 8002782:	e70e      	b.n	80025a2 <__sfvwrite_r+0x102>
 8002784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002788:	e6bc      	b.n	8002504 <__sfvwrite_r+0x64>
 800278a:	bf00      	nop
 800278c:	7ffffc00 	.word	0x7ffffc00

08002790 <_fwalk>:
 8002790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002794:	4688      	mov	r8, r1
 8002796:	f100 0748 	add.w	r7, r0, #72	; 0x48
 800279a:	2600      	movs	r6, #0
 800279c:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 80027a0:	3d01      	subs	r5, #1
 80027a2:	d40f      	bmi.n	80027c4 <_fwalk+0x34>
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80027ac:	d906      	bls.n	80027bc <_fwalk+0x2c>
 80027ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4620      	mov	r0, r4
 80027b6:	d001      	beq.n	80027bc <_fwalk+0x2c>
 80027b8:	47c0      	blx	r8
 80027ba:	4306      	orrs	r6, r0
 80027bc:	1c6b      	adds	r3, r5, #1
 80027be:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80027c2:	d1ef      	bne.n	80027a4 <_fwalk+0x14>
 80027c4:	683f      	ldr	r7, [r7, #0]
 80027c6:	2f00      	cmp	r7, #0
 80027c8:	d1e8      	bne.n	800279c <_fwalk+0xc>
 80027ca:	4630      	mov	r0, r6
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027d0 <_fwalk_reent>:
 80027d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027d4:	4607      	mov	r7, r0
 80027d6:	4688      	mov	r8, r1
 80027d8:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80027dc:	f04f 0900 	mov.w	r9, #0
 80027e0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80027e4:	3d01      	subs	r5, #1
 80027e6:	d411      	bmi.n	800280c <_fwalk_reent+0x3c>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80027f0:	d908      	bls.n	8002804 <_fwalk_reent+0x34>
 80027f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80027f6:	3301      	adds	r3, #1
 80027f8:	4621      	mov	r1, r4
 80027fa:	d003      	beq.n	8002804 <_fwalk_reent+0x34>
 80027fc:	4638      	mov	r0, r7
 80027fe:	47c0      	blx	r8
 8002800:	ea49 0900 	orr.w	r9, r9, r0
 8002804:	1c6b      	adds	r3, r5, #1
 8002806:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800280a:	d1ed      	bne.n	80027e8 <_fwalk_reent+0x18>
 800280c:	6836      	ldr	r6, [r6, #0]
 800280e:	2e00      	cmp	r6, #0
 8002810:	d1e6      	bne.n	80027e0 <_fwalk_reent+0x10>
 8002812:	4648      	mov	r0, r9
 8002814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002818 <rshift>:
 8002818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281c:	6904      	ldr	r4, [r0, #16]
 800281e:	ebb4 1f61 	cmp.w	r4, r1, asr #5
 8002822:	dd2f      	ble.n	8002884 <rshift+0x6c>
 8002824:	f100 0e14 	add.w	lr, r0, #20
 8002828:	114e      	asrs	r6, r1, #5
 800282a:	f011 0c1f 	ands.w	ip, r1, #31
 800282e:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
 8002832:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
 8002836:	d02b      	beq.n	8002890 <rshift+0x78>
 8002838:	f85e 2026 	ldr.w	r2, [lr, r6, lsl #2]
 800283c:	3304      	adds	r3, #4
 800283e:	429d      	cmp	r5, r3
 8002840:	fa22 f10c 	lsr.w	r1, r2, ip
 8002844:	f1cc 0820 	rsb	r8, ip, #32
 8002848:	d918      	bls.n	800287c <rshift+0x64>
 800284a:	4677      	mov	r7, lr
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	fa02 f208 	lsl.w	r2, r2, r8
 8002852:	430a      	orrs	r2, r1
 8002854:	f847 2b04 	str.w	r2, [r7], #4
 8002858:	f853 1b04 	ldr.w	r1, [r3], #4
 800285c:	429d      	cmp	r5, r3
 800285e:	fa21 f10c 	lsr.w	r1, r1, ip
 8002862:	d8f3      	bhi.n	800284c <rshift+0x34>
 8002864:	1ba4      	subs	r4, r4, r6
 8002866:	00a3      	lsls	r3, r4, #2
 8002868:	3b05      	subs	r3, #5
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3301      	adds	r3, #1
 800286e:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
 8002872:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 8002876:	b1c9      	cbz	r1, 80028ac <rshift+0x94>
 8002878:	3404      	adds	r4, #4
 800287a:	e017      	b.n	80028ac <rshift+0x94>
 800287c:	6141      	str	r1, [r0, #20]
 800287e:	4674      	mov	r4, lr
 8002880:	2900      	cmp	r1, #0
 8002882:	d1f9      	bne.n	8002878 <rshift+0x60>
 8002884:	2300      	movs	r3, #0
 8002886:	6103      	str	r3, [r0, #16]
 8002888:	2300      	movs	r3, #0
 800288a:	6143      	str	r3, [r0, #20]
 800288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002890:	429d      	cmp	r5, r3
 8002892:	bf88      	it	hi
 8002894:	f100 0210 	addhi.w	r2, r0, #16
 8002898:	d9f4      	bls.n	8002884 <rshift+0x6c>
 800289a:	f853 1b04 	ldr.w	r1, [r3], #4
 800289e:	f842 1f04 	str.w	r1, [r2, #4]!
 80028a2:	429d      	cmp	r5, r3
 80028a4:	d8f9      	bhi.n	800289a <rshift+0x82>
 80028a6:	1ba4      	subs	r4, r4, r6
 80028a8:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 80028ac:	eba4 030e 	sub.w	r3, r4, lr
 80028b0:	109b      	asrs	r3, r3, #2
 80028b2:	4574      	cmp	r4, lr
 80028b4:	6103      	str	r3, [r0, #16]
 80028b6:	d0e7      	beq.n	8002888 <rshift+0x70>
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028bc <__gethex>:
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c0:	4cae      	ldr	r4, [pc, #696]	; (8002b7c <__gethex+0x2c0>)
 80028c2:	ed2d 8b02 	vpush	{d8}
 80028c6:	6824      	ldr	r4, [r4, #0]
 80028c8:	b08b      	sub	sp, #44	; 0x2c
 80028ca:	ee08 0a10 	vmov	s16, r0
 80028ce:	4620      	mov	r0, r4
 80028d0:	4689      	mov	r9, r1
 80028d2:	9203      	str	r2, [sp, #12]
 80028d4:	9307      	str	r3, [sp, #28]
 80028d6:	9404      	str	r4, [sp, #16]
 80028d8:	f7fe f9f2 	bl	8000cc0 <strlen>
 80028dc:	f8d9 3000 	ldr.w	r3, [r9]
 80028e0:	1821      	adds	r1, r4, r0
 80028e2:	4602      	mov	r2, r0
 80028e4:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 80028e8:	7899      	ldrb	r1, [r3, #2]
 80028ea:	2930      	cmp	r1, #48	; 0x30
 80028ec:	f040 81e5 	bne.w	8002cba <__gethex+0x3fe>
 80028f0:	f06f 0001 	mvn.w	r0, #1
 80028f4:	1ac0      	subs	r0, r0, r3
 80028f6:	3303      	adds	r3, #3
 80028f8:	eb00 0a03 	add.w	sl, r0, r3
 80028fc:	461c      	mov	r4, r3
 80028fe:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002902:	2930      	cmp	r1, #48	; 0x30
 8002904:	d0f8      	beq.n	80028f8 <__gethex+0x3c>
 8002906:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8002b80 <__gethex+0x2c4>
 800290a:	f818 3001 	ldrb.w	r3, [r8, r1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80f7 	beq.w	8002b02 <__gethex+0x246>
 8002914:	7823      	ldrb	r3, [r4, #0]
 8002916:	2700      	movs	r7, #0
 8002918:	f818 3003 	ldrb.w	r3, [r8, r3]
 800291c:	463d      	mov	r5, r7
 800291e:	4626      	mov	r6, r4
 8002920:	b12b      	cbz	r3, 800292e <__gethex+0x72>
 8002922:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002926:	f818 3003 	ldrb.w	r3, [r8, r3]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <__gethex+0x66>
 800292e:	9904      	ldr	r1, [sp, #16]
 8002930:	9202      	str	r2, [sp, #8]
 8002932:	4630      	mov	r0, r6
 8002934:	f001 ffd0 	bl	80048d8 <strncmp>
 8002938:	9a02      	ldr	r2, [sp, #8]
 800293a:	9001      	str	r0, [sp, #4]
 800293c:	2800      	cmp	r0, #0
 800293e:	f000 8096 	beq.w	8002a6e <__gethex+0x1b2>
 8002942:	2d00      	cmp	r5, #0
 8002944:	f040 8096 	bne.w	8002a74 <__gethex+0x1b8>
 8002948:	7833      	ldrb	r3, [r6, #0]
 800294a:	9501      	str	r5, [sp, #4]
 800294c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002950:	2b50      	cmp	r3, #80	; 0x50
 8002952:	4635      	mov	r5, r6
 8002954:	f000 8098 	beq.w	8002a88 <__gethex+0x1cc>
 8002958:	f8c9 6000 	str.w	r6, [r9]
 800295c:	2f00      	cmp	r7, #0
 800295e:	f040 80b0 	bne.w	8002ac2 <__gethex+0x206>
 8002962:	1b2b      	subs	r3, r5, r4
 8002964:	3b01      	subs	r3, #1
 8002966:	2b07      	cmp	r3, #7
 8002968:	4639      	mov	r1, r7
 800296a:	dd04      	ble.n	8002976 <__gethex+0xba>
 800296c:	105b      	asrs	r3, r3, #1
 800296e:	2b07      	cmp	r3, #7
 8002970:	f101 0101 	add.w	r1, r1, #1
 8002974:	dcfa      	bgt.n	800296c <__gethex+0xb0>
 8002976:	ee18 0a10 	vmov	r0, s16
 800297a:	9205      	str	r2, [sp, #20]
 800297c:	f000 fd96 	bl	80034ac <_Balloc>
 8002980:	9a05      	ldr	r2, [sp, #20]
 8002982:	9002      	str	r0, [sp, #8]
 8002984:	2800      	cmp	r0, #0
 8002986:	f000 8271 	beq.w	8002e6c <__gethex+0x5b0>
 800298a:	9b02      	ldr	r3, [sp, #8]
 800298c:	42ac      	cmp	r4, r5
 800298e:	f103 0614 	add.w	r6, r3, #20
 8002992:	9606      	str	r6, [sp, #24]
 8002994:	f080 81e7 	bcs.w	8002d66 <__gethex+0x4aa>
 8002998:	2700      	movs	r7, #0
 800299a:	f1c2 0301 	rsb	r3, r2, #1
 800299e:	46b9      	mov	r9, r7
 80029a0:	9305      	str	r3, [sp, #20]
 80029a2:	e010      	b.n	80029c6 <__gethex+0x10a>
 80029a4:	2f20      	cmp	r7, #32
 80029a6:	f000 8097 	beq.w	8002ad8 <__gethex+0x21c>
 80029aa:	4639      	mov	r1, r7
 80029ac:	3704      	adds	r7, #4
 80029ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80029b2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80029b6:	4655      	mov	r5, sl
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	408b      	lsls	r3, r1
 80029be:	42a5      	cmp	r5, r4
 80029c0:	ea49 0903 	orr.w	r9, r9, r3
 80029c4:	d916      	bls.n	80029f4 <__gethex+0x138>
 80029c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80029ca:	455b      	cmp	r3, fp
 80029cc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80029d0:	d1e8      	bne.n	80029a4 <__gethex+0xe8>
 80029d2:	9b05      	ldr	r3, [sp, #20]
 80029d4:	4453      	add	r3, sl
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	d3e4      	bcc.n	80029a4 <__gethex+0xe8>
 80029da:	4618      	mov	r0, r3
 80029dc:	9904      	ldr	r1, [sp, #16]
 80029de:	9209      	str	r2, [sp, #36]	; 0x24
 80029e0:	9308      	str	r3, [sp, #32]
 80029e2:	f001 ff79 	bl	80048d8 <strncmp>
 80029e6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d1da      	bne.n	80029a4 <__gethex+0xe8>
 80029ee:	461d      	mov	r5, r3
 80029f0:	42a5      	cmp	r5, r4
 80029f2:	d8e8      	bhi.n	80029c6 <__gethex+0x10a>
 80029f4:	f846 9b04 	str.w	r9, [r6], #4
 80029f8:	9b06      	ldr	r3, [sp, #24]
 80029fa:	1af6      	subs	r6, r6, r3
 80029fc:	9b02      	ldr	r3, [sp, #8]
 80029fe:	10b6      	asrs	r6, r6, #2
 8002a00:	611e      	str	r6, [r3, #16]
 8002a02:	4648      	mov	r0, r9
 8002a04:	f000 fe62 	bl	80036cc <__hi0bits>
 8002a08:	9b03      	ldr	r3, [sp, #12]
 8002a0a:	0176      	lsls	r6, r6, #5
 8002a0c:	681c      	ldr	r4, [r3, #0]
 8002a0e:	1a30      	subs	r0, r6, r0
 8002a10:	42a0      	cmp	r0, r4
 8002a12:	f300 80b7 	bgt.w	8002b84 <__gethex+0x2c8>
 8002a16:	f2c0 812f 	blt.w	8002c78 <__gethex+0x3bc>
 8002a1a:	2700      	movs	r7, #0
 8002a1c:	9b03      	ldr	r3, [sp, #12]
 8002a1e:	9a01      	ldr	r2, [sp, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f2c0 8193 	blt.w	8002d4e <__gethex+0x492>
 8002a28:	9903      	ldr	r1, [sp, #12]
 8002a2a:	9a01      	ldr	r2, [sp, #4]
 8002a2c:	684b      	ldr	r3, [r1, #4]
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	f340 8084 	ble.w	8002b3c <__gethex+0x280>
 8002a34:	1a9d      	subs	r5, r3, r2
 8002a36:	42ac      	cmp	r4, r5
 8002a38:	f300 80c4 	bgt.w	8002bc4 <__gethex+0x308>
 8002a3c:	68ca      	ldr	r2, [r1, #12]
 8002a3e:	2a02      	cmp	r2, #2
 8002a40:	f000 81c6 	beq.w	8002dd0 <__gethex+0x514>
 8002a44:	2a03      	cmp	r2, #3
 8002a46:	f000 81be 	beq.w	8002dc6 <__gethex+0x50a>
 8002a4a:	2a01      	cmp	r2, #1
 8002a4c:	f000 81a2 	beq.w	8002d94 <__gethex+0x4d8>
 8002a50:	ee18 0a10 	vmov	r0, s16
 8002a54:	9902      	ldr	r1, [sp, #8]
 8002a56:	f000 fd69 	bl	800352c <_Bfree>
 8002a5a:	2550      	movs	r5, #80	; 0x50
 8002a5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002a5e:	2300      	movs	r3, #0
 8002a60:	4628      	mov	r0, r5
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	b00b      	add	sp, #44	; 0x2c
 8002a66:	ecbd 8b02 	vpop	{d8}
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	f000 8111 	beq.w	8002c96 <__gethex+0x3da>
 8002a74:	1bad      	subs	r5, r5, r6
 8002a76:	00ab      	lsls	r3, r5, #2
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	7833      	ldrb	r3, [r6, #0]
 8002a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	4635      	mov	r5, r6
 8002a84:	f47f af68 	bne.w	8002958 <__gethex+0x9c>
 8002a88:	786b      	ldrb	r3, [r5, #1]
 8002a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8002a8c:	f000 80f2 	beq.w	8002c74 <__gethex+0x3b8>
 8002a90:	2b2d      	cmp	r3, #45	; 0x2d
 8002a92:	d06e      	beq.n	8002b72 <__gethex+0x2b6>
 8002a94:	1c6e      	adds	r6, r5, #1
 8002a96:	2000      	movs	r0, #0
 8002a98:	f818 1003 	ldrb.w	r1, [r8, r3]
 8002a9c:	1e4b      	subs	r3, r1, #1
 8002a9e:	2b18      	cmp	r3, #24
 8002aa0:	d865      	bhi.n	8002b6e <__gethex+0x2b2>
 8002aa2:	7873      	ldrb	r3, [r6, #1]
 8002aa4:	f818 3003 	ldrb.w	r3, [r8, r3]
 8002aa8:	3910      	subs	r1, #16
 8002aaa:	3601      	adds	r6, #1
 8002aac:	bb33      	cbnz	r3, 8002afc <__gethex+0x240>
 8002aae:	b100      	cbz	r0, 8002ab2 <__gethex+0x1f6>
 8002ab0:	4249      	negs	r1, r1
 8002ab2:	9b01      	ldr	r3, [sp, #4]
 8002ab4:	f8c9 6000 	str.w	r6, [r9]
 8002ab8:	440b      	add	r3, r1
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2f00      	cmp	r7, #0
 8002abe:	f43f af50 	beq.w	8002962 <__gethex+0xa6>
 8002ac2:	f1ba 0f00 	cmp.w	sl, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2500      	movne	r5, #0
 8002aca:	2506      	moveq	r5, #6
 8002acc:	4628      	mov	r0, r5
 8002ace:	b00b      	add	sp, #44	; 0x2c
 8002ad0:	ecbd 8b02 	vpop	{d8}
 8002ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f846 9b04 	str.w	r9, [r6], #4
 8002ade:	2704      	movs	r7, #4
 8002ae0:	4689      	mov	r9, r1
 8002ae2:	e764      	b.n	80029ae <__gethex+0xf2>
 8002ae4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ae8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8002aec:	f1a3 0110 	sub.w	r1, r3, #16
 8002af0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002af4:	f818 3003 	ldrb.w	r3, [r8, r3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0d8      	beq.n	8002aae <__gethex+0x1f2>
 8002afc:	2b19      	cmp	r3, #25
 8002afe:	ddf1      	ble.n	8002ae4 <__gethex+0x228>
 8002b00:	e7d5      	b.n	8002aae <__gethex+0x1f2>
 8002b02:	9904      	ldr	r1, [sp, #16]
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f001 fee6 	bl	80048d8 <strncmp>
 8002b0c:	9a01      	ldr	r2, [sp, #4]
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d176      	bne.n	8002c00 <__gethex+0x344>
 8002b12:	5ca1      	ldrb	r1, [r4, r2]
 8002b14:	f818 3001 	ldrb.w	r3, [r8, r1]
 8002b18:	18a5      	adds	r5, r4, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d072      	beq.n	8002c04 <__gethex+0x348>
 8002b1e:	2930      	cmp	r1, #48	; 0x30
 8002b20:	462c      	mov	r4, r5
 8002b22:	d105      	bne.n	8002b30 <__gethex+0x274>
 8002b24:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002b28:	2b30      	cmp	r3, #48	; 0x30
 8002b2a:	d0fb      	beq.n	8002b24 <__gethex+0x268>
 8002b2c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8002b30:	fab3 f783 	clz	r7, r3
 8002b34:	097f      	lsrs	r7, r7, #5
 8002b36:	f04f 0a01 	mov.w	sl, #1
 8002b3a:	e6f0      	b.n	800291e <__gethex+0x62>
 8002b3c:	2501      	movs	r5, #1
 8002b3e:	b157      	cbz	r7, 8002b56 <__gethex+0x29a>
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d065      	beq.n	8002c14 <__gethex+0x358>
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d067      	beq.n	8002c1c <__gethex+0x360>
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f000 8088 	beq.w	8002c62 <__gethex+0x3a6>
 8002b52:	f045 0510 	orr.w	r5, r5, #16
 8002b56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002b58:	9a02      	ldr	r2, [sp, #8]
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	9b07      	ldr	r3, [sp, #28]
 8002b5e:	9a01      	ldr	r2, [sp, #4]
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	4628      	mov	r0, r5
 8002b64:	b00b      	add	sp, #44	; 0x2c
 8002b66:	ecbd 8b02 	vpop	{d8}
 8002b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6e:	462e      	mov	r6, r5
 8002b70:	e6f2      	b.n	8002958 <__gethex+0x9c>
 8002b72:	2001      	movs	r0, #1
 8002b74:	78ab      	ldrb	r3, [r5, #2]
 8002b76:	1cae      	adds	r6, r5, #2
 8002b78:	e78e      	b.n	8002a98 <__gethex+0x1dc>
 8002b7a:	bf00      	nop
 8002b7c:	080097d0 	.word	0x080097d0
 8002b80:	080096d0 	.word	0x080096d0
 8002b84:	9d02      	ldr	r5, [sp, #8]
 8002b86:	1b06      	subs	r6, r0, r4
 8002b88:	4631      	mov	r1, r6
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f001 f9d2 	bl	8003f34 <__any_on>
 8002b90:	4607      	mov	r7, r0
 8002b92:	b178      	cbz	r0, 8002bb4 <__gethex+0x2f8>
 8002b94:	1e72      	subs	r2, r6, #1
 8002b96:	1153      	asrs	r3, r2, #5
 8002b98:	9906      	ldr	r1, [sp, #24]
 8002b9a:	2701      	movs	r7, #1
 8002b9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002ba0:	f002 031f 	and.w	r3, r2, #31
 8002ba4:	fa07 f303 	lsl.w	r3, r7, r3
 8002ba8:	420b      	tst	r3, r1
 8002baa:	d003      	beq.n	8002bb4 <__gethex+0x2f8>
 8002bac:	42ba      	cmp	r2, r7
 8002bae:	f300 80e4 	bgt.w	8002d7a <__gethex+0x4be>
 8002bb2:	2702      	movs	r7, #2
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	9802      	ldr	r0, [sp, #8]
 8002bb8:	4433      	add	r3, r6
 8002bba:	4631      	mov	r1, r6
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	f7ff fe2b 	bl	8002818 <rshift>
 8002bc2:	e72b      	b.n	8002a1c <__gethex+0x160>
 8002bc4:	1e6e      	subs	r6, r5, #1
 8002bc6:	2f00      	cmp	r7, #0
 8002bc8:	f040 80cb 	bne.w	8002d62 <__gethex+0x4a6>
 8002bcc:	2e00      	cmp	r6, #0
 8002bce:	f040 80ce 	bne.w	8002d6e <__gethex+0x4b2>
 8002bd2:	1173      	asrs	r3, r6, #5
 8002bd4:	9a06      	ldr	r2, [sp, #24]
 8002bd6:	9802      	ldr	r0, [sp, #8]
 8002bd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bdc:	f006 061f 	and.w	r6, r6, #31
 8002be0:	2301      	movs	r3, #1
 8002be2:	fa03 f606 	lsl.w	r6, r3, r6
 8002be6:	4216      	tst	r6, r2
 8002be8:	4629      	mov	r1, r5
 8002bea:	bf18      	it	ne
 8002bec:	f047 0702 	orrne.w	r7, r7, #2
 8002bf0:	f7ff fe12 	bl	8002818 <rshift>
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	1b64      	subs	r4, r4, r5
 8002bfc:	2502      	movs	r5, #2
 8002bfe:	e79e      	b.n	8002b3e <__gethex+0x282>
 8002c00:	7821      	ldrb	r1, [r4, #0]
 8002c02:	4625      	mov	r5, r4
 8002c04:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8002c08:	2950      	cmp	r1, #80	; 0x50
 8002c0a:	f000 80bf 	beq.w	8002d8c <__gethex+0x4d0>
 8002c0e:	f8c9 5000 	str.w	r5, [r9]
 8002c12:	e756      	b.n	8002ac2 <__gethex+0x206>
 8002c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c16:	f1c3 0301 	rsb	r3, r3, #1
 8002c1a:	9317      	str	r3, [sp, #92]	; 0x5c
 8002c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d097      	beq.n	8002b52 <__gethex+0x296>
 8002c22:	9b02      	ldr	r3, [sp, #8]
 8002c24:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8002c28:	691e      	ldr	r6, [r3, #16]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8002c32:	eb09 0086 	add.w	r0, r9, r6, lsl #2
 8002c36:	e003      	b.n	8002c40 <__gethex+0x384>
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	f843 1c04 	str.w	r1, [r3, #-4]
 8002c3e:	d940      	bls.n	8002cc2 <__gethex+0x406>
 8002c40:	461f      	mov	r7, r3
 8002c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002c4a:	d0f5      	beq.n	8002c38 <__gethex+0x37c>
 8002c4c:	3201      	adds	r2, #1
 8002c4e:	2d02      	cmp	r5, #2
 8002c50:	603a      	str	r2, [r7, #0]
 8002c52:	f000 80c2 	beq.w	8002dda <__gethex+0x51e>
 8002c56:	f014 041f 	ands.w	r4, r4, #31
 8002c5a:	f040 80e1 	bne.w	8002e20 <__gethex+0x564>
 8002c5e:	2521      	movs	r5, #33	; 0x21
 8002c60:	e779      	b.n	8002b56 <__gethex+0x29a>
 8002c62:	07ba      	lsls	r2, r7, #30
 8002c64:	f57f af75 	bpl.w	8002b52 <__gethex+0x296>
 8002c68:	9b06      	ldr	r3, [sp, #24]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	431f      	orrs	r7, r3
 8002c6e:	07fb      	lsls	r3, r7, #31
 8002c70:	d4d7      	bmi.n	8002c22 <__gethex+0x366>
 8002c72:	e76e      	b.n	8002b52 <__gethex+0x296>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e77d      	b.n	8002b74 <__gethex+0x2b8>
 8002c78:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8002c7c:	1a22      	subs	r2, r4, r0
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	ee18 0a10 	vmov	r0, s16
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	f000 fea5 	bl	80039d4 <__lshift>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	9002      	str	r0, [sp, #8]
 8002c90:	9306      	str	r3, [sp, #24]
 8002c92:	2700      	movs	r7, #0
 8002c94:	e6c2      	b.n	8002a1c <__gethex+0x160>
 8002c96:	5cb3      	ldrb	r3, [r6, r2]
 8002c98:	f818 1003 	ldrb.w	r1, [r8, r3]
 8002c9c:	18b0      	adds	r0, r6, r2
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	f43f ae53 	beq.w	800294c <__gethex+0x90>
 8002ca6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002caa:	f818 1003 	ldrb.w	r1, [r8, r3]
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <__gethex+0x3ea>
 8002cb2:	1b80      	subs	r0, r0, r6
 8002cb4:	0081      	lsls	r1, r0, #2
 8002cb6:	9101      	str	r1, [sp, #4]
 8002cb8:	e648      	b.n	800294c <__gethex+0x90>
 8002cba:	1c9c      	adds	r4, r3, #2
 8002cbc:	f04f 0a00 	mov.w	sl, #0
 8002cc0:	e621      	b.n	8002906 <__gethex+0x4a>
 8002cc2:	9b02      	ldr	r3, [sp, #8]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	429e      	cmp	r6, r3
 8002cc8:	f280 808e 	bge.w	8002de8 <__gethex+0x52c>
 8002ccc:	4633      	mov	r3, r6
 8002cce:	9902      	ldr	r1, [sp, #8]
 8002cd0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	610b      	str	r3, [r1, #16]
 8002cd8:	2d02      	cmp	r5, #2
 8002cda:	f04f 0101 	mov.w	r1, #1
 8002cde:	6151      	str	r1, [r2, #20]
 8002ce0:	d07b      	beq.n	8002dda <__gethex+0x51e>
 8002ce2:	429e      	cmp	r6, r3
 8002ce4:	dab7      	bge.n	8002c56 <__gethex+0x39a>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f340 80a7 	ble.w	8002e3a <__gethex+0x57e>
 8002cec:	9a02      	ldr	r2, [sp, #8]
 8002cee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002cf2:	6951      	ldr	r1, [r2, #20]
 8002cf4:	f102 0018 	add.w	r0, r2, #24
 8002cf8:	4283      	cmp	r3, r0
 8002cfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002cfe:	f240 80af 	bls.w	8002e60 <__gethex+0x5a4>
 8002d02:	464c      	mov	r4, r9
 8002d04:	6802      	ldr	r2, [r0, #0]
 8002d06:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 8002d0a:	f844 1b04 	str.w	r1, [r4], #4
 8002d0e:	f850 1b04 	ldr.w	r1, [r0], #4
 8002d12:	4283      	cmp	r3, r0
 8002d14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002d18:	d8f4      	bhi.n	8002d04 <__gethex+0x448>
 8002d1a:	9a02      	ldr	r2, [sp, #8]
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	3b19      	subs	r3, #25
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3301      	adds	r3, #1
 8002d24:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
 8002d28:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	f040 809b 	bne.w	8002e68 <__gethex+0x5ac>
 8002d32:	9902      	ldr	r1, [sp, #8]
 8002d34:	eba3 0209 	sub.w	r2, r3, r9
 8002d38:	1092      	asrs	r2, r2, #2
 8002d3a:	454b      	cmp	r3, r9
 8002d3c:	610a      	str	r2, [r1, #16]
 8002d3e:	d07f      	beq.n	8002e40 <__gethex+0x584>
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	9a01      	ldr	r2, [sp, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	3201      	adds	r2, #1
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	9201      	str	r2, [sp, #4]
 8002d4c:	da87      	bge.n	8002c5e <__gethex+0x3a2>
 8002d4e:	9902      	ldr	r1, [sp, #8]
 8002d50:	ee18 0a10 	vmov	r0, s16
 8002d54:	f000 fbea 	bl	800352c <_Bfree>
 8002d58:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	25a3      	movs	r5, #163	; 0xa3
 8002d60:	e6b4      	b.n	8002acc <__gethex+0x210>
 8002d62:	2701      	movs	r7, #1
 8002d64:	e735      	b.n	8002bd2 <__gethex+0x316>
 8002d66:	9e06      	ldr	r6, [sp, #24]
 8002d68:	f04f 0900 	mov.w	r9, #0
 8002d6c:	e642      	b.n	80029f4 <__gethex+0x138>
 8002d6e:	9802      	ldr	r0, [sp, #8]
 8002d70:	4631      	mov	r1, r6
 8002d72:	f001 f8df 	bl	8003f34 <__any_on>
 8002d76:	4607      	mov	r7, r0
 8002d78:	e72b      	b.n	8002bd2 <__gethex+0x316>
 8002d7a:	1eb1      	subs	r1, r6, #2
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f001 f8d9 	bl	8003f34 <__any_on>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	f43f af15 	beq.w	8002bb2 <__gethex+0x2f6>
 8002d88:	2703      	movs	r7, #3
 8002d8a:	e713      	b.n	8002bb4 <__gethex+0x2f8>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2701      	movs	r7, #1
 8002d92:	e679      	b.n	8002a88 <__gethex+0x1cc>
 8002d94:	42ac      	cmp	r4, r5
 8002d96:	f47f ae5b 	bne.w	8002a50 <__gethex+0x194>
 8002d9a:	2c01      	cmp	r4, #1
 8002d9c:	d008      	beq.n	8002db0 <__gethex+0x4f4>
 8002d9e:	9802      	ldr	r0, [sp, #8]
 8002da0:	1e61      	subs	r1, r4, #1
 8002da2:	f001 f8c7 	bl	8003f34 <__any_on>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	f43f ae52 	beq.w	8002a50 <__gethex+0x194>
 8002dac:	9b03      	ldr	r3, [sp, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	9907      	ldr	r1, [sp, #28]
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	9b02      	ldr	r3, [sp, #8]
 8002db6:	9906      	ldr	r1, [sp, #24]
 8002db8:	2201      	movs	r2, #1
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	600a      	str	r2, [r1, #0]
 8002dbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002dc0:	2562      	movs	r5, #98	; 0x62
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e682      	b.n	8002acc <__gethex+0x210>
 8002dc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	f43f ae41 	beq.w	8002a50 <__gethex+0x194>
 8002dce:	e7ef      	b.n	8002db0 <__gethex+0x4f4>
 8002dd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	f47f ae3c 	bne.w	8002a50 <__gethex+0x194>
 8002dd8:	e7ea      	b.n	8002db0 <__gethex+0x4f4>
 8002dda:	9b03      	ldr	r3, [sp, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	d031      	beq.n	8002e48 <__gethex+0x58c>
 8002de4:	2522      	movs	r5, #34	; 0x22
 8002de6:	e6b6      	b.n	8002b56 <__gethex+0x29a>
 8002de8:	9b02      	ldr	r3, [sp, #8]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	ee18 0a10 	vmov	r0, s16
 8002df0:	3101      	adds	r1, #1
 8002df2:	f000 fb5b 	bl	80034ac <_Balloc>
 8002df6:	4607      	mov	r7, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d03d      	beq.n	8002e78 <__gethex+0x5bc>
 8002dfc:	9902      	ldr	r1, [sp, #8]
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	3302      	adds	r3, #2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	310c      	adds	r1, #12
 8002e06:	300c      	adds	r0, #12
 8002e08:	f000 fa3a 	bl	8003280 <memcpy>
 8002e0c:	9902      	ldr	r1, [sp, #8]
 8002e0e:	ee18 0a10 	vmov	r0, s16
 8002e12:	f000 fb8b 	bl	800352c <_Bfree>
 8002e16:	f107 0914 	add.w	r9, r7, #20
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	9702      	str	r7, [sp, #8]
 8002e1e:	e756      	b.n	8002cce <__gethex+0x412>
 8002e20:	44c8      	add	r8, r9
 8002e22:	f1c4 0420 	rsb	r4, r4, #32
 8002e26:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8002e2a:	f000 fc4f 	bl	80036cc <__hi0bits>
 8002e2e:	42a0      	cmp	r0, r4
 8002e30:	f6bf af15 	bge.w	8002c5e <__gethex+0x3a2>
 8002e34:	9b02      	ldr	r3, [sp, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	e755      	b.n	8002ce6 <__gethex+0x42a>
 8002e3a:	9a02      	ldr	r2, [sp, #8]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6113      	str	r3, [r2, #16]
 8002e40:	9a02      	ldr	r2, [sp, #8]
 8002e42:	2300      	movs	r3, #0
 8002e44:	6153      	str	r3, [r2, #20]
 8002e46:	e77b      	b.n	8002d40 <__gethex+0x484>
 8002e48:	1163      	asrs	r3, r4, #5
 8002e4a:	f004 041f 	and.w	r4, r4, #31
 8002e4e:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 8002e52:	2301      	movs	r3, #1
 8002e54:	40a3      	lsls	r3, r4
 8002e56:	4213      	tst	r3, r2
 8002e58:	bf0c      	ite	eq
 8002e5a:	2522      	moveq	r5, #34	; 0x22
 8002e5c:	2521      	movne	r5, #33	; 0x21
 8002e5e:	e67a      	b.n	8002b56 <__gethex+0x29a>
 8002e60:	f8c9 1000 	str.w	r1, [r9]
 8002e64:	464b      	mov	r3, r9
 8002e66:	b169      	cbz	r1, 8002e84 <__gethex+0x5c8>
 8002e68:	3304      	adds	r3, #4
 8002e6a:	e762      	b.n	8002d32 <__gethex+0x476>
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <__gethex+0x5d0>)
 8002e6e:	4808      	ldr	r0, [pc, #32]	; (8002e90 <__gethex+0x5d4>)
 8002e70:	9a02      	ldr	r2, [sp, #8]
 8002e72:	21de      	movs	r1, #222	; 0xde
 8002e74:	f7fd f9e8 	bl	8000248 <__assert_func>
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <__gethex+0x5d0>)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <__gethex+0x5d4>)
 8002e7c:	463a      	mov	r2, r7
 8002e7e:	2184      	movs	r1, #132	; 0x84
 8002e80:	f7fd f9e2 	bl	8000248 <__assert_func>
 8002e84:	9b02      	ldr	r3, [sp, #8]
 8002e86:	6119      	str	r1, [r3, #16]
 8002e88:	e7da      	b.n	8002e40 <__gethex+0x584>
 8002e8a:	bf00      	nop
 8002e8c:	08009c24 	.word	0x08009c24
 8002e90:	08009c38 	.word	0x08009c38

08002e94 <__match>:
 8002e94:	b410      	push	{r4}
 8002e96:	6804      	ldr	r4, [r0, #0]
 8002e98:	e009      	b.n	8002eae <__match+0x1a>
 8002e9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002e9e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8002ea2:	f1bc 0f19 	cmp.w	ip, #25
 8002ea6:	bf98      	it	ls
 8002ea8:	3320      	addls	r3, #32
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d109      	bne.n	8002ec2 <__match+0x2e>
 8002eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d1f1      	bne.n	8002e9a <__match+0x6>
 8002eb6:	3401      	adds	r4, #1
 8002eb8:	6004      	str	r4, [r0, #0]
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <__hexnan>:
 8002ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed0:	6809      	ldr	r1, [r1, #0]
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	114b      	asrs	r3, r1, #5
 8002ed6:	f011 011f 	ands.w	r1, r1, #31
 8002eda:	9002      	str	r0, [sp, #8]
 8002edc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002ee0:	9103      	str	r1, [sp, #12]
 8002ee2:	f040 808e 	bne.w	8003002 <__hexnan+0x136>
 8002ee6:	1f1d      	subs	r5, r3, #4
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	9b02      	ldr	r3, [sp, #8]
 8002eec:	9901      	ldr	r1, [sp, #4]
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f841 3c04 	str.w	r3, [r1, #-4]
 8002ef6:	7861      	ldrb	r1, [r4, #1]
 8002ef8:	3401      	adds	r4, #1
 8002efa:	2900      	cmp	r1, #0
 8002efc:	f000 8097 	beq.w	800302e <__hexnan+0x162>
 8002f00:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003074 <__hexnan+0x1a8>
 8002f04:	46a8      	mov	r8, r5
 8002f06:	46ac      	mov	ip, r5
 8002f08:	469a      	mov	sl, r3
 8002f0a:	461e      	mov	r6, r3
 8002f0c:	e00e      	b.n	8002f2c <__hexnan+0x60>
 8002f0e:	2920      	cmp	r1, #32
 8002f10:	f200 808b 	bhi.w	800302a <__hexnan+0x15e>
 8002f14:	45b2      	cmp	sl, r6
 8002f16:	da06      	bge.n	8002f26 <__hexnan+0x5a>
 8002f18:	45c4      	cmp	ip, r8
 8002f1a:	d201      	bcs.n	8002f20 <__hexnan+0x54>
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	dd5b      	ble.n	8002fd8 <__hexnan+0x10c>
 8002f20:	4562      	cmp	r2, ip
 8002f22:	d351      	bcc.n	8002fc8 <__hexnan+0xfc>
 8002f24:	2308      	movs	r3, #8
 8002f26:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002f2a:	b1a1      	cbz	r1, 8002f56 <__hexnan+0x8a>
 8002f2c:	f819 0001 	ldrb.w	r0, [r9, r1]
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d0ec      	beq.n	8002f0e <__hexnan+0x42>
 8002f34:	3301      	adds	r3, #1
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	f106 0601 	add.w	r6, r6, #1
 8002f3c:	dc3a      	bgt.n	8002fb4 <__hexnan+0xe8>
 8002f3e:	f8dc 1000 	ldr.w	r1, [ip]
 8002f42:	0109      	lsls	r1, r1, #4
 8002f44:	f000 000f 	and.w	r0, r0, #15
 8002f48:	4308      	orrs	r0, r1
 8002f4a:	f8cc 0000 	str.w	r0, [ip]
 8002f4e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002f52:	2900      	cmp	r1, #0
 8002f54:	d1ea      	bne.n	8002f2c <__hexnan+0x60>
 8002f56:	2e00      	cmp	r6, #0
 8002f58:	d069      	beq.n	800302e <__hexnan+0x162>
 8002f5a:	45e0      	cmp	r8, ip
 8002f5c:	d901      	bls.n	8002f62 <__hexnan+0x96>
 8002f5e:	2b07      	cmp	r3, #7
 8002f60:	dd73      	ble.n	800304a <__hexnan+0x17e>
 8002f62:	4562      	cmp	r2, ip
 8002f64:	d251      	bcs.n	800300a <__hexnan+0x13e>
 8002f66:	1f11      	subs	r1, r2, #4
 8002f68:	4663      	mov	r3, ip
 8002f6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8002f6e:	f841 0f04 	str.w	r0, [r1, #4]!
 8002f72:	429d      	cmp	r5, r3
 8002f74:	d2f9      	bcs.n	8002f6a <__hexnan+0x9e>
 8002f76:	eba5 030c 	sub.w	r3, r5, ip
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	1c69      	adds	r1, r5, #1
 8002f80:	3304      	adds	r3, #4
 8002f82:	f10c 0c01 	add.w	ip, ip, #1
 8002f86:	4561      	cmp	r1, ip
 8002f88:	bf38      	it	cc
 8002f8a:	2304      	movcc	r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f843 1b04 	str.w	r1, [r3], #4
 8002f94:	429d      	cmp	r5, r3
 8002f96:	d2fb      	bcs.n	8002f90 <__hexnan+0xc4>
 8002f98:	9b01      	ldr	r3, [sp, #4]
 8002f9a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8002f9e:	b92b      	cbnz	r3, 8002fac <__hexnan+0xe0>
 8002fa0:	42aa      	cmp	r2, r5
 8002fa2:	d048      	beq.n	8003036 <__hexnan+0x16a>
 8002fa4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f9      	beq.n	8002fa0 <__hexnan+0xd4>
 8002fac:	2005      	movs	r0, #5
 8002fae:	b005      	add	sp, #20
 8002fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb4:	4562      	cmp	r2, ip
 8002fb6:	d2b6      	bcs.n	8002f26 <__hexnan+0x5a>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f1ac 0c04 	sub.w	ip, ip, #4
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e7bd      	b.n	8002f44 <__hexnan+0x78>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f1ac 0804 	sub.w	r8, ip, #4
 8002fce:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002fd2:	46b2      	mov	sl, r6
 8002fd4:	46c4      	mov	ip, r8
 8002fd6:	e7a6      	b.n	8002f26 <__hexnan+0x5a>
 8002fd8:	f1c3 0108 	rsb	r1, r3, #8
 8002fdc:	0089      	lsls	r1, r1, #2
 8002fde:	f8dc 3000 	ldr.w	r3, [ip]
 8002fe2:	f1c1 0e20 	rsb	lr, r1, #32
 8002fe6:	4660      	mov	r0, ip
 8002fe8:	468b      	mov	fp, r1
 8002fea:	6841      	ldr	r1, [r0, #4]
 8002fec:	fa01 f70e 	lsl.w	r7, r1, lr
 8002ff0:	433b      	orrs	r3, r7
 8002ff2:	6003      	str	r3, [r0, #0]
 8002ff4:	fa21 f30b 	lsr.w	r3, r1, fp
 8002ff8:	f840 3f04 	str.w	r3, [r0, #4]!
 8002ffc:	4540      	cmp	r0, r8
 8002ffe:	d3f4      	bcc.n	8002fea <__hexnan+0x11e>
 8003000:	e78e      	b.n	8002f20 <__hexnan+0x54>
 8003002:	1d19      	adds	r1, r3, #4
 8003004:	9101      	str	r1, [sp, #4]
 8003006:	461d      	mov	r5, r3
 8003008:	e76f      	b.n	8002eea <__hexnan+0x1e>
 800300a:	9b03      	ldr	r3, [sp, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0c3      	beq.n	8002f98 <__hexnan+0xcc>
 8003010:	9b03      	ldr	r3, [sp, #12]
 8003012:	9801      	ldr	r0, [sp, #4]
 8003014:	f1c3 0120 	rsb	r1, r3, #32
 8003018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301c:	40cb      	lsrs	r3, r1
 800301e:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003022:	400b      	ands	r3, r1
 8003024:	f840 3c04 	str.w	r3, [r0, #-4]
 8003028:	e7b9      	b.n	8002f9e <__hexnan+0xd2>
 800302a:	2929      	cmp	r1, #41	; 0x29
 800302c:	d009      	beq.n	8003042 <__hexnan+0x176>
 800302e:	2004      	movs	r0, #4
 8003030:	b005      	add	sp, #20
 8003032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003036:	2301      	movs	r3, #1
 8003038:	2005      	movs	r0, #5
 800303a:	602b      	str	r3, [r5, #0]
 800303c:	b005      	add	sp, #20
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003042:	9902      	ldr	r1, [sp, #8]
 8003044:	3401      	adds	r4, #1
 8003046:	600c      	str	r4, [r1, #0]
 8003048:	e785      	b.n	8002f56 <__hexnan+0x8a>
 800304a:	f1c3 0308 	rsb	r3, r3, #8
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f8dc 1000 	ldr.w	r1, [ip]
 8003054:	f1c3 0720 	rsb	r7, r3, #32
 8003058:	4664      	mov	r4, ip
 800305a:	6866      	ldr	r6, [r4, #4]
 800305c:	fa06 f007 	lsl.w	r0, r6, r7
 8003060:	4301      	orrs	r1, r0
 8003062:	6021      	str	r1, [r4, #0]
 8003064:	fa26 f103 	lsr.w	r1, r6, r3
 8003068:	f844 1f04 	str.w	r1, [r4, #4]!
 800306c:	45a0      	cmp	r8, r4
 800306e:	d8f4      	bhi.n	800305a <__hexnan+0x18e>
 8003070:	e777      	b.n	8002f62 <__hexnan+0x96>
 8003072:	bf00      	nop
 8003074:	080096d0 	.word	0x080096d0

08003078 <__smakebuf_r>:
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	898b      	ldrh	r3, [r1, #12]
 800307c:	460c      	mov	r4, r1
 800307e:	0799      	lsls	r1, r3, #30
 8003080:	b097      	sub	sp, #92	; 0x5c
 8003082:	d507      	bpl.n	8003094 <__smakebuf_r+0x1c>
 8003084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003088:	2201      	movs	r2, #1
 800308a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	b017      	add	sp, #92	; 0x5c
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003098:	2900      	cmp	r1, #0
 800309a:	4605      	mov	r5, r0
 800309c:	db2d      	blt.n	80030fa <__smakebuf_r+0x82>
 800309e:	466a      	mov	r2, sp
 80030a0:	f001 fc9a 	bl	80049d8 <_fstat_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	db27      	blt.n	80030f8 <__smakebuf_r+0x80>
 80030a8:	9e01      	ldr	r6, [sp, #4]
 80030aa:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80030ae:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80030b2:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80030b6:	fab6 f686 	clz	r6, r6
 80030ba:	4639      	mov	r1, r7
 80030bc:	4628      	mov	r0, r5
 80030be:	0976      	lsrs	r6, r6, #5
 80030c0:	f000 ffda 	bl	8004078 <_malloc_r>
 80030c4:	b330      	cbz	r0, 8003114 <__smakebuf_r+0x9c>
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <__smakebuf_r+0xbc>)
 80030ca:	62aa      	str	r2, [r5, #40]	; 0x28
 80030cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80030d4:	81a3      	strh	r3, [r4, #12]
 80030d6:	6020      	str	r0, [r4, #0]
 80030d8:	2e00      	cmp	r6, #0
 80030da:	d0d9      	beq.n	8003090 <__smakebuf_r+0x18>
 80030dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030e0:	4628      	mov	r0, r5
 80030e2:	f001 fc8f 	bl	8004a04 <_isatty_r>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d0d2      	beq.n	8003090 <__smakebuf_r+0x18>
 80030ea:	89a3      	ldrh	r3, [r4, #12]
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	e7cb      	b.n	8003090 <__smakebuf_r+0x18>
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030fe:	bf14      	ite	ne
 8003100:	2740      	movne	r7, #64	; 0x40
 8003102:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8003106:	4639      	mov	r1, r7
 8003108:	4628      	mov	r0, r5
 800310a:	2600      	movs	r6, #0
 800310c:	f000 ffb4 	bl	8004078 <_malloc_r>
 8003110:	2800      	cmp	r0, #0
 8003112:	d1d8      	bne.n	80030c6 <__smakebuf_r+0x4e>
 8003114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003118:	059a      	lsls	r2, r3, #22
 800311a:	d4b9      	bmi.n	8003090 <__smakebuf_r+0x18>
 800311c:	f023 0303 	bic.w	r3, r3, #3
 8003120:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	2101      	movs	r1, #1
 800312a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	6022      	str	r2, [r4, #0]
 8003132:	e7ad      	b.n	8003090 <__smakebuf_r+0x18>
 8003134:	0800226d 	.word	0x0800226d

08003138 <__swhatbuf_r>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	460c      	mov	r4, r1
 800313c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003140:	2900      	cmp	r1, #0
 8003142:	b096      	sub	sp, #88	; 0x58
 8003144:	4616      	mov	r6, r2
 8003146:	461d      	mov	r5, r3
 8003148:	db13      	blt.n	8003172 <__swhatbuf_r+0x3a>
 800314a:	466a      	mov	r2, sp
 800314c:	f001 fc44 	bl	80049d8 <_fstat_r>
 8003150:	2800      	cmp	r0, #0
 8003152:	db0e      	blt.n	8003172 <__swhatbuf_r+0x3a>
 8003154:	9901      	ldr	r1, [sp, #4]
 8003156:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800315a:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 800315e:	fab1 f181 	clz	r1, r1
 8003162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003166:	0949      	lsrs	r1, r1, #5
 8003168:	2000      	movs	r0, #0
 800316a:	6029      	str	r1, [r5, #0]
 800316c:	6033      	str	r3, [r6, #0]
 800316e:	b016      	add	sp, #88	; 0x58
 8003170:	bd70      	pop	{r4, r5, r6, pc}
 8003172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	602a      	str	r2, [r5, #0]
 800317c:	d504      	bpl.n	8003188 <__swhatbuf_r+0x50>
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	2000      	movs	r0, #0
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	b016      	add	sp, #88	; 0x58
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	2000      	movs	r0, #0
 800318e:	6033      	str	r3, [r6, #0]
 8003190:	b016      	add	sp, #88	; 0x58
 8003192:	bd70      	pop	{r4, r5, r6, pc}

08003194 <_mbtowc_r>:
 8003194:	b410      	push	{r4}
 8003196:	4c03      	ldr	r4, [pc, #12]	; (80031a4 <_mbtowc_r+0x10>)
 8003198:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 800319c:	46a4      	mov	ip, r4
 800319e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031a2:	4760      	bx	ip
 80031a4:	20000068 	.word	0x20000068

080031a8 <__ascii_mbtowc>:
 80031a8:	b082      	sub	sp, #8
 80031aa:	b149      	cbz	r1, 80031c0 <__ascii_mbtowc+0x18>
 80031ac:	b15a      	cbz	r2, 80031c6 <__ascii_mbtowc+0x1e>
 80031ae:	b16b      	cbz	r3, 80031cc <__ascii_mbtowc+0x24>
 80031b0:	7813      	ldrb	r3, [r2, #0]
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	1e10      	subs	r0, r2, #0
 80031b8:	bf18      	it	ne
 80031ba:	2001      	movne	r0, #1
 80031bc:	b002      	add	sp, #8
 80031be:	4770      	bx	lr
 80031c0:	a901      	add	r1, sp, #4
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d1f3      	bne.n	80031ae <__ascii_mbtowc+0x6>
 80031c6:	4610      	mov	r0, r2
 80031c8:	b002      	add	sp, #8
 80031ca:	4770      	bx	lr
 80031cc:	f06f 0001 	mvn.w	r0, #1
 80031d0:	e7f4      	b.n	80031bc <__ascii_mbtowc+0x14>
 80031d2:	bf00      	nop
	...

080031e0 <memchr>:
 80031e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80031e4:	2a10      	cmp	r2, #16
 80031e6:	db2b      	blt.n	8003240 <memchr+0x60>
 80031e8:	f010 0f07 	tst.w	r0, #7
 80031ec:	d008      	beq.n	8003200 <memchr+0x20>
 80031ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031f2:	3a01      	subs	r2, #1
 80031f4:	428b      	cmp	r3, r1
 80031f6:	d02d      	beq.n	8003254 <memchr+0x74>
 80031f8:	f010 0f07 	tst.w	r0, #7
 80031fc:	b342      	cbz	r2, 8003250 <memchr+0x70>
 80031fe:	d1f6      	bne.n	80031ee <memchr+0xe>
 8003200:	b4f0      	push	{r4, r5, r6, r7}
 8003202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800320a:	f022 0407 	bic.w	r4, r2, #7
 800320e:	f07f 0700 	mvns.w	r7, #0
 8003212:	2300      	movs	r3, #0
 8003214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003218:	3c08      	subs	r4, #8
 800321a:	ea85 0501 	eor.w	r5, r5, r1
 800321e:	ea86 0601 	eor.w	r6, r6, r1
 8003222:	fa85 f547 	uadd8	r5, r5, r7
 8003226:	faa3 f587 	sel	r5, r3, r7
 800322a:	fa86 f647 	uadd8	r6, r6, r7
 800322e:	faa5 f687 	sel	r6, r5, r7
 8003232:	b98e      	cbnz	r6, 8003258 <memchr+0x78>
 8003234:	d1ee      	bne.n	8003214 <memchr+0x34>
 8003236:	bcf0      	pop	{r4, r5, r6, r7}
 8003238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800323c:	f002 0207 	and.w	r2, r2, #7
 8003240:	b132      	cbz	r2, 8003250 <memchr+0x70>
 8003242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003246:	3a01      	subs	r2, #1
 8003248:	ea83 0301 	eor.w	r3, r3, r1
 800324c:	b113      	cbz	r3, 8003254 <memchr+0x74>
 800324e:	d1f8      	bne.n	8003242 <memchr+0x62>
 8003250:	2000      	movs	r0, #0
 8003252:	4770      	bx	lr
 8003254:	3801      	subs	r0, #1
 8003256:	4770      	bx	lr
 8003258:	2d00      	cmp	r5, #0
 800325a:	bf06      	itte	eq
 800325c:	4635      	moveq	r5, r6
 800325e:	3803      	subeq	r0, #3
 8003260:	3807      	subne	r0, #7
 8003262:	f015 0f01 	tst.w	r5, #1
 8003266:	d107      	bne.n	8003278 <memchr+0x98>
 8003268:	3001      	adds	r0, #1
 800326a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800326e:	bf02      	ittt	eq
 8003270:	3001      	addeq	r0, #1
 8003272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003276:	3001      	addeq	r0, #1
 8003278:	bcf0      	pop	{r4, r5, r6, r7}
 800327a:	3801      	subs	r0, #1
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop

08003280 <memcpy>:
 8003280:	4684      	mov	ip, r0
 8003282:	ea41 0300 	orr.w	r3, r1, r0
 8003286:	f013 0303 	ands.w	r3, r3, #3
 800328a:	d16d      	bne.n	8003368 <memcpy+0xe8>
 800328c:	3a40      	subs	r2, #64	; 0x40
 800328e:	d341      	bcc.n	8003314 <memcpy+0x94>
 8003290:	f851 3b04 	ldr.w	r3, [r1], #4
 8003294:	f840 3b04 	str.w	r3, [r0], #4
 8003298:	f851 3b04 	ldr.w	r3, [r1], #4
 800329c:	f840 3b04 	str.w	r3, [r0], #4
 80032a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032a4:	f840 3b04 	str.w	r3, [r0], #4
 80032a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032ac:	f840 3b04 	str.w	r3, [r0], #4
 80032b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032b4:	f840 3b04 	str.w	r3, [r0], #4
 80032b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032bc:	f840 3b04 	str.w	r3, [r0], #4
 80032c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032c4:	f840 3b04 	str.w	r3, [r0], #4
 80032c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032cc:	f840 3b04 	str.w	r3, [r0], #4
 80032d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032d4:	f840 3b04 	str.w	r3, [r0], #4
 80032d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032dc:	f840 3b04 	str.w	r3, [r0], #4
 80032e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032e4:	f840 3b04 	str.w	r3, [r0], #4
 80032e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032ec:	f840 3b04 	str.w	r3, [r0], #4
 80032f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80032f4:	f840 3b04 	str.w	r3, [r0], #4
 80032f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80032fc:	f840 3b04 	str.w	r3, [r0], #4
 8003300:	f851 3b04 	ldr.w	r3, [r1], #4
 8003304:	f840 3b04 	str.w	r3, [r0], #4
 8003308:	f851 3b04 	ldr.w	r3, [r1], #4
 800330c:	f840 3b04 	str.w	r3, [r0], #4
 8003310:	3a40      	subs	r2, #64	; 0x40
 8003312:	d2bd      	bcs.n	8003290 <memcpy+0x10>
 8003314:	3230      	adds	r2, #48	; 0x30
 8003316:	d311      	bcc.n	800333c <memcpy+0xbc>
 8003318:	f851 3b04 	ldr.w	r3, [r1], #4
 800331c:	f840 3b04 	str.w	r3, [r0], #4
 8003320:	f851 3b04 	ldr.w	r3, [r1], #4
 8003324:	f840 3b04 	str.w	r3, [r0], #4
 8003328:	f851 3b04 	ldr.w	r3, [r1], #4
 800332c:	f840 3b04 	str.w	r3, [r0], #4
 8003330:	f851 3b04 	ldr.w	r3, [r1], #4
 8003334:	f840 3b04 	str.w	r3, [r0], #4
 8003338:	3a10      	subs	r2, #16
 800333a:	d2ed      	bcs.n	8003318 <memcpy+0x98>
 800333c:	320c      	adds	r2, #12
 800333e:	d305      	bcc.n	800334c <memcpy+0xcc>
 8003340:	f851 3b04 	ldr.w	r3, [r1], #4
 8003344:	f840 3b04 	str.w	r3, [r0], #4
 8003348:	3a04      	subs	r2, #4
 800334a:	d2f9      	bcs.n	8003340 <memcpy+0xc0>
 800334c:	3204      	adds	r2, #4
 800334e:	d008      	beq.n	8003362 <memcpy+0xe2>
 8003350:	07d2      	lsls	r2, r2, #31
 8003352:	bf1c      	itt	ne
 8003354:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003358:	f800 3b01 	strbne.w	r3, [r0], #1
 800335c:	d301      	bcc.n	8003362 <memcpy+0xe2>
 800335e:	880b      	ldrh	r3, [r1, #0]
 8003360:	8003      	strh	r3, [r0, #0]
 8003362:	4660      	mov	r0, ip
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2a08      	cmp	r2, #8
 800336a:	d313      	bcc.n	8003394 <memcpy+0x114>
 800336c:	078b      	lsls	r3, r1, #30
 800336e:	d08d      	beq.n	800328c <memcpy+0xc>
 8003370:	f010 0303 	ands.w	r3, r0, #3
 8003374:	d08a      	beq.n	800328c <memcpy+0xc>
 8003376:	f1c3 0304 	rsb	r3, r3, #4
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	bf1c      	itt	ne
 8003380:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003384:	f800 3b01 	strbne.w	r3, [r0], #1
 8003388:	d380      	bcc.n	800328c <memcpy+0xc>
 800338a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800338e:	f820 3b02 	strh.w	r3, [r0], #2
 8003392:	e77b      	b.n	800328c <memcpy+0xc>
 8003394:	3a04      	subs	r2, #4
 8003396:	d3d9      	bcc.n	800334c <memcpy+0xcc>
 8003398:	3a01      	subs	r2, #1
 800339a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800339e:	f800 3b01 	strb.w	r3, [r0], #1
 80033a2:	d2f9      	bcs.n	8003398 <memcpy+0x118>
 80033a4:	780b      	ldrb	r3, [r1, #0]
 80033a6:	7003      	strb	r3, [r0, #0]
 80033a8:	784b      	ldrb	r3, [r1, #1]
 80033aa:	7043      	strb	r3, [r0, #1]
 80033ac:	788b      	ldrb	r3, [r1, #2]
 80033ae:	7083      	strb	r3, [r0, #2]
 80033b0:	4660      	mov	r0, ip
 80033b2:	4770      	bx	lr

080033b4 <memmove>:
 80033b4:	4288      	cmp	r0, r1
 80033b6:	d90d      	bls.n	80033d4 <memmove+0x20>
 80033b8:	188b      	adds	r3, r1, r2
 80033ba:	4283      	cmp	r3, r0
 80033bc:	d90a      	bls.n	80033d4 <memmove+0x20>
 80033be:	eb00 0c02 	add.w	ip, r0, r2
 80033c2:	b1ba      	cbz	r2, 80033f4 <memmove+0x40>
 80033c4:	4662      	mov	r2, ip
 80033c6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80033ca:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80033ce:	4299      	cmp	r1, r3
 80033d0:	d1f9      	bne.n	80033c6 <memmove+0x12>
 80033d2:	4770      	bx	lr
 80033d4:	2a0f      	cmp	r2, #15
 80033d6:	d80e      	bhi.n	80033f6 <memmove+0x42>
 80033d8:	4603      	mov	r3, r0
 80033da:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80033de:	b14a      	cbz	r2, 80033f4 <memmove+0x40>
 80033e0:	f10c 0c01 	add.w	ip, ip, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	448c      	add	ip, r1
 80033e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f0:	4561      	cmp	r1, ip
 80033f2:	d1f9      	bne.n	80033e8 <memmove+0x34>
 80033f4:	4770      	bx	lr
 80033f6:	ea40 0301 	orr.w	r3, r0, r1
 80033fa:	079b      	lsls	r3, r3, #30
 80033fc:	d150      	bne.n	80034a0 <memmove+0xec>
 80033fe:	f1a2 0310 	sub.w	r3, r2, #16
 8003402:	b570      	push	{r4, r5, r6, lr}
 8003404:	f101 0c20 	add.w	ip, r1, #32
 8003408:	f023 050f 	bic.w	r5, r3, #15
 800340c:	f101 0e10 	add.w	lr, r1, #16
 8003410:	f100 0410 	add.w	r4, r0, #16
 8003414:	44ac      	add	ip, r5
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800341c:	f844 5c10 	str.w	r5, [r4, #-16]
 8003420:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8003424:	f844 5c0c 	str.w	r5, [r4, #-12]
 8003428:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800342c:	f844 5c08 	str.w	r5, [r4, #-8]
 8003430:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8003434:	f844 5c04 	str.w	r5, [r4, #-4]
 8003438:	f10e 0e10 	add.w	lr, lr, #16
 800343c:	45e6      	cmp	lr, ip
 800343e:	f104 0410 	add.w	r4, r4, #16
 8003442:	d1e9      	bne.n	8003418 <memmove+0x64>
 8003444:	3301      	adds	r3, #1
 8003446:	f012 0f0c 	tst.w	r2, #12
 800344a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800344e:	f002 040f 	and.w	r4, r2, #15
 8003452:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003456:	d027      	beq.n	80034a8 <memmove+0xf4>
 8003458:	3c04      	subs	r4, #4
 800345a:	f024 0603 	bic.w	r6, r4, #3
 800345e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8003462:	441e      	add	r6, r3
 8003464:	1f1c      	subs	r4, r3, #4
 8003466:	468e      	mov	lr, r1
 8003468:	f85e 5b04 	ldr.w	r5, [lr], #4
 800346c:	f844 5f04 	str.w	r5, [r4, #4]!
 8003470:	42b4      	cmp	r4, r6
 8003472:	d1f9      	bne.n	8003468 <memmove+0xb4>
 8003474:	f10c 0401 	add.w	r4, ip, #1
 8003478:	f002 0203 	and.w	r2, r2, #3
 800347c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003480:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003484:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8003488:	b14a      	cbz	r2, 800349e <memmove+0xea>
 800348a:	f10c 0c01 	add.w	ip, ip, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	448c      	add	ip, r1
 8003492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800349a:	4561      	cmp	r1, ip
 800349c:	d1f9      	bne.n	8003492 <memmove+0xde>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80034a4:	4603      	mov	r3, r0
 80034a6:	e79b      	b.n	80033e0 <memmove+0x2c>
 80034a8:	4622      	mov	r2, r4
 80034aa:	e7eb      	b.n	8003484 <memmove+0xd0>

080034ac <_Balloc>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80034b0:	4605      	mov	r5, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	b15e      	cbz	r6, 80034ce <_Balloc+0x22>
 80034b6:	68f3      	ldr	r3, [r6, #12]
 80034b8:	b1a3      	cbz	r3, 80034e4 <_Balloc+0x38>
 80034ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034be:	b1e8      	cbz	r0, 80034fc <_Balloc+0x50>
 80034c0:	6802      	ldr	r2, [r0, #0]
 80034c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80034c6:	2300      	movs	r3, #0
 80034c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
 80034ce:	2010      	movs	r0, #16
 80034d0:	f001 fac0 	bl	8004a54 <malloc>
 80034d4:	4606      	mov	r6, r0
 80034d6:	6268      	str	r0, [r5, #36]	; 0x24
 80034d8:	b1e8      	cbz	r0, 8003516 <_Balloc+0x6a>
 80034da:	2300      	movs	r3, #0
 80034dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80034e0:	6003      	str	r3, [r0, #0]
 80034e2:	60c3      	str	r3, [r0, #12]
 80034e4:	2221      	movs	r2, #33	; 0x21
 80034e6:	2104      	movs	r1, #4
 80034e8:	4628      	mov	r0, r5
 80034ea:	f000 fd55 	bl	8003f98 <_calloc_r>
 80034ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034f0:	60f0      	str	r0, [r6, #12]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e0      	bne.n	80034ba <_Balloc+0xe>
 80034f8:	2000      	movs	r0, #0
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f604 	lsl.w	r6, r1, r4
 8003502:	1d72      	adds	r2, r6, #5
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	4628      	mov	r0, r5
 8003508:	f000 fd46 	bl	8003f98 <_calloc_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	d0f3      	beq.n	80034f8 <_Balloc+0x4c>
 8003510:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8003514:	e7d7      	b.n	80034c6 <_Balloc+0x1a>
 8003516:	4b03      	ldr	r3, [pc, #12]	; (8003524 <_Balloc+0x78>)
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <_Balloc+0x7c>)
 800351a:	4632      	mov	r2, r6
 800351c:	2166      	movs	r1, #102	; 0x66
 800351e:	f7fc fe93 	bl	8000248 <__assert_func>
 8003522:	bf00      	nop
 8003524:	08009c84 	.word	0x08009c84
 8003528:	08009c9c 	.word	0x08009c9c

0800352c <_Bfree>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003530:	4604      	mov	r4, r0
 8003532:	460e      	mov	r6, r1
 8003534:	b14d      	cbz	r5, 800354a <_Bfree+0x1e>
 8003536:	b13e      	cbz	r6, 8003548 <_Bfree+0x1c>
 8003538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800353a:	6872      	ldr	r2, [r6, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003542:	6030      	str	r0, [r6, #0]
 8003544:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	2010      	movs	r0, #16
 800354c:	f001 fa82 	bl	8004a54 <malloc>
 8003550:	4602      	mov	r2, r0
 8003552:	6260      	str	r0, [r4, #36]	; 0x24
 8003554:	b120      	cbz	r0, 8003560 <_Bfree+0x34>
 8003556:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800355a:	6005      	str	r5, [r0, #0]
 800355c:	60c5      	str	r5, [r0, #12]
 800355e:	e7ea      	b.n	8003536 <_Bfree+0xa>
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <_Bfree+0x40>)
 8003562:	4803      	ldr	r0, [pc, #12]	; (8003570 <_Bfree+0x44>)
 8003564:	218a      	movs	r1, #138	; 0x8a
 8003566:	f7fc fe6f 	bl	8000248 <__assert_func>
 800356a:	bf00      	nop
 800356c:	08009c84 	.word	0x08009c84
 8003570:	08009c9c 	.word	0x08009c9c

08003574 <__multadd>:
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	690c      	ldr	r4, [r1, #16]
 8003578:	4606      	mov	r6, r0
 800357a:	b083      	sub	sp, #12
 800357c:	460d      	mov	r5, r1
 800357e:	f101 0e14 	add.w	lr, r1, #20
 8003582:	2000      	movs	r0, #0
 8003584:	f8de 1000 	ldr.w	r1, [lr]
 8003588:	fa1f fc81 	uxth.w	ip, r1
 800358c:	fb02 330c 	mla	r3, r2, ip, r3
 8003590:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8003594:	0c09      	lsrs	r1, r1, #16
 8003596:	fb02 cc01 	mla	ip, r2, r1, ip
 800359a:	3001      	adds	r0, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80035a2:	4284      	cmp	r4, r0
 80035a4:	f84e 3b04 	str.w	r3, [lr], #4
 80035a8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80035ac:	dcea      	bgt.n	8003584 <__multadd+0x10>
 80035ae:	b13b      	cbz	r3, 80035c0 <__multadd+0x4c>
 80035b0:	68aa      	ldr	r2, [r5, #8]
 80035b2:	42a2      	cmp	r2, r4
 80035b4:	dd07      	ble.n	80035c6 <__multadd+0x52>
 80035b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80035ba:	3401      	adds	r4, #1
 80035bc:	6153      	str	r3, [r2, #20]
 80035be:	612c      	str	r4, [r5, #16]
 80035c0:	4628      	mov	r0, r5
 80035c2:	b003      	add	sp, #12
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	6869      	ldr	r1, [r5, #4]
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	3101      	adds	r1, #1
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7ff ff6d 	bl	80034ac <_Balloc>
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	4607      	mov	r7, r0
 80035d6:	b1a0      	cbz	r0, 8003602 <__multadd+0x8e>
 80035d8:	692a      	ldr	r2, [r5, #16]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	3202      	adds	r2, #2
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	f105 010c 	add.w	r1, r5, #12
 80035e4:	300c      	adds	r0, #12
 80035e6:	f7ff fe4b 	bl	8003280 <memcpy>
 80035ea:	4629      	mov	r1, r5
 80035ec:	4630      	mov	r0, r6
 80035ee:	463d      	mov	r5, r7
 80035f0:	f7ff ff9c 	bl	800352c <_Bfree>
 80035f4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80035f8:	9b01      	ldr	r3, [sp, #4]
 80035fa:	6153      	str	r3, [r2, #20]
 80035fc:	3401      	adds	r4, #1
 80035fe:	612c      	str	r4, [r5, #16]
 8003600:	e7de      	b.n	80035c0 <__multadd+0x4c>
 8003602:	4b03      	ldr	r3, [pc, #12]	; (8003610 <__multadd+0x9c>)
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <__multadd+0xa0>)
 8003606:	463a      	mov	r2, r7
 8003608:	21b5      	movs	r1, #181	; 0xb5
 800360a:	f7fc fe1d 	bl	8000248 <__assert_func>
 800360e:	bf00      	nop
 8003610:	08009c24 	.word	0x08009c24
 8003614:	08009c9c 	.word	0x08009c9c

08003618 <__s2b>:
 8003618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800361c:	460c      	mov	r4, r1
 800361e:	4928      	ldr	r1, [pc, #160]	; (80036c0 <__s2b+0xa8>)
 8003620:	461f      	mov	r7, r3
 8003622:	4616      	mov	r6, r2
 8003624:	f103 0208 	add.w	r2, r3, #8
 8003628:	fb81 3102 	smull	r3, r1, r1, r2
 800362c:	2f09      	cmp	r7, #9
 800362e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003632:	4605      	mov	r5, r0
 8003634:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8003638:	dd39      	ble.n	80036ae <__s2b+0x96>
 800363a:	f04f 0c01 	mov.w	ip, #1
 800363e:	2100      	movs	r1, #0
 8003640:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003644:	4563      	cmp	r3, ip
 8003646:	f101 0101 	add.w	r1, r1, #1
 800364a:	dcf9      	bgt.n	8003640 <__s2b+0x28>
 800364c:	4628      	mov	r0, r5
 800364e:	f7ff ff2d 	bl	80034ac <_Balloc>
 8003652:	4601      	mov	r1, r0
 8003654:	b368      	cbz	r0, 80036b2 <__s2b+0x9a>
 8003656:	9b08      	ldr	r3, [sp, #32]
 8003658:	6143      	str	r3, [r0, #20]
 800365a:	2e09      	cmp	r6, #9
 800365c:	f04f 0301 	mov.w	r3, #1
 8003660:	6103      	str	r3, [r0, #16]
 8003662:	dc12      	bgt.n	800368a <__s2b+0x72>
 8003664:	340a      	adds	r4, #10
 8003666:	2609      	movs	r6, #9
 8003668:	42b7      	cmp	r7, r6
 800366a:	dd0b      	ble.n	8003684 <__s2b+0x6c>
 800366c:	1bbe      	subs	r6, r7, r6
 800366e:	4426      	add	r6, r4
 8003670:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003674:	220a      	movs	r2, #10
 8003676:	3b30      	subs	r3, #48	; 0x30
 8003678:	4628      	mov	r0, r5
 800367a:	f7ff ff7b 	bl	8003574 <__multadd>
 800367e:	42a6      	cmp	r6, r4
 8003680:	4601      	mov	r1, r0
 8003682:	d1f5      	bne.n	8003670 <__s2b+0x58>
 8003684:	4608      	mov	r0, r1
 8003686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368a:	f104 0909 	add.w	r9, r4, #9
 800368e:	46c8      	mov	r8, r9
 8003690:	4434      	add	r4, r6
 8003692:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003696:	220a      	movs	r2, #10
 8003698:	3b30      	subs	r3, #48	; 0x30
 800369a:	4628      	mov	r0, r5
 800369c:	f7ff ff6a 	bl	8003574 <__multadd>
 80036a0:	45a0      	cmp	r8, r4
 80036a2:	4601      	mov	r1, r0
 80036a4:	d1f5      	bne.n	8003692 <__s2b+0x7a>
 80036a6:	f1a6 0408 	sub.w	r4, r6, #8
 80036aa:	444c      	add	r4, r9
 80036ac:	e7dc      	b.n	8003668 <__s2b+0x50>
 80036ae:	2100      	movs	r1, #0
 80036b0:	e7cc      	b.n	800364c <__s2b+0x34>
 80036b2:	460a      	mov	r2, r1
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <__s2b+0xac>)
 80036b6:	4804      	ldr	r0, [pc, #16]	; (80036c8 <__s2b+0xb0>)
 80036b8:	21ce      	movs	r1, #206	; 0xce
 80036ba:	f7fc fdc5 	bl	8000248 <__assert_func>
 80036be:	bf00      	nop
 80036c0:	38e38e39 	.word	0x38e38e39
 80036c4:	08009c24 	.word	0x08009c24
 80036c8:	08009c9c 	.word	0x08009c9c

080036cc <__hi0bits>:
 80036cc:	0c03      	lsrs	r3, r0, #16
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	b9d3      	cbnz	r3, 8003708 <__hi0bits+0x3c>
 80036d2:	0400      	lsls	r0, r0, #16
 80036d4:	2310      	movs	r3, #16
 80036d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80036da:	bf04      	itt	eq
 80036dc:	0200      	lsleq	r0, r0, #8
 80036de:	3308      	addeq	r3, #8
 80036e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80036e4:	bf04      	itt	eq
 80036e6:	0100      	lsleq	r0, r0, #4
 80036e8:	3304      	addeq	r3, #4
 80036ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80036ee:	bf04      	itt	eq
 80036f0:	0080      	lsleq	r0, r0, #2
 80036f2:	3302      	addeq	r3, #2
 80036f4:	2800      	cmp	r0, #0
 80036f6:	db05      	blt.n	8003704 <__hi0bits+0x38>
 80036f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80036fc:	f103 0301 	add.w	r3, r3, #1
 8003700:	bf08      	it	eq
 8003702:	2320      	moveq	r3, #32
 8003704:	4618      	mov	r0, r3
 8003706:	4770      	bx	lr
 8003708:	2300      	movs	r3, #0
 800370a:	e7e4      	b.n	80036d6 <__hi0bits+0xa>

0800370c <__lo0bits>:
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	f013 0207 	ands.w	r2, r3, #7
 8003712:	4601      	mov	r1, r0
 8003714:	d007      	beq.n	8003726 <__lo0bits+0x1a>
 8003716:	07da      	lsls	r2, r3, #31
 8003718:	d41f      	bmi.n	800375a <__lo0bits+0x4e>
 800371a:	0798      	lsls	r0, r3, #30
 800371c:	d521      	bpl.n	8003762 <__lo0bits+0x56>
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	600b      	str	r3, [r1, #0]
 8003722:	2001      	movs	r0, #1
 8003724:	4770      	bx	lr
 8003726:	b298      	uxth	r0, r3
 8003728:	b1a0      	cbz	r0, 8003754 <__lo0bits+0x48>
 800372a:	4610      	mov	r0, r2
 800372c:	b2da      	uxtb	r2, r3
 800372e:	b90a      	cbnz	r2, 8003734 <__lo0bits+0x28>
 8003730:	3008      	adds	r0, #8
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	071a      	lsls	r2, r3, #28
 8003736:	bf04      	itt	eq
 8003738:	091b      	lsreq	r3, r3, #4
 800373a:	3004      	addeq	r0, #4
 800373c:	079a      	lsls	r2, r3, #30
 800373e:	bf04      	itt	eq
 8003740:	089b      	lsreq	r3, r3, #2
 8003742:	3002      	addeq	r0, #2
 8003744:	07da      	lsls	r2, r3, #31
 8003746:	d403      	bmi.n	8003750 <__lo0bits+0x44>
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	f100 0001 	add.w	r0, r0, #1
 800374e:	d006      	beq.n	800375e <__lo0bits+0x52>
 8003750:	600b      	str	r3, [r1, #0]
 8003752:	4770      	bx	lr
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	2010      	movs	r0, #16
 8003758:	e7e8      	b.n	800372c <__lo0bits+0x20>
 800375a:	2000      	movs	r0, #0
 800375c:	4770      	bx	lr
 800375e:	2020      	movs	r0, #32
 8003760:	4770      	bx	lr
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	2002      	movs	r0, #2
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop

0800376c <__i2b>:
 800376c:	b510      	push	{r4, lr}
 800376e:	460c      	mov	r4, r1
 8003770:	2101      	movs	r1, #1
 8003772:	f7ff fe9b 	bl	80034ac <_Balloc>
 8003776:	4602      	mov	r2, r0
 8003778:	b118      	cbz	r0, 8003782 <__i2b+0x16>
 800377a:	2301      	movs	r3, #1
 800377c:	e9c0 3404 	strd	r3, r4, [r0, #16]
 8003780:	bd10      	pop	{r4, pc}
 8003782:	4b03      	ldr	r3, [pc, #12]	; (8003790 <__i2b+0x24>)
 8003784:	4803      	ldr	r0, [pc, #12]	; (8003794 <__i2b+0x28>)
 8003786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800378a:	f7fc fd5d 	bl	8000248 <__assert_func>
 800378e:	bf00      	nop
 8003790:	08009c24 	.word	0x08009c24
 8003794:	08009c9c 	.word	0x08009c9c

08003798 <__multiply>:
 8003798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379c:	690e      	ldr	r6, [r1, #16]
 800379e:	6915      	ldr	r5, [r2, #16]
 80037a0:	42ae      	cmp	r6, r5
 80037a2:	b085      	sub	sp, #20
 80037a4:	4688      	mov	r8, r1
 80037a6:	4614      	mov	r4, r2
 80037a8:	db05      	blt.n	80037b6 <__multiply+0x1e>
 80037aa:	462a      	mov	r2, r5
 80037ac:	4623      	mov	r3, r4
 80037ae:	4635      	mov	r5, r6
 80037b0:	460c      	mov	r4, r1
 80037b2:	4616      	mov	r6, r2
 80037b4:	4698      	mov	r8, r3
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	6861      	ldr	r1, [r4, #4]
 80037ba:	19af      	adds	r7, r5, r6
 80037bc:	42bb      	cmp	r3, r7
 80037be:	bfb8      	it	lt
 80037c0:	3101      	addlt	r1, #1
 80037c2:	f7ff fe73 	bl	80034ac <_Balloc>
 80037c6:	9001      	str	r0, [sp, #4]
 80037c8:	2800      	cmp	r0, #0
 80037ca:	f000 8087 	beq.w	80038dc <__multiply+0x144>
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	f103 0914 	add.w	r9, r3, #20
 80037d4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 80037d8:	45d1      	cmp	r9, sl
 80037da:	d205      	bcs.n	80037e8 <__multiply+0x50>
 80037dc:	464b      	mov	r3, r9
 80037de:	2200      	movs	r2, #0
 80037e0:	f843 2b04 	str.w	r2, [r3], #4
 80037e4:	459a      	cmp	sl, r3
 80037e6:	d8fb      	bhi.n	80037e0 <__multiply+0x48>
 80037e8:	f108 0814 	add.w	r8, r8, #20
 80037ec:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 80037f0:	f104 0314 	add.w	r3, r4, #20
 80037f4:	45d8      	cmp	r8, fp
 80037f6:	461a      	mov	r2, r3
 80037f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80037fc:	d25f      	bcs.n	80038be <__multiply+0x126>
 80037fe:	1b2b      	subs	r3, r5, r4
 8003800:	3b15      	subs	r3, #21
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	3304      	adds	r3, #4
 8003808:	3415      	adds	r4, #21
 800380a:	42a5      	cmp	r5, r4
 800380c:	bf38      	it	cc
 800380e:	2304      	movcc	r3, #4
 8003810:	e9cd a702 	strd	sl, r7, [sp, #8]
 8003814:	46ac      	mov	ip, r5
 8003816:	461f      	mov	r7, r3
 8003818:	4692      	mov	sl, r2
 800381a:	e005      	b.n	8003828 <__multiply+0x90>
 800381c:	0c00      	lsrs	r0, r0, #16
 800381e:	d129      	bne.n	8003874 <__multiply+0xdc>
 8003820:	45c3      	cmp	fp, r8
 8003822:	f109 0904 	add.w	r9, r9, #4
 8003826:	d948      	bls.n	80038ba <__multiply+0x122>
 8003828:	f858 0b04 	ldr.w	r0, [r8], #4
 800382c:	b285      	uxth	r5, r0
 800382e:	2d00      	cmp	r5, #0
 8003830:	d0f4      	beq.n	800381c <__multiply+0x84>
 8003832:	4656      	mov	r6, sl
 8003834:	464c      	mov	r4, r9
 8003836:	2300      	movs	r3, #0
 8003838:	f856 0b04 	ldr.w	r0, [r6], #4
 800383c:	6821      	ldr	r1, [r4, #0]
 800383e:	b282      	uxth	r2, r0
 8003840:	fa1f fe81 	uxth.w	lr, r1
 8003844:	fb05 ee02 	mla	lr, r5, r2, lr
 8003848:	0c00      	lsrs	r0, r0, #16
 800384a:	0c0a      	lsrs	r2, r1, #16
 800384c:	4473      	add	r3, lr
 800384e:	fb05 2200 	mla	r2, r5, r0, r2
 8003852:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003856:	b29b      	uxth	r3, r3
 8003858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800385c:	45b4      	cmp	ip, r6
 800385e:	f844 3b04 	str.w	r3, [r4], #4
 8003862:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8003866:	d8e7      	bhi.n	8003838 <__multiply+0xa0>
 8003868:	f849 3007 	str.w	r3, [r9, r7]
 800386c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8003870:	0c00      	lsrs	r0, r0, #16
 8003872:	d0d5      	beq.n	8003820 <__multiply+0x88>
 8003874:	f8d9 3000 	ldr.w	r3, [r9]
 8003878:	4654      	mov	r4, sl
 800387a:	4619      	mov	r1, r3
 800387c:	464d      	mov	r5, r9
 800387e:	2200      	movs	r2, #0
 8003880:	8826      	ldrh	r6, [r4, #0]
 8003882:	0c09      	lsrs	r1, r1, #16
 8003884:	fb00 1106 	mla	r1, r0, r6, r1
 8003888:	440a      	add	r2, r1
 800388a:	b29b      	uxth	r3, r3
 800388c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003890:	f845 3b04 	str.w	r3, [r5], #4
 8003894:	f854 6b04 	ldr.w	r6, [r4], #4
 8003898:	6829      	ldr	r1, [r5, #0]
 800389a:	0c36      	lsrs	r6, r6, #16
 800389c:	b28b      	uxth	r3, r1
 800389e:	fb00 3306 	mla	r3, r0, r6, r3
 80038a2:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80038a6:	45a4      	cmp	ip, r4
 80038a8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80038ac:	d8e8      	bhi.n	8003880 <__multiply+0xe8>
 80038ae:	45c3      	cmp	fp, r8
 80038b0:	f849 3007 	str.w	r3, [r9, r7]
 80038b4:	f109 0904 	add.w	r9, r9, #4
 80038b8:	d8b6      	bhi.n	8003828 <__multiply+0x90>
 80038ba:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 80038be:	2f00      	cmp	r7, #0
 80038c0:	dc02      	bgt.n	80038c8 <__multiply+0x130>
 80038c2:	e005      	b.n	80038d0 <__multiply+0x138>
 80038c4:	3f01      	subs	r7, #1
 80038c6:	d003      	beq.n	80038d0 <__multiply+0x138>
 80038c8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f9      	beq.n	80038c4 <__multiply+0x12c>
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	611f      	str	r7, [r3, #16]
 80038d6:	b005      	add	sp, #20
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <__multiply+0x154>)
 80038de:	4804      	ldr	r0, [pc, #16]	; (80038f0 <__multiply+0x158>)
 80038e0:	9a01      	ldr	r2, [sp, #4]
 80038e2:	f240 115d 	movw	r1, #349	; 0x15d
 80038e6:	f7fc fcaf 	bl	8000248 <__assert_func>
 80038ea:	bf00      	nop
 80038ec:	08009c24 	.word	0x08009c24
 80038f0:	08009c9c 	.word	0x08009c9c

080038f4 <__pow5mult>:
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	f012 0303 	ands.w	r3, r2, #3
 80038fc:	b082      	sub	sp, #8
 80038fe:	4614      	mov	r4, r2
 8003900:	4607      	mov	r7, r0
 8003902:	d12d      	bne.n	8003960 <__pow5mult+0x6c>
 8003904:	460e      	mov	r6, r1
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	d01c      	beq.n	8003944 <__pow5mult+0x50>
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	b38a      	cbz	r2, 8003972 <__pow5mult+0x7e>
 800390e:	6895      	ldr	r5, [r2, #8]
 8003910:	2d00      	cmp	r5, #0
 8003912:	d039      	beq.n	8003988 <__pow5mult+0x94>
 8003914:	07e3      	lsls	r3, r4, #31
 8003916:	f04f 0800 	mov.w	r8, #0
 800391a:	d406      	bmi.n	800392a <__pow5mult+0x36>
 800391c:	1064      	asrs	r4, r4, #1
 800391e:	d011      	beq.n	8003944 <__pow5mult+0x50>
 8003920:	6828      	ldr	r0, [r5, #0]
 8003922:	b198      	cbz	r0, 800394c <__pow5mult+0x58>
 8003924:	4605      	mov	r5, r0
 8003926:	07e3      	lsls	r3, r4, #31
 8003928:	d5f8      	bpl.n	800391c <__pow5mult+0x28>
 800392a:	4631      	mov	r1, r6
 800392c:	462a      	mov	r2, r5
 800392e:	4638      	mov	r0, r7
 8003930:	f7ff ff32 	bl	8003798 <__multiply>
 8003934:	4631      	mov	r1, r6
 8003936:	4603      	mov	r3, r0
 8003938:	4638      	mov	r0, r7
 800393a:	461e      	mov	r6, r3
 800393c:	f7ff fdf6 	bl	800352c <_Bfree>
 8003940:	1064      	asrs	r4, r4, #1
 8003942:	d1ed      	bne.n	8003920 <__pow5mult+0x2c>
 8003944:	4630      	mov	r0, r6
 8003946:	b002      	add	sp, #8
 8003948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800394c:	462a      	mov	r2, r5
 800394e:	4629      	mov	r1, r5
 8003950:	4638      	mov	r0, r7
 8003952:	f7ff ff21 	bl	8003798 <__multiply>
 8003956:	6028      	str	r0, [r5, #0]
 8003958:	f8c0 8000 	str.w	r8, [r0]
 800395c:	4605      	mov	r5, r0
 800395e:	e7e2      	b.n	8003926 <__pow5mult+0x32>
 8003960:	3b01      	subs	r3, #1
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <__pow5mult+0xd0>)
 8003964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003968:	2300      	movs	r3, #0
 800396a:	f7ff fe03 	bl	8003574 <__multadd>
 800396e:	4606      	mov	r6, r0
 8003970:	e7c9      	b.n	8003906 <__pow5mult+0x12>
 8003972:	2010      	movs	r0, #16
 8003974:	f001 f86e 	bl	8004a54 <malloc>
 8003978:	4602      	mov	r2, r0
 800397a:	6278      	str	r0, [r7, #36]	; 0x24
 800397c:	b1e0      	cbz	r0, 80039b8 <__pow5mult+0xc4>
 800397e:	2300      	movs	r3, #0
 8003980:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8003984:	6003      	str	r3, [r0, #0]
 8003986:	60c3      	str	r3, [r0, #12]
 8003988:	2101      	movs	r1, #1
 800398a:	4638      	mov	r0, r7
 800398c:	9201      	str	r2, [sp, #4]
 800398e:	f7ff fd8d 	bl	80034ac <_Balloc>
 8003992:	9a01      	ldr	r2, [sp, #4]
 8003994:	4605      	mov	r5, r0
 8003996:	b140      	cbz	r0, 80039aa <__pow5mult+0xb6>
 8003998:	2301      	movs	r3, #1
 800399a:	f240 2171 	movw	r1, #625	; 0x271
 800399e:	e9c0 3104 	strd	r3, r1, [r0, #16]
 80039a2:	2300      	movs	r3, #0
 80039a4:	6090      	str	r0, [r2, #8]
 80039a6:	6003      	str	r3, [r0, #0]
 80039a8:	e7b4      	b.n	8003914 <__pow5mult+0x20>
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <__pow5mult+0xd4>)
 80039ac:	4807      	ldr	r0, [pc, #28]	; (80039cc <__pow5mult+0xd8>)
 80039ae:	462a      	mov	r2, r5
 80039b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80039b4:	f7fc fc48 	bl	8000248 <__assert_func>
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <__pow5mult+0xdc>)
 80039ba:	4804      	ldr	r0, [pc, #16]	; (80039cc <__pow5mult+0xd8>)
 80039bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80039c0:	f7fc fc42 	bl	8000248 <__assert_func>
 80039c4:	080097e0 	.word	0x080097e0
 80039c8:	08009c24 	.word	0x08009c24
 80039cc:	08009c9c 	.word	0x08009c9c
 80039d0:	08009c84 	.word	0x08009c84

080039d4 <__lshift>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	460d      	mov	r5, r1
 80039da:	4691      	mov	r9, r2
 80039dc:	692f      	ldr	r7, [r5, #16]
 80039de:	68ab      	ldr	r3, [r5, #8]
 80039e0:	6849      	ldr	r1, [r1, #4]
 80039e2:	eb07 1762 	add.w	r7, r7, r2, asr #5
 80039e6:	1c7c      	adds	r4, r7, #1
 80039e8:	429c      	cmp	r4, r3
 80039ea:	4680      	mov	r8, r0
 80039ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80039f0:	dd04      	ble.n	80039fc <__lshift+0x28>
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	429c      	cmp	r4, r3
 80039f6:	f101 0101 	add.w	r1, r1, #1
 80039fa:	dcfa      	bgt.n	80039f2 <__lshift+0x1e>
 80039fc:	4640      	mov	r0, r8
 80039fe:	f7ff fd55 	bl	80034ac <_Balloc>
 8003a02:	4606      	mov	r6, r0
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d04d      	beq.n	8003aa4 <__lshift+0xd0>
 8003a08:	f1ba 0f00 	cmp.w	sl, #0
 8003a0c:	f100 0014 	add.w	r0, r0, #20
 8003a10:	dd0e      	ble.n	8003a30 <__lshift+0x5c>
 8003a12:	f10a 0205 	add.w	r2, sl, #5
 8003a16:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8003a20:	2100      	movs	r1, #0
 8003a22:	f843 1b04 	str.w	r1, [r3], #4
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d1fb      	bne.n	8003a22 <__lshift+0x4e>
 8003a2a:	f1ac 0314 	sub.w	r3, ip, #20
 8003a2e:	4418      	add	r0, r3
 8003a30:	6929      	ldr	r1, [r5, #16]
 8003a32:	f105 0314 	add.w	r3, r5, #20
 8003a36:	f019 091f 	ands.w	r9, r9, #31
 8003a3a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003a3e:	d029      	beq.n	8003a94 <__lshift+0xc0>
 8003a40:	f1c9 0e20 	rsb	lr, r9, #32
 8003a44:	4684      	mov	ip, r0
 8003a46:	f04f 0a00 	mov.w	sl, #0
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	fa02 f209 	lsl.w	r2, r2, r9
 8003a50:	ea42 020a 	orr.w	r2, r2, sl
 8003a54:	f84c 2b04 	str.w	r2, [ip], #4
 8003a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	fa22 fa0e 	lsr.w	sl, r2, lr
 8003a62:	d8f2      	bhi.n	8003a4a <__lshift+0x76>
 8003a64:	1b4b      	subs	r3, r1, r5
 8003a66:	3b15      	subs	r3, #21
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	f105 0215 	add.w	r2, r5, #21
 8003a72:	4291      	cmp	r1, r2
 8003a74:	bf38      	it	cc
 8003a76:	2304      	movcc	r3, #4
 8003a78:	f1ba 0f00 	cmp.w	sl, #0
 8003a7c:	bf18      	it	ne
 8003a7e:	4627      	movne	r7, r4
 8003a80:	f840 a003 	str.w	sl, [r0, r3]
 8003a84:	4640      	mov	r0, r8
 8003a86:	6137      	str	r7, [r6, #16]
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7ff fd4f 	bl	800352c <_Bfree>
 8003a8e:	4630      	mov	r0, r6
 8003a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a94:	3804      	subs	r0, #4
 8003a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a9a:	f840 2f04 	str.w	r2, [r0, #4]!
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	d8f9      	bhi.n	8003a96 <__lshift+0xc2>
 8003aa2:	e7ef      	b.n	8003a84 <__lshift+0xb0>
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <__lshift+0xe0>)
 8003aa6:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <__lshift+0xe4>)
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003aae:	f7fc fbcb 	bl	8000248 <__assert_func>
 8003ab2:	bf00      	nop
 8003ab4:	08009c24 	.word	0x08009c24
 8003ab8:	08009c9c 	.word	0x08009c9c

08003abc <__mcmp>:
 8003abc:	690b      	ldr	r3, [r1, #16]
 8003abe:	4684      	mov	ip, r0
 8003ac0:	6900      	ldr	r0, [r0, #16]
 8003ac2:	1ac0      	subs	r0, r0, r3
 8003ac4:	d116      	bne.n	8003af4 <__mcmp+0x38>
 8003ac6:	f10c 0c14 	add.w	ip, ip, #20
 8003aca:	3114      	adds	r1, #20
 8003acc:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8003ad0:	b410      	push	{r4}
 8003ad2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003ad6:	e001      	b.n	8003adc <__mcmp+0x20>
 8003ad8:	4594      	cmp	ip, r2
 8003ada:	d208      	bcs.n	8003aee <__mcmp+0x32>
 8003adc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8003ae0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003ae4:	428c      	cmp	r4, r1
 8003ae6:	d0f7      	beq.n	8003ad8 <__mcmp+0x1c>
 8003ae8:	d205      	bcs.n	8003af6 <__mcmp+0x3a>
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	4770      	bx	lr
 8003af6:	2001      	movs	r0, #1
 8003af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <__mdiff>:
 8003b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	690f      	ldr	r7, [r1, #16]
 8003b06:	6913      	ldr	r3, [r2, #16]
 8003b08:	1aff      	subs	r7, r7, r3
 8003b0a:	2f00      	cmp	r7, #0
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	4690      	mov	r8, r2
 8003b10:	d17a      	bne.n	8003c08 <__mdiff+0x108>
 8003b12:	f101 0514 	add.w	r5, r1, #20
 8003b16:	3214      	adds	r2, #20
 8003b18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003b1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b20:	e001      	b.n	8003b26 <__mdiff+0x26>
 8003b22:	429d      	cmp	r5, r3
 8003b24:	d273      	bcs.n	8003c0e <__mdiff+0x10e>
 8003b26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003b2a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8003b2e:	42a1      	cmp	r1, r4
 8003b30:	d0f7      	beq.n	8003b22 <__mdiff+0x22>
 8003b32:	d364      	bcc.n	8003bfe <__mdiff+0xfe>
 8003b34:	6871      	ldr	r1, [r6, #4]
 8003b36:	f7ff fcb9 	bl	80034ac <_Balloc>
 8003b3a:	4681      	mov	r9, r0
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d072      	beq.n	8003c26 <__mdiff+0x126>
 8003b40:	6935      	ldr	r5, [r6, #16]
 8003b42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8003b46:	60c7      	str	r7, [r0, #12]
 8003b48:	f108 0e14 	add.w	lr, r8, #20
 8003b4c:	f106 0014 	add.w	r0, r6, #20
 8003b50:	f109 0a14 	add.w	sl, r9, #20
 8003b54:	f106 0c10 	add.w	ip, r6, #16
 8003b58:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8003b5c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8003b60:	4656      	mov	r6, sl
 8003b62:	2100      	movs	r1, #0
 8003b64:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003b68:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8003b6c:	b2a3      	uxth	r3, r4
 8003b6e:	fa11 f18b 	uxtah	r1, r1, fp
 8003b72:	1acb      	subs	r3, r1, r3
 8003b74:	0c21      	lsrs	r1, r4, #16
 8003b76:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8003b7a:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b84:	4572      	cmp	r2, lr
 8003b86:	f846 3b04 	str.w	r3, [r6], #4
 8003b8a:	ea4f 4121 	mov.w	r1, r1, asr #16
 8003b8e:	d8e9      	bhi.n	8003b64 <__mdiff+0x64>
 8003b90:	eba2 0408 	sub.w	r4, r2, r8
 8003b94:	3c15      	subs	r4, #21
 8003b96:	f108 0815 	add.w	r8, r8, #21
 8003b9a:	4542      	cmp	r2, r8
 8003b9c:	f024 0603 	bic.w	r6, r4, #3
 8003ba0:	f106 0604 	add.w	r6, r6, #4
 8003ba4:	bf38      	it	cc
 8003ba6:	2604      	movcc	r6, #4
 8003ba8:	4430      	add	r0, r6
 8003baa:	f024 0203 	bic.w	r2, r4, #3
 8003bae:	bf38      	it	cc
 8003bb0:	2200      	movcc	r2, #0
 8003bb2:	4287      	cmp	r7, r0
 8003bb4:	4452      	add	r2, sl
 8003bb6:	44b2      	add	sl, r6
 8003bb8:	d916      	bls.n	8003be8 <__mdiff+0xe8>
 8003bba:	4656      	mov	r6, sl
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	f854 3b04 	ldr.w	r3, [r4], #4
 8003bc2:	fa11 f183 	uxtah	r1, r1, r3
 8003bc6:	140a      	asrs	r2, r1, #16
 8003bc8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003bcc:	b289      	uxth	r1, r1
 8003bce:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8003bd2:	42a7      	cmp	r7, r4
 8003bd4:	f846 3b04 	str.w	r3, [r6], #4
 8003bd8:	ea4f 4122 	mov.w	r1, r2, asr #16
 8003bdc:	d8ef      	bhi.n	8003bbe <__mdiff+0xbe>
 8003bde:	1e7a      	subs	r2, r7, #1
 8003be0:	1a10      	subs	r0, r2, r0
 8003be2:	f020 0203 	bic.w	r2, r0, #3
 8003be6:	4452      	add	r2, sl
 8003be8:	b923      	cbnz	r3, 8003bf4 <__mdiff+0xf4>
 8003bea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003bee:	3d01      	subs	r5, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0fa      	beq.n	8003bea <__mdiff+0xea>
 8003bf4:	f8c9 5010 	str.w	r5, [r9, #16]
 8003bf8:	4648      	mov	r0, r9
 8003bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	4633      	mov	r3, r6
 8003c00:	2701      	movs	r7, #1
 8003c02:	4646      	mov	r6, r8
 8003c04:	4698      	mov	r8, r3
 8003c06:	e795      	b.n	8003b34 <__mdiff+0x34>
 8003c08:	dbf9      	blt.n	8003bfe <__mdiff+0xfe>
 8003c0a:	2700      	movs	r7, #0
 8003c0c:	e792      	b.n	8003b34 <__mdiff+0x34>
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f7ff fc4c 	bl	80034ac <_Balloc>
 8003c14:	4681      	mov	r9, r0
 8003c16:	b168      	cbz	r0, 8003c34 <__mdiff+0x134>
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8003c20:	4648      	mov	r0, r9
 8003c22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <__mdiff+0x144>)
 8003c28:	4807      	ldr	r0, [pc, #28]	; (8003c48 <__mdiff+0x148>)
 8003c2a:	464a      	mov	r2, r9
 8003c2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003c30:	f7fc fb0a 	bl	8000248 <__assert_func>
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <__mdiff+0x144>)
 8003c36:	4804      	ldr	r0, [pc, #16]	; (8003c48 <__mdiff+0x148>)
 8003c38:	464a      	mov	r2, r9
 8003c3a:	f240 2132 	movw	r1, #562	; 0x232
 8003c3e:	f7fc fb03 	bl	8000248 <__assert_func>
 8003c42:	bf00      	nop
 8003c44:	08009c24 	.word	0x08009c24
 8003c48:	08009c9c 	.word	0x08009c9c

08003c4c <__ulp>:
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	ed8d 0b00 	vstr	d0, [sp]
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <__ulp+0x5c>)
 8003c54:	9a01      	ldr	r2, [sp, #4]
 8003c56:	4013      	ands	r3, r2
 8003c58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dd05      	ble.n	8003c6c <__ulp+0x20>
 8003c60:	2000      	movs	r0, #0
 8003c62:	4619      	mov	r1, r3
 8003c64:	ec41 0b10 	vmov	d0, r0, r1
 8003c68:	b002      	add	sp, #8
 8003c6a:	4770      	bx	lr
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8003c72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003c76:	da08      	bge.n	8003c8a <__ulp+0x3e>
 8003c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	fa43 f102 	asr.w	r1, r3, r2
 8003c82:	ec41 0b10 	vmov	d0, r0, r1
 8003c86:	b002      	add	sp, #8
 8003c88:	4770      	bx	lr
 8003c8a:	3a14      	subs	r2, #20
 8003c8c:	2a1e      	cmp	r2, #30
 8003c8e:	bfda      	itte	le
 8003c90:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8003c94:	fa23 f202 	lsrle.w	r2, r3, r2
 8003c98:	2201      	movgt	r2, #1
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	ec41 0b10 	vmov	d0, r0, r1
 8003ca2:	b002      	add	sp, #8
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	7ff00000 	.word	0x7ff00000

08003cac <__b2d>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	6904      	ldr	r4, [r0, #16]
 8003cb0:	f100 0614 	add.w	r6, r0, #20
 8003cb4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8003cb8:	1f27      	subs	r7, r4, #4
 8003cba:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7ff fd04 	bl	80036cc <__hi0bits>
 8003cc4:	f1c0 0320 	rsb	r3, r0, #32
 8003cc8:	280a      	cmp	r0, #10
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	dd31      	ble.n	8003d32 <__b2d+0x86>
 8003cce:	42be      	cmp	r6, r7
 8003cd0:	d21b      	bcs.n	8003d0a <__b2d+0x5e>
 8003cd2:	380b      	subs	r0, #11
 8003cd4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8003cd8:	d023      	beq.n	8003d22 <__b2d+0x76>
 8003cda:	f1c0 0c20 	rsb	ip, r0, #32
 8003cde:	4085      	lsls	r5, r0
 8003ce0:	fa21 f70c 	lsr.w	r7, r1, ip
 8003ce4:	432f      	orrs	r7, r5
 8003ce6:	f1a4 0508 	sub.w	r5, r4, #8
 8003cea:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
 8003cee:	42ae      	cmp	r6, r5
 8003cf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003cf4:	d236      	bcs.n	8003d64 <__b2d+0xb8>
 8003cf6:	4081      	lsls	r1, r0
 8003cf8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8003cfc:	fa20 f00c 	lsr.w	r0, r0, ip
 8003d00:	4308      	orrs	r0, r1
 8003d02:	4602      	mov	r2, r0
 8003d04:	ec43 2b10 	vmov	d0, r2, r3
 8003d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0a:	380b      	subs	r0, #11
 8003d0c:	d008      	beq.n	8003d20 <__b2d+0x74>
 8003d0e:	fa05 f000 	lsl.w	r0, r5, r0
 8003d12:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8003d16:	2000      	movs	r0, #0
 8003d18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	e7f1      	b.n	8003d04 <__b2d+0x58>
 8003d20:	4601      	mov	r1, r0
 8003d22:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8003d26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d2a:	460a      	mov	r2, r1
 8003d2c:	ec43 2b10 	vmov	d0, r2, r3
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d32:	f1c0 0c0b 	rsb	ip, r0, #11
 8003d36:	fa25 f10c 	lsr.w	r1, r5, ip
 8003d3a:	42be      	cmp	r6, r7
 8003d3c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8003d40:	bf38      	it	cc
 8003d42:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8003d46:	f100 0015 	add.w	r0, r0, #21
 8003d4a:	bf34      	ite	cc
 8003d4c:	fa21 f10c 	lsrcc.w	r1, r1, ip
 8003d50:	2100      	movcs	r1, #0
 8003d52:	fa05 f000 	lsl.w	r0, r5, r0
 8003d56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d5a:	ea40 0201 	orr.w	r2, r0, r1
 8003d5e:	ec43 2b10 	vmov	d0, r2, r3
 8003d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d64:	fa01 f000 	lsl.w	r0, r1, r0
 8003d68:	4602      	mov	r2, r0
 8003d6a:	e7cb      	b.n	8003d04 <__b2d+0x58>

08003d6c <__d2b>:
 8003d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4688      	mov	r8, r1
 8003d72:	b083      	sub	sp, #12
 8003d74:	2101      	movs	r1, #1
 8003d76:	ec57 6b10 	vmov	r6, r7, d0
 8003d7a:	4615      	mov	r5, r2
 8003d7c:	f7ff fb96 	bl	80034ac <_Balloc>
 8003d80:	4604      	mov	r4, r0
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d04f      	beq.n	8003e26 <__d2b+0xba>
 8003d86:	f3c7 590a 	ubfx	r9, r7, #20, #11
 8003d8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d8e:	f1b9 0f00 	cmp.w	r9, #0
 8003d92:	d001      	beq.n	8003d98 <__d2b+0x2c>
 8003d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d98:	2e00      	cmp	r6, #0
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	d024      	beq.n	8003de8 <__d2b+0x7c>
 8003d9e:	4668      	mov	r0, sp
 8003da0:	9600      	str	r6, [sp, #0]
 8003da2:	f7ff fcb3 	bl	800370c <__lo0bits>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d039      	beq.n	8003e1e <__d2b+0xb2>
 8003daa:	e9dd 1300 	ldrd	r1, r3, [sp]
 8003dae:	f1c0 0220 	rsb	r2, r0, #32
 8003db2:	fa03 f202 	lsl.w	r2, r3, r2
 8003db6:	430a      	orrs	r2, r1
 8003db8:	40c3      	lsrs	r3, r0
 8003dba:	6162      	str	r2, [r4, #20]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2202      	movne	r2, #2
 8003dc4:	2201      	moveq	r2, #1
 8003dc6:	61a3      	str	r3, [r4, #24]
 8003dc8:	6122      	str	r2, [r4, #16]
 8003dca:	f1b9 0f00 	cmp.w	r9, #0
 8003dce:	d016      	beq.n	8003dfe <__d2b+0x92>
 8003dd0:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8003dd4:	4403      	add	r3, r0
 8003dd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003dda:	f8c8 3000 	str.w	r3, [r8]
 8003dde:	6028      	str	r0, [r5, #0]
 8003de0:	4620      	mov	r0, r4
 8003de2:	b003      	add	sp, #12
 8003de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003de8:	a801      	add	r0, sp, #4
 8003dea:	f7ff fc8f 	bl	800370c <__lo0bits>
 8003dee:	9b01      	ldr	r3, [sp, #4]
 8003df0:	6163      	str	r3, [r4, #20]
 8003df2:	2201      	movs	r2, #1
 8003df4:	3020      	adds	r0, #32
 8003df6:	6122      	str	r2, [r4, #16]
 8003df8:	f1b9 0f00 	cmp.w	r9, #0
 8003dfc:	d1e8      	bne.n	8003dd0 <__d2b+0x64>
 8003dfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003e02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003e06:	f8c8 0000 	str.w	r0, [r8]
 8003e0a:	6918      	ldr	r0, [r3, #16]
 8003e0c:	f7ff fc5e 	bl	80036cc <__hi0bits>
 8003e10:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003e14:	6028      	str	r0, [r5, #0]
 8003e16:	4620      	mov	r0, r4
 8003e18:	b003      	add	sp, #12
 8003e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e1e:	9b00      	ldr	r3, [sp, #0]
 8003e20:	6163      	str	r3, [r4, #20]
 8003e22:	9b01      	ldr	r3, [sp, #4]
 8003e24:	e7cb      	b.n	8003dbe <__d2b+0x52>
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <__d2b+0xc8>)
 8003e28:	4803      	ldr	r0, [pc, #12]	; (8003e38 <__d2b+0xcc>)
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	f240 310a 	movw	r1, #778	; 0x30a
 8003e30:	f7fc fa0a 	bl	8000248 <__assert_func>
 8003e34:	08009c24 	.word	0x08009c24
 8003e38:	08009c9c 	.word	0x08009c9c

08003e3c <__ratio>:
 8003e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e40:	b083      	sub	sp, #12
 8003e42:	460e      	mov	r6, r1
 8003e44:	4669      	mov	r1, sp
 8003e46:	4607      	mov	r7, r0
 8003e48:	f7ff ff30 	bl	8003cac <__b2d>
 8003e4c:	a901      	add	r1, sp, #4
 8003e4e:	4630      	mov	r0, r6
 8003e50:	ec55 4b10 	vmov	r4, r5, d0
 8003e54:	f7ff ff2a 	bl	8003cac <__b2d>
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6931      	ldr	r1, [r6, #16]
 8003e5c:	1a59      	subs	r1, r3, r1
 8003e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	ec51 0b10 	vmov	r0, r1, d0
 8003e6e:	dd0d      	ble.n	8003e8c <__ratio+0x50>
 8003e70:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8003e74:	464d      	mov	r5, r9
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f001 f903 	bl	8005088 <__aeabi_ddiv>
 8003e82:	ec41 0b10 	vmov	d0, r0, r1
 8003e86:	b003      	add	sp, #12
 8003e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e8c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8003e90:	eb01 5703 	add.w	r7, r1, r3, lsl #20
 8003e94:	4639      	mov	r1, r7
 8003e96:	e7ee      	b.n	8003e76 <__ratio+0x3a>

08003e98 <_mprec_log10>:
 8003e98:	2817      	cmp	r0, #23
 8003e9a:	b570      	push	{r4, r5, r6, lr}
 8003e9c:	4606      	mov	r6, r0
 8003e9e:	dd0c      	ble.n	8003eba <_mprec_log10+0x22>
 8003ea0:	490a      	ldr	r1, [pc, #40]	; (8003ecc <_mprec_log10+0x34>)
 8003ea2:	4d0b      	ldr	r5, [pc, #44]	; (8003ed0 <_mprec_log10+0x38>)
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	2400      	movs	r4, #0
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	462b      	mov	r3, r5
 8003eac:	f000 ffc2 	bl	8004e34 <__aeabi_dmul>
 8003eb0:	3e01      	subs	r6, #1
 8003eb2:	d1f9      	bne.n	8003ea8 <_mprec_log10+0x10>
 8003eb4:	ec41 0b10 	vmov	d0, r0, r1
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <_mprec_log10+0x3c>)
 8003ebc:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 8003ec0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8003ec4:	ec41 0b10 	vmov	d0, r0, r1
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	bf00      	nop
 8003ecc:	3ff00000 	.word	0x3ff00000
 8003ed0:	40240000 	.word	0x40240000
 8003ed4:	080097e0 	.word	0x080097e0

08003ed8 <__copybits>:
 8003ed8:	3901      	subs	r1, #1
 8003eda:	1149      	asrs	r1, r1, #5
 8003edc:	f101 0c01 	add.w	ip, r1, #1
 8003ee0:	6911      	ldr	r1, [r2, #16]
 8003ee2:	f102 0314 	add.w	r3, r2, #20
 8003ee6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003eea:	428b      	cmp	r3, r1
 8003eec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003ef0:	d216      	bcs.n	8003f20 <__copybits+0x48>
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	f1a0 0e04 	sub.w	lr, r0, #4
 8003ef8:	f853 4b04 	ldr.w	r4, [r3], #4
 8003efc:	f84e 4f04 	str.w	r4, [lr, #4]!
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d8f9      	bhi.n	8003ef8 <__copybits+0x20>
 8003f04:	1a8b      	subs	r3, r1, r2
 8003f06:	3b15      	subs	r3, #21
 8003f08:	f023 0303 	bic.w	r3, r3, #3
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4418      	add	r0, r3
 8003f10:	4584      	cmp	ip, r0
 8003f12:	d904      	bls.n	8003f1e <__copybits+0x46>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f840 3b04 	str.w	r3, [r0], #4
 8003f1a:	4584      	cmp	ip, r0
 8003f1c:	d8fb      	bhi.n	8003f16 <__copybits+0x3e>
 8003f1e:	bd10      	pop	{r4, pc}
 8003f20:	4584      	cmp	ip, r0
 8003f22:	d905      	bls.n	8003f30 <__copybits+0x58>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f840 3b04 	str.w	r3, [r0], #4
 8003f2a:	4584      	cmp	ip, r0
 8003f2c:	d8fb      	bhi.n	8003f26 <__copybits+0x4e>
 8003f2e:	4770      	bx	lr
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <__any_on>:
 8003f34:	6903      	ldr	r3, [r0, #16]
 8003f36:	114a      	asrs	r2, r1, #5
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f100 0014 	add.w	r0, r0, #20
 8003f3e:	da09      	bge.n	8003f54 <__any_on+0x20>
 8003f40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003f44:	e002      	b.n	8003f4c <__any_on+0x18>
 8003f46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f4a:	b9ca      	cbnz	r2, 8003f80 <__any_on+0x4c>
 8003f4c:	4283      	cmp	r3, r0
 8003f4e:	d8fa      	bhi.n	8003f46 <__any_on+0x12>
 8003f50:	2000      	movs	r0, #0
 8003f52:	4770      	bx	lr
 8003f54:	dd11      	ble.n	8003f7a <__any_on+0x46>
 8003f56:	f011 011f 	ands.w	r1, r1, #31
 8003f5a:	d00e      	beq.n	8003f7a <__any_on+0x46>
 8003f5c:	b410      	push	{r4}
 8003f5e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003f62:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8003f66:	fa24 f201 	lsr.w	r2, r4, r1
 8003f6a:	fa02 f101 	lsl.w	r1, r2, r1
 8003f6e:	428c      	cmp	r4, r1
 8003f70:	d00c      	beq.n	8003f8c <__any_on+0x58>
 8003f72:	2001      	movs	r0, #1
 8003f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8003f7e:	e7e5      	b.n	8003f4c <__any_on+0x18>
 8003f80:	2001      	movs	r0, #1
 8003f82:	4770      	bx	lr
 8003f84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	d1f2      	bne.n	8003f72 <__any_on+0x3e>
 8003f8c:	4283      	cmp	r3, r0
 8003f8e:	d8f9      	bhi.n	8003f84 <__any_on+0x50>
 8003f90:	2000      	movs	r0, #0
 8003f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_calloc_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	fb02 f501 	mul.w	r5, r2, r1
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f000 f86a 	bl	8004078 <_malloc_r>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	b118      	cbz	r0, 8003fb0 <_calloc_r+0x18>
 8003fa8:	462a      	mov	r2, r5
 8003faa:	2100      	movs	r1, #0
 8003fac:	f7fc f9f0 	bl	8000390 <memset>
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}

08003fb4 <_free_r>:
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d058      	beq.n	800406a <_free_r+0xb6>
 8003fb8:	b530      	push	{r4, r5, lr}
 8003fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8003fc6:	bfb8      	it	lt
 8003fc8:	18e4      	addlt	r4, r4, r3
 8003fca:	9001      	str	r0, [sp, #4]
 8003fcc:	f000 fd52 	bl	8004a74 <__malloc_lock>
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <_free_r+0xc0>)
 8003fd2:	9801      	ldr	r0, [sp, #4]
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	b133      	cbz	r3, 8003fe6 <_free_r+0x32>
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	d90d      	bls.n	8003ff8 <_free_r+0x44>
 8003fdc:	6821      	ldr	r1, [r4, #0]
 8003fde:	eb04 0c01 	add.w	ip, r4, r1
 8003fe2:	4563      	cmp	r3, ip
 8003fe4:	d02f      	beq.n	8004046 <_free_r+0x92>
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6014      	str	r4, [r2, #0]
 8003fea:	b003      	add	sp, #12
 8003fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ff0:	f000 bd42 	b.w	8004a78 <__malloc_unlock>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d810      	bhi.n	800401a <_free_r+0x66>
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f9      	bne.n	8003ff4 <_free_r+0x40>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	eb02 0c01 	add.w	ip, r2, r1
 8004006:	4564      	cmp	r4, ip
 8004008:	d019      	beq.n	800403e <_free_r+0x8a>
 800400a:	d32f      	bcc.n	800406c <_free_r+0xb8>
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	6054      	str	r4, [r2, #4]
 8004010:	b003      	add	sp, #12
 8004012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004016:	f000 bd2f 	b.w	8004a78 <__malloc_unlock>
 800401a:	6811      	ldr	r1, [r2, #0]
 800401c:	eb02 0c01 	add.w	ip, r2, r1
 8004020:	45a4      	cmp	ip, r4
 8004022:	d016      	beq.n	8004052 <_free_r+0x9e>
 8004024:	d822      	bhi.n	800406c <_free_r+0xb8>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	eb04 0c01 	add.w	ip, r4, r1
 800402c:	4563      	cmp	r3, ip
 800402e:	d1ed      	bne.n	800400c <_free_r+0x58>
 8004030:	681d      	ldr	r5, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4429      	add	r1, r5
 8004036:	e9c4 1300 	strd	r1, r3, [r4]
 800403a:	6054      	str	r4, [r2, #4]
 800403c:	e7d5      	b.n	8003fea <_free_r+0x36>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	4419      	add	r1, r3
 8004042:	6011      	str	r1, [r2, #0]
 8004044:	e7d1      	b.n	8003fea <_free_r+0x36>
 8004046:	681d      	ldr	r5, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4429      	add	r1, r5
 800404c:	e9c4 1300 	strd	r1, r3, [r4]
 8004050:	e7ca      	b.n	8003fe8 <_free_r+0x34>
 8004052:	6824      	ldr	r4, [r4, #0]
 8004054:	4421      	add	r1, r4
 8004056:	1854      	adds	r4, r2, r1
 8004058:	42a3      	cmp	r3, r4
 800405a:	6011      	str	r1, [r2, #0]
 800405c:	d1c5      	bne.n	8003fea <_free_r+0x36>
 800405e:	e9d3 4300 	ldrd	r4, r3, [r3]
 8004062:	4421      	add	r1, r4
 8004064:	e9c2 1300 	strd	r1, r3, [r2]
 8004068:	e7bf      	b.n	8003fea <_free_r+0x36>
 800406a:	4770      	bx	lr
 800406c:	230c      	movs	r3, #12
 800406e:	6003      	str	r3, [r0, #0]
 8004070:	e7bb      	b.n	8003fea <_free_r+0x36>
 8004072:	bf00      	nop
 8004074:	20000244 	.word	0x20000244

08004078 <_malloc_r>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	1ccd      	adds	r5, r1, #3
 800407c:	f025 0503 	bic.w	r5, r5, #3
 8004080:	3508      	adds	r5, #8
 8004082:	2d0c      	cmp	r5, #12
 8004084:	bf38      	it	cc
 8004086:	250c      	movcc	r5, #12
 8004088:	2d00      	cmp	r5, #0
 800408a:	4606      	mov	r6, r0
 800408c:	db23      	blt.n	80040d6 <_malloc_r+0x5e>
 800408e:	42a9      	cmp	r1, r5
 8004090:	d821      	bhi.n	80040d6 <_malloc_r+0x5e>
 8004092:	4f25      	ldr	r7, [pc, #148]	; (8004128 <_malloc_r+0xb0>)
 8004094:	f000 fcee 	bl	8004a74 <__malloc_lock>
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b322      	cbz	r2, 80040e6 <_malloc_r+0x6e>
 800409c:	4614      	mov	r4, r2
 800409e:	e003      	b.n	80040a8 <_malloc_r+0x30>
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	4622      	mov	r2, r4
 80040a4:	b1fb      	cbz	r3, 80040e6 <_malloc_r+0x6e>
 80040a6:	461c      	mov	r4, r3
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	1b5b      	subs	r3, r3, r5
 80040ac:	d4f8      	bmi.n	80040a0 <_malloc_r+0x28>
 80040ae:	2b0b      	cmp	r3, #11
 80040b0:	d815      	bhi.n	80040de <_malloc_r+0x66>
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	4294      	cmp	r4, r2
 80040b6:	bf0c      	ite	eq
 80040b8:	603b      	streq	r3, [r7, #0]
 80040ba:	6053      	strne	r3, [r2, #4]
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 fcdb 	bl	8004a78 <__malloc_unlock>
 80040c2:	f104 000b 	add.w	r0, r4, #11
 80040c6:	1d23      	adds	r3, r4, #4
 80040c8:	f020 0007 	bic.w	r0, r0, #7
 80040cc:	1ac2      	subs	r2, r0, r3
 80040ce:	d001      	beq.n	80040d4 <_malloc_r+0x5c>
 80040d0:	1a1b      	subs	r3, r3, r0
 80040d2:	50a3      	str	r3, [r4, r2]
 80040d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d6:	230c      	movs	r3, #12
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	2000      	movs	r0, #0
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	441c      	add	r4, r3
 80040e2:	6025      	str	r5, [r4, #0]
 80040e4:	e7ea      	b.n	80040bc <_malloc_r+0x44>
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	b1c9      	cbz	r1, 800411e <_malloc_r+0xa6>
 80040ea:	4629      	mov	r1, r5
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 fa47 	bl	8004580 <_sbrk_r>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d00c      	beq.n	8004110 <_malloc_r+0x98>
 80040f6:	1cc4      	adds	r4, r0, #3
 80040f8:	f024 0403 	bic.w	r4, r4, #3
 80040fc:	42a0      	cmp	r0, r4
 80040fe:	d005      	beq.n	800410c <_malloc_r+0x94>
 8004100:	1a21      	subs	r1, r4, r0
 8004102:	4630      	mov	r0, r6
 8004104:	f000 fa3c 	bl	8004580 <_sbrk_r>
 8004108:	3001      	adds	r0, #1
 800410a:	d001      	beq.n	8004110 <_malloc_r+0x98>
 800410c:	6025      	str	r5, [r4, #0]
 800410e:	e7d5      	b.n	80040bc <_malloc_r+0x44>
 8004110:	230c      	movs	r3, #12
 8004112:	4630      	mov	r0, r6
 8004114:	6033      	str	r3, [r6, #0]
 8004116:	f000 fcaf 	bl	8004a78 <__malloc_unlock>
 800411a:	2000      	movs	r0, #0
 800411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411e:	4630      	mov	r0, r6
 8004120:	f000 fa2e 	bl	8004580 <_sbrk_r>
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	e7e0      	b.n	80040ea <_malloc_r+0x72>
 8004128:	20000244 	.word	0x20000244

0800412c <_realloc_r>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	4614      	mov	r4, r2
 8004130:	b1f9      	cbz	r1, 8004172 <_realloc_r+0x46>
 8004132:	b1ca      	cbz	r2, 8004168 <_realloc_r+0x3c>
 8004134:	4606      	mov	r6, r0
 8004136:	460d      	mov	r5, r1
 8004138:	f000 fca0 	bl	8004a7c <_malloc_usable_size_r>
 800413c:	42a0      	cmp	r0, r4
 800413e:	d302      	bcc.n	8004146 <_realloc_r+0x1a>
 8004140:	462f      	mov	r7, r5
 8004142:	4638      	mov	r0, r7
 8004144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004146:	4621      	mov	r1, r4
 8004148:	4630      	mov	r0, r6
 800414a:	f7ff ff95 	bl	8004078 <_malloc_r>
 800414e:	4607      	mov	r7, r0
 8004150:	2800      	cmp	r0, #0
 8004152:	d0f6      	beq.n	8004142 <_realloc_r+0x16>
 8004154:	4622      	mov	r2, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7ff f892 	bl	8003280 <memcpy>
 800415c:	4630      	mov	r0, r6
 800415e:	4629      	mov	r1, r5
 8004160:	f7ff ff28 	bl	8003fb4 <_free_r>
 8004164:	4638      	mov	r0, r7
 8004166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004168:	4627      	mov	r7, r4
 800416a:	f7ff ff23 	bl	8003fb4 <_free_r>
 800416e:	4638      	mov	r0, r7
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004176:	4611      	mov	r1, r2
 8004178:	f7ff bf7e 	b.w	8004078 <_malloc_r>

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688f      	ldr	r7, [r1, #8]
 8004182:	429f      	cmp	r7, r3
 8004184:	460c      	mov	r4, r1
 8004186:	461d      	mov	r5, r3
 8004188:	4616      	mov	r6, r2
 800418a:	d838      	bhi.n	80041fe <__ssputs_r+0x82>
 800418c:	4682      	mov	sl, r0
 800418e:	8988      	ldrh	r0, [r1, #12]
 8004190:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8004194:	d10e      	bne.n	80041b4 <__ssputs_r+0x38>
 8004196:	6808      	ldr	r0, [r1, #0]
 8004198:	463d      	mov	r5, r7
 800419a:	462a      	mov	r2, r5
 800419c:	4631      	mov	r1, r6
 800419e:	f7ff f909 	bl	80033b4 <memmove>
 80041a2:	68a2      	ldr	r2, [r4, #8]
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	1bd2      	subs	r2, r2, r7
 80041a8:	442b      	add	r3, r5
 80041aa:	60a2      	str	r2, [r4, #8]
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	2000      	movs	r0, #0
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	694b      	ldr	r3, [r1, #20]
 80041b6:	6909      	ldr	r1, [r1, #16]
 80041b8:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80041c2:	eba3 0901 	sub.w	r9, r3, r1
 80041c6:	1c6b      	adds	r3, r5, #1
 80041c8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80041cc:	444b      	add	r3, r9
 80041ce:	4543      	cmp	r3, r8
 80041d0:	4642      	mov	r2, r8
 80041d2:	bf84      	itt	hi
 80041d4:	4698      	movhi	r8, r3
 80041d6:	4642      	movhi	r2, r8
 80041d8:	0543      	lsls	r3, r0, #21
 80041da:	d513      	bpl.n	8004204 <__ssputs_r+0x88>
 80041dc:	4611      	mov	r1, r2
 80041de:	4650      	mov	r0, sl
 80041e0:	f7ff ff4a 	bl	8004078 <_malloc_r>
 80041e4:	4607      	mov	r7, r0
 80041e6:	b308      	cbz	r0, 800422c <__ssputs_r+0xb0>
 80041e8:	6921      	ldr	r1, [r4, #16]
 80041ea:	464a      	mov	r2, r9
 80041ec:	f7ff f848 	bl	8003280 <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	e007      	b.n	800420e <__ssputs_r+0x92>
 80041fe:	6808      	ldr	r0, [r1, #0]
 8004200:	461f      	mov	r7, r3
 8004202:	e7ca      	b.n	800419a <__ssputs_r+0x1e>
 8004204:	4650      	mov	r0, sl
 8004206:	f7ff ff91 	bl	800412c <_realloc_r>
 800420a:	4607      	mov	r7, r0
 800420c:	b150      	cbz	r0, 8004224 <__ssputs_r+0xa8>
 800420e:	eb07 0009 	add.w	r0, r7, r9
 8004212:	eba8 0309 	sub.w	r3, r8, r9
 8004216:	6127      	str	r7, [r4, #16]
 8004218:	f8c4 8014 	str.w	r8, [r4, #20]
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6020      	str	r0, [r4, #0]
 8004220:	462f      	mov	r7, r5
 8004222:	e7ba      	b.n	800419a <__ssputs_r+0x1e>
 8004224:	6921      	ldr	r1, [r4, #16]
 8004226:	4650      	mov	r0, sl
 8004228:	f7ff fec4 	bl	8003fb4 <_free_r>
 800422c:	230c      	movs	r3, #12
 800422e:	f8ca 3000 	str.w	r3, [sl]
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	e7b7      	b.n	80041b0 <__ssputs_r+0x34>

08004240 <__ssprint_r>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	6893      	ldr	r3, [r2, #8]
 8004246:	b083      	sub	sp, #12
 8004248:	4691      	mov	r9, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06e      	beq.n	800432c <__ssprint_r+0xec>
 800424e:	6817      	ldr	r7, [r2, #0]
 8004250:	688d      	ldr	r5, [r1, #8]
 8004252:	4680      	mov	r8, r0
 8004254:	460c      	mov	r4, r1
 8004256:	6808      	ldr	r0, [r1, #0]
 8004258:	3708      	adds	r7, #8
 800425a:	e044      	b.n	80042e6 <__ssprint_r+0xa6>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8004262:	d02e      	beq.n	80042c2 <__ssprint_r+0x82>
 8004264:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8004268:	eba0 0a01 	sub.w	sl, r0, r1
 800426c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004274:	eb0a 0006 	add.w	r0, sl, r6
 8004278:	106d      	asrs	r5, r5, #1
 800427a:	3001      	adds	r0, #1
 800427c:	42a8      	cmp	r0, r5
 800427e:	462a      	mov	r2, r5
 8004280:	bf84      	itt	hi
 8004282:	4605      	movhi	r5, r0
 8004284:	462a      	movhi	r2, r5
 8004286:	055b      	lsls	r3, r3, #21
 8004288:	d537      	bpl.n	80042fa <__ssprint_r+0xba>
 800428a:	4611      	mov	r1, r2
 800428c:	4640      	mov	r0, r8
 800428e:	f7ff fef3 	bl	8004078 <_malloc_r>
 8004292:	2800      	cmp	r0, #0
 8004294:	d03b      	beq.n	800430e <__ssprint_r+0xce>
 8004296:	4652      	mov	r2, sl
 8004298:	6921      	ldr	r1, [r4, #16]
 800429a:	9001      	str	r0, [sp, #4]
 800429c:	f7fe fff0 	bl	8003280 <memcpy>
 80042a0:	89a2      	ldrh	r2, [r4, #12]
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80042a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042ac:	81a2      	strh	r2, [r4, #12]
 80042ae:	eba5 020a 	sub.w	r2, r5, sl
 80042b2:	eb03 000a 	add.w	r0, r3, sl
 80042b6:	6165      	str	r5, [r4, #20]
 80042b8:	60a2      	str	r2, [r4, #8]
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	6020      	str	r0, [r4, #0]
 80042be:	4635      	mov	r5, r6
 80042c0:	46b2      	mov	sl, r6
 80042c2:	4659      	mov	r1, fp
 80042c4:	4652      	mov	r2, sl
 80042c6:	f7ff f875 	bl	80033b4 <memmove>
 80042ca:	68a0      	ldr	r0, [r4, #8]
 80042cc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	1b45      	subs	r5, r0, r5
 80042d4:	1b8e      	subs	r6, r1, r6
 80042d6:	eb03 000a 	add.w	r0, r3, sl
 80042da:	60a5      	str	r5, [r4, #8]
 80042dc:	6020      	str	r0, [r4, #0]
 80042de:	f8c9 6008 	str.w	r6, [r9, #8]
 80042e2:	b31e      	cbz	r6, 800432c <__ssprint_r+0xec>
 80042e4:	3708      	adds	r7, #8
 80042e6:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	d0fa      	beq.n	80042e4 <__ssprint_r+0xa4>
 80042ee:	42b5      	cmp	r5, r6
 80042f0:	46aa      	mov	sl, r5
 80042f2:	d9b3      	bls.n	800425c <__ssprint_r+0x1c>
 80042f4:	4635      	mov	r5, r6
 80042f6:	46b2      	mov	sl, r6
 80042f8:	e7e3      	b.n	80042c2 <__ssprint_r+0x82>
 80042fa:	4640      	mov	r0, r8
 80042fc:	f7ff ff16 	bl	800412c <_realloc_r>
 8004300:	4603      	mov	r3, r0
 8004302:	2800      	cmp	r0, #0
 8004304:	d1d3      	bne.n	80042ae <__ssprint_r+0x6e>
 8004306:	6921      	ldr	r1, [r4, #16]
 8004308:	4640      	mov	r0, r8
 800430a:	f7ff fe53 	bl	8003fb4 <_free_r>
 800430e:	230c      	movs	r3, #12
 8004310:	f8c8 3000 	str.w	r3, [r8]
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8004326:	b003      	add	sp, #12
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	2000      	movs	r0, #0
 800432e:	f8c9 0004 	str.w	r0, [r9, #4]
 8004332:	b003      	add	sp, #12
 8004334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004338 <_svfiprintf_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	4692      	mov	sl, r2
 800433e:	898a      	ldrh	r2, [r1, #12]
 8004340:	0615      	lsls	r5, r2, #24
 8004342:	b09d      	sub	sp, #116	; 0x74
 8004344:	4688      	mov	r8, r1
 8004346:	4681      	mov	r9, r0
 8004348:	461c      	mov	r4, r3
 800434a:	d503      	bpl.n	8004354 <_svfiprintf_r+0x1c>
 800434c:	690a      	ldr	r2, [r1, #16]
 800434e:	2a00      	cmp	r2, #0
 8004350:	f000 80ef 	beq.w	8004532 <_svfiprintf_r+0x1fa>
 8004354:	2200      	movs	r2, #0
 8004356:	9209      	str	r2, [sp, #36]	; 0x24
 8004358:	f89a 3000 	ldrb.w	r3, [sl]
 800435c:	4d7e      	ldr	r5, [pc, #504]	; (8004558 <_svfiprintf_r+0x220>)
 800435e:	9403      	str	r4, [sp, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8004366:	2230      	movs	r2, #48	; 0x30
 8004368:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 800436c:	2601      	movs	r6, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d072      	beq.n	8004458 <_svfiprintf_r+0x120>
 8004372:	4654      	mov	r4, sl
 8004374:	e003      	b.n	800437e <_svfiprintf_r+0x46>
 8004376:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800437a:	2b00      	cmp	r3, #0
 800437c:	d076      	beq.n	800446c <_svfiprintf_r+0x134>
 800437e:	2b25      	cmp	r3, #37	; 0x25
 8004380:	d1f9      	bne.n	8004376 <_svfiprintf_r+0x3e>
 8004382:	ebb4 0b0a 	subs.w	fp, r4, sl
 8004386:	d174      	bne.n	8004472 <_svfiprintf_r+0x13a>
 8004388:	7822      	ldrb	r2, [r4, #0]
 800438a:	2a00      	cmp	r2, #0
 800438c:	d064      	beq.n	8004458 <_svfiprintf_r+0x120>
 800438e:	2300      	movs	r3, #0
 8004390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004398:	9304      	str	r3, [sp, #16]
 800439a:	9307      	str	r3, [sp, #28]
 800439c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043a0:	931a      	str	r3, [sp, #104]	; 0x68
 80043a2:	3401      	adds	r4, #1
 80043a4:	e004      	b.n	80043b0 <_svfiprintf_r+0x78>
 80043a6:	9a04      	ldr	r2, [sp, #16]
 80043a8:	fa06 f303 	lsl.w	r3, r6, r3
 80043ac:	4313      	orrs	r3, r2
 80043ae:	9304      	str	r3, [sp, #16]
 80043b0:	46a2      	mov	sl, r4
 80043b2:	2205      	movs	r2, #5
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	4628      	mov	r0, r5
 80043ba:	f7fe ff11 	bl	80031e0 <memchr>
 80043be:	1b43      	subs	r3, r0, r5
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d1f0      	bne.n	80043a6 <_svfiprintf_r+0x6e>
 80043c4:	9b04      	ldr	r3, [sp, #16]
 80043c6:	06d8      	lsls	r0, r3, #27
 80043c8:	bf44      	itt	mi
 80043ca:	2220      	movmi	r2, #32
 80043cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043d0:	0719      	lsls	r1, r3, #28
 80043d2:	f89a 1000 	ldrb.w	r1, [sl]
 80043d6:	bf44      	itt	mi
 80043d8:	222b      	movmi	r2, #43	; 0x2b
 80043da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043de:	292a      	cmp	r1, #42	; 0x2a
 80043e0:	d154      	bne.n	800448c <_svfiprintf_r+0x154>
 80043e2:	9a03      	ldr	r2, [sp, #12]
 80043e4:	6811      	ldr	r1, [r2, #0]
 80043e6:	3204      	adds	r2, #4
 80043e8:	2900      	cmp	r1, #0
 80043ea:	9203      	str	r2, [sp, #12]
 80043ec:	db7c      	blt.n	80044e8 <_svfiprintf_r+0x1b0>
 80043ee:	9107      	str	r1, [sp, #28]
 80043f0:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80043f4:	f10a 0a01 	add.w	sl, sl, #1
 80043f8:	292e      	cmp	r1, #46	; 0x2e
 80043fa:	d059      	beq.n	80044b0 <_svfiprintf_r+0x178>
 80043fc:	4c57      	ldr	r4, [pc, #348]	; (800455c <_svfiprintf_r+0x224>)
 80043fe:	2203      	movs	r2, #3
 8004400:	4620      	mov	r0, r4
 8004402:	f7fe feed 	bl	80031e0 <memchr>
 8004406:	b140      	cbz	r0, 800441a <_svfiprintf_r+0xe2>
 8004408:	9b04      	ldr	r3, [sp, #16]
 800440a:	1b00      	subs	r0, r0, r4
 800440c:	2440      	movs	r4, #64	; 0x40
 800440e:	fa04 f000 	lsl.w	r0, r4, r0
 8004412:	4303      	orrs	r3, r0
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	f10a 0a01 	add.w	sl, sl, #1
 800441a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800441e:	4850      	ldr	r0, [pc, #320]	; (8004560 <_svfiprintf_r+0x228>)
 8004420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004424:	2206      	movs	r2, #6
 8004426:	f7fe fedb 	bl	80031e0 <memchr>
 800442a:	2800      	cmp	r0, #0
 800442c:	d062      	beq.n	80044f4 <_svfiprintf_r+0x1bc>
 800442e:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <_svfiprintf_r+0x22c>)
 8004430:	2b00      	cmp	r3, #0
 8004432:	d052      	beq.n	80044da <_svfiprintf_r+0x1a2>
 8004434:	aa03      	add	r2, sp, #12
 8004436:	9200      	str	r2, [sp, #0]
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <_svfiprintf_r+0x230>)
 800443a:	4642      	mov	r2, r8
 800443c:	a904      	add	r1, sp, #16
 800443e:	4648      	mov	r0, r9
 8004440:	f3af 8000 	nop.w
 8004444:	4607      	mov	r7, r0
 8004446:	1c7a      	adds	r2, r7, #1
 8004448:	d006      	beq.n	8004458 <_svfiprintf_r+0x120>
 800444a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444c:	443b      	add	r3, r7
 800444e:	9309      	str	r3, [sp, #36]	; 0x24
 8004450:	f89a 3000 	ldrb.w	r3, [sl]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d18c      	bne.n	8004372 <_svfiprintf_r+0x3a>
 8004458:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800445c:	065b      	lsls	r3, r3, #25
 800445e:	bf54      	ite	pl
 8004460:	9809      	ldrpl	r0, [sp, #36]	; 0x24
 8004462:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8004466:	b01d      	add	sp, #116	; 0x74
 8004468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446c:	ebb4 0b0a 	subs.w	fp, r4, sl
 8004470:	d0f2      	beq.n	8004458 <_svfiprintf_r+0x120>
 8004472:	465b      	mov	r3, fp
 8004474:	4652      	mov	r2, sl
 8004476:	4641      	mov	r1, r8
 8004478:	4648      	mov	r0, r9
 800447a:	f7ff fe7f 	bl	800417c <__ssputs_r>
 800447e:	3001      	adds	r0, #1
 8004480:	d0ea      	beq.n	8004458 <_svfiprintf_r+0x120>
 8004482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004484:	7822      	ldrb	r2, [r4, #0]
 8004486:	445b      	add	r3, fp
 8004488:	9309      	str	r3, [sp, #36]	; 0x24
 800448a:	e77e      	b.n	800438a <_svfiprintf_r+0x52>
 800448c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004490:	2a09      	cmp	r2, #9
 8004492:	d8b1      	bhi.n	80043f8 <_svfiprintf_r+0xc0>
 8004494:	9b07      	ldr	r3, [sp, #28]
 8004496:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800449a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800449e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80044a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80044a6:	2a09      	cmp	r2, #9
 80044a8:	d9f5      	bls.n	8004496 <_svfiprintf_r+0x15e>
 80044aa:	292e      	cmp	r1, #46	; 0x2e
 80044ac:	9307      	str	r3, [sp, #28]
 80044ae:	d1a5      	bne.n	80043fc <_svfiprintf_r+0xc4>
 80044b0:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80044b4:	292a      	cmp	r1, #42	; 0x2a
 80044b6:	d127      	bne.n	8004508 <_svfiprintf_r+0x1d0>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	9205      	str	r2, [sp, #20]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2a00      	cmp	r2, #0
 80044c6:	f10a 0002 	add.w	r0, sl, #2
 80044ca:	9303      	str	r3, [sp, #12]
 80044cc:	bfb8      	it	lt
 80044ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044d2:	4682      	mov	sl, r0
 80044d4:	bfb8      	it	lt
 80044d6:	9305      	strlt	r3, [sp, #20]
 80044d8:	e790      	b.n	80043fc <_svfiprintf_r+0xc4>
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	3307      	adds	r3, #7
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	3308      	adds	r3, #8
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	e7b0      	b.n	800444a <_svfiprintf_r+0x112>
 80044e8:	4249      	negs	r1, r1
 80044ea:	f043 0302 	orr.w	r3, r3, #2
 80044ee:	9107      	str	r1, [sp, #28]
 80044f0:	9304      	str	r3, [sp, #16]
 80044f2:	e77d      	b.n	80043f0 <_svfiprintf_r+0xb8>
 80044f4:	aa03      	add	r2, sp, #12
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <_svfiprintf_r+0x230>)
 80044fa:	4642      	mov	r2, r8
 80044fc:	a904      	add	r1, sp, #16
 80044fe:	4648      	mov	r0, r9
 8004500:	f7fc f9c2 	bl	8000888 <_printf_i>
 8004504:	4607      	mov	r7, r0
 8004506:	e79e      	b.n	8004446 <_svfiprintf_r+0x10e>
 8004508:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800450c:	2300      	movs	r3, #0
 800450e:	2a09      	cmp	r2, #9
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	f10a 0a01 	add.w	sl, sl, #1
 8004516:	f63f af71 	bhi.w	80043fc <_svfiprintf_r+0xc4>
 800451a:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800451e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004522:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800452a:	2a09      	cmp	r2, #9
 800452c:	d9f5      	bls.n	800451a <_svfiprintf_r+0x1e2>
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	e764      	b.n	80043fc <_svfiprintf_r+0xc4>
 8004532:	2140      	movs	r1, #64	; 0x40
 8004534:	f7ff fda0 	bl	8004078 <_malloc_r>
 8004538:	f8c8 0000 	str.w	r0, [r8]
 800453c:	f8c8 0010 	str.w	r0, [r8, #16]
 8004540:	b118      	cbz	r0, 800454a <_svfiprintf_r+0x212>
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	f8c8 2014 	str.w	r2, [r8, #20]
 8004548:	e704      	b.n	8004354 <_svfiprintf_r+0x1c>
 800454a:	230c      	movs	r3, #12
 800454c:	f8c9 3000 	str.w	r3, [r9]
 8004550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004554:	e787      	b.n	8004466 <_svfiprintf_r+0x12e>
 8004556:	bf00      	nop
 8004558:	08009bd8 	.word	0x08009bd8
 800455c:	08009be0 	.word	0x08009be0
 8004560:	08009be4 	.word	0x08009be4
 8004564:	00000000 	.word	0x00000000
 8004568:	0800417d 	.word	0x0800417d
 800456c:	00000000 	.word	0x00000000

08004570 <nan>:
 8004570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004578 <nan+0x8>
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	00000000 	.word	0x00000000
 800457c:	7ff80000 	.word	0x7ff80000

08004580 <_sbrk_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	; (80045a0 <_sbrk_r+0x20>)
 8004584:	2200      	movs	r2, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	f004 ff42 	bl	8009414 <_sbrk>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d000      	beq.n	8004596 <_sbrk_r+0x16>
 8004594:	bd38      	pop	{r3, r4, r5, pc}
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0fb      	beq.n	8004594 <_sbrk_r+0x14>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	2000024c 	.word	0x2000024c

080045a4 <nanf>:
 80045a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80045ac <nanf+0x8>
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	7fc00000 	.word	0x7fc00000

080045b0 <_init_signal_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80045b4:	b10c      	cbz	r4, 80045ba <_init_signal_r+0xa>
 80045b6:	2000      	movs	r0, #0
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	4605      	mov	r5, r0
 80045be:	f7ff fd5b 	bl	8004078 <_malloc_r>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6468      	str	r0, [r5, #68]	; 0x44
 80045c6:	b130      	cbz	r0, 80045d6 <_init_signal_r+0x26>
 80045c8:	1f03      	subs	r3, r0, #4
 80045ca:	327c      	adds	r2, #124	; 0x7c
 80045cc:	f843 4f04 	str.w	r4, [r3, #4]!
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d1fb      	bne.n	80045cc <_init_signal_r+0x1c>
 80045d4:	e7ef      	b.n	80045b6 <_init_signal_r+0x6>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045da:	bd38      	pop	{r3, r4, r5, pc}

080045dc <_signal_r>:
 80045dc:	291f      	cmp	r1, #31
 80045de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e0:	4605      	mov	r5, r0
 80045e2:	d808      	bhi.n	80045f6 <_signal_r+0x1a>
 80045e4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80045e6:	460c      	mov	r4, r1
 80045e8:	4617      	mov	r7, r2
 80045ea:	b14e      	cbz	r6, 8004600 <_signal_r+0x24>
 80045ec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80045f0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 80045f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f6:	2316      	movs	r3, #22
 80045f8:	6003      	str	r3, [r0, #0]
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	f7ff fd39 	bl	8004078 <_malloc_r>
 8004606:	4606      	mov	r6, r0
 8004608:	6468      	str	r0, [r5, #68]	; 0x44
 800460a:	b140      	cbz	r0, 800461e <_signal_r+0x42>
 800460c:	1f03      	subs	r3, r0, #4
 800460e:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8004612:	2100      	movs	r1, #0
 8004614:	f843 1f04 	str.w	r1, [r3, #4]!
 8004618:	429d      	cmp	r5, r3
 800461a:	d1fb      	bne.n	8004614 <_signal_r+0x38>
 800461c:	e7e6      	b.n	80045ec <_signal_r+0x10>
 800461e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004624 <_raise_r>:
 8004624:	291f      	cmp	r1, #31
 8004626:	b538      	push	{r3, r4, r5, lr}
 8004628:	4605      	mov	r5, r0
 800462a:	d820      	bhi.n	800466e <_raise_r+0x4a>
 800462c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800462e:	460c      	mov	r4, r1
 8004630:	b16a      	cbz	r2, 800464e <_raise_r+0x2a>
 8004632:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004636:	b153      	cbz	r3, 800464e <_raise_r+0x2a>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d016      	beq.n	800466a <_raise_r+0x46>
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	d010      	beq.n	8004662 <_raise_r+0x3e>
 8004640:	2500      	movs	r5, #0
 8004642:	4620      	mov	r0, r4
 8004644:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8004648:	4798      	blx	r3
 800464a:	4628      	mov	r0, r5
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f8f8 	bl	8004844 <_getpid_r>
 8004654:	4622      	mov	r2, r4
 8004656:	4601      	mov	r1, r0
 8004658:	4628      	mov	r0, r5
 800465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465e:	f000 b8db 	b.w	8004818 <_kill_r>
 8004662:	2316      	movs	r3, #22
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	2001      	movs	r0, #1
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	2000      	movs	r0, #0
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	2316      	movs	r3, #22
 8004670:	6003      	str	r3, [r0, #0]
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	bd38      	pop	{r3, r4, r5, pc}

08004678 <__sigtramp_r>:
 8004678:	291f      	cmp	r1, #31
 800467a:	d82a      	bhi.n	80046d2 <__sigtramp_r+0x5a>
 800467c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800467e:	b538      	push	{r3, r4, r5, lr}
 8004680:	460c      	mov	r4, r1
 8004682:	4605      	mov	r5, r0
 8004684:	b182      	cbz	r2, 80046a8 <__sigtramp_r+0x30>
 8004686:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800468a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800468e:	b14b      	cbz	r3, 80046a4 <__sigtramp_r+0x2c>
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	d019      	beq.n	80046c8 <__sigtramp_r+0x50>
 8004694:	2b01      	cmp	r3, #1
 8004696:	d015      	beq.n	80046c4 <__sigtramp_r+0x4c>
 8004698:	2500      	movs	r5, #0
 800469a:	4620      	mov	r0, r4
 800469c:	6015      	str	r5, [r2, #0]
 800469e:	4798      	blx	r3
 80046a0:	4628      	mov	r0, r5
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	2001      	movs	r0, #1
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	2180      	movs	r1, #128	; 0x80
 80046aa:	f7ff fce5 	bl	8004078 <_malloc_r>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6468      	str	r0, [r5, #68]	; 0x44
 80046b2:	b158      	cbz	r0, 80046cc <__sigtramp_r+0x54>
 80046b4:	1f03      	subs	r3, r0, #4
 80046b6:	2100      	movs	r1, #0
 80046b8:	307c      	adds	r0, #124	; 0x7c
 80046ba:	f843 1f04 	str.w	r1, [r3, #4]!
 80046be:	4298      	cmp	r0, r3
 80046c0:	d1fb      	bne.n	80046ba <__sigtramp_r+0x42>
 80046c2:	e7e0      	b.n	8004686 <__sigtramp_r+0xe>
 80046c4:	2003      	movs	r0, #3
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	2002      	movs	r0, #2
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d0:	bd38      	pop	{r3, r4, r5, pc}
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d6:	4770      	bx	lr

080046d8 <raise>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <raise+0x54>)
 80046dc:	281f      	cmp	r0, #31
 80046de:	681d      	ldr	r5, [r3, #0]
 80046e0:	d81f      	bhi.n	8004722 <raise+0x4a>
 80046e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80046e4:	4604      	mov	r4, r0
 80046e6:	b162      	cbz	r2, 8004702 <raise+0x2a>
 80046e8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80046ec:	b14b      	cbz	r3, 8004702 <raise+0x2a>
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d015      	beq.n	800471e <raise+0x46>
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	d00f      	beq.n	8004716 <raise+0x3e>
 80046f6:	2500      	movs	r5, #0
 80046f8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80046fc:	4798      	blx	r3
 80046fe:	4628      	mov	r0, r5
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f89e 	bl	8004844 <_getpid_r>
 8004708:	4622      	mov	r2, r4
 800470a:	4601      	mov	r1, r0
 800470c:	4628      	mov	r0, r5
 800470e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004712:	f000 b881 	b.w	8004818 <_kill_r>
 8004716:	2316      	movs	r3, #22
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	2001      	movs	r0, #1
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	2000      	movs	r0, #0
 8004720:	bd38      	pop	{r3, r4, r5, pc}
 8004722:	2316      	movs	r3, #22
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20000000 	.word	0x20000000

08004730 <signal>:
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <signal+0x4c>)
 8004732:	281f      	cmp	r0, #31
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	681e      	ldr	r6, [r3, #0]
 8004738:	d808      	bhi.n	800474c <signal+0x1c>
 800473a:	460d      	mov	r5, r1
 800473c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800473e:	4604      	mov	r4, r0
 8004740:	b149      	cbz	r1, 8004756 <signal+0x26>
 8004742:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8004746:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	2316      	movs	r3, #22
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff fc8d 	bl	8004078 <_malloc_r>
 800475e:	4601      	mov	r1, r0
 8004760:	6470      	str	r0, [r6, #68]	; 0x44
 8004762:	b140      	cbz	r0, 8004776 <signal+0x46>
 8004764:	1f03      	subs	r3, r0, #4
 8004766:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 800476a:	2200      	movs	r2, #0
 800476c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004770:	4563      	cmp	r3, ip
 8004772:	d1fb      	bne.n	800476c <signal+0x3c>
 8004774:	e7e5      	b.n	8004742 <signal+0x12>
 8004776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	20000000 	.word	0x20000000

08004780 <_init_signal>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <_init_signal+0x30>)
 8004784:	681d      	ldr	r5, [r3, #0]
 8004786:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8004788:	b10c      	cbz	r4, 800478e <_init_signal+0xe>
 800478a:	2000      	movs	r0, #0
 800478c:	bd38      	pop	{r3, r4, r5, pc}
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	4628      	mov	r0, r5
 8004792:	f7ff fc71 	bl	8004078 <_malloc_r>
 8004796:	6468      	str	r0, [r5, #68]	; 0x44
 8004798:	b138      	cbz	r0, 80047aa <_init_signal+0x2a>
 800479a:	1f03      	subs	r3, r0, #4
 800479c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 80047a0:	f843 4f04 	str.w	r4, [r3, #4]!
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d1fb      	bne.n	80047a0 <_init_signal+0x20>
 80047a8:	e7ef      	b.n	800478a <_init_signal+0xa>
 80047aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	20000000 	.word	0x20000000

080047b4 <__sigtramp>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <__sigtramp+0x60>)
 80047b8:	281f      	cmp	r0, #31
 80047ba:	681d      	ldr	r5, [r3, #0]
 80047bc:	d826      	bhi.n	800480c <__sigtramp+0x58>
 80047be:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80047c0:	4604      	mov	r4, r0
 80047c2:	b182      	cbz	r2, 80047e6 <__sigtramp+0x32>
 80047c4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80047c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80047cc:	b14b      	cbz	r3, 80047e2 <__sigtramp+0x2e>
 80047ce:	1c59      	adds	r1, r3, #1
 80047d0:	d01a      	beq.n	8004808 <__sigtramp+0x54>
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d016      	beq.n	8004804 <__sigtramp+0x50>
 80047d6:	2500      	movs	r5, #0
 80047d8:	4620      	mov	r0, r4
 80047da:	6015      	str	r5, [r2, #0]
 80047dc:	4798      	blx	r3
 80047de:	4628      	mov	r0, r5
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	2001      	movs	r0, #1
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	4628      	mov	r0, r5
 80047ea:	f7ff fc45 	bl	8004078 <_malloc_r>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6468      	str	r0, [r5, #68]	; 0x44
 80047f2:	b158      	cbz	r0, 800480c <__sigtramp+0x58>
 80047f4:	1f03      	subs	r3, r0, #4
 80047f6:	2100      	movs	r1, #0
 80047f8:	307c      	adds	r0, #124	; 0x7c
 80047fa:	f843 1f04 	str.w	r1, [r3, #4]!
 80047fe:	4283      	cmp	r3, r0
 8004800:	d1fb      	bne.n	80047fa <__sigtramp+0x46>
 8004802:	e7df      	b.n	80047c4 <__sigtramp+0x10>
 8004804:	2003      	movs	r0, #3
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	2002      	movs	r0, #2
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004810:	bd38      	pop	{r3, r4, r5, pc}
 8004812:	bf00      	nop
 8004814:	20000000 	.word	0x20000000

08004818 <_kill_r>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	460c      	mov	r4, r1
 800481c:	4d08      	ldr	r5, [pc, #32]	; (8004840 <_kill_r+0x28>)
 800481e:	4603      	mov	r3, r0
 8004820:	2600      	movs	r6, #0
 8004822:	4620      	mov	r0, r4
 8004824:	4611      	mov	r1, r2
 8004826:	461c      	mov	r4, r3
 8004828:	602e      	str	r6, [r5, #0]
 800482a:	f004 fdbb 	bl	80093a4 <_kill>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d000      	beq.n	8004834 <_kill_r+0x1c>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0fb      	beq.n	8004832 <_kill_r+0x1a>
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	bf00      	nop
 8004840:	2000024c 	.word	0x2000024c

08004844 <_getpid_r>:
 8004844:	f004 bdac 	b.w	80093a0 <_getpid>

08004848 <__sread>:
 8004848:	b510      	push	{r4, lr}
 800484a:	460c      	mov	r4, r1
 800484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004850:	f000 f91e 	bl	8004a90 <_read_r>
 8004854:	2800      	cmp	r0, #0
 8004856:	db03      	blt.n	8004860 <__sread+0x18>
 8004858:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800485a:	4403      	add	r3, r0
 800485c:	6563      	str	r3, [r4, #84]	; 0x54
 800485e:	bd10      	pop	{r4, pc}
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop

0800486c <__seofread>:
 800486c:	2000      	movs	r0, #0
 800486e:	4770      	bx	lr

08004870 <__swrite>:
 8004870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004874:	460c      	mov	r4, r1
 8004876:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800487a:	461f      	mov	r7, r3
 800487c:	05cb      	lsls	r3, r1, #23
 800487e:	4605      	mov	r5, r0
 8004880:	4616      	mov	r6, r2
 8004882:	d40b      	bmi.n	800489c <__swrite+0x2c>
 8004884:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8004888:	81a1      	strh	r1, [r4, #12]
 800488a:	463b      	mov	r3, r7
 800488c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004890:	4632      	mov	r2, r6
 8004892:	4628      	mov	r0, r5
 8004894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004898:	f000 b876 	b.w	8004988 <_write_r>
 800489c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a0:	2302      	movs	r3, #2
 80048a2:	2200      	movs	r2, #0
 80048a4:	f000 f8c0 	bl	8004a28 <_lseek_r>
 80048a8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80048ac:	e7ea      	b.n	8004884 <__swrite+0x14>
 80048ae:	bf00      	nop

080048b0 <__sseek>:
 80048b0:	b510      	push	{r4, lr}
 80048b2:	460c      	mov	r4, r1
 80048b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b8:	f000 f8b6 	bl	8004a28 <_lseek_r>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	1c42      	adds	r2, r0, #1
 80048c0:	bf0e      	itee	eq
 80048c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048ca:	6560      	strne	r0, [r4, #84]	; 0x54
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <__sclose>:
 80048d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d4:	f000 b86e 	b.w	80049b4 <_close_r>

080048d8 <strncmp>:
 80048d8:	b3a2      	cbz	r2, 8004944 <strncmp+0x6c>
 80048da:	b530      	push	{r4, r5, lr}
 80048dc:	ea40 0401 	orr.w	r4, r0, r1
 80048e0:	07a4      	lsls	r4, r4, #30
 80048e2:	4684      	mov	ip, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	d02a      	beq.n	800493e <strncmp+0x66>
 80048e8:	f89c 0000 	ldrb.w	r0, [ip]
 80048ec:	780c      	ldrb	r4, [r1, #0]
 80048ee:	4284      	cmp	r4, r0
 80048f0:	d12f      	bne.n	8004952 <strncmp+0x7a>
 80048f2:	2a01      	cmp	r2, #1
 80048f4:	d00d      	beq.n	8004912 <strncmp+0x3a>
 80048f6:	46e6      	mov	lr, ip
 80048f8:	b160      	cbz	r0, 8004914 <strncmp+0x3c>
 80048fa:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80048fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004902:	ea6f 030e 	mvn.w	r3, lr
 8004906:	42a0      	cmp	r0, r4
 8004908:	4413      	add	r3, r2
 800490a:	d122      	bne.n	8004952 <strncmp+0x7a>
 800490c:	eb1c 0303 	adds.w	r3, ip, r3
 8004910:	d1f2      	bne.n	80048f8 <strncmp+0x20>
 8004912:	2000      	movs	r0, #0
 8004914:	bd30      	pop	{r4, r5, pc}
 8004916:	6804      	ldr	r4, [r0, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	f853 5b04 	ldr.w	r5, [r3], #4
 800491e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
 8004922:	42ac      	cmp	r4, r5
 8004924:	4684      	mov	ip, r0
 8004926:	ea2e 0e04 	bic.w	lr, lr, r4
 800492a:	f100 0004 	add.w	r0, r0, #4
 800492e:	d10b      	bne.n	8004948 <strncmp+0x70>
 8004930:	3a04      	subs	r2, #4
 8004932:	4684      	mov	ip, r0
 8004934:	4619      	mov	r1, r3
 8004936:	d0ec      	beq.n	8004912 <strncmp+0x3a>
 8004938:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
 800493c:	d1e9      	bne.n	8004912 <strncmp+0x3a>
 800493e:	2a03      	cmp	r2, #3
 8004940:	d8e9      	bhi.n	8004916 <strncmp+0x3e>
 8004942:	e7d1      	b.n	80048e8 <strncmp+0x10>
 8004944:	4610      	mov	r0, r2
 8004946:	4770      	bx	lr
 8004948:	f89c 0000 	ldrb.w	r0, [ip]
 800494c:	780c      	ldrb	r4, [r1, #0]
 800494e:	42a0      	cmp	r0, r4
 8004950:	d0d1      	beq.n	80048f6 <strncmp+0x1e>
 8004952:	1b00      	subs	r0, r0, r4
 8004954:	bd30      	pop	{r4, r5, pc}
 8004956:	bf00      	nop

08004958 <_wctomb_r>:
 8004958:	b410      	push	{r4}
 800495a:	4c03      	ldr	r4, [pc, #12]	; (8004968 <_wctomb_r+0x10>)
 800495c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8004960:	46a4      	mov	ip, r4
 8004962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004966:	4760      	bx	ip
 8004968:	20000068 	.word	0x20000068

0800496c <__ascii_wctomb>:
 800496c:	b149      	cbz	r1, 8004982 <__ascii_wctomb+0x16>
 800496e:	2aff      	cmp	r2, #255	; 0xff
 8004970:	d802      	bhi.n	8004978 <__ascii_wctomb+0xc>
 8004972:	700a      	strb	r2, [r1, #0]
 8004974:	2001      	movs	r0, #1
 8004976:	4770      	bx	lr
 8004978:	238a      	movs	r3, #138	; 0x8a
 800497a:	6003      	str	r3, [r0, #0]
 800497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004980:	4770      	bx	lr
 8004982:	4608      	mov	r0, r1
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <_write_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	460c      	mov	r4, r1
 800498c:	4d08      	ldr	r5, [pc, #32]	; (80049b0 <_write_r+0x28>)
 800498e:	4684      	mov	ip, r0
 8004990:	4611      	mov	r1, r2
 8004992:	4620      	mov	r0, r4
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	602b      	str	r3, [r5, #0]
 800499a:	4664      	mov	r4, ip
 800499c:	f004 fd20 	bl	80093e0 <_write>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d000      	beq.n	80049a6 <_write_r+0x1e>
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0fb      	beq.n	80049a4 <_write_r+0x1c>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	2000024c 	.word	0x2000024c

080049b4 <_close_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4d07      	ldr	r5, [pc, #28]	; (80049d4 <_close_r+0x20>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	602a      	str	r2, [r5, #0]
 80049c0:	f004 fd1c 	bl	80093fc <_close>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d000      	beq.n	80049ca <_close_r+0x16>
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0fb      	beq.n	80049c8 <_close_r+0x14>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	2000024c 	.word	0x2000024c

080049d8 <_fstat_r>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	460c      	mov	r4, r1
 80049dc:	4d08      	ldr	r5, [pc, #32]	; (8004a00 <_fstat_r+0x28>)
 80049de:	4603      	mov	r3, r0
 80049e0:	2600      	movs	r6, #0
 80049e2:	4620      	mov	r0, r4
 80049e4:	4611      	mov	r1, r2
 80049e6:	461c      	mov	r4, r3
 80049e8:	602e      	str	r6, [r5, #0]
 80049ea:	f004 fd0a 	bl	8009402 <_fstat>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d000      	beq.n	80049f4 <_fstat_r+0x1c>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0fb      	beq.n	80049f2 <_fstat_r+0x1a>
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	bf00      	nop
 8004a00:	2000024c 	.word	0x2000024c

08004a04 <_isatty_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d07      	ldr	r5, [pc, #28]	; (8004a24 <_isatty_r+0x20>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	f004 fcfc 	bl	800940c <_isatty>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d000      	beq.n	8004a1a <_isatty_r+0x16>
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0fb      	beq.n	8004a18 <_isatty_r+0x14>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	2000024c 	.word	0x2000024c

08004a28 <_lseek_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	4d08      	ldr	r5, [pc, #32]	; (8004a50 <_lseek_r+0x28>)
 8004a2e:	4684      	mov	ip, r0
 8004a30:	4611      	mov	r1, r2
 8004a32:	4620      	mov	r0, r4
 8004a34:	461a      	mov	r2, r3
 8004a36:	2300      	movs	r3, #0
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	4664      	mov	r4, ip
 8004a3c:	f004 fce8 	bl	8009410 <_lseek>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d000      	beq.n	8004a46 <_lseek_r+0x1e>
 8004a44:	bd38      	pop	{r3, r4, r5, pc}
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0fb      	beq.n	8004a44 <_lseek_r+0x1c>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	2000024c 	.word	0x2000024c

08004a54 <malloc>:
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <malloc+0xc>)
 8004a56:	4601      	mov	r1, r0
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	f7ff bb0d 	b.w	8004078 <_malloc_r>
 8004a5e:	bf00      	nop
 8004a60:	20000000 	.word	0x20000000

08004a64 <free>:
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <free+0xc>)
 8004a66:	4601      	mov	r1, r0
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	f7ff baa3 	b.w	8003fb4 <_free_r>
 8004a6e:	bf00      	nop
 8004a70:	20000000 	.word	0x20000000

08004a74 <__malloc_lock>:
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <__malloc_unlock>:
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f1a0 0004 	sub.w	r0, r0, #4
 8004a86:	bfbc      	itt	lt
 8004a88:	580b      	ldrlt	r3, [r1, r0]
 8004a8a:	18c0      	addlt	r0, r0, r3
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <_read_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	4d08      	ldr	r5, [pc, #32]	; (8004ab8 <_read_r+0x28>)
 8004a96:	4684      	mov	ip, r0
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	4664      	mov	r4, ip
 8004aa4:	f004 fc8c 	bl	80093c0 <_read>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d000      	beq.n	8004aae <_read_r+0x1e>
 8004aac:	bd38      	pop	{r3, r4, r5, pc}
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0fb      	beq.n	8004aac <_read_r+0x1c>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	2000024c 	.word	0x2000024c

08004abc <__aeabi_drsub>:
 8004abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004ac0:	e002      	b.n	8004ac8 <__adddf3>
 8004ac2:	bf00      	nop

08004ac4 <__aeabi_dsub>:
 8004ac4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004ac8 <__adddf3>:
 8004ac8:	b530      	push	{r4, r5, lr}
 8004aca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004ace:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004ad2:	ea94 0f05 	teq	r4, r5
 8004ad6:	bf08      	it	eq
 8004ad8:	ea90 0f02 	teqeq	r0, r2
 8004adc:	bf1f      	itttt	ne
 8004ade:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004ae2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004ae6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004aea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004aee:	f000 80e2 	beq.w	8004cb6 <__adddf3+0x1ee>
 8004af2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004af6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004afa:	bfb8      	it	lt
 8004afc:	426d      	neglt	r5, r5
 8004afe:	dd0c      	ble.n	8004b1a <__adddf3+0x52>
 8004b00:	442c      	add	r4, r5
 8004b02:	ea80 0202 	eor.w	r2, r0, r2
 8004b06:	ea81 0303 	eor.w	r3, r1, r3
 8004b0a:	ea82 0000 	eor.w	r0, r2, r0
 8004b0e:	ea83 0101 	eor.w	r1, r3, r1
 8004b12:	ea80 0202 	eor.w	r2, r0, r2
 8004b16:	ea81 0303 	eor.w	r3, r1, r3
 8004b1a:	2d36      	cmp	r5, #54	; 0x36
 8004b1c:	bf88      	it	hi
 8004b1e:	bd30      	pophi	{r4, r5, pc}
 8004b20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004b28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004b2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004b30:	d002      	beq.n	8004b38 <__adddf3+0x70>
 8004b32:	4240      	negs	r0, r0
 8004b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004b38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004b40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004b44:	d002      	beq.n	8004b4c <__adddf3+0x84>
 8004b46:	4252      	negs	r2, r2
 8004b48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004b4c:	ea94 0f05 	teq	r4, r5
 8004b50:	f000 80a7 	beq.w	8004ca2 <__adddf3+0x1da>
 8004b54:	f1a4 0401 	sub.w	r4, r4, #1
 8004b58:	f1d5 0e20 	rsbs	lr, r5, #32
 8004b5c:	db0d      	blt.n	8004b7a <__adddf3+0xb2>
 8004b5e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004b62:	fa22 f205 	lsr.w	r2, r2, r5
 8004b66:	1880      	adds	r0, r0, r2
 8004b68:	f141 0100 	adc.w	r1, r1, #0
 8004b6c:	fa03 f20e 	lsl.w	r2, r3, lr
 8004b70:	1880      	adds	r0, r0, r2
 8004b72:	fa43 f305 	asr.w	r3, r3, r5
 8004b76:	4159      	adcs	r1, r3
 8004b78:	e00e      	b.n	8004b98 <__adddf3+0xd0>
 8004b7a:	f1a5 0520 	sub.w	r5, r5, #32
 8004b7e:	f10e 0e20 	add.w	lr, lr, #32
 8004b82:	2a01      	cmp	r2, #1
 8004b84:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004b88:	bf28      	it	cs
 8004b8a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004b8e:	fa43 f305 	asr.w	r3, r3, r5
 8004b92:	18c0      	adds	r0, r0, r3
 8004b94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004b98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004b9c:	d507      	bpl.n	8004bae <__adddf3+0xe6>
 8004b9e:	f04f 0e00 	mov.w	lr, #0
 8004ba2:	f1dc 0c00 	rsbs	ip, ip, #0
 8004ba6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004baa:	eb6e 0101 	sbc.w	r1, lr, r1
 8004bae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004bb2:	d31b      	bcc.n	8004bec <__adddf3+0x124>
 8004bb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004bb8:	d30c      	bcc.n	8004bd4 <__adddf3+0x10c>
 8004bba:	0849      	lsrs	r1, r1, #1
 8004bbc:	ea5f 0030 	movs.w	r0, r0, rrx
 8004bc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004bc4:	f104 0401 	add.w	r4, r4, #1
 8004bc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004bcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004bd0:	f080 809a 	bcs.w	8004d08 <__adddf3+0x240>
 8004bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004bd8:	bf08      	it	eq
 8004bda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004bde:	f150 0000 	adcs.w	r0, r0, #0
 8004be2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004be6:	ea41 0105 	orr.w	r1, r1, r5
 8004bea:	bd30      	pop	{r4, r5, pc}
 8004bec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004bf0:	4140      	adcs	r0, r0
 8004bf2:	eb41 0101 	adc.w	r1, r1, r1
 8004bf6:	3c01      	subs	r4, #1
 8004bf8:	bf28      	it	cs
 8004bfa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004bfe:	d2e9      	bcs.n	8004bd4 <__adddf3+0x10c>
 8004c00:	f091 0f00 	teq	r1, #0
 8004c04:	bf04      	itt	eq
 8004c06:	4601      	moveq	r1, r0
 8004c08:	2000      	moveq	r0, #0
 8004c0a:	fab1 f381 	clz	r3, r1
 8004c0e:	bf08      	it	eq
 8004c10:	3320      	addeq	r3, #32
 8004c12:	f1a3 030b 	sub.w	r3, r3, #11
 8004c16:	f1b3 0220 	subs.w	r2, r3, #32
 8004c1a:	da0c      	bge.n	8004c36 <__adddf3+0x16e>
 8004c1c:	320c      	adds	r2, #12
 8004c1e:	dd08      	ble.n	8004c32 <__adddf3+0x16a>
 8004c20:	f102 0c14 	add.w	ip, r2, #20
 8004c24:	f1c2 020c 	rsb	r2, r2, #12
 8004c28:	fa01 f00c 	lsl.w	r0, r1, ip
 8004c2c:	fa21 f102 	lsr.w	r1, r1, r2
 8004c30:	e00c      	b.n	8004c4c <__adddf3+0x184>
 8004c32:	f102 0214 	add.w	r2, r2, #20
 8004c36:	bfd8      	it	le
 8004c38:	f1c2 0c20 	rsble	ip, r2, #32
 8004c3c:	fa01 f102 	lsl.w	r1, r1, r2
 8004c40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004c44:	bfdc      	itt	le
 8004c46:	ea41 010c 	orrle.w	r1, r1, ip
 8004c4a:	4090      	lslle	r0, r2
 8004c4c:	1ae4      	subs	r4, r4, r3
 8004c4e:	bfa2      	ittt	ge
 8004c50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004c54:	4329      	orrge	r1, r5
 8004c56:	bd30      	popge	{r4, r5, pc}
 8004c58:	ea6f 0404 	mvn.w	r4, r4
 8004c5c:	3c1f      	subs	r4, #31
 8004c5e:	da1c      	bge.n	8004c9a <__adddf3+0x1d2>
 8004c60:	340c      	adds	r4, #12
 8004c62:	dc0e      	bgt.n	8004c82 <__adddf3+0x1ba>
 8004c64:	f104 0414 	add.w	r4, r4, #20
 8004c68:	f1c4 0220 	rsb	r2, r4, #32
 8004c6c:	fa20 f004 	lsr.w	r0, r0, r4
 8004c70:	fa01 f302 	lsl.w	r3, r1, r2
 8004c74:	ea40 0003 	orr.w	r0, r0, r3
 8004c78:	fa21 f304 	lsr.w	r3, r1, r4
 8004c7c:	ea45 0103 	orr.w	r1, r5, r3
 8004c80:	bd30      	pop	{r4, r5, pc}
 8004c82:	f1c4 040c 	rsb	r4, r4, #12
 8004c86:	f1c4 0220 	rsb	r2, r4, #32
 8004c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8004c8e:	fa01 f304 	lsl.w	r3, r1, r4
 8004c92:	ea40 0003 	orr.w	r0, r0, r3
 8004c96:	4629      	mov	r1, r5
 8004c98:	bd30      	pop	{r4, r5, pc}
 8004c9a:	fa21 f004 	lsr.w	r0, r1, r4
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	bd30      	pop	{r4, r5, pc}
 8004ca2:	f094 0f00 	teq	r4, #0
 8004ca6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004caa:	bf06      	itte	eq
 8004cac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004cb0:	3401      	addeq	r4, #1
 8004cb2:	3d01      	subne	r5, #1
 8004cb4:	e74e      	b.n	8004b54 <__adddf3+0x8c>
 8004cb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004cba:	bf18      	it	ne
 8004cbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004cc0:	d029      	beq.n	8004d16 <__adddf3+0x24e>
 8004cc2:	ea94 0f05 	teq	r4, r5
 8004cc6:	bf08      	it	eq
 8004cc8:	ea90 0f02 	teqeq	r0, r2
 8004ccc:	d005      	beq.n	8004cda <__adddf3+0x212>
 8004cce:	ea54 0c00 	orrs.w	ip, r4, r0
 8004cd2:	bf04      	itt	eq
 8004cd4:	4619      	moveq	r1, r3
 8004cd6:	4610      	moveq	r0, r2
 8004cd8:	bd30      	pop	{r4, r5, pc}
 8004cda:	ea91 0f03 	teq	r1, r3
 8004cde:	bf1e      	ittt	ne
 8004ce0:	2100      	movne	r1, #0
 8004ce2:	2000      	movne	r0, #0
 8004ce4:	bd30      	popne	{r4, r5, pc}
 8004ce6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004cea:	d105      	bne.n	8004cf8 <__adddf3+0x230>
 8004cec:	0040      	lsls	r0, r0, #1
 8004cee:	4149      	adcs	r1, r1
 8004cf0:	bf28      	it	cs
 8004cf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004cf6:	bd30      	pop	{r4, r5, pc}
 8004cf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004cfc:	bf3c      	itt	cc
 8004cfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004d02:	bd30      	popcc	{r4, r5, pc}
 8004d04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004d0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	bd30      	pop	{r4, r5, pc}
 8004d16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d1a:	bf1a      	itte	ne
 8004d1c:	4619      	movne	r1, r3
 8004d1e:	4610      	movne	r0, r2
 8004d20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004d24:	bf1c      	itt	ne
 8004d26:	460b      	movne	r3, r1
 8004d28:	4602      	movne	r2, r0
 8004d2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004d2e:	bf06      	itte	eq
 8004d30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004d34:	ea91 0f03 	teqeq	r1, r3
 8004d38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004d3c:	bd30      	pop	{r4, r5, pc}
 8004d3e:	bf00      	nop

08004d40 <__aeabi_ui2d>:
 8004d40:	f090 0f00 	teq	r0, #0
 8004d44:	bf04      	itt	eq
 8004d46:	2100      	moveq	r1, #0
 8004d48:	4770      	bxeq	lr
 8004d4a:	b530      	push	{r4, r5, lr}
 8004d4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004d54:	f04f 0500 	mov.w	r5, #0
 8004d58:	f04f 0100 	mov.w	r1, #0
 8004d5c:	e750      	b.n	8004c00 <__adddf3+0x138>
 8004d5e:	bf00      	nop

08004d60 <__aeabi_i2d>:
 8004d60:	f090 0f00 	teq	r0, #0
 8004d64:	bf04      	itt	eq
 8004d66:	2100      	moveq	r1, #0
 8004d68:	4770      	bxeq	lr
 8004d6a:	b530      	push	{r4, r5, lr}
 8004d6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004d70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004d74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004d78:	bf48      	it	mi
 8004d7a:	4240      	negmi	r0, r0
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	e73e      	b.n	8004c00 <__adddf3+0x138>
 8004d82:	bf00      	nop

08004d84 <__aeabi_f2d>:
 8004d84:	0042      	lsls	r2, r0, #1
 8004d86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004d8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8004d8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004d92:	bf1f      	itttt	ne
 8004d94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004d98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004d9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004da0:	4770      	bxne	lr
 8004da2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8004da6:	bf08      	it	eq
 8004da8:	4770      	bxeq	lr
 8004daa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004dae:	bf04      	itt	eq
 8004db0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004db4:	4770      	bxeq	lr
 8004db6:	b530      	push	{r4, r5, lr}
 8004db8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004dc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004dc4:	e71c      	b.n	8004c00 <__adddf3+0x138>
 8004dc6:	bf00      	nop

08004dc8 <__aeabi_ul2d>:
 8004dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8004dcc:	bf08      	it	eq
 8004dce:	4770      	bxeq	lr
 8004dd0:	b530      	push	{r4, r5, lr}
 8004dd2:	f04f 0500 	mov.w	r5, #0
 8004dd6:	e00a      	b.n	8004dee <__aeabi_l2d+0x16>

08004dd8 <__aeabi_l2d>:
 8004dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8004ddc:	bf08      	it	eq
 8004dde:	4770      	bxeq	lr
 8004de0:	b530      	push	{r4, r5, lr}
 8004de2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004de6:	d502      	bpl.n	8004dee <__aeabi_l2d+0x16>
 8004de8:	4240      	negs	r0, r0
 8004dea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004dee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004df2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004df6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004dfa:	f43f aed8 	beq.w	8004bae <__adddf3+0xe6>
 8004dfe:	f04f 0203 	mov.w	r2, #3
 8004e02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e06:	bf18      	it	ne
 8004e08:	3203      	addne	r2, #3
 8004e0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e0e:	bf18      	it	ne
 8004e10:	3203      	addne	r2, #3
 8004e12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004e16:	f1c2 0320 	rsb	r3, r2, #32
 8004e1a:	fa00 fc03 	lsl.w	ip, r0, r3
 8004e1e:	fa20 f002 	lsr.w	r0, r0, r2
 8004e22:	fa01 fe03 	lsl.w	lr, r1, r3
 8004e26:	ea40 000e 	orr.w	r0, r0, lr
 8004e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8004e2e:	4414      	add	r4, r2
 8004e30:	e6bd      	b.n	8004bae <__adddf3+0xe6>
 8004e32:	bf00      	nop

08004e34 <__aeabi_dmul>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004e42:	bf1d      	ittte	ne
 8004e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004e48:	ea94 0f0c 	teqne	r4, ip
 8004e4c:	ea95 0f0c 	teqne	r5, ip
 8004e50:	f000 f8de 	bleq	8005010 <__aeabi_dmul+0x1dc>
 8004e54:	442c      	add	r4, r5
 8004e56:	ea81 0603 	eor.w	r6, r1, r3
 8004e5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004e5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004e62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004e66:	bf18      	it	ne
 8004e68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e74:	d038      	beq.n	8004ee8 <__aeabi_dmul+0xb4>
 8004e76:	fba0 ce02 	umull	ip, lr, r0, r2
 8004e7a:	f04f 0500 	mov.w	r5, #0
 8004e7e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004e82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004e86:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004e8a:	f04f 0600 	mov.w	r6, #0
 8004e8e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004e92:	f09c 0f00 	teq	ip, #0
 8004e96:	bf18      	it	ne
 8004e98:	f04e 0e01 	orrne.w	lr, lr, #1
 8004e9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004ea0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004ea4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004ea8:	d204      	bcs.n	8004eb4 <__aeabi_dmul+0x80>
 8004eaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004eae:	416d      	adcs	r5, r5
 8004eb0:	eb46 0606 	adc.w	r6, r6, r6
 8004eb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004eb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004ebc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004ec0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004ec4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004ec8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004ecc:	bf88      	it	hi
 8004ece:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004ed2:	d81e      	bhi.n	8004f12 <__aeabi_dmul+0xde>
 8004ed4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004ed8:	bf08      	it	eq
 8004eda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004ede:	f150 0000 	adcs.w	r0, r0, #0
 8004ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004eec:	ea46 0101 	orr.w	r1, r6, r1
 8004ef0:	ea40 0002 	orr.w	r0, r0, r2
 8004ef4:	ea81 0103 	eor.w	r1, r1, r3
 8004ef8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004efc:	bfc2      	ittt	gt
 8004efe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004f02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004f06:	bd70      	popgt	{r4, r5, r6, pc}
 8004f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f0c:	f04f 0e00 	mov.w	lr, #0
 8004f10:	3c01      	subs	r4, #1
 8004f12:	f300 80ab 	bgt.w	800506c <__aeabi_dmul+0x238>
 8004f16:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004f1a:	bfde      	ittt	le
 8004f1c:	2000      	movle	r0, #0
 8004f1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004f22:	bd70      	pople	{r4, r5, r6, pc}
 8004f24:	f1c4 0400 	rsb	r4, r4, #0
 8004f28:	3c20      	subs	r4, #32
 8004f2a:	da35      	bge.n	8004f98 <__aeabi_dmul+0x164>
 8004f2c:	340c      	adds	r4, #12
 8004f2e:	dc1b      	bgt.n	8004f68 <__aeabi_dmul+0x134>
 8004f30:	f104 0414 	add.w	r4, r4, #20
 8004f34:	f1c4 0520 	rsb	r5, r4, #32
 8004f38:	fa00 f305 	lsl.w	r3, r0, r5
 8004f3c:	fa20 f004 	lsr.w	r0, r0, r4
 8004f40:	fa01 f205 	lsl.w	r2, r1, r5
 8004f44:	ea40 0002 	orr.w	r0, r0, r2
 8004f48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004f54:	fa21 f604 	lsr.w	r6, r1, r4
 8004f58:	eb42 0106 	adc.w	r1, r2, r6
 8004f5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f60:	bf08      	it	eq
 8004f62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f1c4 040c 	rsb	r4, r4, #12
 8004f6c:	f1c4 0520 	rsb	r5, r4, #32
 8004f70:	fa00 f304 	lsl.w	r3, r0, r4
 8004f74:	fa20 f005 	lsr.w	r0, r0, r5
 8004f78:	fa01 f204 	lsl.w	r2, r1, r4
 8004f7c:	ea40 0002 	orr.w	r0, r0, r2
 8004f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004f84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004f88:	f141 0100 	adc.w	r1, r1, #0
 8004f8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f90:	bf08      	it	eq
 8004f92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	f1c4 0520 	rsb	r5, r4, #32
 8004f9c:	fa00 f205 	lsl.w	r2, r0, r5
 8004fa0:	ea4e 0e02 	orr.w	lr, lr, r2
 8004fa4:	fa20 f304 	lsr.w	r3, r0, r4
 8004fa8:	fa01 f205 	lsl.w	r2, r1, r5
 8004fac:	ea43 0302 	orr.w	r3, r3, r2
 8004fb0:	fa21 f004 	lsr.w	r0, r1, r4
 8004fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fb8:	fa21 f204 	lsr.w	r2, r1, r4
 8004fbc:	ea20 0002 	bic.w	r0, r0, r2
 8004fc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004fc8:	bf08      	it	eq
 8004fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f094 0f00 	teq	r4, #0
 8004fd4:	d10f      	bne.n	8004ff6 <__aeabi_dmul+0x1c2>
 8004fd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004fda:	0040      	lsls	r0, r0, #1
 8004fdc:	eb41 0101 	adc.w	r1, r1, r1
 8004fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004fe4:	bf08      	it	eq
 8004fe6:	3c01      	subeq	r4, #1
 8004fe8:	d0f7      	beq.n	8004fda <__aeabi_dmul+0x1a6>
 8004fea:	ea41 0106 	orr.w	r1, r1, r6
 8004fee:	f095 0f00 	teq	r5, #0
 8004ff2:	bf18      	it	ne
 8004ff4:	4770      	bxne	lr
 8004ff6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004ffa:	0052      	lsls	r2, r2, #1
 8004ffc:	eb43 0303 	adc.w	r3, r3, r3
 8005000:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005004:	bf08      	it	eq
 8005006:	3d01      	subeq	r5, #1
 8005008:	d0f7      	beq.n	8004ffa <__aeabi_dmul+0x1c6>
 800500a:	ea43 0306 	orr.w	r3, r3, r6
 800500e:	4770      	bx	lr
 8005010:	ea94 0f0c 	teq	r4, ip
 8005014:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005018:	bf18      	it	ne
 800501a:	ea95 0f0c 	teqne	r5, ip
 800501e:	d00c      	beq.n	800503a <__aeabi_dmul+0x206>
 8005020:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005024:	bf18      	it	ne
 8005026:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800502a:	d1d1      	bne.n	8004fd0 <__aeabi_dmul+0x19c>
 800502c:	ea81 0103 	eor.w	r1, r1, r3
 8005030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800503e:	bf06      	itte	eq
 8005040:	4610      	moveq	r0, r2
 8005042:	4619      	moveq	r1, r3
 8005044:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005048:	d019      	beq.n	800507e <__aeabi_dmul+0x24a>
 800504a:	ea94 0f0c 	teq	r4, ip
 800504e:	d102      	bne.n	8005056 <__aeabi_dmul+0x222>
 8005050:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005054:	d113      	bne.n	800507e <__aeabi_dmul+0x24a>
 8005056:	ea95 0f0c 	teq	r5, ip
 800505a:	d105      	bne.n	8005068 <__aeabi_dmul+0x234>
 800505c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005060:	bf1c      	itt	ne
 8005062:	4610      	movne	r0, r2
 8005064:	4619      	movne	r1, r3
 8005066:	d10a      	bne.n	800507e <__aeabi_dmul+0x24a>
 8005068:	ea81 0103 	eor.w	r1, r1, r3
 800506c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005070:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005074:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005078:	f04f 0000 	mov.w	r0, #0
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005082:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <__aeabi_ddiv>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800508e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005096:	bf1d      	ittte	ne
 8005098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800509c:	ea94 0f0c 	teqne	r4, ip
 80050a0:	ea95 0f0c 	teqne	r5, ip
 80050a4:	f000 f8a7 	bleq	80051f6 <__aeabi_ddiv+0x16e>
 80050a8:	eba4 0405 	sub.w	r4, r4, r5
 80050ac:	ea81 0e03 	eor.w	lr, r1, r3
 80050b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80050b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80050b8:	f000 8088 	beq.w	80051cc <__aeabi_ddiv+0x144>
 80050bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80050c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80050c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80050c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80050cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80050d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80050d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80050d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80050dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80050e0:	429d      	cmp	r5, r3
 80050e2:	bf08      	it	eq
 80050e4:	4296      	cmpeq	r6, r2
 80050e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80050ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80050ee:	d202      	bcs.n	80050f6 <__aeabi_ddiv+0x6e>
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80050f6:	1ab6      	subs	r6, r6, r2
 80050f8:	eb65 0503 	sbc.w	r5, r5, r3
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8005102:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005106:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800510a:	ebb6 0e02 	subs.w	lr, r6, r2
 800510e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005112:	bf22      	ittt	cs
 8005114:	1ab6      	subcs	r6, r6, r2
 8005116:	4675      	movcs	r5, lr
 8005118:	ea40 000c 	orrcs.w	r0, r0, ip
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005122:	ebb6 0e02 	subs.w	lr, r6, r2
 8005126:	eb75 0e03 	sbcs.w	lr, r5, r3
 800512a:	bf22      	ittt	cs
 800512c:	1ab6      	subcs	r6, r6, r2
 800512e:	4675      	movcs	r5, lr
 8005130:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	ea4f 0232 	mov.w	r2, r2, rrx
 800513a:	ebb6 0e02 	subs.w	lr, r6, r2
 800513e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005142:	bf22      	ittt	cs
 8005144:	1ab6      	subcs	r6, r6, r2
 8005146:	4675      	movcs	r5, lr
 8005148:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005152:	ebb6 0e02 	subs.w	lr, r6, r2
 8005156:	eb75 0e03 	sbcs.w	lr, r5, r3
 800515a:	bf22      	ittt	cs
 800515c:	1ab6      	subcs	r6, r6, r2
 800515e:	4675      	movcs	r5, lr
 8005160:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005164:	ea55 0e06 	orrs.w	lr, r5, r6
 8005168:	d018      	beq.n	800519c <__aeabi_ddiv+0x114>
 800516a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800516e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005172:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005176:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800517a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800517e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005182:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005186:	d1c0      	bne.n	800510a <__aeabi_ddiv+0x82>
 8005188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800518c:	d10b      	bne.n	80051a6 <__aeabi_ddiv+0x11e>
 800518e:	ea41 0100 	orr.w	r1, r1, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800519a:	e7b6      	b.n	800510a <__aeabi_ddiv+0x82>
 800519c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051a0:	bf04      	itt	eq
 80051a2:	4301      	orreq	r1, r0
 80051a4:	2000      	moveq	r0, #0
 80051a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80051aa:	bf88      	it	hi
 80051ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80051b0:	f63f aeaf 	bhi.w	8004f12 <__aeabi_dmul+0xde>
 80051b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80051b8:	bf04      	itt	eq
 80051ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80051be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80051c2:	f150 0000 	adcs.w	r0, r0, #0
 80051c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80051d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80051d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80051d8:	bfc2      	ittt	gt
 80051da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80051de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80051e2:	bd70      	popgt	{r4, r5, r6, pc}
 80051e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80051e8:	f04f 0e00 	mov.w	lr, #0
 80051ec:	3c01      	subs	r4, #1
 80051ee:	e690      	b.n	8004f12 <__aeabi_dmul+0xde>
 80051f0:	ea45 0e06 	orr.w	lr, r5, r6
 80051f4:	e68d      	b.n	8004f12 <__aeabi_dmul+0xde>
 80051f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80051fa:	ea94 0f0c 	teq	r4, ip
 80051fe:	bf08      	it	eq
 8005200:	ea95 0f0c 	teqeq	r5, ip
 8005204:	f43f af3b 	beq.w	800507e <__aeabi_dmul+0x24a>
 8005208:	ea94 0f0c 	teq	r4, ip
 800520c:	d10a      	bne.n	8005224 <__aeabi_ddiv+0x19c>
 800520e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005212:	f47f af34 	bne.w	800507e <__aeabi_dmul+0x24a>
 8005216:	ea95 0f0c 	teq	r5, ip
 800521a:	f47f af25 	bne.w	8005068 <__aeabi_dmul+0x234>
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	e72c      	b.n	800507e <__aeabi_dmul+0x24a>
 8005224:	ea95 0f0c 	teq	r5, ip
 8005228:	d106      	bne.n	8005238 <__aeabi_ddiv+0x1b0>
 800522a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800522e:	f43f aefd 	beq.w	800502c <__aeabi_dmul+0x1f8>
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	e722      	b.n	800507e <__aeabi_dmul+0x24a>
 8005238:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800523c:	bf18      	it	ne
 800523e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005242:	f47f aec5 	bne.w	8004fd0 <__aeabi_dmul+0x19c>
 8005246:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800524a:	f47f af0d 	bne.w	8005068 <__aeabi_dmul+0x234>
 800524e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005252:	f47f aeeb 	bne.w	800502c <__aeabi_dmul+0x1f8>
 8005256:	e712      	b.n	800507e <__aeabi_dmul+0x24a>

08005258 <__gedf2>:
 8005258:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800525c:	e006      	b.n	800526c <__cmpdf2+0x4>
 800525e:	bf00      	nop

08005260 <__ledf2>:
 8005260:	f04f 0c01 	mov.w	ip, #1
 8005264:	e002      	b.n	800526c <__cmpdf2+0x4>
 8005266:	bf00      	nop

08005268 <__cmpdf2>:
 8005268:	f04f 0c01 	mov.w	ip, #1
 800526c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005278:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800527c:	bf18      	it	ne
 800527e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005282:	d01b      	beq.n	80052bc <__cmpdf2+0x54>
 8005284:	b001      	add	sp, #4
 8005286:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800528a:	bf0c      	ite	eq
 800528c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005290:	ea91 0f03 	teqne	r1, r3
 8005294:	bf02      	ittt	eq
 8005296:	ea90 0f02 	teqeq	r0, r2
 800529a:	2000      	moveq	r0, #0
 800529c:	4770      	bxeq	lr
 800529e:	f110 0f00 	cmn.w	r0, #0
 80052a2:	ea91 0f03 	teq	r1, r3
 80052a6:	bf58      	it	pl
 80052a8:	4299      	cmppl	r1, r3
 80052aa:	bf08      	it	eq
 80052ac:	4290      	cmpeq	r0, r2
 80052ae:	bf2c      	ite	cs
 80052b0:	17d8      	asrcs	r0, r3, #31
 80052b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80052b6:	f040 0001 	orr.w	r0, r0, #1
 80052ba:	4770      	bx	lr
 80052bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80052c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80052c4:	d102      	bne.n	80052cc <__cmpdf2+0x64>
 80052c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80052ca:	d107      	bne.n	80052dc <__cmpdf2+0x74>
 80052cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80052d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80052d4:	d1d6      	bne.n	8005284 <__cmpdf2+0x1c>
 80052d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80052da:	d0d3      	beq.n	8005284 <__cmpdf2+0x1c>
 80052dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop

080052e4 <__aeabi_cdrcmple>:
 80052e4:	4684      	mov	ip, r0
 80052e6:	4610      	mov	r0, r2
 80052e8:	4662      	mov	r2, ip
 80052ea:	468c      	mov	ip, r1
 80052ec:	4619      	mov	r1, r3
 80052ee:	4663      	mov	r3, ip
 80052f0:	e000      	b.n	80052f4 <__aeabi_cdcmpeq>
 80052f2:	bf00      	nop

080052f4 <__aeabi_cdcmpeq>:
 80052f4:	b501      	push	{r0, lr}
 80052f6:	f7ff ffb7 	bl	8005268 <__cmpdf2>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	bf48      	it	mi
 80052fe:	f110 0f00 	cmnmi.w	r0, #0
 8005302:	bd01      	pop	{r0, pc}

08005304 <__aeabi_dcmpeq>:
 8005304:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005308:	f7ff fff4 	bl	80052f4 <__aeabi_cdcmpeq>
 800530c:	bf0c      	ite	eq
 800530e:	2001      	moveq	r0, #1
 8005310:	2000      	movne	r0, #0
 8005312:	f85d fb08 	ldr.w	pc, [sp], #8
 8005316:	bf00      	nop

08005318 <__aeabi_dcmplt>:
 8005318:	f84d ed08 	str.w	lr, [sp, #-8]!
 800531c:	f7ff ffea 	bl	80052f4 <__aeabi_cdcmpeq>
 8005320:	bf34      	ite	cc
 8005322:	2001      	movcc	r0, #1
 8005324:	2000      	movcs	r0, #0
 8005326:	f85d fb08 	ldr.w	pc, [sp], #8
 800532a:	bf00      	nop

0800532c <__aeabi_dcmple>:
 800532c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005330:	f7ff ffe0 	bl	80052f4 <__aeabi_cdcmpeq>
 8005334:	bf94      	ite	ls
 8005336:	2001      	movls	r0, #1
 8005338:	2000      	movhi	r0, #0
 800533a:	f85d fb08 	ldr.w	pc, [sp], #8
 800533e:	bf00      	nop

08005340 <__aeabi_dcmpge>:
 8005340:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005344:	f7ff ffce 	bl	80052e4 <__aeabi_cdrcmple>
 8005348:	bf94      	ite	ls
 800534a:	2001      	movls	r0, #1
 800534c:	2000      	movhi	r0, #0
 800534e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005352:	bf00      	nop

08005354 <__aeabi_dcmpgt>:
 8005354:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005358:	f7ff ffc4 	bl	80052e4 <__aeabi_cdrcmple>
 800535c:	bf34      	ite	cc
 800535e:	2001      	movcc	r0, #1
 8005360:	2000      	movcs	r0, #0
 8005362:	f85d fb08 	ldr.w	pc, [sp], #8
 8005366:	bf00      	nop

08005368 <__aeabi_dcmpun>:
 8005368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800536c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005370:	d102      	bne.n	8005378 <__aeabi_dcmpun+0x10>
 8005372:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005376:	d10a      	bne.n	800538e <__aeabi_dcmpun+0x26>
 8005378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800537c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005380:	d102      	bne.n	8005388 <__aeabi_dcmpun+0x20>
 8005382:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005386:	d102      	bne.n	800538e <__aeabi_dcmpun+0x26>
 8005388:	f04f 0000 	mov.w	r0, #0
 800538c:	4770      	bx	lr
 800538e:	f04f 0001 	mov.w	r0, #1
 8005392:	4770      	bx	lr

08005394 <__aeabi_d2uiz>:
 8005394:	004a      	lsls	r2, r1, #1
 8005396:	d211      	bcs.n	80053bc <__aeabi_d2uiz+0x28>
 8005398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800539c:	d211      	bcs.n	80053c2 <__aeabi_d2uiz+0x2e>
 800539e:	d50d      	bpl.n	80053bc <__aeabi_d2uiz+0x28>
 80053a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80053a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80053a8:	d40e      	bmi.n	80053c8 <__aeabi_d2uiz+0x34>
 80053aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80053ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80053b6:	fa23 f002 	lsr.w	r0, r3, r2
 80053ba:	4770      	bx	lr
 80053bc:	f04f 0000 	mov.w	r0, #0
 80053c0:	4770      	bx	lr
 80053c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80053c6:	d102      	bne.n	80053ce <__aeabi_d2uiz+0x3a>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053cc:	4770      	bx	lr
 80053ce:	f04f 0000 	mov.w	r0, #0
 80053d2:	4770      	bx	lr

080053d4 <__aeabi_d2f>:
 80053d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80053d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80053dc:	bf24      	itt	cs
 80053de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80053e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80053e6:	d90d      	bls.n	8005404 <__aeabi_d2f+0x30>
 80053e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80053ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80053f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80053f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80053f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80053fc:	bf08      	it	eq
 80053fe:	f020 0001 	biceq.w	r0, r0, #1
 8005402:	4770      	bx	lr
 8005404:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005408:	d121      	bne.n	800544e <__aeabi_d2f+0x7a>
 800540a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800540e:	bfbc      	itt	lt
 8005410:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005414:	4770      	bxlt	lr
 8005416:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800541a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800541e:	f1c2 0218 	rsb	r2, r2, #24
 8005422:	f1c2 0c20 	rsb	ip, r2, #32
 8005426:	fa10 f30c 	lsls.w	r3, r0, ip
 800542a:	fa20 f002 	lsr.w	r0, r0, r2
 800542e:	bf18      	it	ne
 8005430:	f040 0001 	orrne.w	r0, r0, #1
 8005434:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005438:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800543c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005440:	ea40 000c 	orr.w	r0, r0, ip
 8005444:	fa23 f302 	lsr.w	r3, r3, r2
 8005448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800544c:	e7cc      	b.n	80053e8 <__aeabi_d2f+0x14>
 800544e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005452:	d107      	bne.n	8005464 <__aeabi_d2f+0x90>
 8005454:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005458:	bf1e      	ittt	ne
 800545a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800545e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005462:	4770      	bxne	lr
 8005464:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005468:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800546c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <__aeabi_d2lz>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2200      	movs	r2, #0
 8005478:	2300      	movs	r3, #0
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	f7ff ff4b 	bl	8005318 <__aeabi_dcmplt>
 8005482:	b928      	cbnz	r0, 8005490 <__aeabi_d2lz+0x1c>
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548c:	f000 b80a 	b.w	80054a4 <__aeabi_d2ulz>
 8005490:	4620      	mov	r0, r4
 8005492:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8005496:	f000 f805 	bl	80054a4 <__aeabi_d2ulz>
 800549a:	4240      	negs	r0, r0
 800549c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a0:	bd38      	pop	{r3, r4, r5, pc}
 80054a2:	bf00      	nop

080054a4 <__aeabi_d2ulz>:
 80054a4:	b5d0      	push	{r4, r6, r7, lr}
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <__aeabi_d2ulz+0x34>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	4606      	mov	r6, r0
 80054ac:	460f      	mov	r7, r1
 80054ae:	f7ff fcc1 	bl	8004e34 <__aeabi_dmul>
 80054b2:	f7ff ff6f 	bl	8005394 <__aeabi_d2uiz>
 80054b6:	4604      	mov	r4, r0
 80054b8:	f7ff fc42 	bl	8004d40 <__aeabi_ui2d>
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <__aeabi_d2ulz+0x38>)
 80054be:	2200      	movs	r2, #0
 80054c0:	f7ff fcb8 	bl	8004e34 <__aeabi_dmul>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f7ff fafa 	bl	8004ac4 <__aeabi_dsub>
 80054d0:	f7ff ff60 	bl	8005394 <__aeabi_d2uiz>
 80054d4:	4621      	mov	r1, r4
 80054d6:	bdd0      	pop	{r4, r6, r7, pc}
 80054d8:	3df00000 	.word	0x3df00000
 80054dc:	41f00000 	.word	0x41f00000

080054e0 <get_sts_mnth>:
uint16_t get_sts_mnth (uint16_t cipher, uint8_t threshold, uint8_t shift_val)
{
    uint32_t  value;
    uint16_t  mod_val;

    value = cipher* (uint32_t)threshold;
 80054e0:	fb01 f000 	mul.w	r0, r1, r0
    if (shift_val == 3)
 80054e4:	2a03      	cmp	r2, #3
 80054e6:	d00a      	beq.n	80054fe <get_sts_mnth+0x1e>
    {
        value *= SQRT_FACTOR;//Factor to sqrt(2)
        value >>= SQRT_SHIFT_VAL;
    }

    mod_val = value % MOD_VALUE+ HALF_MOD;
 80054e8:	f3c0 030a 	ubfx	r3, r0, #0, #11
 80054ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    value >>= SHIFT_VALUE;
 80054f0:	0ac0      	lsrs	r0, r0, #11
    /* Check if modulo greater than MOD_VALUE, if yes add 1 */
    if (mod_val >= MOD_VALUE)
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f6:	d300      	bcc.n	80054fa <get_sts_mnth+0x1a>
        value += 1;
 80054f8:	3001      	adds	r0, #1

    return (uint16_t)value;
}
 80054fa:	b280      	uxth	r0, r0
 80054fc:	4770      	bx	lr
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 80054fe:	21b5      	movs	r1, #181	; 0xb5
 8005500:	fb01 f000 	mul.w	r0, r1, r0
        value >>= SQRT_SHIFT_VAL;
 8005504:	09c0      	lsrs	r0, r0, #7
 8005506:	e7ef      	b.n	80054e8 <get_sts_mnth+0x8>

08005508 <dwt_generatecrc8>:
{
 8005508:	b500      	push	{lr}
 800550a:	4686      	mov	lr, r0
 800550c:	4610      	mov	r0, r2
    for (byte = 0; byte < len; ++byte)
 800550e:	2300      	movs	r3, #0
 8005510:	e007      	b.n	8005522 <dwt_generatecrc8+0x1a>
        data = byteArray[byte] ^ crcRemainderInit;
 8005512:	f81e c003 	ldrb.w	ip, [lr, r3]
 8005516:	ea8c 0c00 	eor.w	ip, ip, r0
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 800551a:	4a04      	ldr	r2, [pc, #16]	; (800552c <dwt_generatecrc8+0x24>)
 800551c:	f812 000c 	ldrb.w	r0, [r2, ip]
    for (byte = 0; byte < len; ++byte)
 8005520:	3301      	adds	r3, #1
 8005522:	428b      	cmp	r3, r1
 8005524:	dbf5      	blt.n	8005512 <dwt_generatecrc8+0xa>
}
 8005526:	f85d fb04 	ldr.w	pc, [sp], #4
 800552a:	bf00      	nop
 800552c:	20000290 	.word	0x20000290

08005530 <dwt_xfer3000>:
{
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	4606      	mov	r6, r0
 8005536:	4614      	mov	r4, r2
 8005538:	461d      	mov	r5, r3
 800553a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 800553e:	1808      	adds	r0, r1, r0
 8005540:	f3c0 4004 	ubfx	r0, r0, #16, #5
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 8005544:	198b      	adds	r3, r1, r6
    assert(length       < 0x3100);
 8005546:	f5b4 5f44 	cmp.w	r4, #12544	; 0x3100
 800554a:	d246      	bcs.n	80055da <dwt_xfer3000+0xaa>
 800554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    assert(mode == DW3000_SPI_WR_BIT ||\
 8005550:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005554:	d00c      	beq.n	8005570 <dwt_xfer3000+0x40>
 8005556:	b15a      	cbz	r2, 8005570 <dwt_xfer3000+0x40>
 8005558:	f248 0101 	movw	r1, #32769	; 0x8001
 800555c:	428a      	cmp	r2, r1
 800555e:	d007      	beq.n	8005570 <dwt_xfer3000+0x40>
 8005560:	f248 0102 	movw	r1, #32770	; 0x8002
 8005564:	428a      	cmp	r2, r1
 8005566:	d003      	beq.n	8005570 <dwt_xfer3000+0x40>
 8005568:	f248 0103 	movw	r1, #32771	; 0x8003
 800556c:	428a      	cmp	r2, r1
 800556e:	d13a      	bne.n	80055e6 <dwt_xfer3000+0xb6>
    addr = (reg_file << 9) | (reg_offset << 2);
 8005570:	0099      	lsls	r1, r3, #2
 8005572:	ea41 2c40 	orr.w	ip, r1, r0, lsl #9
 8005576:	4661      	mov	r1, ip
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8005578:	4311      	orrs	r1, r2
 800557a:	0a09      	lsrs	r1, r1, #8
 800557c:	f88d 100c 	strb.w	r1, [sp, #12]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8005580:	f002 0003 	and.w	r0, r2, #3
 8005584:	ea40 000c 	orr.w	r0, r0, ip
 8005588:	f88d 000d 	strb.w	r0, [sp, #13]
    if (/*reg_offset == 0 && */length == 0)
 800558c:	2c00      	cmp	r4, #0
 800558e:	d136      	bne.n	80055fe <dwt_xfer3000+0xce>
        assert(mode == DW3000_SPI_WR_BIT);
 8005590:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005594:	d12d      	bne.n	80055f2 <dwt_xfer3000+0xc2>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8005596:	0073      	lsls	r3, r6, #1
 8005598:	f063 037e 	orn	r3, r3, #126	; 0x7e
 800559c:	f88d 300c 	strb.w	r3, [sp, #12]
        cnt = 1;
 80055a0:	2701      	movs	r7, #1
    switch (mode)
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d041      	beq.n	800562a <dwt_xfer3000+0xfa>
 80055a6:	f482 4100 	eor.w	r1, r2, #32768	; 0x8000
 80055aa:	2903      	cmp	r1, #3
 80055ac:	d864      	bhi.n	8005678 <dwt_xfer3000+0x148>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <dwt_xfer3000+0x14c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	7d1b      	ldrb	r3, [r3, #20]
 80055b4:	b393      	cbz	r3, 800561c <dwt_xfer3000+0xec>
            crc8 = dwt_generatecrc8(header, cnt, 0);
 80055b6:	2200      	movs	r2, #0
 80055b8:	4639      	mov	r1, r7
 80055ba:	a803      	add	r0, sp, #12
 80055bc:	f7ff ffa4 	bl	8005508 <dwt_generatecrc8>
 80055c0:	4602      	mov	r2, r0
            crc8 = dwt_generatecrc8(buffer, length, crc8);
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f7ff ff9f 	bl	8005508 <dwt_generatecrc8>
            writetospiwithcrc(cnt, header, length, buffer, crc8);
 80055ca:	9000      	str	r0, [sp, #0]
 80055cc:	462b      	mov	r3, r5
 80055ce:	4622      	mov	r2, r4
 80055d0:	a903      	add	r1, sp, #12
 80055d2:	4638      	mov	r0, r7
 80055d4:	f000 feda 	bl	800638c <writetospiwithcrc>
 80055d8:	e032      	b.n	8005640 <dwt_xfer3000+0x110>
    assert(length       < 0x3100);
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <dwt_xfer3000+0x150>)
 80055dc:	4a29      	ldr	r2, [pc, #164]	; (8005684 <dwt_xfer3000+0x154>)
 80055de:	21d5      	movs	r1, #213	; 0xd5
 80055e0:	4829      	ldr	r0, [pc, #164]	; (8005688 <dwt_xfer3000+0x158>)
 80055e2:	f7fa fe31 	bl	8000248 <__assert_func>
    assert(mode == DW3000_SPI_WR_BIT ||\
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <dwt_xfer3000+0x15c>)
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <dwt_xfer3000+0x154>)
 80055ea:	21d6      	movs	r1, #214	; 0xd6
 80055ec:	4826      	ldr	r0, [pc, #152]	; (8005688 <dwt_xfer3000+0x158>)
 80055ee:	f7fa fe2b 	bl	8000248 <__assert_func>
        assert(mode == DW3000_SPI_WR_BIT);
 80055f2:	4b27      	ldr	r3, [pc, #156]	; (8005690 <dwt_xfer3000+0x160>)
 80055f4:	4a23      	ldr	r2, [pc, #140]	; (8005684 <dwt_xfer3000+0x154>)
 80055f6:	21e8      	movs	r1, #232	; 0xe8
 80055f8:	4823      	ldr	r0, [pc, #140]	; (8005688 <dwt_xfer3000+0x158>)
 80055fa:	f7fa fe25 	bl	8000248 <__assert_func>
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 80055fe:	b91b      	cbnz	r3, 8005608 <dwt_xfer3000+0xd8>
 8005600:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005604:	d006      	beq.n	8005614 <dwt_xfer3000+0xe4>
 8005606:	b13a      	cbz	r2, 8005618 <dwt_xfer3000+0xe8>
        header[0] |= DW3000_SPI_EAMRW;
 8005608:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800560c:	f88d 100c 	strb.w	r1, [sp, #12]
        cnt = 2;
 8005610:	2702      	movs	r7, #2
 8005612:	e7c6      	b.n	80055a2 <dwt_xfer3000+0x72>
        cnt = 1;
 8005614:	2701      	movs	r7, #1
 8005616:	e7c4      	b.n	80055a2 <dwt_xfer3000+0x72>
 8005618:	2701      	movs	r7, #1
 800561a:	e7c2      	b.n	80055a2 <dwt_xfer3000+0x72>
            writetospi(cnt, header, length, buffer);
 800561c:	462b      	mov	r3, r5
 800561e:	4622      	mov	r2, r4
 8005620:	a903      	add	r1, sp, #12
 8005622:	4638      	mov	r0, r7
 8005624:	f000 fee8 	bl	80063f8 <writetospi>
 8005628:	e00a      	b.n	8005640 <dwt_xfer3000+0x110>
            readfromspi(cnt, header, length, buffer);
 800562a:	462b      	mov	r3, r5
 800562c:	4622      	mov	r2, r4
 800562e:	a903      	add	r1, sp, #12
 8005630:	4638      	mov	r0, r7
 8005632:	f000 ff13 	bl	800645c <readfromspi>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <dwt_xfer3000+0x14c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	7d1b      	ldrb	r3, [r3, #20]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d001      	beq.n	8005644 <dwt_xfer3000+0x114>
} // end dwt_xfer3000()
 8005640:	b005      	add	sp, #20
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8005644:	2e18      	cmp	r6, #24
 8005646:	d0fb      	beq.n	8005640 <dwt_xfer3000+0x110>
                crc8 = dwt_generatecrc8(header, cnt, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	4639      	mov	r1, r7
 800564c:	a803      	add	r0, sp, #12
 800564e:	f7ff ff5b 	bl	8005508 <dwt_generatecrc8>
 8005652:	4602      	mov	r2, r0
                crc8 = dwt_generatecrc8(buffer, length, crc8);
 8005654:	4621      	mov	r1, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f7ff ff56 	bl	8005508 <dwt_generatecrc8>
 800565c:	4604      	mov	r4, r0
                dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 800565e:	2100      	movs	r1, #0
 8005660:	2018      	movs	r0, #24
 8005662:	f000 f8dc 	bl	800581e <dwt_read8bitoffsetreg>
                if (crc8 != dwcrc8)
 8005666:	4284      	cmp	r4, r0
 8005668:	d0ea      	beq.n	8005640 <dwt_xfer3000+0x110>
                    if (pdw3000local->cbSPIRDErr != NULL)
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <dwt_xfer3000+0x14c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0e5      	beq.n	8005640 <dwt_xfer3000+0x110>
                        pdw3000local->cbSPIRDErr();
 8005674:	4798      	blx	r3
 8005676:	e7e3      	b.n	8005640 <dwt_xfer3000+0x110>
        while(1);
 8005678:	e7fe      	b.n	8005678 <dwt_xfer3000+0x148>
 800567a:	bf00      	nop
 800567c:	200001fc 	.word	0x200001fc
 8005680:	08009a0c 	.word	0x08009a0c
 8005684:	08009ae8 	.word	0x08009ae8
 8005688:	08009a1c 	.word	0x08009a1c
 800568c:	08009a34 	.word	0x08009a34
 8005690:	08009acc 	.word	0x08009acc

08005694 <dwt_writetodevice>:
{
 8005694:	b510      	push	{r4, lr}
 8005696:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 8005698:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800569c:	9400      	str	r4, [sp, #0]
 800569e:	f7ff ff47 	bl	8005530 <dwt_xfer3000>
}
 80056a2:	b002      	add	sp, #8
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <dwt_write32bitoffsetreg>:
{
 80056a6:	b500      	push	{lr}
 80056a8:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
 80056aa:	2300      	movs	r3, #0
 80056ac:	e006      	b.n	80056bc <dwt_write32bitoffsetreg+0x16>
        buffer[j] = (uint8_t)regval;
 80056ae:	f103 0c08 	add.w	ip, r3, #8
 80056b2:	44ec      	add	ip, sp
 80056b4:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
 80056b8:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 80056ba:	3301      	adds	r3, #1
 80056bc:	2b03      	cmp	r3, #3
 80056be:	ddf6      	ble.n	80056ae <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80056c0:	ab01      	add	r3, sp, #4
 80056c2:	2204      	movs	r2, #4
 80056c4:	b289      	uxth	r1, r1
 80056c6:	f7ff ffe5 	bl	8005694 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80056ca:	b003      	add	sp, #12
 80056cc:	f85d fb04 	ldr.w	pc, [sp], #4

080056d0 <dwt_disable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void)
{
 80056d0:	b508      	push	{r3, lr}
    dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 80056d2:	2200      	movs	r2, #0
 80056d4:	4611      	mov	r1, r2
 80056d6:	4802      	ldr	r0, [pc, #8]	; (80056e0 <dwt_disable_rftx_blocks+0x10>)
 80056d8:	f7ff ffe5 	bl	80056a6 <dwt_write32bitoffsetreg>
}
 80056dc:	bd08      	pop	{r3, pc}
 80056de:	bf00      	nop
 80056e0:	00070004 	.word	0x00070004

080056e4 <dwt_disable_rf_tx>:
{
 80056e4:	b510      	push	{r4, lr}
 80056e6:	4604      	mov	r4, r0
    dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 80056e8:	2200      	movs	r2, #0
 80056ea:	4611      	mov	r1, r2
 80056ec:	4808      	ldr	r0, [pc, #32]	; (8005710 <dwt_disable_rf_tx+0x2c>)
 80056ee:	f7ff ffda 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 80056f2:	2200      	movs	r2, #0
 80056f4:	4611      	mov	r1, r2
 80056f6:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 80056fa:	f7ff ffd4 	bl	80056a6 <dwt_write32bitoffsetreg>
    if (switch_config)
 80056fe:	b904      	cbnz	r4, 8005702 <dwt_disable_rf_tx+0x1e>
}
 8005700:	bd10      	pop	{r4, pc}
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8005702:	f04f 52e0 	mov.w	r2, #469762048	; 0x1c000000
 8005706:	2100      	movs	r1, #0
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <dwt_disable_rf_tx+0x30>)
 800570a:	f7ff ffcc 	bl	80056a6 <dwt_write32bitoffsetreg>
}
 800570e:	e7f7      	b.n	8005700 <dwt_disable_rf_tx+0x1c>
 8005710:	00070048 	.word	0x00070048
 8005714:	00070014 	.word	0x00070014

08005718 <dwt_write16bitoffsetreg>:
{
 8005718:	b500      	push	{lr}
 800571a:	b083      	sub	sp, #12
    buffer[0] = (uint8_t)regval;
 800571c:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8005720:	0a12      	lsrs	r2, r2, #8
 8005722:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8005726:	ab01      	add	r3, sp, #4
 8005728:	2202      	movs	r2, #2
 800572a:	b289      	uxth	r1, r1
 800572c:	f7ff ffb2 	bl	8005694 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8005730:	b003      	add	sp, #12
 8005732:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005738 <dwt_force_clocks>:
{
 8005738:	b510      	push	{r4, lr}
 800573a:	4604      	mov	r4, r0
    if (clocks == FORCE_CLK_SYS_TX)
 800573c:	2801      	cmp	r0, #1
 800573e:	d002      	beq.n	8005746 <dwt_force_clocks+0xe>
    if (clocks == FORCE_CLK_AUTO)
 8005740:	2c05      	cmp	r4, #5
 8005742:	d007      	beq.n	8005754 <dwt_force_clocks+0x1c>
} // end dwt_force_clocks()
 8005744:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 8005746:	f641 0222 	movw	r2, #6178	; 0x1822
 800574a:	2100      	movs	r1, #0
 800574c:	4805      	ldr	r0, [pc, #20]	; (8005764 <dwt_force_clocks+0x2c>)
 800574e:	f7ff ffe3 	bl	8005718 <dwt_write16bitoffsetreg>
 8005752:	e7f5      	b.n	8005740 <dwt_force_clocks+0x8>
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS);  //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 8005754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005758:	2100      	movs	r1, #0
 800575a:	4802      	ldr	r0, [pc, #8]	; (8005764 <dwt_force_clocks+0x2c>)
 800575c:	f7ff ffdc 	bl	8005718 <dwt_write16bitoffsetreg>
} // end dwt_force_clocks()
 8005760:	e7f0      	b.n	8005744 <dwt_force_clocks+0xc>
 8005762:	bf00      	nop
 8005764:	00110004 	.word	0x00110004

08005768 <dwt_write8bitoffsetreg>:
{
 8005768:	b500      	push	{lr}
 800576a:	b083      	sub	sp, #12
 800576c:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8005770:	f10d 0307 	add.w	r3, sp, #7
 8005774:	2201      	movs	r2, #1
 8005776:	b289      	uxth	r1, r1
 8005778:	f7ff ff8c 	bl	8005694 <dwt_writetodevice>
}
 800577c:	b003      	add	sp, #12
 800577e:	f85d fb04 	ldr.w	pc, [sp], #4

08005782 <dwt_readfromdevice>:
{
 8005782:	b510      	push	{r4, lr}
 8005784:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8005786:	2400      	movs	r4, #0
 8005788:	9400      	str	r4, [sp, #0]
 800578a:	f7ff fed1 	bl	8005530 <dwt_xfer3000>
}
 800578e:	b002      	add	sp, #8
 8005790:	bd10      	pop	{r4, pc}

08005792 <dwt_read32bitoffsetreg>:
{
 8005792:	b500      	push	{lr}
 8005794:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8005796:	ab01      	add	r3, sp, #4
 8005798:	2204      	movs	r2, #4
 800579a:	b289      	uxth	r1, r1
 800579c:	f7ff fff1 	bl	8005782 <dwt_readfromdevice>
    uint32_t  regval = 0 ;
 80057a0:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80057a2:	2303      	movs	r3, #3
 80057a4:	e007      	b.n	80057b6 <dwt_read32bitoffsetreg+0x24>
        regval = (regval << 8) + buffer[j] ;
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	446a      	add	r2, sp
 80057ac:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 80057b0:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 80057b4:	3b01      	subs	r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	daf5      	bge.n	80057a6 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
 80057ba:	b003      	add	sp, #12
 80057bc:	f85d fb04 	ldr.w	pc, [sp], #4

080057c0 <_dwt_otpread>:
{
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4604      	mov	r4, r0
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 80057c4:	4d0a      	ldr	r5, [pc, #40]	; (80057f0 <_dwt_otpread+0x30>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	2100      	movs	r1, #0
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7ff ffa4 	bl	8005718 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 80057d0:	4622      	mov	r2, r4
 80057d2:	2100      	movs	r1, #0
 80057d4:	4807      	ldr	r0, [pc, #28]	; (80057f4 <_dwt_otpread+0x34>)
 80057d6:	f7ff ff9f 	bl	8005718 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 80057da:	2202      	movs	r2, #2
 80057dc:	2100      	movs	r1, #0
 80057de:	4628      	mov	r0, r5
 80057e0:	f7ff ff9a 	bl	8005718 <dwt_write16bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 80057e4:	2100      	movs	r1, #0
 80057e6:	4804      	ldr	r0, [pc, #16]	; (80057f8 <_dwt_otpread+0x38>)
 80057e8:	f7ff ffd3 	bl	8005792 <dwt_read32bitoffsetreg>
}
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	000b0008 	.word	0x000b0008
 80057f4:	000b0004 	.word	0x000b0004
 80057f8:	000b0010 	.word	0x000b0010

080057fc <dwt_read16bitoffsetreg>:
{
 80057fc:	b500      	push	{lr}
 80057fe:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8005800:	ab01      	add	r3, sp, #4
 8005802:	2202      	movs	r2, #2
 8005804:	b289      	uxth	r1, r1
 8005806:	f7ff ffbc 	bl	8005782 <dwt_readfromdevice>
    regval = ((uint16_t)buffer[1] << 8) + buffer[0] ;
 800580a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800580e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005812:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 8005816:	b280      	uxth	r0, r0
 8005818:	b003      	add	sp, #12
 800581a:	f85d fb04 	ldr.w	pc, [sp], #4

0800581e <dwt_read8bitoffsetreg>:
{
 800581e:	b500      	push	{lr}
 8005820:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8005822:	f10d 0307 	add.w	r3, sp, #7
 8005826:	2201      	movs	r2, #1
 8005828:	b289      	uxth	r1, r1
 800582a:	f7ff ffaa 	bl	8005782 <dwt_readfromdevice>
}
 800582e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005832:	b003      	add	sp, #12
 8005834:	f85d fb04 	ldr.w	pc, [sp], #4

08005838 <dwt_modify32bitoffsetreg>:
{
 8005838:	b500      	push	{lr}
 800583a:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 800583c:	f88d 2008 	strb.w	r2, [sp, #8]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8005840:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8005844:	f88d c009 	strb.w	ip, [sp, #9]
    buf[2] = (uint8_t)(_and>>16);// &0xFF;
 8005848:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800584c:	f88d c00a 	strb.w	ip, [sp, #10]
    buf[3] = (uint8_t)(_and>>24);// &0xFF;
 8005850:	0e12      	lsrs	r2, r2, #24
 8005852:	f88d 200b 	strb.w	r2, [sp, #11]
    buf[4] = (uint8_t)_or;//        &0xFF;
 8005856:	f88d 300c 	strb.w	r3, [sp, #12]
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 800585a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800585e:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8005862:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005866:	f88d 200e 	strb.w	r2, [sp, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 800586a:	0e1b      	lsrs	r3, r3, #24
 800586c:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 8005870:	f248 0303 	movw	r3, #32771	; 0x8003
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	ab02      	add	r3, sp, #8
 8005878:	2208      	movs	r2, #8
 800587a:	b289      	uxth	r1, r1
 800587c:	f7ff fe58 	bl	8005530 <dwt_xfer3000>
}
 8005880:	b005      	add	sp, #20
 8005882:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005888 <_dwt_kick_dgc_on_wakeup>:
{
 8005888:	b508      	push	{r3, lr}
    if (channel == 5)
 800588a:	2805      	cmp	r0, #5
 800588c:	d002      	beq.n	8005894 <_dwt_kick_dgc_on_wakeup+0xc>
    else if (channel == 9)
 800588e:	2809      	cmp	r0, #9
 8005890:	d008      	beq.n	80058a4 <_dwt_kick_dgc_on_wakeup+0x1c>
}
 8005892:	bd08      	pop	{r3, pc}
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 800589a:	2100      	movs	r1, #0
 800589c:	4806      	ldr	r0, [pc, #24]	; (80058b8 <_dwt_kick_dgc_on_wakeup+0x30>)
 800589e:	f7ff ffcb 	bl	8005838 <dwt_modify32bitoffsetreg>
 80058a2:	e7f6      	b.n	8005892 <_dwt_kick_dgc_on_wakeup+0xa>
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 80058a4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80058a8:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 80058ac:	2100      	movs	r1, #0
 80058ae:	4802      	ldr	r0, [pc, #8]	; (80058b8 <_dwt_kick_dgc_on_wakeup+0x30>)
 80058b0:	f7ff ffc2 	bl	8005838 <dwt_modify32bitoffsetreg>
}
 80058b4:	e7ed      	b.n	8005892 <_dwt_kick_dgc_on_wakeup+0xa>
 80058b6:	bf00      	nop
 80058b8:	000b0008 	.word	0x000b0008

080058bc <dwt_enable_rf_tx>:
{
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4605      	mov	r5, r0
 80058c0:	460c      	mov	r4, r1
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK |
 80058c2:	4e16      	ldr	r6, [pc, #88]	; (800591c <dwt_enable_rf_tx+0x60>)
 80058c4:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058cc:	2100      	movs	r1, #0
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ffb2 	bl	8005838 <dwt_modify32bitoffsetreg>
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK |
 80058d4:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058dc:	2100      	movs	r1, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	f7ff ffaa 	bl	8005838 <dwt_modify32bitoffsetreg>
    if (channel == SEL_CHANNEL5)
 80058e4:	2d05      	cmp	r5, #5
 80058e6:	d009      	beq.n	80058fc <dwt_enable_rf_tx+0x40>
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <dwt_enable_rf_tx+0x64>)
 80058ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ee:	2100      	movs	r1, #0
 80058f0:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 80058f4:	f7ff ffa0 	bl	8005838 <dwt_modify32bitoffsetreg>
    if (switch_control)
 80058f8:	b94c      	cbnz	r4, 800590e <dwt_enable_rf_tx+0x52>
}
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <dwt_enable_rf_tx+0x68>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005902:	2100      	movs	r1, #0
 8005904:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8005908:	f7ff ff96 	bl	8005838 <dwt_modify32bitoffsetreg>
 800590c:	e7f4      	b.n	80058f8 <dwt_enable_rf_tx+0x3c>
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 800590e:	4a06      	ldr	r2, [pc, #24]	; (8005928 <dwt_enable_rf_tx+0x6c>)
 8005910:	2100      	movs	r1, #0
 8005912:	4806      	ldr	r0, [pc, #24]	; (800592c <dwt_enable_rf_tx+0x70>)
 8005914:	f7ff fec7 	bl	80056a6 <dwt_write32bitoffsetreg>
}
 8005918:	e7ef      	b.n	80058fa <dwt_enable_rf_tx+0x3e>
 800591a:	bf00      	nop
 800591c:	00070048 	.word	0x00070048
 8005920:	02001c00 	.word	0x02001c00
 8005924:	02003c00 	.word	0x02003c00
 8005928:	01011100 	.word	0x01011100
 800592c:	00070014 	.word	0x00070014

08005930 <dwt_enable_rftx_blocks>:
{
 8005930:	b508      	push	{r3, lr}
    if (channel == SEL_CHANNEL5)
 8005932:	2805      	cmp	r0, #5
 8005934:	d002      	beq.n	800593c <dwt_enable_rftx_blocks+0xc>
    else if (channel == SEL_CHANNEL9)
 8005936:	2809      	cmp	r0, #9
 8005938:	d008      	beq.n	800594c <dwt_enable_rftx_blocks+0x1c>
}
 800593a:	bd08      	pop	{r3, pc}
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <dwt_enable_rftx_blocks+0x2c>)
 800593e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005942:	2100      	movs	r1, #0
 8005944:	4806      	ldr	r0, [pc, #24]	; (8005960 <dwt_enable_rftx_blocks+0x30>)
 8005946:	f7ff ff77 	bl	8005838 <dwt_modify32bitoffsetreg>
 800594a:	e7f6      	b.n	800593a <dwt_enable_rftx_blocks+0xa>
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <dwt_enable_rftx_blocks+0x34>)
 800594e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005952:	2100      	movs	r1, #0
 8005954:	4802      	ldr	r0, [pc, #8]	; (8005960 <dwt_enable_rftx_blocks+0x30>)
 8005956:	f7ff ff6f 	bl	8005838 <dwt_modify32bitoffsetreg>
}
 800595a:	e7ee      	b.n	800593a <dwt_enable_rftx_blocks+0xa>
 800595c:	02003c00 	.word	0x02003c00
 8005960:	00070004 	.word	0x00070004
 8005964:	02001c00 	.word	0x02001c00

08005968 <dwt_modify16bitoffsetreg>:
{
 8005968:	b500      	push	{lr}
 800596a:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 800596c:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8005970:	0a12      	lsrs	r2, r2, #8
 8005972:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[2] = (uint8_t)_or;//        &0xFF;
 8005976:	f88d 300e 	strb.w	r3, [sp, #14]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 8005980:	f248 0302 	movw	r3, #32770	; 0x8002
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	ab03      	add	r3, sp, #12
 8005988:	2204      	movs	r2, #4
 800598a:	b289      	uxth	r1, r1
 800598c:	f7ff fdd0 	bl	8005530 <dwt_xfer3000>
}
 8005990:	b005      	add	sp, #20
 8005992:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005998 <_dwt_prog_ldo_and_bias_tune>:
{
 8005998:	b508      	push	{r3, lr}
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 800599a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	2100      	movs	r1, #0
 80059a4:	4806      	ldr	r0, [pc, #24]	; (80059c0 <_dwt_prog_ldo_and_bias_tune+0x28>)
 80059a6:	f7ff ffdf 	bl	8005968 <dwt_modify16bitoffsetreg>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <_dwt_prog_ldo_and_bias_tune+0x2c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	7a1b      	ldrb	r3, [r3, #8]
 80059b0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80059b4:	2100      	movs	r1, #0
 80059b6:	4804      	ldr	r0, [pc, #16]	; (80059c8 <_dwt_prog_ldo_and_bias_tune+0x30>)
 80059b8:	f7ff ffd6 	bl	8005968 <dwt_modify16bitoffsetreg>
}
 80059bc:	bd08      	pop	{r3, pc}
 80059be:	bf00      	nop
 80059c0:	000b0008 	.word	0x000b0008
 80059c4:	200001fc 	.word	0x200001fc
 80059c8:	0011001f 	.word	0x0011001f

080059cc <dwt_modify8bitoffsetreg>:
{
 80059cc:	b500      	push	{lr}
 80059ce:	b085      	sub	sp, #20
    buf[0] = _and;
 80059d0:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = _or;
 80059d4:	f88d 300d 	strb.w	r3, [sp, #13]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf),buf, DW3000_SPI_AND_OR_8);
 80059d8:	f248 0301 	movw	r3, #32769	; 0x8001
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	ab03      	add	r3, sp, #12
 80059e0:	2202      	movs	r2, #2
 80059e2:	b289      	uxth	r1, r1
 80059e4:	f7ff fda4 	bl	8005530 <dwt_xfer3000>
}
 80059e8:	b005      	add	sp, #20
 80059ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080059f0 <dwt_setdwstate>:
{
 80059f0:	b510      	push	{r4, lr}
    if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 80059f2:	2801      	cmp	r0, #1
 80059f4:	d017      	beq.n	8005a26 <dwt_setdwstate+0x36>
    else if(state == DWT_DW_IDLE_RC)  //Change state to IDLE_RC and clear auto INIT2IDLE bit
 80059f6:	2802      	cmp	r0, #2
 80059f8:	d01f      	beq.n	8005a3a <dwt_setdwstate+0x4a>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 80059fa:	2301      	movs	r3, #1
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	2100      	movs	r1, #0
 8005a00:	481a      	ldr	r0, [pc, #104]	; (8005a6c <dwt_setdwstate+0x7c>)
 8005a02:	f7ff ffe3 	bl	80059cc <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8005a06:	4c1a      	ldr	r4, [pc, #104]	; (8005a70 <dwt_setdwstate+0x80>)
 8005a08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a10:	2100      	movs	r1, #0
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ff10 	bl	8005838 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8005a18:	2300      	movs	r3, #0
 8005a1a:	227f      	movs	r2, #127	; 0x7f
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff ffd4 	bl	80059cc <dwt_modify8bitoffsetreg>
}
 8005a24:	bd10      	pop	{r4, pc}
        dwt_force_clocks(FORCE_CLK_AUTO);
 8005a26:	2005      	movs	r0, #5
 8005a28:	f7ff fe86 	bl	8005738 <dwt_force_clocks>
        dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	4619      	mov	r1, r3
 8005a32:	480f      	ldr	r0, [pc, #60]	; (8005a70 <dwt_setdwstate+0x80>)
 8005a34:	f7ff ffca 	bl	80059cc <dwt_modify8bitoffsetreg>
 8005a38:	e7f4      	b.n	8005a24 <dwt_setdwstate+0x34>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	22ff      	movs	r2, #255	; 0xff
 8005a3e:	2100      	movs	r1, #0
 8005a40:	480a      	ldr	r0, [pc, #40]	; (8005a6c <dwt_setdwstate+0x7c>)
 8005a42:	f7ff ffc3 	bl	80059cc <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8005a46:	4c0a      	ldr	r4, [pc, #40]	; (8005a70 <dwt_setdwstate+0x80>)
 8005a48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a50:	2100      	movs	r1, #0
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fef0 	bl	8005838 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8005a58:	2300      	movs	r3, #0
 8005a5a:	227f      	movs	r2, #127	; 0x7f
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff ffb4 	bl	80059cc <dwt_modify8bitoffsetreg>
        dwt_force_clocks(FORCE_CLK_AUTO);
 8005a64:	2005      	movs	r0, #5
 8005a66:	f7ff fe67 	bl	8005738 <dwt_force_clocks>
 8005a6a:	e7db      	b.n	8005a24 <dwt_setdwstate+0x34>
 8005a6c:	00110004 	.word	0x00110004
 8005a70:	00110008 	.word	0x00110008

08005a74 <dwt_readdevid>:
{
 8005a74:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8005a76:	2100      	movs	r1, #0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	f7ff fe8a 	bl	8005792 <dwt_read32bitoffsetreg>
}
 8005a7e:	bd08      	pop	{r3, pc}

08005a80 <dwt_configmrxlut>:
{
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (channel == 5)
 8005a84:	2805      	cmp	r0, #5
 8005a86:	d036      	beq.n	8005af6 <dwt_configmrxlut+0x76>
        lut6 = (uint32_t)CH9_DGC_LUT_6;
 8005a88:	4c20      	ldr	r4, [pc, #128]	; (8005b0c <dwt_configmrxlut+0x8c>)
        lut5 = (uint32_t)CH9_DGC_LUT_5;
 8005a8a:	4625      	mov	r5, r4
        lut4 = (uint32_t)CH9_DGC_LUT_4;
 8005a8c:	4e20      	ldr	r6, [pc, #128]	; (8005b10 <dwt_configmrxlut+0x90>)
        lut3 = (uint32_t)CH9_DGC_LUT_3;
 8005a8e:	4f21      	ldr	r7, [pc, #132]	; (8005b14 <dwt_configmrxlut+0x94>)
        lut2 = (uint32_t)CH9_DGC_LUT_2;
 8005a90:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005b5c <dwt_configmrxlut+0xdc>
        lut1 = (uint32_t)CH9_DGC_LUT_1;
 8005a94:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005b60 <dwt_configmrxlut+0xe0>
        lut0 = (uint32_t)CH9_DGC_LUT_0;
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <dwt_configmrxlut+0x98>)
    dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	481f      	ldr	r0, [pc, #124]	; (8005b1c <dwt_configmrxlut+0x9c>)
 8005a9e:	f7ff fe02 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 8005aa2:	464a      	mov	r2, r9
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	481e      	ldr	r0, [pc, #120]	; (8005b20 <dwt_configmrxlut+0xa0>)
 8005aa8:	f7ff fdfd 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 8005aac:	4642      	mov	r2, r8
 8005aae:	2100      	movs	r1, #0
 8005ab0:	481c      	ldr	r0, [pc, #112]	; (8005b24 <dwt_configmrxlut+0xa4>)
 8005ab2:	f7ff fdf8 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	2100      	movs	r1, #0
 8005aba:	481b      	ldr	r0, [pc, #108]	; (8005b28 <dwt_configmrxlut+0xa8>)
 8005abc:	f7ff fdf3 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4819      	ldr	r0, [pc, #100]	; (8005b2c <dwt_configmrxlut+0xac>)
 8005ac6:	f7ff fdee 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 8005aca:	462a      	mov	r2, r5
 8005acc:	2100      	movs	r1, #0
 8005ace:	4818      	ldr	r0, [pc, #96]	; (8005b30 <dwt_configmrxlut+0xb0>)
 8005ad0:	f7ff fde9 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4816      	ldr	r0, [pc, #88]	; (8005b34 <dwt_configmrxlut+0xb4>)
 8005ada:	f7ff fde4 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 8005ade:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <dwt_configmrxlut+0xb8>)
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4816      	ldr	r0, [pc, #88]	; (8005b3c <dwt_configmrxlut+0xbc>)
 8005ae4:	f7ff fddf 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <dwt_configmrxlut+0xc0>)
 8005aea:	2100      	movs	r1, #0
 8005aec:	4815      	ldr	r0, [pc, #84]	; (8005b44 <dwt_configmrxlut+0xc4>)
 8005aee:	f7ff fdda 	bl	80056a6 <dwt_write32bitoffsetreg>
}
 8005af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lut6 = (uint32_t)CH5_DGC_LUT_6;
 8005af6:	4c14      	ldr	r4, [pc, #80]	; (8005b48 <dwt_configmrxlut+0xc8>)
        lut5 = (uint32_t)CH5_DGC_LUT_5;
 8005af8:	4d14      	ldr	r5, [pc, #80]	; (8005b4c <dwt_configmrxlut+0xcc>)
        lut4 = (uint32_t)CH5_DGC_LUT_4;
 8005afa:	4e15      	ldr	r6, [pc, #84]	; (8005b50 <dwt_configmrxlut+0xd0>)
        lut3 = (uint32_t)CH5_DGC_LUT_3;
 8005afc:	4f15      	ldr	r7, [pc, #84]	; (8005b54 <dwt_configmrxlut+0xd4>)
        lut2 = (uint32_t)CH5_DGC_LUT_2;
 8005afe:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005b64 <dwt_configmrxlut+0xe4>
        lut1 = (uint32_t)CH5_DGC_LUT_1;
 8005b02:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8005b68 <dwt_configmrxlut+0xe8>
        lut0 = (uint32_t)CH5_DGC_LUT_0;
 8005b06:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <dwt_configmrxlut+0xd8>)
 8005b08:	e7c7      	b.n	8005a9a <dwt_configmrxlut+0x1a>
 8005b0a:	bf00      	nop
 8005b0c:	0002afb5 	.word	0x0002afb5
 8005b10:	0002af7d 	.word	0x0002af7d
 8005b14:	0002af3e 	.word	0x0002af3e
 8005b18:	0002a8fe 	.word	0x0002a8fe
 8005b1c:	00030038 	.word	0x00030038
 8005b20:	0003003c 	.word	0x0003003c
 8005b24:	00030040 	.word	0x00030040
 8005b28:	00030044 	.word	0x00030044
 8005b2c:	00030048 	.word	0x00030048
 8005b30:	0003004c 	.word	0x0003004c
 8005b34:	00030050 	.word	0x00030050
 8005b38:	10000240 	.word	0x10000240
 8005b3c:	0003001c 	.word	0x0003001c
 8005b40:	1b6da489 	.word	0x1b6da489
 8005b44:	00030020 	.word	0x00030020
 8005b48:	0001cff5 	.word	0x0001cff5
 8005b4c:	0001cfb5 	.word	0x0001cfb5
 8005b50:	0001cf36 	.word	0x0001cf36
 8005b54:	0001c77e 	.word	0x0001c77e
 8005b58:	0001c0fd 	.word	0x0001c0fd
 8005b5c:	0002a5fe 	.word	0x0002a5fe
 8005b60:	0002ac36 	.word	0x0002ac36
 8005b64:	0001c6be 	.word	0x0001c6be
 8005b68:	0001c43e 	.word	0x0001c43e

08005b6c <dwt_run_pgfcal>:
{
 8005b6c:	b538      	push	{r3, r4, r5, lr}
    dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 8005b6e:	4c26      	ldr	r4, [pc, #152]	; (8005c08 <dwt_run_pgfcal+0x9c>)
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <dwt_run_pgfcal+0xa0>)
 8005b72:	2100      	movs	r1, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff fd96 	bl	80056a6 <dwt_write32bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	22ff      	movs	r2, #255	; 0xff
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff ff23 	bl	80059cc <dwt_modify8bitoffsetreg>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8005b86:	2400      	movs	r4, #0
 8005b88:	e001      	b.n	8005b8e <dwt_run_pgfcal+0x22>
 8005b8a:	3401      	adds	r4, #1
 8005b8c:	b2e4      	uxtb	r4, r4
 8005b8e:	2c02      	cmp	r4, #2
 8005b90:	d80a      	bhi.n	8005ba8 <dwt_run_pgfcal+0x3c>
        deca_usleep(DELAY_20uUSec);
 8005b92:	2014      	movs	r0, #20
 8005b94:	f000 fbf6 	bl	8006384 <deca_usleep>
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8005b98:	2100      	movs	r1, #0
 8005b9a:	481d      	ldr	r0, [pc, #116]	; (8005c10 <dwt_run_pgfcal+0xa4>)
 8005b9c:	f7ff fe3f 	bl	800581e <dwt_read8bitoffsetreg>
 8005ba0:	2801      	cmp	r0, #1
 8005ba2:	d1f2      	bne.n	8005b8a <dwt_run_pgfcal+0x1e>
            flag=0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <dwt_run_pgfcal+0x3e>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8005ba8:	2301      	movs	r3, #1
    if (flag)
 8005baa:	bb1b      	cbnz	r3, 8005bf4 <dwt_run_pgfcal+0x88>
    int result = DWT_SUCCESS;
 8005bac:	2500      	movs	r5, #0
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 8005bae:	4c16      	ldr	r4, [pc, #88]	; (8005c08 <dwt_run_pgfcal+0x9c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f7ff fdd7 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4814      	ldr	r0, [pc, #80]	; (8005c10 <dwt_run_pgfcal+0xa4>)
 8005bc0:	f7ff fdd2 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	22ff      	movs	r2, #255	; 0xff
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff fefe 	bl	80059cc <dwt_modify8bitoffsetreg>
    val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4810      	ldr	r0, [pc, #64]	; (8005c14 <dwt_run_pgfcal+0xa8>)
 8005bd4:	f7ff fddd 	bl	8005792 <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 8005bd8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005bdc:	4298      	cmp	r0, r3
 8005bde:	d00c      	beq.n	8005bfa <dwt_run_pgfcal+0x8e>
    val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 8005be0:	2100      	movs	r1, #0
 8005be2:	480d      	ldr	r0, [pc, #52]	; (8005c18 <dwt_run_pgfcal+0xac>)
 8005be4:	f7ff fdd5 	bl	8005792 <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 8005be8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005bec:	4298      	cmp	r0, r3
 8005bee:	d007      	beq.n	8005c00 <dwt_run_pgfcal+0x94>
}
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
        result = DWT_ERROR;
 8005bf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005bf8:	e7d9      	b.n	8005bae <dwt_run_pgfcal+0x42>
        result = DWT_ERROR;
 8005bfa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005bfe:	e7ef      	b.n	8005be0 <dwt_run_pgfcal+0x74>
        result = DWT_ERROR;
 8005c00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return result;
 8005c04:	e7f4      	b.n	8005bf0 <dwt_run_pgfcal+0x84>
 8005c06:	bf00      	nop
 8005c08:	0004000c 	.word	0x0004000c
 8005c0c:	00020001 	.word	0x00020001
 8005c10:	00040020 	.word	0x00040020
 8005c14:	00040014 	.word	0x00040014
 8005c18:	0004001c 	.word	0x0004001c

08005c1c <dwt_pgf_cal>:
{
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	2600      	movs	r6, #0
    if (ldoen == 1)
 8005c22:	2801      	cmp	r0, #1
 8005c24:	d006      	beq.n	8005c34 <dwt_pgf_cal+0x18>
    temp = dwt_run_pgfcal();
 8005c26:	f7ff ffa1 	bl	8005b6c <dwt_run_pgfcal>
 8005c2a:	4605      	mov	r5, r0
    if (ldoen == 1)
 8005c2c:	2c01      	cmp	r4, #1
 8005c2e:	d010      	beq.n	8005c52 <dwt_pgf_cal+0x36>
}
 8005c30:	4628      	mov	r0, r5
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
        val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 8005c34:	4d0a      	ldr	r5, [pc, #40]	; (8005c60 <dwt_pgf_cal+0x44>)
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f7ff fddf 	bl	80057fc <dwt_read16bitoffsetreg>
 8005c3e:	4606      	mov	r6, r0
        dwt_or16bitoffsetreg(LDO_CTRL_ID, 0, (
 8005c40:	f240 1305 	movw	r3, #261	; 0x105
 8005c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f7ff fe8c 	bl	8005968 <dwt_modify16bitoffsetreg>
 8005c50:	e7e9      	b.n	8005c26 <dwt_pgf_cal+0xa>
        dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 8005c52:	2300      	movs	r3, #0
 8005c54:	4632      	mov	r2, r6
 8005c56:	4619      	mov	r1, r3
 8005c58:	4801      	ldr	r0, [pc, #4]	; (8005c60 <dwt_pgf_cal+0x44>)
 8005c5a:	f7ff fe85 	bl	8005968 <dwt_modify16bitoffsetreg>
    return temp;
 8005c5e:	e7e7      	b.n	8005c30 <dwt_pgf_cal+0x14>
 8005c60:	00070048 	.word	0x00070048

08005c64 <dwt_setplenfine>:
{
 8005c64:	b508      	push	{r3, lr}
 8005c66:	4602      	mov	r2, r0
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8005c68:	2101      	movs	r1, #1
 8005c6a:	2028      	movs	r0, #40	; 0x28
 8005c6c:	f7ff fd7c 	bl	8005768 <dwt_write8bitoffsetreg>
}
 8005c70:	bd08      	pop	{r3, pc}
	...

08005c74 <dwt_configure>:
{
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	4604      	mov	r4, r0
    uint8_t chan = config->chan,cnt,flag;
 8005c7a:	7807      	ldrb	r7, [r0, #0]
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8005c7c:	7903      	ldrb	r3, [r0, #4]
 8005c7e:	2b18      	cmp	r3, #24
 8005c80:	d804      	bhi.n	8005c8c <dwt_configure+0x18>
 8005c82:	78c3      	ldrb	r3, [r0, #3]
 8005c84:	2b18      	cmp	r3, #24
 8005c86:	d915      	bls.n	8005cb4 <dwt_configure+0x40>
 8005c88:	2601      	movs	r6, #1
 8005c8a:	e000      	b.n	8005c8e <dwt_configure+0x1a>
 8005c8c:	2601      	movs	r6, #1
 8005c8e:	b2f6      	uxtb	r6, r6
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8005c90:	79e3      	ldrb	r3, [r4, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d010      	beq.n	8005cb8 <dwt_configure+0x44>
 8005c96:	2100      	movs	r1, #0
    switch (config->txPreambLength)
 8005c98:	7863      	ldrb	r3, [r4, #1]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	f200 80f9 	bhi.w	8005e94 <dwt_configure+0x220>
 8005ca2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ca6:	00fa      	.short	0x00fa
 8005ca8:	00f700f7 	.word	0x00f700f7
 8005cac:	00f4000b 	.word	0x00f4000b
 8005cb0:	000e00f7 	.word	0x000e00f7
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	e7ea      	b.n	8005c8e <dwt_configure+0x1a>
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8005cb8:	2110      	movs	r1, #16
 8005cba:	e7ed      	b.n	8005c98 <dwt_configure+0x24>
    switch (config->txPreambLength)
 8005cbc:	f04f 0920 	mov.w	r9, #32
 8005cc0:	e001      	b.n	8005cc6 <dwt_configure+0x52>
        preamble_len = 72;
 8005cc2:	f04f 0948 	mov.w	r9, #72	; 0x48
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 8005cc6:	4bb7      	ldr	r3, [pc, #732]	; (8005fa4 <dwt_configure+0x330>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	8a1a      	ldrh	r2, [r3, #16]
 8005ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cd0:	821a      	strh	r2, [r3, #16]
    pdw3000local->longFrames = config->phrMode ;
 8005cd2:	79e2      	ldrb	r2, [r4, #7]
 8005cd4:	731a      	strb	r2, [r3, #12]
    sts_len=GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 8005cd6:	7b65      	ldrb	r5, [r4, #13]
 8005cd8:	1caa      	adds	r2, r5, #2
 8005cda:	2501      	movs	r5, #1
 8005cdc:	4095      	lsls	r5, r2
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 8005cde:	fa1f f885 	uxth.w	r8, r5
 8005ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ce6:	ee07 2a90 	vmov	s15, r2
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8005fa8 <dwt_configure+0x334>
 8005cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfa:	ee17 2a90 	vmov	r2, s15
 8005cfe:	825a      	strh	r2, [r3, #18]
    pdw3000local->stsconfig = config->stsMode;
 8005d00:	7b22      	ldrb	r2, [r4, #12]
 8005d02:	755a      	strb	r2, [r3, #21]
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8005d04:	7ba3      	ldrb	r3, [r4, #14]
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 8005d06:	0312      	lsls	r2, r2, #12
 8005d08:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8005d0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 8005d10:	7a23      	ldrb	r3, [r4, #8]
 8005d12:	015b      	lsls	r3, r3, #5
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	4313      	orrs	r3, r2
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	4aa3      	ldr	r2, [pc, #652]	; (8005fac <dwt_configure+0x338>)
 8005d1e:	2100      	movs	r1, #0
 8005d20:	2010      	movs	r0, #16
 8005d22:	f7ff fd89 	bl	8005838 <dwt_modify32bitoffsetreg>
    if (scp)
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	f040 80ba 	bne.w	8005ea0 <dwt_configure+0x22c>
        if (config->stsMode != DWT_STS_MODE_OFF)
 8005d2c:	7b23      	ldrb	r3, [r4, #12]
 8005d2e:	b1ab      	cbz	r3, 8005d5c <dwt_configure+0xe8>
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 8005d30:	7ba3      	ldrb	r3, [r4, #14]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	f240 80d9 	bls.w	8005eea <dwt_configure+0x276>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 4);
 8005d38:	7b60      	ldrb	r0, [r4, #13]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	4b9c      	ldr	r3, [pc, #624]	; (8005fb0 <dwt_configure+0x33c>)
 8005d40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8005d44:	f7ff fbcc 	bl	80054e0 <get_sts_mnth>
            preamble_len += (sts_len) * 8;
 8005d48:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8005d4c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8005d50:	f64f 7280 	movw	r2, #65408	; 0xff80
 8005d54:	2102      	movs	r1, #2
 8005d56:	4897      	ldr	r0, [pc, #604]	; (8005fb4 <dwt_configure+0x340>)
 8005d58:	f7ff fe06 	bl	8005968 <dwt_modify16bitoffsetreg>
        if (preamble_len >= 256)
 8005d5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8005d60:	f340 80cc 	ble.w	8005efc <dwt_configure+0x288>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8005d64:	4b8f      	ldr	r3, [pc, #572]	; (8005fa4 <dwt_configure+0x330>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	8a13      	ldrh	r3, [r2, #16]
 8005d6a:	f043 0320 	orr.w	r3, r3, #32
 8005d6e:	8213      	strh	r3, [r2, #16]
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
 8005d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d74:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8005d78:	2100      	movs	r1, #0
 8005d7a:	488f      	ldr	r0, [pc, #572]	; (8005fb8 <dwt_configure+0x344>)
 8005d7c:	f7ff fd5c 	bl	8005838 <dwt_modify32bitoffsetreg>
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 8005d80:	78a3      	ldrb	r3, [r4, #2]
 8005d82:	22fc      	movs	r2, #252	; 0xfc
 8005d84:	2100      	movs	r1, #0
 8005d86:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8005d8a:	f7ff fe1f 	bl	80059cc <dwt_modify8bitoffsetreg>
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, sts_len-1);    /*Starts from 0 that is why -1*/
 8005d8e:	1e6a      	subs	r2, r5, #1
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	2100      	movs	r1, #0
 8005d94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005d98:	f7ff fce6 	bl	8005768 <dwt_write8bitoffsetreg>
    if (config->txPreambLength == DWT_PLEN_72)
 8005d9c:	7863      	ldrb	r3, [r4, #1]
 8005d9e:	2b07      	cmp	r3, #7
 8005da0:	f000 80b5 	beq.w	8005f0e <dwt_configure+0x29a>
        dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7ff ff5d 	bl	8005c64 <dwt_setplenfine>
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 8005daa:	7b23      	ldrb	r3, [r4, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	f000 80b0 	beq.w	8005f16 <dwt_configure+0x2a2>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 8005db6:	4a81      	ldr	r2, [pc, #516]	; (8005fbc <dwt_configure+0x348>)
 8005db8:	2100      	movs	r1, #0
 8005dba:	4881      	ldr	r0, [pc, #516]	; (8005fc0 <dwt_configure+0x34c>)
 8005dbc:	f7ff fc73 	bl	80056a6 <dwt_write32bitoffsetreg>
    temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4880      	ldr	r0, [pc, #512]	; (8005fc4 <dwt_configure+0x350>)
 8005dc4:	f7ff fce5 	bl	8005792 <dwt_read32bitoffsetreg>
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 8005dc8:	f420 53ff 	bic.w	r3, r0, #8160	; 0x1fe0
 8005dcc:	f023 031f 	bic.w	r3, r3, #31
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8005dd0:	2f09      	cmp	r7, #9
 8005dd2:	f000 80a6 	beq.w	8005f22 <dwt_configure+0x2ae>
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 8005dd6:	7922      	ldrb	r2, [r4, #4]
 8005dd8:	0212      	lsls	r2, r2, #8
 8005dda:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8005dde:	431a      	orrs	r2, r3
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 8005de0:	78e3      	ldrb	r3, [r4, #3]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	4313      	orrs	r3, r2
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 8005de8:	7962      	ldrb	r2, [r4, #5]
 8005dea:	0052      	lsls	r2, r2, #1
 8005dec:	f002 0206 	and.w	r2, r2, #6
    dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 8005df0:	431a      	orrs	r2, r3
 8005df2:	2100      	movs	r1, #0
 8005df4:	4873      	ldr	r0, [pc, #460]	; (8005fc4 <dwt_configure+0x350>)
 8005df6:	f7ff fc56 	bl	80056a6 <dwt_write32bitoffsetreg>
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 8005dfa:	79a2      	ldrb	r2, [r4, #6]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 8005dfc:	7863      	ldrb	r3, [r4, #1]
 8005dfe:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 8005e00:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8005e04:	f46f 4274 	mvn.w	r2, #62464	; 0xf400
 8005e08:	2100      	movs	r1, #0
 8005e0a:	2024      	movs	r0, #36	; 0x24
 8005e0c:	f7ff fd14 	bl	8005838 <dwt_modify32bitoffsetreg>
    if (config->sfdTO == 0)
 8005e10:	8963      	ldrh	r3, [r4, #10]
 8005e12:	b90b      	cbnz	r3, 8005e18 <dwt_configure+0x1a4>
        config->sfdTO = DWT_SFDTOC_DEF;
 8005e14:	2381      	movs	r3, #129	; 0x81
 8005e16:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 8005e18:	8962      	ldrh	r2, [r4, #10]
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8005e20:	f7ff fc7a 	bl	8005718 <dwt_write16bitoffsetreg>
    if (chan == 9)
 8005e24:	2f09      	cmp	r7, #9
 8005e26:	d07f      	beq.n	8005f28 <dwt_configure+0x2b4>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 8005e28:	4a67      	ldr	r2, [pc, #412]	; (8005fc8 <dwt_configure+0x354>)
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4867      	ldr	r0, [pc, #412]	; (8005fcc <dwt_configure+0x358>)
 8005e2e:	f7ff fc3a 	bl	80056a6 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 8005e32:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8005e36:	2100      	movs	r1, #0
 8005e38:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8005e3c:	f7ff fc6c 	bl	8005718 <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 8005e40:	2214      	movs	r2, #20
 8005e42:	2101      	movs	r1, #1
 8005e44:	4862      	ldr	r0, [pc, #392]	; (8005fd0 <dwt_configure+0x35c>)
 8005e46:	f7ff fc8f 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8005e4a:	220e      	movs	r2, #14
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	4861      	ldr	r0, [pc, #388]	; (8005fd4 <dwt_configure+0x360>)
 8005e50:	f7ff fc8a 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 8005e54:	2281      	movs	r2, #129	; 0x81
 8005e56:	2100      	movs	r1, #0
 8005e58:	485f      	ldr	r0, [pc, #380]	; (8005fd8 <dwt_configure+0x364>)
 8005e5a:	f7ff fc85 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 8005e5e:	2202      	movs	r2, #2
 8005e60:	2100      	movs	r1, #0
 8005e62:	2044      	movs	r0, #68	; 0x44
 8005e64:	f7ff fc80 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_setdwstate(DWT_DW_IDLE);
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f7ff fdc1 	bl	80059f0 <dwt_setdwstate>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8005e6e:	2500      	movs	r5, #0
 8005e70:	2d05      	cmp	r5, #5
 8005e72:	d86b      	bhi.n	8005f4c <dwt_configure+0x2d8>
        deca_usleep(DELAY_20uUSec);
 8005e74:	2014      	movs	r0, #20
 8005e76:	f000 fa85 	bl	8006384 <deca_usleep>
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2044      	movs	r0, #68	; 0x44
 8005e7e:	f7ff fcce 	bl	800581e <dwt_read8bitoffsetreg>
 8005e82:	f010 0f02 	tst.w	r0, #2
 8005e86:	d17d      	bne.n	8005f84 <dwt_configure+0x310>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8005e88:	3501      	adds	r5, #1
 8005e8a:	b2ed      	uxtb	r5, r5
 8005e8c:	e7f0      	b.n	8005e70 <dwt_configure+0x1fc>
        preamble_len = 128;
 8005e8e:	f04f 0980 	mov.w	r9, #128	; 0x80
        break;
 8005e92:	e718      	b.n	8005cc6 <dwt_configure+0x52>
        preamble_len = 256;
 8005e94:	f44f 7980 	mov.w	r9, #256	; 0x100
        break;
 8005e98:	e715      	b.n	8005cc6 <dwt_configure+0x52>
        preamble_len = 64;
 8005e9a:	f04f 0940 	mov.w	r9, #64	; 0x40
 8005e9e:	e712      	b.n	8005cc6 <dwt_configure+0x52>
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 8005ea0:	4b40      	ldr	r3, [pc, #256]	; (8005fa4 <dwt_configure+0x330>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	8a13      	ldrh	r3, [r2, #16]
 8005ea6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005eaa:	8213      	strh	r3, [r2, #16]
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);
 8005eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005eb0:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4840      	ldr	r0, [pc, #256]	; (8005fb8 <dwt_configure+0x344>)
 8005eb8:	f7ff fcbe 	bl	8005838 <dwt_modify32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP);       //Set this if Ipatov analysis is used in SCP mode
 8005ebc:	f240 3206 	movw	r2, #774	; 0x306
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4846      	ldr	r0, [pc, #280]	; (8005fdc <dwt_configure+0x368>)
 8005ec4:	f7ff fbef 	bl	80056a6 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4611      	mov	r1, r2
 8005ecc:	f04f 100e 	mov.w	r0, #917518	; 0xe000e
 8005ed0:	f7ff fbe9 	bl	80056a6 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 8005ed4:	4a42      	ldr	r2, [pc, #264]	; (8005fe0 <dwt_configure+0x36c>)
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4836      	ldr	r0, [pc, #216]	; (8005fb4 <dwt_configure+0x340>)
 8005eda:	f7ff fbe4 	bl	80056a6 <dwt_write32bitoffsetreg>
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 8005ede:	227d      	movs	r2, #125	; 0x7d
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4840      	ldr	r0, [pc, #256]	; (8005fe4 <dwt_configure+0x370>)
 8005ee4:	f7ff fc40 	bl	8005768 <dwt_write8bitoffsetreg>
 8005ee8:	e74a      	b.n	8005d80 <dwt_configure+0x10c>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 8005eea:	7b60      	ldrb	r0, [r4, #13]
 8005eec:	2203      	movs	r2, #3
 8005eee:	2110      	movs	r1, #16
 8005ef0:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <dwt_configure+0x33c>)
 8005ef2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8005ef6:	f7ff faf3 	bl	80054e0 <get_sts_mnth>
 8005efa:	e725      	b.n	8005d48 <dwt_configure+0xd4>
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SHORT | OTP_CFG_OPS_KICK_BIT_MASK);
 8005efc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f00:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8005f04:	2100      	movs	r1, #0
 8005f06:	482c      	ldr	r0, [pc, #176]	; (8005fb8 <dwt_configure+0x344>)
 8005f08:	f7ff fc96 	bl	8005838 <dwt_modify32bitoffsetreg>
 8005f0c:	e738      	b.n	8005d80 <dwt_configure+0x10c>
        dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 8005f0e:	2008      	movs	r0, #8
 8005f10:	f7ff fea8 	bl	8005c64 <dwt_setplenfine>
 8005f14:	e749      	b.n	8005daa <dwt_configure+0x136>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 8005f16:	4a34      	ldr	r2, [pc, #208]	; (8005fe8 <dwt_configure+0x374>)
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4829      	ldr	r0, [pc, #164]	; (8005fc0 <dwt_configure+0x34c>)
 8005f1c:	f7ff fbc3 	bl	80056a6 <dwt_write32bitoffsetreg>
 8005f20:	e74e      	b.n	8005dc0 <dwt_configure+0x14c>
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	e756      	b.n	8005dd6 <dwt_configure+0x162>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8005f28:	4a30      	ldr	r2, [pc, #192]	; (8005fec <dwt_configure+0x378>)
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4827      	ldr	r0, [pc, #156]	; (8005fcc <dwt_configure+0x358>)
 8005f2e:	f7ff fbba 	bl	80056a6 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 8005f32:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005f36:	2100      	movs	r1, #0
 8005f38:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8005f3c:	f7ff fbec 	bl	8005718 <dwt_write16bitoffsetreg>
        dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 8005f40:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <dwt_configure+0x37c>)
 8005f42:	2100      	movs	r1, #0
 8005f44:	482b      	ldr	r0, [pc, #172]	; (8005ff4 <dwt_configure+0x380>)
 8005f46:	f7ff fbae 	bl	80056a6 <dwt_write32bitoffsetreg>
 8005f4a:	e779      	b.n	8005e40 <dwt_configure+0x1cc>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8005f4c:	2301      	movs	r3, #1
    if (flag)
 8005f4e:	bb33      	cbnz	r3, 8005f9e <dwt_configure+0x32a>
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 8005f50:	7923      	ldrb	r3, [r4, #4]
 8005f52:	3b09      	subs	r3, #9
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d81a      	bhi.n	8005f90 <dwt_configure+0x31c>
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <dwt_configure+0x330>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	7a5b      	ldrb	r3, [r3, #9]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d011      	beq.n	8005f88 <dwt_configure+0x314>
            dwt_configmrxlut(chan);
 8005f64:	4638      	mov	r0, r7
 8005f66:	f7ff fd8b 	bl	8005a80 <dwt_configmrxlut>
        dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0, (uint16_t)~DGC_CFG_THR_64_BIT_MASK, DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
 8005f6a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005f6e:	f248 12ff 	movw	r2, #33279	; 0x81ff
 8005f72:	2100      	movs	r1, #0
 8005f74:	4820      	ldr	r0, [pc, #128]	; (8005ff8 <dwt_configure+0x384>)
 8005f76:	f7ff fcf7 	bl	8005968 <dwt_modify16bitoffsetreg>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7ff fe4e 	bl	8005c1c <dwt_pgf_cal>
} // end dwt_configure()
 8005f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            flag=0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e7e2      	b.n	8005f4e <dwt_configure+0x2da>
            _dwt_kick_dgc_on_wakeup(chan);
 8005f88:	b278      	sxtb	r0, r7
 8005f8a:	f7ff fc7d 	bl	8005888 <_dwt_kick_dgc_on_wakeup>
 8005f8e:	e7ec      	b.n	8005f6a <dwt_configure+0x2f6>
        dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0, (uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
 8005f90:	2300      	movs	r3, #0
 8005f92:	22fe      	movs	r2, #254	; 0xfe
 8005f94:	4619      	mov	r1, r3
 8005f96:	4818      	ldr	r0, [pc, #96]	; (8005ff8 <dwt_configure+0x384>)
 8005f98:	f7ff fd18 	bl	80059cc <dwt_modify8bitoffsetreg>
 8005f9c:	e7ed      	b.n	8005f7a <dwt_configure+0x306>
        return  DWT_ERROR;
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa2:	e7ed      	b.n	8005f80 <dwt_configure+0x30c>
 8005fa4:	200001fc 	.word	0x200001fc
 8005fa8:	3f666666 	.word	0x3f666666
 8005fac:	fffc4fcf 	.word	0xfffc4fcf
 8005fb0:	08009af8 	.word	0x08009af8
 8005fb4:	000e0012 	.word	0x000e0012
 8005fb8:	000b0008 	.word	0x000b0008
 8005fbc:	af5f584c 	.word	0xaf5f584c
 8005fc0:	0006000c 	.word	0x0006000c
 8005fc4:	00010014 	.word	0x00010014
 8005fc8:	1c071134 	.word	0x1c071134
 8005fcc:	0007001c 	.word	0x0007001c
 8005fd0:	00070050 	.word	0x00070050
 8005fd4:	00070018 	.word	0x00070018
 8005fd8:	00090008 	.word	0x00090008
 8005fdc:	000e000c 	.word	0x000e000c
 8005fe0:	000c5a0a 	.word	0x000c5a0a
 8005fe4:	000e0016 	.word	0x000e0016
 8005fe8:	af5f35cc 	.word	0xaf5f35cc
 8005fec:	1c010034 	.word	0x1c010034
 8005ff0:	08b5a833 	.word	0x08b5a833
 8005ff4:	00070010 	.word	0x00070010
 8005ff8:	00030018 	.word	0x00030018

08005ffc <dwt_readrxdata>:
{
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4606      	mov	r6, r0
 8006000:	460d      	mov	r5, r1
 8006002:	4614      	mov	r4, r2
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <dwt_readrxdata+0x58>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	7bdb      	ldrb	r3, [r3, #15]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d00d      	beq.n	800602a <dwt_readrxdata+0x2e>
        rx_buff_addr=RX_BUFFER_0_ID;
 800600e:	f44f 1090 	mov.w	r0, #1179648	; 0x120000
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 8006012:	1963      	adds	r3, r4, r5
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	da06      	bge.n	8006028 <dwt_readrxdata+0x2c>
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 800601a:	2c7f      	cmp	r4, #127	; 0x7f
 800601c:	d808      	bhi.n	8006030 <dwt_readrxdata+0x34>
            dwt_readfromdevice(rx_buff_addr,rxBufferOffset,length,buffer);
 800601e:	4633      	mov	r3, r6
 8006020:	462a      	mov	r2, r5
 8006022:	4621      	mov	r1, r4
 8006024:	f7ff fbad 	bl	8005782 <dwt_readfromdevice>
}
 8006028:	bd70      	pop	{r4, r5, r6, pc}
        rx_buff_addr=RX_BUFFER_1_ID;
 800602a:	f44f 1098 	mov.w	r0, #1245184	; 0x130000
 800602e:	e7f0      	b.n	8006012 <dwt_readrxdata+0x16>
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16) );
 8006030:	0c02      	lsrs	r2, r0, #16
 8006032:	2100      	movs	r1, #0
 8006034:	4808      	ldr	r0, [pc, #32]	; (8006058 <dwt_readrxdata+0x5c>)
 8006036:	f7ff fb36 	bl	80056a6 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   rxBufferOffset);
 800603a:	4622      	mov	r2, r4
 800603c:	2100      	movs	r1, #0
 800603e:	4807      	ldr	r0, [pc, #28]	; (800605c <dwt_readrxdata+0x60>)
 8006040:	f7ff fb31 	bl	80056a6 <dwt_write32bitoffsetreg>
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 8006044:	4633      	mov	r3, r6
 8006046:	462a      	mov	r2, r5
 8006048:	2100      	movs	r1, #0
 800604a:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 800604e:	f7ff fb98 	bl	8005782 <dwt_readfromdevice>
}
 8006052:	e7e9      	b.n	8006028 <dwt_readrxdata+0x2c>
 8006054:	200001fc 	.word	0x200001fc
 8006058:	001f0004 	.word	0x001f0004
 800605c:	001f0008 	.word	0x001f0008

08006060 <dwt_configureframefilter>:
{
 8006060:	b510      	push	{r4, lr}
    if(enabletype == DWT_FF_ENABLE_802_15_4)
 8006062:	2802      	cmp	r0, #2
 8006064:	d00b      	beq.n	800607e <dwt_configureframefilter+0x1e>
        dwt_and8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(~(SYS_CFG_FFEN_BIT_MASK)));
 8006066:	2300      	movs	r3, #0
 8006068:	22fe      	movs	r2, #254	; 0xfe
 800606a:	4619      	mov	r1, r3
 800606c:	2010      	movs	r0, #16
 800606e:	f7ff fcad 	bl	80059cc <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, 0x0);
 8006072:	2200      	movs	r2, #0
 8006074:	4611      	mov	r1, r2
 8006076:	2014      	movs	r0, #20
 8006078:	f7ff fb4e 	bl	8005718 <dwt_write16bitoffsetreg>
}
 800607c:	bd10      	pop	{r4, pc}
 800607e:	460c      	mov	r4, r1
        dwt_or8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(SYS_CFG_FFEN_BIT_MASK));
 8006080:	2301      	movs	r3, #1
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	2100      	movs	r1, #0
 8006086:	2010      	movs	r0, #16
 8006088:	f7ff fca0 	bl	80059cc <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, filtermode);
 800608c:	4622      	mov	r2, r4
 800608e:	2100      	movs	r1, #0
 8006090:	2014      	movs	r0, #20
 8006092:	f7ff fb41 	bl	8005718 <dwt_write16bitoffsetreg>
 8006096:	e7f1      	b.n	800607c <dwt_configureframefilter+0x1c>

08006098 <dwt_setpanid>:
{
 8006098:	b508      	push	{r3, lr}
 800609a:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_BYTE_OFFSET, panID);
 800609c:	2102      	movs	r1, #2
 800609e:	200c      	movs	r0, #12
 80060a0:	f7ff fb3a 	bl	8005718 <dwt_write16bitoffsetreg>
}
 80060a4:	bd08      	pop	{r3, pc}

080060a6 <dwt_setaddress16>:
{
 80060a6:	b508      	push	{r3, lr}
 80060a8:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORTADDR_BIT_OFFSET, shortAddress);
 80060aa:	2100      	movs	r1, #0
 80060ac:	200c      	movs	r0, #12
 80060ae:	f7ff fb33 	bl	8005718 <dwt_write16bitoffsetreg>
}
 80060b2:	bd08      	pop	{r3, pc}

080060b4 <dwt_check_dev_id>:
{
 80060b4:	b508      	push	{r3, lr}
    dev_id = dwt_readdevid();
 80060b6:	f7ff fcdd 	bl	8005a74 <dwt_readdevid>
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <dwt_check_dev_id+0x20>)
 80060bc:	4298      	cmp	r0, r3
 80060be:	d004      	beq.n	80060ca <dwt_check_dev_id+0x16>
 80060c0:	3b10      	subs	r3, #16
 80060c2:	4298      	cmp	r0, r3
 80060c4:	d103      	bne.n	80060ce <dwt_check_dev_id+0x1a>
    return DWT_SUCCESS;
 80060c6:	2000      	movs	r0, #0
}
 80060c8:	bd08      	pop	{r3, pc}
    return DWT_SUCCESS;
 80060ca:	2000      	movs	r0, #0
 80060cc:	e7fc      	b.n	80060c8 <dwt_check_dev_id+0x14>
        return DWT_ERROR;
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d2:	e7f9      	b.n	80060c8 <dwt_check_dev_id+0x14>
 80060d4:	deca0312 	.word	0xdeca0312

080060d8 <dwt_initialise>:
{
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	4604      	mov	r4, r0
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80060dc:	4b43      	ldr	r3, [pc, #268]	; (80061ec <dwt_initialise+0x114>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	73da      	strb	r2, [r3, #15]
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 80060e4:	2102      	movs	r1, #2
 80060e6:	8219      	strh	r1, [r3, #16]
    pdw3000local->spicrc = 0;
 80060e8:	751a      	strb	r2, [r3, #20]
    pdw3000local->stsconfig = 0; //STS off
 80060ea:	755a      	strb	r2, [r3, #21]
    pdw3000local->vBatP = 0;
 80060ec:	729a      	strb	r2, [r3, #10]
    pdw3000local->tempP = 0;
 80060ee:	72da      	strb	r2, [r3, #11]
    pdw3000local->cbTxDone = NULL;
 80060f0:	629a      	str	r2, [r3, #40]	; 0x28
    pdw3000local->cbRxOk = NULL;
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw3000local->cbRxTo = NULL;
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
    pdw3000local->cbRxErr = NULL;
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34
    pdw3000local->cbSPIRdy = NULL;
 80060f8:	63da      	str	r2, [r3, #60]	; 0x3c
    pdw3000local->cbSPIErr = NULL;
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
    if (dwt_check_dev_id()!=DWT_SUCCESS)
 80060fc:	f7ff ffda 	bl	80060b4 <dwt_check_dev_id>
 8006100:	2800      	cmp	r0, #0
 8006102:	d16f      	bne.n	80061e4 <dwt_initialise+0x10c>
 8006104:	4606      	mov	r6, r0
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 8006106:	2004      	movs	r0, #4
 8006108:	f7ff fb5a 	bl	80057c0 <_dwt_otpread>
 800610c:	4605      	mov	r5, r0
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 800610e:	2005      	movs	r0, #5
 8006110:	f7ff fb56 	bl	80057c0 <_dwt_otpread>
 8006114:	4607      	mov	r7, r0
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 8006116:	200a      	movs	r0, #10
 8006118:	f7ff fb52 	bl	80057c0 <_dwt_otpread>
 800611c:	4b33      	ldr	r3, [pc, #204]	; (80061ec <dwt_initialise+0x114>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8006124:	7210      	strb	r0, [r2, #8]
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 8006126:	b115      	cbz	r5, 800612e <dwt_initialise+0x56>
 8006128:	b10f      	cbz	r7, 800612e <dwt_initialise+0x56>
 800612a:	2800      	cmp	r0, #0
 800612c:	d136      	bne.n	800619c <dwt_initialise+0xc4>
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 800612e:	2020      	movs	r0, #32
 8006130:	f7ff fb46 	bl	80057c0 <_dwt_otpread>
 8006134:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <dwt_initialise+0x118>)
 8006136:	4298      	cmp	r0, r3
 8006138:	d033      	beq.n	80061a2 <dwt_initialise+0xca>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 800613a:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <dwt_initialise+0x114>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	725a      	strb	r2, [r3, #9]
    if(mode & DWT_READ_OTP_PID)
 8006142:	f014 0f10 	tst.w	r4, #16
 8006146:	d131      	bne.n	80061ac <dwt_initialise+0xd4>
    if (mode & DWT_READ_OTP_LID)
 8006148:	f014 0f20 	tst.w	r4, #32
 800614c:	d135      	bne.n	80061ba <dwt_initialise+0xe2>
    if (mode & DWT_READ_OTP_BAT)
 800614e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006152:	d139      	bne.n	80061c8 <dwt_initialise+0xf0>
    if (mode & DWT_READ_OTP_TMP)
 8006154:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006158:	d13d      	bne.n	80061d6 <dwt_initialise+0xfe>
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <dwt_initialise+0x114>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	7ada      	ldrb	r2, [r3, #11]
 8006160:	b90a      	cbnz	r2, 8006166 <dwt_initialise+0x8e>
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 8006162:	2285      	movs	r2, #133	; 0x85
 8006164:	72da      	strb	r2, [r3, #11]
    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 8006166:	7a9a      	ldrb	r2, [r3, #10]
 8006168:	b90a      	cbnz	r2, 800616e <dwt_initialise+0x96>
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 800616a:	2274      	movs	r2, #116	; 0x74
 800616c:	729a      	strb	r2, [r3, #10]
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 800616e:	201f      	movs	r0, #31
 8006170:	f7ff fb26 	bl	80057c0 <_dwt_otpread>
 8006174:	4c1d      	ldr	r4, [pc, #116]	; (80061ec <dwt_initialise+0x114>)
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	7358      	strb	r0, [r3, #13]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 800617a:	201e      	movs	r0, #30
 800617c:	f7ff fb20 	bl	80057c0 <_dwt_otpread>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006186:	7398      	strb	r0, [r3, #14]
    if(pdw3000local->init_xtrim == 0)
 8006188:	b908      	cbnz	r0, 800618e <dwt_initialise+0xb6>
        pdw3000local->init_xtrim = 0x2E ; //set default value
 800618a:	222e      	movs	r2, #46	; 0x2e
 800618c:	739a      	strb	r2, [r3, #14]
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 800618e:	7b9a      	ldrb	r2, [r3, #14]
 8006190:	2100      	movs	r1, #0
 8006192:	4818      	ldr	r0, [pc, #96]	; (80061f4 <dwt_initialise+0x11c>)
 8006194:	f7ff fae8 	bl	8005768 <dwt_write8bitoffsetreg>
} // end dwt_initialise()
 8006198:	4630      	mov	r0, r6
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _dwt_prog_ldo_and_bias_tune();
 800619c:	f7ff fbfc 	bl	8005998 <_dwt_prog_ldo_and_bias_tune>
 80061a0:	e7c5      	b.n	800612e <dwt_initialise+0x56>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <dwt_initialise+0x114>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	725a      	strb	r2, [r3, #9]
 80061aa:	e7ca      	b.n	8006142 <dwt_initialise+0x6a>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <dwt_initialise+0x114>)
 80061ae:	681d      	ldr	r5, [r3, #0]
 80061b0:	2006      	movs	r0, #6
 80061b2:	f7ff fb05 	bl	80057c0 <_dwt_otpread>
 80061b6:	6028      	str	r0, [r5, #0]
 80061b8:	e7c6      	b.n	8006148 <dwt_initialise+0x70>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <dwt_initialise+0x114>)
 80061bc:	681d      	ldr	r5, [r3, #0]
 80061be:	2007      	movs	r0, #7
 80061c0:	f7ff fafe 	bl	80057c0 <_dwt_otpread>
 80061c4:	6068      	str	r0, [r5, #4]
 80061c6:	e7c2      	b.n	800614e <dwt_initialise+0x76>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 80061c8:	2008      	movs	r0, #8
 80061ca:	f7ff faf9 	bl	80057c0 <_dwt_otpread>
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <dwt_initialise+0x114>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	7298      	strb	r0, [r3, #10]
 80061d4:	e7be      	b.n	8006154 <dwt_initialise+0x7c>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 80061d6:	2009      	movs	r0, #9
 80061d8:	f7ff faf2 	bl	80057c0 <_dwt_otpread>
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <dwt_initialise+0x114>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	72d8      	strb	r0, [r3, #11]
 80061e2:	e7ba      	b.n	800615a <dwt_initialise+0x82>
        return DWT_ERROR;
 80061e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80061e8:	e7d6      	b.n	8006198 <dwt_initialise+0xc0>
 80061ea:	bf00      	nop
 80061ec:	200001fc 	.word	0x200001fc
 80061f0:	10000240 	.word	0x10000240
 80061f4:	00090014 	.word	0x00090014

080061f8 <dwt_checkidlerc>:
{
 80061f8:	b508      	push	{r3, lr}
    uint32_t reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 80061fa:	2102      	movs	r1, #2
 80061fc:	2044      	movs	r0, #68	; 0x44
 80061fe:	f7ff fafd 	bl	80057fc <dwt_read16bitoffsetreg>
}
 8006202:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8006206:	bd08      	pop	{r3, pc}

08006208 <dwt_rxenable>:
{
 8006208:	b510      	push	{r4, lr}
    if(mode == DWT_START_RX_IMMEDIATE)
 800620a:	4604      	mov	r4, r0
 800620c:	b170      	cbz	r0, 800622c <dwt_rxenable+0x24>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 800620e:	f020 0302 	bic.w	r3, r0, #2
 8006212:	3b01      	subs	r3, #1
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d848      	bhi.n	80062aa <dwt_rxenable+0xa2>
 8006218:	e8df f003 	tbb	[pc, r3]
 800621c:	1f474710 	.word	0x1f474710
 8006220:	26474747 	.word	0x26474747
 8006224:	47474747 	.word	0x47474747
 8006228:	2d474747 	.word	0x2d474747
        dwt_writefastCMD(CMD_RX);
 800622c:	2300      	movs	r3, #0
 800622e:	461a      	mov	r2, r3
 8006230:	4619      	mov	r1, r3
 8006232:	2002      	movs	r0, #2
 8006234:	f7ff fa2e 	bl	8005694 <dwt_writetodevice>
    return DWT_SUCCESS;
 8006238:	4620      	mov	r0, r4
 800623a:	e00d      	b.n	8006258 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_DRX);
 800623c:	2300      	movs	r3, #0
 800623e:	461a      	mov	r2, r3
 8006240:	4619      	mov	r1, r3
 8006242:	2004      	movs	r0, #4
 8006244:	f7ff fa26 	bl	8005694 <dwt_writetodevice>
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8006248:	2103      	movs	r1, #3
 800624a:	2044      	movs	r0, #68	; 0x44
 800624c:	f7ff fae7 	bl	800581e <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8006250:	f010 0f08 	tst.w	r0, #8
 8006254:	d116      	bne.n	8006284 <dwt_rxenable+0x7c>
    return DWT_SUCCESS;
 8006256:	2000      	movs	r0, #0
} // end dwt_rxenable()
 8006258:	bd10      	pop	{r4, pc}
                dwt_writefastCMD(CMD_DRX_REF);
 800625a:	2300      	movs	r3, #0
 800625c:	461a      	mov	r2, r3
 800625e:	4619      	mov	r1, r3
 8006260:	200a      	movs	r0, #10
 8006262:	f7ff fa17 	bl	8005694 <dwt_writetodevice>
            break;
 8006266:	e7ef      	b.n	8006248 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_RS);
 8006268:	2300      	movs	r3, #0
 800626a:	461a      	mov	r2, r3
 800626c:	4619      	mov	r1, r3
 800626e:	2008      	movs	r0, #8
 8006270:	f7ff fa10 	bl	8005694 <dwt_writetodevice>
            break;
 8006274:	e7e8      	b.n	8006248 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_TS);
 8006276:	2300      	movs	r3, #0
 8006278:	461a      	mov	r2, r3
 800627a:	4619      	mov	r1, r3
 800627c:	2006      	movs	r0, #6
 800627e:	f7ff fa09 	bl	8005694 <dwt_writetodevice>
            break;
 8006282:	e7e1      	b.n	8006248 <dwt_rxenable+0x40>
            dwt_writefastCMD(CMD_TXRXOFF);
 8006284:	2300      	movs	r3, #0
 8006286:	461a      	mov	r2, r3
 8006288:	4619      	mov	r1, r3
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fa02 	bl	8005694 <dwt_writetodevice>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8006290:	f014 0f02 	tst.w	r4, #2
 8006294:	d002      	beq.n	800629c <dwt_rxenable+0x94>
            return DWT_ERROR; // return warning indication
 8006296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800629a:	e7dd      	b.n	8006258 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_RX);
 800629c:	2300      	movs	r3, #0
 800629e:	461a      	mov	r2, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	2002      	movs	r0, #2
 80062a4:	f7ff f9f6 	bl	8005694 <dwt_writetodevice>
 80062a8:	e7f5      	b.n	8006296 <dwt_rxenable+0x8e>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ae:	e7d3      	b.n	8006258 <dwt_rxenable+0x50>

080062b0 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	460c      	mov	r4, r1
    // Force system clock to FOSC/4 and TX clocks on and enable RF blocks
    dwt_force_clocks(FORCE_CLK_SYS_TX);
 80062b6:	2001      	movs	r0, #1
 80062b8:	f7ff fa3e 	bl	8005738 <dwt_force_clocks>
    dwt_enable_rf_tx(channel, 0);
 80062bc:	2100      	movs	r1, #0
 80062be:	4620      	mov	r0, r4
 80062c0:	f7ff fafc 	bl	80058bc <dwt_enable_rf_tx>
    dwt_enable_rftx_blocks(channel);
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fb33 	bl	8005930 <dwt_enable_rftx_blocks>

    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 80062ca:	f3c5 020b 	ubfx	r2, r5, #0, #12
 80062ce:	2100      	movs	r1, #0
 80062d0:	480f      	ldr	r0, [pc, #60]	; (8006310 <dwt_calcbandwidthadj+0x60>)
 80062d2:	f7ff fa21 	bl	8005718 <dwt_write16bitoffsetreg>
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
 80062d6:	2303      	movs	r3, #3
 80062d8:	22ff      	movs	r2, #255	; 0xff
 80062da:	2100      	movs	r1, #0
 80062dc:	480d      	ldr	r0, [pc, #52]	; (8006314 <dwt_calcbandwidthadj+0x64>)
 80062de:	f7ff fb75 	bl	80059cc <dwt_modify8bitoffsetreg>
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 80062e2:	2100      	movs	r1, #0
 80062e4:	480b      	ldr	r0, [pc, #44]	; (8006314 <dwt_calcbandwidthadj+0x64>)
 80062e6:	f7ff fa9a 	bl	800581e <dwt_read8bitoffsetreg>
 80062ea:	f010 0f01 	tst.w	r0, #1
 80062ee:	d1f8      	bne.n	80062e2 <dwt_calcbandwidthadj+0x32>

    //Restore clocks to AUTO and turn off TX blocks
    dwt_disable_rftx_blocks();
 80062f0:	f7ff f9ee 	bl	80056d0 <dwt_disable_rftx_blocks>
    dwt_disable_rf_tx(0);
 80062f4:	2000      	movs	r0, #0
 80062f6:	f7ff f9f5 	bl	80056e4 <dwt_disable_rf_tx>
    dwt_force_clocks(FORCE_CLK_AUTO);
 80062fa:	2005      	movs	r0, #5
 80062fc:	f7ff fa1c 	bl	8005738 <dwt_force_clocks>

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8006300:	2100      	movs	r1, #0
 8006302:	4805      	ldr	r0, [pc, #20]	; (8006318 <dwt_calcbandwidthadj+0x68>)
 8006304:	f7ff fa8b 	bl	800581e <dwt_read8bitoffsetreg>
}
 8006308:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	0008001c 	.word	0x0008001c
 8006314:	00080010 	.word	0x00080010
 8006318:	0007001c 	.word	0x0007001c

0800631c <dwt_configuretxrf>:
{
 800631c:	b510      	push	{r4, lr}
 800631e:	4604      	mov	r4, r0
    if (config->PGcount == 0) {
 8006320:	8903      	ldrh	r3, [r0, #8]
 8006322:	b953      	cbnz	r3, 800633a <dwt_configuretxrf+0x1e>
        dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8006324:	7802      	ldrb	r2, [r0, #0]
 8006326:	2100      	movs	r1, #0
 8006328:	480b      	ldr	r0, [pc, #44]	; (8006358 <dwt_configuretxrf+0x3c>)
 800632a:	f7ff fa1d 	bl	8005768 <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	2100      	movs	r1, #0
 8006332:	480a      	ldr	r0, [pc, #40]	; (800635c <dwt_configuretxrf+0x40>)
 8006334:	f7ff f9b7 	bl	80056a6 <dwt_write32bitoffsetreg>
}
 8006338:	bd10      	pop	{r4, pc}
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 800633a:	2100      	movs	r1, #0
 800633c:	4808      	ldr	r0, [pc, #32]	; (8006360 <dwt_configuretxrf+0x44>)
 800633e:	f7ff fa6e 	bl	800581e <dwt_read8bitoffsetreg>
 8006342:	f010 0f01 	tst.w	r0, #1
 8006346:	d104      	bne.n	8006352 <dwt_configuretxrf+0x36>
        uint8_t channel = 5;
 8006348:	2105      	movs	r1, #5
        dwt_calcbandwidthadj(config->PGcount, channel);
 800634a:	8920      	ldrh	r0, [r4, #8]
 800634c:	f7ff ffb0 	bl	80062b0 <dwt_calcbandwidthadj>
 8006350:	e7ed      	b.n	800632e <dwt_configuretxrf+0x12>
            channel = 9;
 8006352:	2109      	movs	r1, #9
 8006354:	e7f9      	b.n	800634a <dwt_configuretxrf+0x2e>
 8006356:	bf00      	nop
 8006358:	0007001c 	.word	0x0007001c
 800635c:	0001000c 	.word	0x0001000c
 8006360:	00010014 	.word	0x00010014

08006364 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8006364:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8006366:	f000 fd85 	bl	8006e74 <port_GetEXT_IRQStatus>

	if(s) {
 800636a:	4604      	mov	r4, r0
 800636c:	b908      	cbnz	r0, 8006372 <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 800636e:	4620      	mov	r0, r4
 8006370:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8006372:	f000 fd50 	bl	8006e16 <port_DisableEXT_IRQ>
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8006376:	e7fa      	b.n	800636e <decamutexon+0xa>

08006378 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8006378:	b900      	cbnz	r0, 800637c <decamutexoff+0x4>
 800637a:	4770      	bx	lr
{
 800637c:	b508      	push	{r3, lr}
		port_EnableEXT_IRQ();
 800637e:	f000 fd51 	bl	8006e24 <port_EnableEXT_IRQ>
	}
}
 8006382:	bd08      	pop	{r3, pc}

08006384 <deca_usleep>:
}


/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8006384:	b508      	push	{r3, lr}
    usleep(time_us);
 8006386:	f000 fd1f 	bl	8006dc8 <usleep>
}
 800638a:	bd08      	pop	{r3, pc}

0800638c <writetospiwithcrc>:
                uint16_t      headerLength,
                const uint8_t *headerBuffer,
                uint16_t      bodyLength,
                const uint8_t *bodyBuffer,
                uint8_t       crc8)
{
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	4681      	mov	r9, r0
 8006392:	4688      	mov	r8, r1
 8006394:	4617      	mov	r7, r2
 8006396:	461e      	mov	r6, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8006398:	f7ff ffe4 	bl	8006364 <decamutexon>
 800639c:	4604      	mov	r4, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800639e:	4815      	ldr	r0, [pc, #84]	; (80063f4 <writetospiwithcrc+0x68>)
 80063a0:	f002 faa7 	bl	80088f2 <HAL_SPI_GetState>
 80063a4:	2801      	cmp	r0, #1
 80063a6:	d1fa      	bne.n	800639e <writetospiwithcrc+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80063a8:	2200      	movs	r2, #0
 80063aa:	2110      	movs	r1, #16
 80063ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063b0:	f000 ffee 	bl	8007390 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 80063b4:	4d0f      	ldr	r5, [pc, #60]	; (80063f4 <writetospiwithcrc+0x68>)
 80063b6:	230a      	movs	r3, #10
 80063b8:	464a      	mov	r2, r9
 80063ba:	4641      	mov	r1, r8
 80063bc:	4628      	mov	r0, r5
 80063be:	f001 ff4f 	bl	8008260 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 80063c2:	230a      	movs	r3, #10
 80063c4:	463a      	mov	r2, r7
 80063c6:	4631      	mov	r1, r6
 80063c8:	4628      	mov	r0, r5
 80063ca:	f001 ff49 	bl	8008260 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 80063ce:	230a      	movs	r3, #10
 80063d0:	2201      	movs	r2, #1
 80063d2:	a908      	add	r1, sp, #32
 80063d4:	4628      	mov	r0, r5
 80063d6:	f001 ff43 	bl	8008260 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80063da:	2201      	movs	r2, #1
 80063dc:	2110      	movs	r1, #16
 80063de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063e2:	f000 ffd5 	bl	8007390 <HAL_GPIO_WritePin>
    decamutexoff(stat);
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7ff ffc6 	bl	8006378 <decamutexoff>
    return 0;
} // end writetospiwithcrc()
 80063ec:	2000      	movs	r0, #0
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	bf00      	nop
 80063f4:	20000584 	.word	0x20000584

080063f8 <writetospi>:
 */
int writetospi(uint16_t       headerLength,
               const uint8_t  *headerBuffer,
               uint16_t       bodyLength,
               const uint8_t  *bodyBuffer)
{
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	4607      	mov	r7, r0
 80063fe:	460e      	mov	r6, r1
 8006400:	4614      	mov	r4, r2
 8006402:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8006404:	f7ff ffae 	bl	8006364 <decamutexon>
 8006408:	4605      	mov	r5, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800640a:	4813      	ldr	r0, [pc, #76]	; (8006458 <writetospi+0x60>)
 800640c:	f002 fa71 	bl	80088f2 <HAL_SPI_GetState>
 8006410:	2801      	cmp	r0, #1
 8006412:	d1fa      	bne.n	800640a <writetospi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8006414:	2200      	movs	r2, #0
 8006416:	2110      	movs	r1, #16
 8006418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800641c:	f000 ffb8 	bl	8007390 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8006420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006424:	463a      	mov	r2, r7
 8006426:	4631      	mov	r1, r6
 8006428:	480b      	ldr	r0, [pc, #44]	; (8006458 <writetospi+0x60>)
 800642a:	f001 ff19 	bl	8008260 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 800642e:	b95c      	cbnz	r4, 8006448 <writetospi+0x50>
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8006430:	2201      	movs	r2, #1
 8006432:	2110      	movs	r1, #16
 8006434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006438:	f000 ffaa 	bl	8007390 <HAL_GPIO_WritePin>
    decamutexoff(stat);
 800643c:	4628      	mov	r0, r5
 800643e:	f7ff ff9b 	bl	8006378 <decamutexoff>
    return 0;
} // end writetospi()
 8006442:	2000      	movs	r0, #0
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8006448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644c:	4622      	mov	r2, r4
 800644e:	4641      	mov	r1, r8
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <writetospi+0x60>)
 8006452:	f001 ff05 	bl	8008260 <HAL_SPI_Transmit>
 8006456:	e7eb      	b.n	8006430 <writetospi+0x38>
 8006458:	20000584 	.word	0x20000584

0800645c <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t  headerLength,
                uint8_t   *headerBuffer,
                uint16_t  readlength,
                uint8_t   *readBuffer)
{
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4605      	mov	r5, r0
 8006462:	460e      	mov	r6, r1
 8006464:	4691      	mov	r9, r2
 8006466:	4698      	mov	r8, r3
    int i;

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8006468:	f7ff ff7c 	bl	8006364 <decamutexon>
 800646c:	4607      	mov	r7, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800646e:	4814      	ldr	r0, [pc, #80]	; (80064c0 <readfromspi+0x64>)
 8006470:	f002 fa3f 	bl	80088f2 <HAL_SPI_GetState>
 8006474:	2801      	cmp	r0, #1
 8006476:	d1fa      	bne.n	800646e <readfromspi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8006478:	2200      	movs	r2, #0
 800647a:	2110      	movs	r1, #16
 800647c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006480:	f000 ff86 	bl	8007390 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8006484:	2400      	movs	r4, #0
 8006486:	e007      	b.n	8006498 <readfromspi+0x3c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t*)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8006488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800648c:	2201      	movs	r2, #1
 800648e:	1931      	adds	r1, r6, r4
 8006490:	480b      	ldr	r0, [pc, #44]	; (80064c0 <readfromspi+0x64>)
 8006492:	f001 fee5 	bl	8008260 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8006496:	3401      	adds	r4, #1
 8006498:	42a5      	cmp	r5, r4
 800649a:	dcf5      	bgt.n	8006488 <readfromspi+0x2c>
//        }
//
//        (*readBuffer++) = hspi3.Instance->DR;  //copy data read form (MISO)
//    }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 800649c:	2364      	movs	r3, #100	; 0x64
 800649e:	464a      	mov	r2, r9
 80064a0:	4641      	mov	r1, r8
 80064a2:	4807      	ldr	r0, [pc, #28]	; (80064c0 <readfromspi+0x64>)
 80064a4:	f002 f951 	bl	800874a <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80064a8:	2201      	movs	r2, #1
 80064aa:	2110      	movs	r1, #16
 80064ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064b0:	f000 ff6e 	bl	8007390 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80064b4:	4638      	mov	r0, r7
 80064b6:	f7ff ff5f 	bl	8006378 <decamutexoff>

    return 0;
} // end readfromspi()
 80064ba:	2000      	movs	r0, #0
 80064bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c0:	20000584 	.word	0x20000584

080064c4 <build_examples>:
#endif

#ifdef TEST_GET_MSG_FROM_ANCHORS_2
    extern int get_msg_from_anchors(void);

    example_pointer=get_msg_from_anchors;
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <build_examples+0x8>)
 80064c6:	4a02      	ldr	r2, [pc, #8]	; (80064d0 <build_examples+0xc>)
 80064c8:	601a      	str	r2, [r3, #0]
#endif

    //Check that only 1 test was enabled in test_selection.h file
    assert(test_cnt==1);

}
 80064ca:	4770      	bx	lr
 80064cc:	20000390 	.word	0x20000390
 80064d0:	080064d5 	.word	0x080064d5

080064d4 <get_msg_from_anchors>:
 * @param  none
 *
 * @return none
 */
int get_msg_from_anchors(void)
{
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	b082      	sub	sp, #8
    int16_t stsQual; /* This will contain STS quality index and status */
    int goodSts = 0; /* Used for checking STS quality in received signal */
    uint8_t messageFlag = 0; /* Used to track whether STS count should be reinitialised or not */
#endif
    /* Display application name on UART. */
    test_run_info((unsigned char *)APP_NAME);
 80064d8:	48af      	ldr	r0, [pc, #700]	; (8006798 <get_msg_from_anchors+0x2c4>)
 80064da:	f000 fb49 	bl	8006b70 <test_run_info>


    /* Reset DW IC */
    my_reset_DWIC();
 80064de:	f000 fcd1 	bl	8006e84 <my_reset_DWIC>

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 80064e2:	f7ff fe89 	bl	80061f8 <dwt_checkidlerc>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0fb      	beq.n	80064e2 <get_msg_from_anchors+0xe>
    { };

    // Start timer from STM
    //HAL_TIM_Base_Start(&htim2);

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 80064ea:	2001      	movs	r0, #1
 80064ec:	f7ff fdf4 	bl	80060d8 <dwt_initialise>
 80064f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80064f4:	d034      	beq.n	8006560 <get_msg_from_anchors+0x8c>
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards.
     * Note, in real low power applications the LEDs should not be used. */
    //dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK) ;

    /* Configure DW IC. See NOTE 14 below. */
    if(dwt_configure(&config_options)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 80064f6:	48a9      	ldr	r0, [pc, #676]	; (800679c <get_msg_from_anchors+0x2c8>)
 80064f8:	f7ff fbbc 	bl	8005c74 <dwt_configure>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d133      	bne.n	8006568 <get_msg_from_anchors+0x94>
        while (1)
        { };
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    if(config_options.chan == 5)
 8006500:	4ba6      	ldr	r3, [pc, #664]	; (800679c <get_msg_from_anchors+0x2c8>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b05      	cmp	r3, #5
 8006506:	d033      	beq.n	8006570 <get_msg_from_anchors+0x9c>
    {
        dwt_configuretxrf(&txconfig_options);
    }
    else
    {
        dwt_configuretxrf(&txconfig_options_ch9);
 8006508:	48a5      	ldr	r0, [pc, #660]	; (80067a0 <get_msg_from_anchors+0x2cc>)
 800650a:	f7ff ff07 	bl	800631c <dwt_configuretxrf>
    }

    //configure frame filtering
    dwt_configureframefilter(DWT_FF_ENABLE_802_15_4, DWT_FF_DATA_EN);
 800650e:	2102      	movs	r1, #2
 8006510:	4608      	mov	r0, r1
 8006512:	f7ff fda5 	bl	8006060 <dwt_configureframefilter>
    dwt_setpanid(0xDECA);
 8006516:	f64d 60ca 	movw	r0, #57034	; 0xdeca
 800651a:	f7ff fdbd 	bl	8006098 <dwt_setpanid>
    dwt_setaddress16(0x4350);
 800651e:	f244 3050 	movw	r0, #17232	; 0x4350
 8006522:	f7ff fdc0 	bl	80060a6 <dwt_setaddress16>

    // clear tables
#if NUMBER_OF_ANCHORS == 4
    memset(allDistancesToPC_E, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 8006526:	2440      	movs	r4, #64	; 0x40
 8006528:	4622      	mov	r2, r4
 800652a:	2100      	movs	r1, #0
 800652c:	489d      	ldr	r0, [pc, #628]	; (80067a4 <get_msg_from_anchors+0x2d0>)
 800652e:	f7f9 ff2f 	bl	8000390 <memset>
    memset(allDistancesToPC_F, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 8006532:	4622      	mov	r2, r4
 8006534:	2100      	movs	r1, #0
 8006536:	489c      	ldr	r0, [pc, #624]	; (80067a8 <get_msg_from_anchors+0x2d4>)
 8006538:	f7f9 ff2a 	bl	8000390 <memset>
    memset(allDistancesToPC_G, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 800653c:	4622      	mov	r2, r4
 800653e:	2100      	movs	r1, #0
 8006540:	489a      	ldr	r0, [pc, #616]	; (80067ac <get_msg_from_anchors+0x2d8>)
 8006542:	f7f9 ff25 	bl	8000390 <memset>
    memset(lookUpTable_E, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 8006546:	2300      	movs	r3, #0
 8006548:	4a99      	ldr	r2, [pc, #612]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 800654a:	6013      	str	r3, [r2, #0]
    memset(lookUpTable_F, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 800654c:	4a99      	ldr	r2, [pc, #612]	; (80067b4 <get_msg_from_anchors+0x2e0>)
 800654e:	6013      	str	r3, [r2, #0]
    memset(lookUpTable_G, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 8006550:	4a99      	ldr	r2, [pc, #612]	; (80067b8 <get_msg_from_anchors+0x2e4>)
 8006552:	6013      	str	r3, [r2, #0]
	memset(allDistancesToPC_G, '\0', LENGTH_FOR_6_ANCHORS*sizeof(char));
	memset(lookUpTable_E, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
	memset(lookUpTable_F, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
	memset(lookUpTable_G, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
#endif
    memset(time, '\0', 16*sizeof(char));
 8006554:	4a99      	ldr	r2, [pc, #612]	; (80067bc <get_msg_from_anchors+0x2e8>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	6093      	str	r3, [r2, #8]
 800655c:	60d3      	str	r3, [r2, #12]
 800655e:	e22f      	b.n	80069c0 <get_msg_from_anchors+0x4ec>
        test_run_info((unsigned char *)"INIT FAILED     ");
 8006560:	4897      	ldr	r0, [pc, #604]	; (80067c0 <get_msg_from_anchors+0x2ec>)
 8006562:	f000 fb05 	bl	8006b70 <test_run_info>
        while (1)
 8006566:	e7fe      	b.n	8006566 <get_msg_from_anchors+0x92>
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 8006568:	4896      	ldr	r0, [pc, #600]	; (80067c4 <get_msg_from_anchors+0x2f0>)
 800656a:	f000 fb01 	bl	8006b70 <test_run_info>
        while (1)
 800656e:	e7fe      	b.n	800656e <get_msg_from_anchors+0x9a>
        dwt_configuretxrf(&txconfig_options);
 8006570:	4895      	ldr	r0, [pc, #596]	; (80067c8 <get_msg_from_anchors+0x2f4>)
 8006572:	f7ff fed3 	bl	800631c <dwt_configuretxrf>
 8006576:	e7ca      	b.n	800650e <get_msg_from_anchors+0x3a>
                	anchor = msg_to_PC[0];
                	tag[0] = msg_to_PC[indexTag];
                	switch (anchor)
                	{
						case 'A':
							switch (tag[0])
 8006578:	2b46      	cmp	r3, #70	; 0x46
 800657a:	d03f      	beq.n	80065fc <get_msg_from_anchors+0x128>
 800657c:	2b47      	cmp	r3, #71	; 0x47
 800657e:	d05d      	beq.n	800663c <get_msg_from_anchors+0x168>
 8006580:	2b45      	cmp	r3, #69	; 0x45
 8006582:	d01b      	beq.n	80065bc <get_msg_from_anchors+0xe8>
							break;
	#endif
						default:
							break;
					}
                	if (allTrue(lookUpTable_E, NUMBER_OF_ANCHORS))
 8006584:	2104      	movs	r1, #4
 8006586:	488a      	ldr	r0, [pc, #552]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 8006588:	f000 fb86 	bl	8006c98 <allTrue>
 800658c:	2800      	cmp	r0, #0
 800658e:	f000 81da 	beq.w	8006946 <get_msg_from_anchors+0x472>
                	{
						#if NUMBER_OF_ANCHORS == 4
                			memset(allDistancesToPC_E, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 8006592:	4c84      	ldr	r4, [pc, #528]	; (80067a4 <get_msg_from_anchors+0x2d0>)
 8006594:	2240      	movs	r2, #64	; 0x40
 8006596:	2100      	movs	r1, #0
 8006598:	4620      	mov	r0, r4
 800659a:	f7f9 fef9 	bl	8000390 <memset>
                			memset(lookUpTable_E, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 800659e:	4b84      	ldr	r3, [pc, #528]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
						#elif NUMBER_OF_ANCHORS == 6
                			memset(allDistancesToPC_E, '\0', LENGTH_FOR_6_ANCHORS*sizeof(char));
							memset(lookUpTable_E, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
						#endif
						concatenateDistancesAndRssiToString(distances_E, rssi_E, allDistancesToPC_E, NUMBER_OF_ANCHORS, tag);
 80065a4:	4b89      	ldr	r3, [pc, #548]	; (80067cc <get_msg_from_anchors+0x2f8>)
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2304      	movs	r3, #4
 80065aa:	4622      	mov	r2, r4
 80065ac:	4988      	ldr	r1, [pc, #544]	; (80067d0 <get_msg_from_anchors+0x2fc>)
 80065ae:	4889      	ldr	r0, [pc, #548]	; (80067d4 <get_msg_from_anchors+0x300>)
 80065b0:	f000 fba4 	bl	8006cfc <concatenateDistancesAndRssiToString>
                		test_run_info_DMA((unsigned char *)allDistancesToPC_E);
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 faf1 	bl	8006b9c <test_run_info_DMA>
 80065ba:	e201      	b.n	80069c0 <get_msg_from_anchors+0x4ec>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 80065bc:	4c86      	ldr	r4, [pc, #536]	; (80067d8 <get_msg_from_anchors+0x304>)
 80065be:	4e87      	ldr	r6, [pc, #540]	; (80067dc <get_msg_from_anchors+0x308>)
 80065c0:	4622      	mov	r2, r4
 80065c2:	4631      	mov	r1, r6
 80065c4:	4886      	ldr	r0, [pc, #536]	; (80067e0 <get_msg_from_anchors+0x30c>)
 80065c6:	f000 fbdb 	bl	8006d80 <split_dist_rssi>
									distances_E[0] = strtod(distance, &eptr);
 80065ca:	4d86      	ldr	r5, [pc, #536]	; (80067e4 <get_msg_from_anchors+0x310>)
 80065cc:	4629      	mov	r1, r5
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7fb fba2 	bl	8001d18 <strtod>
 80065d4:	ec51 0b10 	vmov	r0, r1, d0
 80065d8:	f7fe fefc 	bl	80053d4 <__aeabi_d2f>
 80065dc:	4b7d      	ldr	r3, [pc, #500]	; (80067d4 <get_msg_from_anchors+0x300>)
 80065de:	6018      	str	r0, [r3, #0]
									rssi_E[0] = strtod(rssi, &eptr);
 80065e0:	4629      	mov	r1, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7fb fb98 	bl	8001d18 <strtod>
 80065e8:	ec51 0b10 	vmov	r0, r1, d0
 80065ec:	f7fe fef2 	bl	80053d4 <__aeabi_d2f>
 80065f0:	4b77      	ldr	r3, [pc, #476]	; (80067d0 <get_msg_from_anchors+0x2fc>)
 80065f2:	6018      	str	r0, [r3, #0]
									lookUpTable_E[0] = 1;
 80065f4:	4b6e      	ldr	r3, [pc, #440]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
									break;
 80065fa:	e7c3      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 80065fc:	4c76      	ldr	r4, [pc, #472]	; (80067d8 <get_msg_from_anchors+0x304>)
 80065fe:	4e77      	ldr	r6, [pc, #476]	; (80067dc <get_msg_from_anchors+0x308>)
 8006600:	4622      	mov	r2, r4
 8006602:	4631      	mov	r1, r6
 8006604:	4876      	ldr	r0, [pc, #472]	; (80067e0 <get_msg_from_anchors+0x30c>)
 8006606:	f000 fbbb 	bl	8006d80 <split_dist_rssi>
									distances_F[0] = strtod(distance, &eptr);
 800660a:	4d76      	ldr	r5, [pc, #472]	; (80067e4 <get_msg_from_anchors+0x310>)
 800660c:	4629      	mov	r1, r5
 800660e:	4630      	mov	r0, r6
 8006610:	f7fb fb82 	bl	8001d18 <strtod>
 8006614:	ec51 0b10 	vmov	r0, r1, d0
 8006618:	f7fe fedc 	bl	80053d4 <__aeabi_d2f>
 800661c:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <get_msg_from_anchors+0x314>)
 800661e:	6018      	str	r0, [r3, #0]
									rssi_F[0] = strtod(rssi, &eptr);
 8006620:	4629      	mov	r1, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f7fb fb78 	bl	8001d18 <strtod>
 8006628:	ec51 0b10 	vmov	r0, r1, d0
 800662c:	f7fe fed2 	bl	80053d4 <__aeabi_d2f>
 8006630:	4b6e      	ldr	r3, [pc, #440]	; (80067ec <get_msg_from_anchors+0x318>)
 8006632:	6018      	str	r0, [r3, #0]
									lookUpTable_F[0] = 1;
 8006634:	4b5f      	ldr	r3, [pc, #380]	; (80067b4 <get_msg_from_anchors+0x2e0>)
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
									break;
 800663a:	e7a3      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 800663c:	4c66      	ldr	r4, [pc, #408]	; (80067d8 <get_msg_from_anchors+0x304>)
 800663e:	4e67      	ldr	r6, [pc, #412]	; (80067dc <get_msg_from_anchors+0x308>)
 8006640:	4622      	mov	r2, r4
 8006642:	4631      	mov	r1, r6
 8006644:	4866      	ldr	r0, [pc, #408]	; (80067e0 <get_msg_from_anchors+0x30c>)
 8006646:	f000 fb9b 	bl	8006d80 <split_dist_rssi>
									distances_G[0] = strtod(distance, &eptr);
 800664a:	4d66      	ldr	r5, [pc, #408]	; (80067e4 <get_msg_from_anchors+0x310>)
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7fb fb62 	bl	8001d18 <strtod>
 8006654:	ec51 0b10 	vmov	r0, r1, d0
 8006658:	f7fe febc 	bl	80053d4 <__aeabi_d2f>
 800665c:	4b64      	ldr	r3, [pc, #400]	; (80067f0 <get_msg_from_anchors+0x31c>)
 800665e:	6018      	str	r0, [r3, #0]
									rssi_G[0] = strtod(rssi, &eptr);
 8006660:	4629      	mov	r1, r5
 8006662:	4620      	mov	r0, r4
 8006664:	f7fb fb58 	bl	8001d18 <strtod>
 8006668:	ec51 0b10 	vmov	r0, r1, d0
 800666c:	f7fe feb2 	bl	80053d4 <__aeabi_d2f>
 8006670:	4b60      	ldr	r3, [pc, #384]	; (80067f4 <get_msg_from_anchors+0x320>)
 8006672:	6018      	str	r0, [r3, #0]
									lookUpTable_G[0] = 1;
 8006674:	4b50      	ldr	r3, [pc, #320]	; (80067b8 <get_msg_from_anchors+0x2e4>)
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
									break;
 800667a:	e783      	b.n	8006584 <get_msg_from_anchors+0xb0>
							switch (tag[0])
 800667c:	2b46      	cmp	r3, #70	; 0x46
 800667e:	d024      	beq.n	80066ca <get_msg_from_anchors+0x1f6>
 8006680:	2b47      	cmp	r3, #71	; 0x47
 8006682:	d042      	beq.n	800670a <get_msg_from_anchors+0x236>
 8006684:	2b45      	cmp	r3, #69	; 0x45
 8006686:	f47f af7d 	bne.w	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 800668a:	4c53      	ldr	r4, [pc, #332]	; (80067d8 <get_msg_from_anchors+0x304>)
 800668c:	4e53      	ldr	r6, [pc, #332]	; (80067dc <get_msg_from_anchors+0x308>)
 800668e:	4622      	mov	r2, r4
 8006690:	4631      	mov	r1, r6
 8006692:	4853      	ldr	r0, [pc, #332]	; (80067e0 <get_msg_from_anchors+0x30c>)
 8006694:	f000 fb74 	bl	8006d80 <split_dist_rssi>
									distances_E[1] = strtod(distance, &eptr);
 8006698:	4d52      	ldr	r5, [pc, #328]	; (80067e4 <get_msg_from_anchors+0x310>)
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7fb fb3b 	bl	8001d18 <strtod>
 80066a2:	ec51 0b10 	vmov	r0, r1, d0
 80066a6:	f7fe fe95 	bl	80053d4 <__aeabi_d2f>
 80066aa:	4b4a      	ldr	r3, [pc, #296]	; (80067d4 <get_msg_from_anchors+0x300>)
 80066ac:	6058      	str	r0, [r3, #4]
									rssi_E[1] = strtod(rssi, &eptr);
 80066ae:	4629      	mov	r1, r5
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fb fb31 	bl	8001d18 <strtod>
 80066b6:	ec51 0b10 	vmov	r0, r1, d0
 80066ba:	f7fe fe8b 	bl	80053d4 <__aeabi_d2f>
 80066be:	4b44      	ldr	r3, [pc, #272]	; (80067d0 <get_msg_from_anchors+0x2fc>)
 80066c0:	6058      	str	r0, [r3, #4]
									lookUpTable_E[1] = 1;
 80066c2:	4b3b      	ldr	r3, [pc, #236]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	705a      	strb	r2, [r3, #1]
									break;
 80066c8:	e75c      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 80066ca:	4c43      	ldr	r4, [pc, #268]	; (80067d8 <get_msg_from_anchors+0x304>)
 80066cc:	4e43      	ldr	r6, [pc, #268]	; (80067dc <get_msg_from_anchors+0x308>)
 80066ce:	4622      	mov	r2, r4
 80066d0:	4631      	mov	r1, r6
 80066d2:	4843      	ldr	r0, [pc, #268]	; (80067e0 <get_msg_from_anchors+0x30c>)
 80066d4:	f000 fb54 	bl	8006d80 <split_dist_rssi>
									distances_F[1] = strtod(distance, &eptr);
 80066d8:	4d42      	ldr	r5, [pc, #264]	; (80067e4 <get_msg_from_anchors+0x310>)
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	f7fb fb1b 	bl	8001d18 <strtod>
 80066e2:	ec51 0b10 	vmov	r0, r1, d0
 80066e6:	f7fe fe75 	bl	80053d4 <__aeabi_d2f>
 80066ea:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <get_msg_from_anchors+0x314>)
 80066ec:	6058      	str	r0, [r3, #4]
									rssi_F[1] = strtod(rssi, &eptr);
 80066ee:	4629      	mov	r1, r5
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7fb fb11 	bl	8001d18 <strtod>
 80066f6:	ec51 0b10 	vmov	r0, r1, d0
 80066fa:	f7fe fe6b 	bl	80053d4 <__aeabi_d2f>
 80066fe:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <get_msg_from_anchors+0x318>)
 8006700:	6058      	str	r0, [r3, #4]
									lookUpTable_F[1] = 1;
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <get_msg_from_anchors+0x2e0>)
 8006704:	2201      	movs	r2, #1
 8006706:	705a      	strb	r2, [r3, #1]
									break;
 8006708:	e73c      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 800670a:	4c33      	ldr	r4, [pc, #204]	; (80067d8 <get_msg_from_anchors+0x304>)
 800670c:	4e33      	ldr	r6, [pc, #204]	; (80067dc <get_msg_from_anchors+0x308>)
 800670e:	4622      	mov	r2, r4
 8006710:	4631      	mov	r1, r6
 8006712:	4833      	ldr	r0, [pc, #204]	; (80067e0 <get_msg_from_anchors+0x30c>)
 8006714:	f000 fb34 	bl	8006d80 <split_dist_rssi>
									distances_G[1] = strtod(distance, &eptr);
 8006718:	4d32      	ldr	r5, [pc, #200]	; (80067e4 <get_msg_from_anchors+0x310>)
 800671a:	4629      	mov	r1, r5
 800671c:	4630      	mov	r0, r6
 800671e:	f7fb fafb 	bl	8001d18 <strtod>
 8006722:	ec51 0b10 	vmov	r0, r1, d0
 8006726:	f7fe fe55 	bl	80053d4 <__aeabi_d2f>
 800672a:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <get_msg_from_anchors+0x31c>)
 800672c:	6058      	str	r0, [r3, #4]
									rssi_G[1] = strtod(rssi, &eptr);
 800672e:	4629      	mov	r1, r5
 8006730:	4620      	mov	r0, r4
 8006732:	f7fb faf1 	bl	8001d18 <strtod>
 8006736:	ec51 0b10 	vmov	r0, r1, d0
 800673a:	f7fe fe4b 	bl	80053d4 <__aeabi_d2f>
 800673e:	4b2d      	ldr	r3, [pc, #180]	; (80067f4 <get_msg_from_anchors+0x320>)
 8006740:	6058      	str	r0, [r3, #4]
									lookUpTable_G[1] = 1;
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <get_msg_from_anchors+0x2e4>)
 8006744:	2201      	movs	r2, #1
 8006746:	705a      	strb	r2, [r3, #1]
									break;
 8006748:	e71c      	b.n	8006584 <get_msg_from_anchors+0xb0>
							switch (tag[0])
 800674a:	2b46      	cmp	r3, #70	; 0x46
 800674c:	d054      	beq.n	80067f8 <get_msg_from_anchors+0x324>
 800674e:	2b47      	cmp	r3, #71	; 0x47
 8006750:	d072      	beq.n	8006838 <get_msg_from_anchors+0x364>
 8006752:	2b45      	cmp	r3, #69	; 0x45
 8006754:	f47f af16 	bne.w	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 8006758:	4c1f      	ldr	r4, [pc, #124]	; (80067d8 <get_msg_from_anchors+0x304>)
 800675a:	4e20      	ldr	r6, [pc, #128]	; (80067dc <get_msg_from_anchors+0x308>)
 800675c:	4622      	mov	r2, r4
 800675e:	4631      	mov	r1, r6
 8006760:	481f      	ldr	r0, [pc, #124]	; (80067e0 <get_msg_from_anchors+0x30c>)
 8006762:	f000 fb0d 	bl	8006d80 <split_dist_rssi>
									distances_E[2] = strtod(distance, &eptr);
 8006766:	4d1f      	ldr	r5, [pc, #124]	; (80067e4 <get_msg_from_anchors+0x310>)
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f7fb fad4 	bl	8001d18 <strtod>
 8006770:	ec51 0b10 	vmov	r0, r1, d0
 8006774:	f7fe fe2e 	bl	80053d4 <__aeabi_d2f>
 8006778:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <get_msg_from_anchors+0x300>)
 800677a:	6098      	str	r0, [r3, #8]
									rssi_E[2] = strtod(rssi, &eptr);
 800677c:	4629      	mov	r1, r5
 800677e:	4620      	mov	r0, r4
 8006780:	f7fb faca 	bl	8001d18 <strtod>
 8006784:	ec51 0b10 	vmov	r0, r1, d0
 8006788:	f7fe fe24 	bl	80053d4 <__aeabi_d2f>
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <get_msg_from_anchors+0x2fc>)
 800678e:	6098      	str	r0, [r3, #8]
									lookUpTable_E[2] = 1;
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <get_msg_from_anchors+0x2dc>)
 8006792:	2201      	movs	r2, #1
 8006794:	709a      	strb	r2, [r3, #2]
									break;
 8006796:	e6f5      	b.n	8006584 <get_msg_from_anchors+0xb0>
 8006798:	08009b08 	.word	0x08009b08
 800679c:	200001d4 	.word	0x200001d4
 80067a0:	200001f0 	.word	0x200001f0
 80067a4:	20000394 	.word	0x20000394
 80067a8:	200003d4 	.word	0x200003d4
 80067ac:	20000414 	.word	0x20000414
 80067b0:	200004f4 	.word	0x200004f4
 80067b4:	200004f8 	.word	0x200004f8
 80067b8:	200004fc 	.word	0x200004fc
 80067bc:	20000574 	.word	0x20000574
 80067c0:	08009b24 	.word	0x08009b24
 80067c4:	08009b38 	.word	0x08009b38
 80067c8:	200001e4 	.word	0x200001e4
 80067cc:	20000570 	.word	0x20000570
 80067d0:	2000051c 	.word	0x2000051c
 80067d4:	20000460 	.word	0x20000460
 80067d8:	20000514 	.word	0x20000514
 80067dc:	20000458 	.word	0x20000458
 80067e0:	20000500 	.word	0x20000500
 80067e4:	20000490 	.word	0x20000490
 80067e8:	20000470 	.word	0x20000470
 80067ec:	2000052c 	.word	0x2000052c
 80067f0:	20000480 	.word	0x20000480
 80067f4:	2000053c 	.word	0x2000053c
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 80067f8:	4c9f      	ldr	r4, [pc, #636]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 80067fa:	4ea0      	ldr	r6, [pc, #640]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 80067fc:	4622      	mov	r2, r4
 80067fe:	4631      	mov	r1, r6
 8006800:	489f      	ldr	r0, [pc, #636]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 8006802:	f000 fabd 	bl	8006d80 <split_dist_rssi>
									distances_F[2] = strtod(distance, &eptr);
 8006806:	4d9f      	ldr	r5, [pc, #636]	; (8006a84 <get_msg_from_anchors+0x5b0>)
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f7fb fa84 	bl	8001d18 <strtod>
 8006810:	ec51 0b10 	vmov	r0, r1, d0
 8006814:	f7fe fdde 	bl	80053d4 <__aeabi_d2f>
 8006818:	4b9b      	ldr	r3, [pc, #620]	; (8006a88 <get_msg_from_anchors+0x5b4>)
 800681a:	6098      	str	r0, [r3, #8]
									rssi_F[2] = strtod(rssi, &eptr);
 800681c:	4629      	mov	r1, r5
 800681e:	4620      	mov	r0, r4
 8006820:	f7fb fa7a 	bl	8001d18 <strtod>
 8006824:	ec51 0b10 	vmov	r0, r1, d0
 8006828:	f7fe fdd4 	bl	80053d4 <__aeabi_d2f>
 800682c:	4b97      	ldr	r3, [pc, #604]	; (8006a8c <get_msg_from_anchors+0x5b8>)
 800682e:	6098      	str	r0, [r3, #8]
									lookUpTable_F[2] = 1;
 8006830:	4b97      	ldr	r3, [pc, #604]	; (8006a90 <get_msg_from_anchors+0x5bc>)
 8006832:	2201      	movs	r2, #1
 8006834:	709a      	strb	r2, [r3, #2]
									break;
 8006836:	e6a5      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 8006838:	4c8f      	ldr	r4, [pc, #572]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 800683a:	4e90      	ldr	r6, [pc, #576]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 800683c:	4622      	mov	r2, r4
 800683e:	4631      	mov	r1, r6
 8006840:	488f      	ldr	r0, [pc, #572]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 8006842:	f000 fa9d 	bl	8006d80 <split_dist_rssi>
									distances_G[2] = strtod(distance, &eptr);
 8006846:	4d8f      	ldr	r5, [pc, #572]	; (8006a84 <get_msg_from_anchors+0x5b0>)
 8006848:	4629      	mov	r1, r5
 800684a:	4630      	mov	r0, r6
 800684c:	f7fb fa64 	bl	8001d18 <strtod>
 8006850:	ec51 0b10 	vmov	r0, r1, d0
 8006854:	f7fe fdbe 	bl	80053d4 <__aeabi_d2f>
 8006858:	4b8e      	ldr	r3, [pc, #568]	; (8006a94 <get_msg_from_anchors+0x5c0>)
 800685a:	6098      	str	r0, [r3, #8]
									rssi_G[2] = strtod(rssi, &eptr);
 800685c:	4629      	mov	r1, r5
 800685e:	4620      	mov	r0, r4
 8006860:	f7fb fa5a 	bl	8001d18 <strtod>
 8006864:	ec51 0b10 	vmov	r0, r1, d0
 8006868:	f7fe fdb4 	bl	80053d4 <__aeabi_d2f>
 800686c:	4b8a      	ldr	r3, [pc, #552]	; (8006a98 <get_msg_from_anchors+0x5c4>)
 800686e:	6098      	str	r0, [r3, #8]
									lookUpTable_G[2] = 1;
 8006870:	4b8a      	ldr	r3, [pc, #552]	; (8006a9c <get_msg_from_anchors+0x5c8>)
 8006872:	2201      	movs	r2, #1
 8006874:	709a      	strb	r2, [r3, #2]
									break;
 8006876:	e685      	b.n	8006584 <get_msg_from_anchors+0xb0>
							switch (tag[0])
 8006878:	2b46      	cmp	r3, #70	; 0x46
 800687a:	d024      	beq.n	80068c6 <get_msg_from_anchors+0x3f2>
 800687c:	2b47      	cmp	r3, #71	; 0x47
 800687e:	d042      	beq.n	8006906 <get_msg_from_anchors+0x432>
 8006880:	2b45      	cmp	r3, #69	; 0x45
 8006882:	f47f ae7f 	bne.w	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 8006886:	4c7c      	ldr	r4, [pc, #496]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 8006888:	4e7c      	ldr	r6, [pc, #496]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 800688a:	4622      	mov	r2, r4
 800688c:	4631      	mov	r1, r6
 800688e:	487c      	ldr	r0, [pc, #496]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 8006890:	f000 fa76 	bl	8006d80 <split_dist_rssi>
									distances_E[3] = strtod(distance, &eptr);
 8006894:	4d7b      	ldr	r5, [pc, #492]	; (8006a84 <get_msg_from_anchors+0x5b0>)
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7fb fa3d 	bl	8001d18 <strtod>
 800689e:	ec51 0b10 	vmov	r0, r1, d0
 80068a2:	f7fe fd97 	bl	80053d4 <__aeabi_d2f>
 80068a6:	4b7e      	ldr	r3, [pc, #504]	; (8006aa0 <get_msg_from_anchors+0x5cc>)
 80068a8:	60d8      	str	r0, [r3, #12]
									rssi_E[3] = strtod(rssi, &eptr);
 80068aa:	4629      	mov	r1, r5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7fb fa33 	bl	8001d18 <strtod>
 80068b2:	ec51 0b10 	vmov	r0, r1, d0
 80068b6:	f7fe fd8d 	bl	80053d4 <__aeabi_d2f>
 80068ba:	4b7a      	ldr	r3, [pc, #488]	; (8006aa4 <get_msg_from_anchors+0x5d0>)
 80068bc:	60d8      	str	r0, [r3, #12]
									lookUpTable_E[3] = 1;
 80068be:	4b7a      	ldr	r3, [pc, #488]	; (8006aa8 <get_msg_from_anchors+0x5d4>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	70da      	strb	r2, [r3, #3]
									break;
 80068c4:	e65e      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 80068c6:	4c6c      	ldr	r4, [pc, #432]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 80068c8:	4e6c      	ldr	r6, [pc, #432]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 80068ca:	4622      	mov	r2, r4
 80068cc:	4631      	mov	r1, r6
 80068ce:	486c      	ldr	r0, [pc, #432]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 80068d0:	f000 fa56 	bl	8006d80 <split_dist_rssi>
									distances_F[3] = strtod(distance, &eptr);
 80068d4:	4d6b      	ldr	r5, [pc, #428]	; (8006a84 <get_msg_from_anchors+0x5b0>)
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f7fb fa1d 	bl	8001d18 <strtod>
 80068de:	ec51 0b10 	vmov	r0, r1, d0
 80068e2:	f7fe fd77 	bl	80053d4 <__aeabi_d2f>
 80068e6:	4b68      	ldr	r3, [pc, #416]	; (8006a88 <get_msg_from_anchors+0x5b4>)
 80068e8:	60d8      	str	r0, [r3, #12]
									rssi_F[3] = strtod(rssi, &eptr);
 80068ea:	4629      	mov	r1, r5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7fb fa13 	bl	8001d18 <strtod>
 80068f2:	ec51 0b10 	vmov	r0, r1, d0
 80068f6:	f7fe fd6d 	bl	80053d4 <__aeabi_d2f>
 80068fa:	4b64      	ldr	r3, [pc, #400]	; (8006a8c <get_msg_from_anchors+0x5b8>)
 80068fc:	60d8      	str	r0, [r3, #12]
									lookUpTable_F[3] = 1;
 80068fe:	4b64      	ldr	r3, [pc, #400]	; (8006a90 <get_msg_from_anchors+0x5bc>)
 8006900:	2201      	movs	r2, #1
 8006902:	70da      	strb	r2, [r3, #3]
									break;
 8006904:	e63e      	b.n	8006584 <get_msg_from_anchors+0xb0>
									split_dist_rssi(msg_to_PC, distance, rssi, tag[0]);
 8006906:	4c5c      	ldr	r4, [pc, #368]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 8006908:	4e5c      	ldr	r6, [pc, #368]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 800690a:	4622      	mov	r2, r4
 800690c:	4631      	mov	r1, r6
 800690e:	485c      	ldr	r0, [pc, #368]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 8006910:	f000 fa36 	bl	8006d80 <split_dist_rssi>
									distances_G[3] = strtod(distance, &eptr);
 8006914:	4d5b      	ldr	r5, [pc, #364]	; (8006a84 <get_msg_from_anchors+0x5b0>)
 8006916:	4629      	mov	r1, r5
 8006918:	4630      	mov	r0, r6
 800691a:	f7fb f9fd 	bl	8001d18 <strtod>
 800691e:	ec51 0b10 	vmov	r0, r1, d0
 8006922:	f7fe fd57 	bl	80053d4 <__aeabi_d2f>
 8006926:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <get_msg_from_anchors+0x5c0>)
 8006928:	60d8      	str	r0, [r3, #12]
									rssi_G[3] = strtod(rssi, &eptr);
 800692a:	4629      	mov	r1, r5
 800692c:	4620      	mov	r0, r4
 800692e:	f7fb f9f3 	bl	8001d18 <strtod>
 8006932:	ec51 0b10 	vmov	r0, r1, d0
 8006936:	f7fe fd4d 	bl	80053d4 <__aeabi_d2f>
 800693a:	4b57      	ldr	r3, [pc, #348]	; (8006a98 <get_msg_from_anchors+0x5c4>)
 800693c:	60d8      	str	r0, [r3, #12]
									lookUpTable_G[3] = 1;
 800693e:	4b57      	ldr	r3, [pc, #348]	; (8006a9c <get_msg_from_anchors+0x5c8>)
 8006940:	2201      	movs	r2, #1
 8006942:	70da      	strb	r2, [r3, #3]
									break;
 8006944:	e61e      	b.n	8006584 <get_msg_from_anchors+0xb0>

                	}
                	else if (allTrue(lookUpTable_F, NUMBER_OF_ANCHORS))
 8006946:	2104      	movs	r1, #4
 8006948:	4851      	ldr	r0, [pc, #324]	; (8006a90 <get_msg_from_anchors+0x5bc>)
 800694a:	f000 f9a5 	bl	8006c98 <allTrue>
 800694e:	b1a0      	cbz	r0, 800697a <get_msg_from_anchors+0x4a6>
					{
						#if NUMBER_OF_ANCHORS == 4
                			memset(allDistancesToPC_F, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 8006950:	4c56      	ldr	r4, [pc, #344]	; (8006aac <get_msg_from_anchors+0x5d8>)
 8006952:	2240      	movs	r2, #64	; 0x40
 8006954:	2100      	movs	r1, #0
 8006956:	4620      	mov	r0, r4
 8006958:	f7f9 fd1a 	bl	8000390 <memset>
                			memset(lookUpTable_F, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 800695c:	4b4c      	ldr	r3, [pc, #304]	; (8006a90 <get_msg_from_anchors+0x5bc>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
						#elif NUMBER_OF_ANCHORS == 6
                			memset(allDistancesToPC_F, '\0', LENGTH_FOR_6_ANCHORS*sizeof(char));
							memset(lookUpTable_F, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
						#endif
						concatenateDistancesAndRssiToString(distances_F, rssi_F, allDistancesToPC_F, NUMBER_OF_ANCHORS, tag);
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <get_msg_from_anchors+0x5dc>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2304      	movs	r3, #4
 8006968:	4622      	mov	r2, r4
 800696a:	4948      	ldr	r1, [pc, #288]	; (8006a8c <get_msg_from_anchors+0x5b8>)
 800696c:	4846      	ldr	r0, [pc, #280]	; (8006a88 <get_msg_from_anchors+0x5b4>)
 800696e:	f000 f9c5 	bl	8006cfc <concatenateDistancesAndRssiToString>
						test_run_info_DMA((unsigned char *)allDistancesToPC_F);
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f912 	bl	8006b9c <test_run_info_DMA>
 8006978:	e022      	b.n	80069c0 <get_msg_from_anchors+0x4ec>

					}
                	else if (allTrue(lookUpTable_G, NUMBER_OF_ANCHORS))
 800697a:	2104      	movs	r1, #4
 800697c:	4847      	ldr	r0, [pc, #284]	; (8006a9c <get_msg_from_anchors+0x5c8>)
 800697e:	f000 f98b 	bl	8006c98 <allTrue>
 8006982:	b1e8      	cbz	r0, 80069c0 <get_msg_from_anchors+0x4ec>
					{
						#if NUMBER_OF_ANCHORS == 4
                			memset(allDistancesToPC_G, '\0', LENGTH_FOR_4_ANCHORS*sizeof(char));
 8006984:	4c4b      	ldr	r4, [pc, #300]	; (8006ab4 <get_msg_from_anchors+0x5e0>)
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	2100      	movs	r1, #0
 800698a:	4620      	mov	r0, r4
 800698c:	f7f9 fd00 	bl	8000390 <memset>
                			memset(lookUpTable_G, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
 8006990:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <get_msg_from_anchors+0x5c8>)
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
						#elif NUMBER_OF_ANCHORS == 6
                			memset(allDistancesToPC_G, '\0', LENGTH_FOR_6_ANCHORS*sizeof(char));
							memset(lookUpTable_G, 0, NUMBER_OF_ANCHORS*sizeof(uint8_t));
						#endif
						concatenateDistancesAndRssiToString(distances_G, rssi_G, allDistancesToPC_G, NUMBER_OF_ANCHORS, tag);
 8006996:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <get_msg_from_anchors+0x5dc>)
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2304      	movs	r3, #4
 800699c:	4622      	mov	r2, r4
 800699e:	493e      	ldr	r1, [pc, #248]	; (8006a98 <get_msg_from_anchors+0x5c4>)
 80069a0:	483c      	ldr	r0, [pc, #240]	; (8006a94 <get_msg_from_anchors+0x5c0>)
 80069a2:	f000 f9ab 	bl	8006cfc <concatenateDistancesAndRssiToString>
						test_run_info_DMA((unsigned char *)allDistancesToPC_G);
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f8f8 	bl	8006b9c <test_run_info_DMA>
 80069ac:	e008      	b.n	80069c0 <get_msg_from_anchors+0x4ec>
#endif
                }
                else
                {
                	//test_run_info((unsigned char *)"Jestem4");
                    errors[BAD_FRAME_ERR_IDX] += 1;
 80069ae:	4a42      	ldr	r2, [pc, #264]	; (8006ab8 <get_msg_from_anchors+0x5e4>)
 80069b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80069b2:	3301      	adds	r3, #1
 80069b4:	6293      	str	r3, [r2, #40]	; 0x28
 80069b6:	e003      	b.n	80069c0 <get_msg_from_anchors+0x4ec>
                }
            }
            else
            {
            	//test_run_info((unsigned char *)"Jestem5");
                errors[RTO_ERR_IDX] += 1;
 80069b8:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <get_msg_from_anchors+0x5e4>)
 80069ba:	6953      	ldr	r3, [r2, #20]
 80069bc:	3301      	adds	r3, #1
 80069be:	6153      	str	r3, [r2, #20]
		dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80069c0:	2000      	movs	r0, #0
 80069c2:	f7ff fc21 	bl	8006208 <dwt_rxenable>
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80069c6:	2100      	movs	r1, #0
 80069c8:	2044      	movs	r0, #68	; 0x44
 80069ca:	f7fe fee2 	bl	8005792 <dwt_read32bitoffsetreg>
 80069ce:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <get_msg_from_anchors+0x5e8>)
 80069d0:	6018      	str	r0, [r3, #0]
 80069d2:	4b3b      	ldr	r3, [pc, #236]	; (8006ac0 <get_msg_from_anchors+0x5ec>)
 80069d4:	4003      	ands	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f5      	beq.n	80069c6 <get_msg_from_anchors+0x4f2>
        if ((status_reg & SYS_STATUS_RXFCG_BIT_MASK))
 80069da:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80069de:	d045      	beq.n	8006a6c <get_msg_from_anchors+0x598>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 80069e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069e4:	2100      	movs	r1, #0
 80069e6:	2044      	movs	r0, #68	; 0x44
 80069e8:	f7fe fe5d 	bl	80056a6 <dwt_write32bitoffsetreg>
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
 80069ec:	2100      	movs	r1, #0
 80069ee:	204c      	movs	r0, #76	; 0x4c
 80069f0:	f7fe fecf 	bl	8005792 <dwt_read32bitoffsetreg>
 80069f4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
            if (frame_len <= sizeof(rx_buffer))
 80069f8:	291e      	cmp	r1, #30
 80069fa:	d8dd      	bhi.n	80069b8 <get_msg_from_anchors+0x4e4>
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80069fc:	4c31      	ldr	r4, [pc, #196]	; (8006ac4 <get_msg_from_anchors+0x5f0>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff fafb 	bl	8005ffc <dwt_readrxdata>
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	70a3      	strb	r3, [r4, #2]
                if (memcmp(rx_buffer, tx_dist_to_PC, ALL_MSG_COMMON_LEN) == 0)
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	492e      	ldr	r1, [pc, #184]	; (8006ac8 <get_msg_from_anchors+0x5f4>)
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7f9 fc8c 	bl	800032c <memcmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d1ca      	bne.n	80069ae <get_msg_from_anchors+0x4da>
					memset(rssi, '\0', 8*sizeof(char));
 8006a18:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <get_msg_from_anchors+0x5a4>)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	6053      	str	r3, [r2, #4]
					memset(distance, '\0', 6*sizeof(char));
 8006a20:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <get_msg_from_anchors+0x5a8>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	8093      	strh	r3, [r2, #4]
					memset(msg_to_PC, '\0', 20*sizeof(char));
 8006a26:	4c16      	ldr	r4, [pc, #88]	; (8006a80 <get_msg_from_anchors+0x5ac>)
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	60a3      	str	r3, [r4, #8]
 8006a2e:	60e3      	str	r3, [r4, #12]
 8006a30:	6123      	str	r3, [r4, #16]
					indexTag = get_msg_toPC_2(msg_to_PC, rx_buffer, ANCHOR_IDX);
 8006a32:	220a      	movs	r2, #10
 8006a34:	4923      	ldr	r1, [pc, #140]	; (8006ac4 <get_msg_from_anchors+0x5f0>)
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f918 	bl	8006c6c <get_msg_toPC_2>
 8006a3c:	4b23      	ldr	r3, [pc, #140]	; (8006acc <get_msg_from_anchors+0x5f8>)
 8006a3e:	7018      	strb	r0, [r3, #0]
                	anchor = msg_to_PC[0];
 8006a40:	7822      	ldrb	r2, [r4, #0]
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <get_msg_from_anchors+0x5fc>)
 8006a44:	701a      	strb	r2, [r3, #0]
                	tag[0] = msg_to_PC[indexTag];
 8006a46:	5c23      	ldrb	r3, [r4, r0]
 8006a48:	4919      	ldr	r1, [pc, #100]	; (8006ab0 <get_msg_from_anchors+0x5dc>)
 8006a4a:	700b      	strb	r3, [r1, #0]
                	switch (anchor)
 8006a4c:	3a41      	subs	r2, #65	; 0x41
 8006a4e:	2a03      	cmp	r2, #3
 8006a50:	f63f ad98 	bhi.w	8006584 <get_msg_from_anchors+0xb0>
 8006a54:	a101      	add	r1, pc, #4	; (adr r1, 8006a5c <get_msg_from_anchors+0x588>)
 8006a56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006579 	.word	0x08006579
 8006a60:	0800667d 	.word	0x0800667d
 8006a64:	0800674b 	.word	0x0800674b
 8006a68:	08006879 	.word	0x08006879
            {
                errors[CP_QUAL_ERR_IDX] += 1;
            }
#endif
            /* Clear RX error events in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8006a6c:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <get_msg_from_anchors+0x600>)
 8006a6e:	2100      	movs	r1, #0
 8006a70:	2044      	movs	r0, #68	; 0x44
 8006a72:	f7fe fe18 	bl	80056a6 <dwt_write32bitoffsetreg>
 8006a76:	e7a3      	b.n	80069c0 <get_msg_from_anchors+0x4ec>
 8006a78:	20000514 	.word	0x20000514
 8006a7c:	20000458 	.word	0x20000458
 8006a80:	20000500 	.word	0x20000500
 8006a84:	20000490 	.word	0x20000490
 8006a88:	20000470 	.word	0x20000470
 8006a8c:	2000052c 	.word	0x2000052c
 8006a90:	200004f8 	.word	0x200004f8
 8006a94:	20000480 	.word	0x20000480
 8006a98:	2000053c 	.word	0x2000053c
 8006a9c:	200004fc 	.word	0x200004fc
 8006aa0:	20000460 	.word	0x20000460
 8006aa4:	2000051c 	.word	0x2000051c
 8006aa8:	200004f4 	.word	0x200004f4
 8006aac:	200003d4 	.word	0x200003d4
 8006ab0:	20000570 	.word	0x20000570
 8006ab4:	20000414 	.word	0x20000414
 8006ab8:	20000494 	.word	0x20000494
 8006abc:	2000056c 	.word	0x2000056c
 8006ac0:	2427d000 	.word	0x2427d000
 8006ac4:	2000054c 	.word	0x2000054c
 8006ac8:	20000200 	.word	0x20000200
 8006acc:	200004f0 	.word	0x200004f0
 8006ad0:	20000454 	.word	0x20000454
 8006ad4:	24059000 	.word	0x24059000

08006ad8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006adc:	2400      	movs	r4, #0
 8006ade:	9403      	str	r4, [sp, #12]
 8006ae0:	9404      	str	r4, [sp, #16]
 8006ae2:	9405      	str	r4, [sp, #20]
 8006ae4:	9406      	str	r4, [sp, #24]
 8006ae6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <MX_GPIO_Init+0x90>)
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006af0:	615a      	str	r2, [r3, #20]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8006af8:	9200      	str	r2, [sp, #0]
 8006afa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006b02:	615a      	str	r2, [r3, #20]
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006b0a:	9201      	str	r2, [sp, #4]
 8006b0c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b14:	615a      	str	r2, [r3, #20]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1c:	9302      	str	r3, [sp, #8]
 8006b1e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8006b20:	4622      	mov	r2, r4
 8006b22:	2110      	movs	r1, #16
 8006b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b28:	f000 fc32 	bl	8007390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_IRQn_Pin|DW_RESET_Pin, GPIO_PIN_RESET);
 8006b2c:	4d0f      	ldr	r5, [pc, #60]	; (8006b6c <MX_GPIO_Init+0x94>)
 8006b2e:	4622      	mov	r2, r4
 8006b30:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fc2b 	bl	8007390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8006b3a:	2310      	movs	r3, #16
 8006b3c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b3e:	2601      	movs	r6, #1
 8006b40:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b44:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8006b46:	a903      	add	r1, sp, #12
 8006b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b4c:	f000 fb3c 	bl	80071c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQn_Pin DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin|DW_RESET_Pin;
 8006b50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b54:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b56:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b5a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b5c:	a903      	add	r1, sp, #12
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fb32 	bl	80071c8 <HAL_GPIO_Init>

}
 8006b64:	b008      	add	sp, #32
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	48000400 	.word	0x48000400

08006b70 <test_run_info>:
  }
}

/* USER CODE BEGIN 4 */
void test_run_info(unsigned char *data)
{
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4604      	mov	r4, r0
    uint16_t    data_length;

    data_length=strlen((const char *)data);
 8006b74:	f7fa f8a4 	bl	8000cc0 <strlen>
    HAL_UART_Transmit(&huart1, data, data_length, 10);/*Transmit the data through USB - Virtual port*/
 8006b78:	4d06      	ldr	r5, [pc, #24]	; (8006b94 <test_run_info+0x24>)
 8006b7a:	230a      	movs	r3, #10
 8006b7c:	b282      	uxth	r2, r0
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f002 fb09 	bl	8009198 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 10);/*Transmit end of line through USB - Virtual port*/
 8006b86:	230a      	movs	r3, #10
 8006b88:	2202      	movs	r2, #2
 8006b8a:	4903      	ldr	r1, [pc, #12]	; (8006b98 <test_run_info+0x28>)
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f002 fb03 	bl	8009198 <HAL_UART_Transmit>

}
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	2000063c 	.word	0x2000063c
 8006b98:	08009b4c 	.word	0x08009b4c

08006b9c <test_run_info_DMA>:
void test_run_info_DMA(unsigned char *data)
{
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	4604      	mov	r4, r0
    uint16_t    data_length;

    data_length=strlen((const char *)data);
 8006ba0:	f7fa f88e 	bl	8000cc0 <strlen>
    HAL_UART_Transmit_DMA(&huart1, data, data_length);/*Transmit the data through USB - Virtual port*/
 8006ba4:	b282      	uxth	r2, r0
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <test_run_info_DMA+0x14>)
 8006baa:	f002 f875 	bl	8008c98 <HAL_UART_Transmit_DMA>
}
 8006bae:	bd10      	pop	{r4, pc}
 8006bb0:	2000063c 	.word	0x2000063c

08006bb4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006bb4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006bb6:	e7fe      	b.n	8006bb6 <Error_Handler+0x2>

08006bb8 <SystemClock_Config>:
{
 8006bb8:	b500      	push	{lr}
 8006bba:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bbc:	2228      	movs	r2, #40	; 0x28
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	a814      	add	r0, sp, #80	; 0x50
 8006bc2:	f7f9 fbe5 	bl	8000390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006bca:	9110      	str	r1, [sp, #64]	; 0x40
 8006bcc:	9111      	str	r1, [sp, #68]	; 0x44
 8006bce:	9112      	str	r1, [sp, #72]	; 0x48
 8006bd0:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bd2:	223c      	movs	r2, #60	; 0x3c
 8006bd4:	4668      	mov	r0, sp
 8006bd6:	f7f9 fbdb 	bl	8000390 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006be2:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8006be4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006be6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006be8:	2302      	movs	r3, #2
 8006bea:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bec:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006bee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006bf2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bf4:	a814      	add	r0, sp, #80	; 0x50
 8006bf6:	f000 fbe9 	bl	80073cc <HAL_RCC_OscConfig>
 8006bfa:	b9c0      	cbnz	r0, 8006c2e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bfc:	230f      	movs	r3, #15
 8006bfe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c00:	2102      	movs	r1, #2
 8006c02:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c04:	2300      	movs	r3, #0
 8006c06:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c0c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c0e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c10:	a80f      	add	r0, sp, #60	; 0x3c
 8006c12:	f000 ff25 	bl	8007a60 <HAL_RCC_ClockConfig>
 8006c16:	b960      	cbnz	r0, 8006c32 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c20:	4668      	mov	r0, sp
 8006c22:	f001 f823 	bl	8007c6c <HAL_RCCEx_PeriphCLKConfig>
 8006c26:	b930      	cbnz	r0, 8006c36 <SystemClock_Config+0x7e>
}
 8006c28:	b01f      	add	sp, #124	; 0x7c
 8006c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006c2e:	f7ff ffc1 	bl	8006bb4 <Error_Handler>
    Error_Handler();
 8006c32:	f7ff ffbf 	bl	8006bb4 <Error_Handler>
    Error_Handler();
 8006c36:	f7ff ffbd 	bl	8006bb4 <Error_Handler>
	...

08006c3c <main>:
{
 8006c3c:	b508      	push	{r3, lr}
  build_examples();
 8006c3e:	f7ff fc41 	bl	80064c4 <build_examples>
  HAL_Init();
 8006c42:	f000 f9db 	bl	8006ffc <HAL_Init>
  SystemClock_Config();
 8006c46:	f7ff ffb7 	bl	8006bb8 <SystemClock_Config>
  MX_GPIO_Init();
 8006c4a:	f7ff ff45 	bl	8006ad8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006c4e:	f002 fc5b 	bl	8009508 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8006c52:	f000 f953 	bl	8006efc <MX_SPI1_Init>
  MX_TIM2_Init();
 8006c56:	f002 fc0b 	bl	8009470 <MX_TIM2_Init>
  port_DisableEXT_IRQ();
 8006c5a:	f000 f8dc 	bl	8006e16 <port_DisableEXT_IRQ>
  example_pointer();
 8006c5e:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <main+0x2c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4798      	blx	r3
  while (1)
 8006c64:	e7fe      	b.n	8006c64 <main+0x28>
 8006c66:	bf00      	nop
 8006c68:	20000390 	.word	0x20000390

08006c6c <get_msg_toPC_2>:
		i++;
	}
}

uint8_t get_msg_toPC_2(char * a, uint8_t* b, uint8_t anchor_idx)
{
 8006c6c:	b500      	push	{lr}
 8006c6e:	4686      	mov	lr, r0
	uint8_t i =0;
 8006c70:	2000      	movs	r0, #0
	while( (char)b[anchor_idx + i] != 'd' )
 8006c72:	e003      	b.n	8006c7c <get_msg_toPC_2+0x10>
	{
		a[i] = (char)b[anchor_idx + i];
 8006c74:	f80e 3000 	strb.w	r3, [lr, r0]
		i++;
 8006c78:	3001      	adds	r0, #1
 8006c7a:	b2c0      	uxtb	r0, r0
	while( (char)b[anchor_idx + i] != 'd' )
 8006c7c:	eb02 0c00 	add.w	ip, r2, r0
 8006c80:	f811 300c 	ldrb.w	r3, [r1, ip]
 8006c84:	2b64      	cmp	r3, #100	; 0x64
 8006c86:	d1f5      	bne.n	8006c74 <get_msg_toPC_2+0x8>
	}
	a[i] = (char)b[anchor_idx + i + 1];
 8006c88:	f10c 0c01 	add.w	ip, ip, #1
 8006c8c:	f811 300c 	ldrb.w	r3, [r1, ip]
 8006c90:	f80e 3000 	strb.w	r3, [lr, r0]

	return i;
}
 8006c94:	f85d fb04 	ldr.w	pc, [sp], #4

08006c98 <allTrue>:
 * allTrue function check that in table are only values 1
 * this function is used only in PC module
 */
uint8_t allTrue(uint8_t * table, uint8_t numOfAnchors)
{
	if (numOfAnchors == 4)
 8006c98:	2904      	cmp	r1, #4
 8006c9a:	d003      	beq.n	8006ca4 <allTrue+0xc>
		else
		{
			return 0;
		}
	}
	else if (numOfAnchors == 6)
 8006c9c:	2906      	cmp	r1, #6
 8006c9e:	d00b      	beq.n	8006cb8 <allTrue+0x20>
		else
		{
			return 0;
		}
	}
	return 0;
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	4770      	bx	lr
		if (table[0] && table[1] && table[2] && table[3])
 8006ca4:	7803      	ldrb	r3, [r0, #0]
 8006ca6:	b1ab      	cbz	r3, 8006cd4 <allTrue+0x3c>
 8006ca8:	7843      	ldrb	r3, [r0, #1]
 8006caa:	b1ab      	cbz	r3, 8006cd8 <allTrue+0x40>
 8006cac:	7883      	ldrb	r3, [r0, #2]
 8006cae:	b1ab      	cbz	r3, 8006cdc <allTrue+0x44>
 8006cb0:	78c3      	ldrb	r3, [r0, #3]
 8006cb2:	b9ab      	cbnz	r3, 8006ce0 <allTrue+0x48>
			return 0;
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr
		if (table[0] && table[1] && table[2] && table[3] && table[4] && table[5])
 8006cb8:	7803      	ldrb	r3, [r0, #0]
 8006cba:	b19b      	cbz	r3, 8006ce4 <allTrue+0x4c>
 8006cbc:	7843      	ldrb	r3, [r0, #1]
 8006cbe:	b19b      	cbz	r3, 8006ce8 <allTrue+0x50>
 8006cc0:	7883      	ldrb	r3, [r0, #2]
 8006cc2:	b19b      	cbz	r3, 8006cec <allTrue+0x54>
 8006cc4:	78c3      	ldrb	r3, [r0, #3]
 8006cc6:	b19b      	cbz	r3, 8006cf0 <allTrue+0x58>
 8006cc8:	7903      	ldrb	r3, [r0, #4]
 8006cca:	b19b      	cbz	r3, 8006cf4 <allTrue+0x5c>
 8006ccc:	7943      	ldrb	r3, [r0, #5]
 8006cce:	b99b      	cbnz	r3, 8006cf8 <allTrue+0x60>
			return 0;
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	4770      	bx	lr
			return 0;
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4770      	bx	lr
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4770      	bx	lr
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4770      	bx	lr
			return 1;
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	4770      	bx	lr
			return 0;
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	4770      	bx	lr
 8006ce8:	2000      	movs	r0, #0
 8006cea:	4770      	bx	lr
 8006cec:	2000      	movs	r0, #0
 8006cee:	4770      	bx	lr
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	4770      	bx	lr
			return 1;
 8006cf8:	2001      	movs	r0, #1
}
 8006cfa:	4770      	bx	lr

08006cfc <concatenateDistancesAndRssiToString>:
 * concatenateDistancesToString function concatenate all distances in table distances
 * to one string separate them using ":"
 * this function is used only in PC module
 */
void concatenateDistancesAndRssiToString(float* distances, float* rssi, char* allDistancesToPC, uint8_t numOfAnchors, char* tag)
{
 8006cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d00:	b089      	sub	sp, #36	; 0x24
 8006d02:	4681      	mov	r9, r0
 8006d04:	4688      	mov	r8, r1
 8006d06:	4616      	mov	r6, r2
 8006d08:	461f      	mov	r7, r3

	char distanceAndRssi[20];
	char rssi_str[10];

	for (int i = 0; i < numOfAnchors; i++)
 8006d0a:	2400      	movs	r4, #0
 8006d0c:	e01e      	b.n	8006d4c <concatenateDistancesAndRssiToString+0x50>
	{
		sprintf(distanceAndRssi, "%3.2f/", distances[i]);
 8006d0e:	00a5      	lsls	r5, r4, #2
 8006d10:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	f7fe f835 	bl	8004d84 <__aeabi_f2d>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4916      	ldr	r1, [pc, #88]	; (8006d78 <concatenateDistancesAndRssiToString+0x7c>)
 8006d20:	a803      	add	r0, sp, #12
 8006d22:	f7f9 ff25 	bl	8000b70 <siprintf>
		sprintf(rssi_str, "%4.2f:", rssi[i]);
 8006d26:	4445      	add	r5, r8
 8006d28:	6828      	ldr	r0, [r5, #0]
 8006d2a:	f7fe f82b 	bl	8004d84 <__aeabi_f2d>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4912      	ldr	r1, [pc, #72]	; (8006d7c <concatenateDistancesAndRssiToString+0x80>)
 8006d34:	4668      	mov	r0, sp
 8006d36:	f7f9 ff1b 	bl	8000b70 <siprintf>
		strcat(distanceAndRssi, rssi_str);
 8006d3a:	4669      	mov	r1, sp
 8006d3c:	a803      	add	r0, sp, #12
 8006d3e:	f7f9 ff37 	bl	8000bb0 <strcat>
		strcat(allDistancesToPC, distanceAndRssi);
 8006d42:	a903      	add	r1, sp, #12
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7f9 ff33 	bl	8000bb0 <strcat>
	for (int i = 0; i < numOfAnchors; i++)
 8006d4a:	3401      	adds	r4, #1
 8006d4c:	42a7      	cmp	r7, r4
 8006d4e:	dcde      	bgt.n	8006d0e <concatenateDistancesAndRssiToString+0x12>
	}
	allDistancesToPC[strlen(allDistancesToPC)] = tag[0];
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7f9 ffb5 	bl	8000cc0 <strlen>
 8006d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	5433      	strb	r3, [r6, r0]
	allDistancesToPC[strlen(allDistancesToPC)] = '\n';
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7f9 ffaf 	bl	8000cc0 <strlen>
 8006d62:	230a      	movs	r3, #10
 8006d64:	5433      	strb	r3, [r6, r0]
	allDistancesToPC[strlen(allDistancesToPC)] = '\r';
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7f9 ffaa 	bl	8000cc0 <strlen>
 8006d6c:	230d      	movs	r3, #13
 8006d6e:	5433      	strb	r3, [r6, r0]

}
 8006d70:	b009      	add	sp, #36	; 0x24
 8006d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d76:	bf00      	nop
 8006d78:	08009b50 	.word	0x08009b50
 8006d7c:	08009b58 	.word	0x08009b58

08006d80 <split_dist_rssi>:
/*
 * this function only works for specific string to get rssi and dist split
 */
void split_dist_rssi(char* msg_to_PC, char* dist, char* rssi, char tag)
{
 8006d80:	b510      	push	{r4, lr}
	uint8_t i = 1;
 8006d82:	f04f 0c01 	mov.w	ip, #1
	uint8_t j = 0;
	while(msg_to_PC[i] != 'm')
 8006d86:	e007      	b.n	8006d98 <split_dist_rssi+0x18>
	{
		dist[i-1] = msg_to_PC[i];
 8006d88:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 8006d8c:	f801 e004 	strb.w	lr, [r1, r4]
		i++;
 8006d90:	f10c 0c01 	add.w	ip, ip, #1
 8006d94:	fa5f fc8c 	uxtb.w	ip, ip
	while(msg_to_PC[i] != 'm')
 8006d98:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8006d9c:	f1be 0f6d 	cmp.w	lr, #109	; 0x6d
 8006da0:	d1f2      	bne.n	8006d88 <split_dist_rssi+0x8>
	}
	i++;
 8006da2:	f10c 0c01 	add.w	ip, ip, #1
 8006da6:	fa5f fc8c 	uxtb.w	ip, ip
	uint8_t j = 0;
 8006daa:	2100      	movs	r1, #0
	while(msg_to_PC[i] != tag)
 8006dac:	e007      	b.n	8006dbe <split_dist_rssi+0x3e>
	{
		rssi[j] = msg_to_PC[i];
 8006dae:	f802 e001 	strb.w	lr, [r2, r1]
		i++;
 8006db2:	f10c 0c01 	add.w	ip, ip, #1
 8006db6:	fa5f fc8c 	uxtb.w	ip, ip
		j++;
 8006dba:	3101      	adds	r1, #1
 8006dbc:	b2c9      	uxtb	r1, r1
	while(msg_to_PC[i] != tag)
 8006dbe:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8006dc2:	459e      	cmp	lr, r3
 8006dc4:	d1f3      	bne.n	8006dae <split_dist_rssi+0x2e>
	}
}
 8006dc6:	bd10      	pop	{r4, pc}

08006dc8 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec*=12;
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	607b      	str	r3, [r7, #4]
    for(i=0;i<usec;i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e003      	b.n	8006dea <usleep+0x22>
    {
        __NOP();
 8006de2:	bf00      	nop
    for(i=0;i<usec;i++)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3f7      	bcc.n	8006de2 <usleep+0x1a>
    }
    return 0;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f91b 	bl	8007044 <HAL_Delay>
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(EXTI0_IRQn);
 8006e1a:	2006      	movs	r0, #6
 8006e1c:	f000 f85c 	bl	8006ed8 <__NVIC_DisableIRQ>
}
 8006e20:	bf00      	nop
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(EXTI0_IRQn);
 8006e28:	2006      	movs	r0, #6
 8006e2a:	f000 f847 	bl	8006ebc <__NVIC_EnableIRQ>
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <EXTI_GetITEnStatus>:
  * @brief  Checks whether the specified IRQn line is enabled or not.
  * @param  IRQn: specifies the IRQn line to check.
  * @return "0" when IRQn is "not enabled" and !0 otherwise
  */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	71fb      	strb	r3, [r7, #7]
        return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] &\
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <EXTI_GetITEnStatus+0x3c>)
 8006e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf14      	ite	ne
 8006e5c:	2301      	movne	r3, #1
 8006e5e:	2300      	moveq	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	e000e100 	.word	0xe000e100

08006e74 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(EXTI0_IRQn);
 8006e78:	2006      	movs	r0, #6
 8006e7a:	f7ff ffdb 	bl	8006e34 <EXTI_GetITEnStatus>
 8006e7e:	4603      	mov	r3, r0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <my_reset_DWIC>:
    Sleep(2);

}

void my_reset_DWIC(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e8e:	480a      	ldr	r0, [pc, #40]	; (8006eb8 <my_reset_DWIC+0x34>)
 8006e90:	f000 fa7e 	bl	8007390 <HAL_GPIO_WritePin>
    HAL_Delay(6);
 8006e94:	2006      	movs	r0, #6
 8006e96:	f000 f8d5 	bl	8007044 <HAL_Delay>
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ea0:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <my_reset_DWIC+0x34>)
 8006ea2:	f000 fa75 	bl	8007390 <HAL_GPIO_WritePin>
    HAL_Delay(3);
 8006ea6:	2003      	movs	r0, #3
 8006ea8:	f000 f8cc 	bl	8007044 <HAL_Delay>
    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 8006eac:	2002      	movs	r0, #2
 8006eae:	f7ff ffa7 	bl	8006e00 <Sleep>

}
 8006eb2:	bf00      	nop
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	48000400 	.word	0x48000400

08006ebc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	db07      	blt.n	8006ed0 <__NVIC_EnableIRQ+0x14>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ec0:	f000 021f 	and.w	r2, r0, #31
 8006ec4:	0940      	lsrs	r0, r0, #5
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4093      	lsls	r3, r2
 8006eca:	4a02      	ldr	r2, [pc, #8]	; (8006ed4 <__NVIC_EnableIRQ+0x18>)
 8006ecc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  }
}
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	e000e100 	.word	0xe000e100

08006ed8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	db0c      	blt.n	8006ef6 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006edc:	f000 021f 	and.w	r2, r0, #31
 8006ee0:	0940      	lsrs	r0, r0, #5
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4093      	lsls	r3, r2
 8006ee6:	3020      	adds	r0, #32
 8006ee8:	4a03      	ldr	r2, [pc, #12]	; (8006ef8 <__NVIC_DisableIRQ+0x20>)
 8006eea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006ef2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006ef6:	4770      	bx	lr
 8006ef8:	e000e100 	.word	0xe000e100

08006efc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006efc:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006efe:	4810      	ldr	r0, [pc, #64]	; (8006f40 <MX_SPI1_Init+0x44>)
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <MX_SPI1_Init+0x48>)
 8006f02:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006f08:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f12:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f14:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f16:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006f1e:	2218      	movs	r2, #24
 8006f20:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f22:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f24:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f26:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006f28:	2207      	movs	r2, #7
 8006f2a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f2c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f32:	f001 f921 	bl	8008178 <HAL_SPI_Init>
 8006f36:	b900      	cbnz	r0, 8006f3a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006f3a:	f7ff fe3b 	bl	8006bb4 <Error_Handler>
}
 8006f3e:	e7fb      	b.n	8006f38 <MX_SPI1_Init+0x3c>
 8006f40:	20000584 	.word	0x20000584
 8006f44:	40013000 	.word	0x40013000

08006f48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f48:	b500      	push	{lr}
 8006f4a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9303      	str	r3, [sp, #12]
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	9305      	str	r3, [sp, #20]
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8006f58:	6802      	ldr	r2, [r0, #0]
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <HAL_SPI_MspInit+0x64>)
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006f60:	b009      	add	sp, #36	; 0x24
 8006f62:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f66:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f70:	619a      	str	r2, [r3, #24]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006f78:	9201      	str	r2, [sp, #4]
 8006f7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f82:	615a      	str	r2, [r3, #20]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	9302      	str	r3, [sp, #8]
 8006f8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006f8e:	23e0      	movs	r3, #224	; 0xe0
 8006f90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f92:	2302      	movs	r3, #2
 8006f94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f96:	2303      	movs	r3, #3
 8006f98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f9a:	2305      	movs	r3, #5
 8006f9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9e:	a903      	add	r1, sp, #12
 8006fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fa4:	f000 f910 	bl	80071c8 <HAL_GPIO_Init>
}
 8006fa8:	e7da      	b.n	8006f60 <HAL_SPI_MspInit+0x18>
 8006faa:	bf00      	nop
 8006fac:	40013000 	.word	0x40013000

08006fb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <HAL_InitTick+0x40>)
 8006fb6:	7818      	ldrb	r0, [r3, #0]
 8006fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fbc:	fbb3 f3f0 	udiv	r3, r3, r0
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <HAL_InitTick+0x44>)
 8006fc2:	6810      	ldr	r0, [r2, #0]
 8006fc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8006fc8:	f000 f89a 	bl	8007100 <HAL_SYSTICK_Config>
 8006fcc:	b968      	cbnz	r0, 8006fea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fce:	2c0f      	cmp	r4, #15
 8006fd0:	d901      	bls.n	8006fd6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	e00a      	b.n	8006fec <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fde:	f000 f857 	bl	8007090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <HAL_InitTick+0x48>)
 8006fe4:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e000      	b.n	8006fec <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8006fea:	2001      	movs	r0, #1
}
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000021e 	.word	0x2000021e
 8006ff4:	20000224 	.word	0x20000224
 8006ff8:	20000220 	.word	0x20000220

08006ffc <HAL_Init>:
{
 8006ffc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ffe:	4a07      	ldr	r2, [pc, #28]	; (800701c <HAL_Init+0x20>)
 8007000:	6813      	ldr	r3, [r2, #0]
 8007002:	f043 0310 	orr.w	r3, r3, #16
 8007006:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007008:	2003      	movs	r0, #3
 800700a:	f000 f82f 	bl	800706c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800700e:	200f      	movs	r0, #15
 8007010:	f7ff ffce 	bl	8006fb0 <HAL_InitTick>
  HAL_MspInit();
 8007014:	f000 f9c2 	bl	800739c <HAL_MspInit>
}
 8007018:	2000      	movs	r0, #0
 800701a:	bd08      	pop	{r3, pc}
 800701c:	40022000 	.word	0x40022000

08007020 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007020:	4a03      	ldr	r2, [pc, #12]	; (8007030 <HAL_IncTick+0x10>)
 8007022:	6811      	ldr	r1, [r2, #0]
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <HAL_IncTick+0x14>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	440b      	add	r3, r1
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	200005e8 	.word	0x200005e8
 8007034:	2000021e 	.word	0x2000021e

08007038 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8007038:	4b01      	ldr	r3, [pc, #4]	; (8007040 <HAL_GetTick+0x8>)
 800703a:	6818      	ldr	r0, [r3, #0]
}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	200005e8 	.word	0x200005e8

08007044 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007048:	f7ff fff6 	bl	8007038 <HAL_GetTick>
 800704c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800704e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007052:	d002      	beq.n	800705a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <HAL_Delay+0x24>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800705a:	f7ff ffed 	bl	8007038 <HAL_GetTick>
 800705e:	1b40      	subs	r0, r0, r5
 8007060:	42a0      	cmp	r0, r4
 8007062:	d3fa      	bcc.n	800705a <HAL_Delay+0x16>
  {
  }
}
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	2000021e 	.word	0x2000021e

0800706c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800706c:	4a07      	ldr	r2, [pc, #28]	; (800708c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800706e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007070:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007078:	0200      	lsls	r0, r0, #8
 800707a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800707e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007088:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800708a:	4770      	bx	lr
 800708c:	e000ed00 	.word	0xe000ed00

08007090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007090:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007092:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <HAL_NVIC_SetPriority+0x68>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800709a:	f1c3 0c07 	rsb	ip, r3, #7
 800709e:	f1bc 0f04 	cmp.w	ip, #4
 80070a2:	bf28      	it	cs
 80070a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070a8:	f103 0e04 	add.w	lr, r3, #4
 80070ac:	f1be 0f06 	cmp.w	lr, #6
 80070b0:	d918      	bls.n	80070e4 <HAL_NVIC_SetPriority+0x54>
 80070b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80070b8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80070bc:	ea21 010c 	bic.w	r1, r1, ip
 80070c0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c2:	fa0e f303 	lsl.w	r3, lr, r3
 80070c6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ca:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80070cc:	2800      	cmp	r0, #0
 80070ce:	db0b      	blt.n	80070e8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d0:	0109      	lsls	r1, r1, #4
 80070d2:	b2c9      	uxtb	r1, r1
 80070d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80070d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80070dc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80070e0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070e4:	2300      	movs	r3, #0
 80070e6:	e7e5      	b.n	80070b4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e8:	f000 000f 	and.w	r0, r0, #15
 80070ec:	0109      	lsls	r1, r1, #4
 80070ee:	b2c9      	uxtb	r1, r1
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <HAL_NVIC_SetPriority+0x6c>)
 80070f2:	5419      	strb	r1, [r3, r0]
 80070f4:	e7f4      	b.n	80070e0 <HAL_NVIC_SetPriority+0x50>
 80070f6:	bf00      	nop
 80070f8:	e000ed00 	.word	0xe000ed00
 80070fc:	e000ed14 	.word	0xe000ed14

08007100 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007100:	3801      	subs	r0, #1
 8007102:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007106:	d20b      	bcs.n	8007120 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800710c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800710e:	4a05      	ldr	r2, [pc, #20]	; (8007124 <HAL_SYSTICK_Config+0x24>)
 8007110:	21f0      	movs	r1, #240	; 0xf0
 8007112:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007116:	2000      	movs	r0, #0
 8007118:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800711a:	2207      	movs	r2, #7
 800711c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800711e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007120:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007122:	4770      	bx	lr
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007128:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800712a:	2401      	movs	r4, #1
 800712c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800712e:	40ac      	lsls	r4, r5
 8007130:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8007132:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007134:	6804      	ldr	r4, [r0, #0]
 8007136:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007138:	6843      	ldr	r3, [r0, #4]
 800713a:	2b10      	cmp	r3, #16
 800713c:	d005      	beq.n	800714a <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800713e:	6803      	ldr	r3, [r0, #0]
 8007140:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007142:	6803      	ldr	r3, [r0, #0]
 8007144:	60da      	str	r2, [r3, #12]
  }
}
 8007146:	bc30      	pop	{r4, r5}
 8007148:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800714e:	6803      	ldr	r3, [r0, #0]
 8007150:	60d9      	str	r1, [r3, #12]
 8007152:	e7f8      	b.n	8007146 <DMA_SetConfig+0x1e>

08007154 <HAL_DMA_Start_IT>:
{
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8007158:	f890 0020 	ldrb.w	r0, [r0, #32]
 800715c:	2801      	cmp	r0, #1
 800715e:	d031      	beq.n	80071c4 <HAL_DMA_Start_IT+0x70>
 8007160:	2001      	movs	r0, #1
 8007162:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007166:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800716a:	2801      	cmp	r0, #1
 800716c:	d004      	beq.n	8007178 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800716e:	2300      	movs	r3, #0
 8007170:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8007174:	2002      	movs	r0, #2
}
 8007176:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007178:	2002      	movs	r0, #2
 800717a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800717e:	2000      	movs	r0, #0
 8007180:	63a0      	str	r0, [r4, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007182:	6825      	ldr	r5, [r4, #0]
 8007184:	6828      	ldr	r0, [r5, #0]
 8007186:	f020 0001 	bic.w	r0, r0, #1
 800718a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff ffcb 	bl	8007128 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8007192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007194:	b15b      	cbz	r3, 80071ae <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	6813      	ldr	r3, [r2, #0]
 800719a:	f043 030e 	orr.w	r3, r3, #14
 800719e:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7e3      	b.n	8007176 <HAL_DMA_Start_IT+0x22>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	6813      	ldr	r3, [r2, #0]
 80071b2:	f043 030a 	orr.w	r3, r3, #10
 80071b6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	6813      	ldr	r3, [r2, #0]
 80071bc:	f023 0304 	bic.w	r3, r3, #4
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	e7ed      	b.n	80071a0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80071c4:	2002      	movs	r0, #2
 80071c6:	e7d6      	b.n	8007176 <HAL_DMA_Start_IT+0x22>

080071c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ca:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80071cc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071ce:	e062      	b.n	8007296 <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071d0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80071d2:	005e      	lsls	r6, r3, #1
 80071d4:	2403      	movs	r4, #3
 80071d6:	40b4      	lsls	r4, r6
 80071d8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071dc:	68cc      	ldr	r4, [r1, #12]
 80071de:	40b4      	lsls	r4, r6
 80071e0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80071e2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071e4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071e6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071ea:	684c      	ldr	r4, [r1, #4]
 80071ec:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80071f0:	409c      	lsls	r4, r3
 80071f2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80071f6:	6044      	str	r4, [r0, #4]
 80071f8:	e05e      	b.n	80072b8 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80071fa:	08dd      	lsrs	r5, r3, #3
 80071fc:	3508      	adds	r5, #8
 80071fe:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007202:	f003 0407 	and.w	r4, r3, #7
 8007206:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800720a:	240f      	movs	r4, #15
 800720c:	fa04 f40c 	lsl.w	r4, r4, ip
 8007210:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007214:	690c      	ldr	r4, [r1, #16]
 8007216:	fa04 f40c 	lsl.w	r4, r4, ip
 800721a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800721e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8007222:	e060      	b.n	80072e6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007224:	2404      	movs	r4, #4
 8007226:	e000      	b.n	800722a <HAL_GPIO_Init+0x62>
 8007228:	2400      	movs	r4, #0
 800722a:	fa04 f40e 	lsl.w	r4, r4, lr
 800722e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007230:	f10c 0c02 	add.w	ip, ip, #2
 8007234:	4d52      	ldr	r5, [pc, #328]	; (8007380 <HAL_GPIO_Init+0x1b8>)
 8007236:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800723a:	4c52      	ldr	r4, [pc, #328]	; (8007384 <HAL_GPIO_Init+0x1bc>)
 800723c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800723e:	43d4      	mvns	r4, r2
 8007240:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007244:	684f      	ldr	r7, [r1, #4]
 8007246:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800724a:	d001      	beq.n	8007250 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800724c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8007250:	4d4c      	ldr	r5, [pc, #304]	; (8007384 <HAL_GPIO_Init+0x1bc>)
 8007252:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8007254:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8007256:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800725a:	684f      	ldr	r7, [r1, #4]
 800725c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8007260:	d001      	beq.n	8007266 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8007262:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8007266:	4d47      	ldr	r5, [pc, #284]	; (8007384 <HAL_GPIO_Init+0x1bc>)
 8007268:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 800726a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800726c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007270:	684f      	ldr	r7, [r1, #4]
 8007272:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8007276:	d001      	beq.n	800727c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8007278:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800727c:	4d41      	ldr	r5, [pc, #260]	; (8007384 <HAL_GPIO_Init+0x1bc>)
 800727e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007280:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8007282:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007284:	684e      	ldr	r6, [r1, #4]
 8007286:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800728a:	d001      	beq.n	8007290 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800728c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8007290:	4a3c      	ldr	r2, [pc, #240]	; (8007384 <HAL_GPIO_Init+0x1bc>)
 8007292:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8007294:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007296:	680a      	ldr	r2, [r1, #0]
 8007298:	fa32 f403 	lsrs.w	r4, r2, r3
 800729c:	d06e      	beq.n	800737c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800729e:	f04f 0c01 	mov.w	ip, #1
 80072a2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80072a6:	ea1c 0202 	ands.w	r2, ip, r2
 80072aa:	d0f3      	beq.n	8007294 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072ac:	684c      	ldr	r4, [r1, #4]
 80072ae:	f004 0403 	and.w	r4, r4, #3
 80072b2:	3c01      	subs	r4, #1
 80072b4:	2c01      	cmp	r4, #1
 80072b6:	d98b      	bls.n	80071d0 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072b8:	684c      	ldr	r4, [r1, #4]
 80072ba:	f004 0403 	and.w	r4, r4, #3
 80072be:	2c03      	cmp	r4, #3
 80072c0:	d00c      	beq.n	80072dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80072c2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80072c4:	005d      	lsls	r5, r3, #1
 80072c6:	f04f 0c03 	mov.w	ip, #3
 80072ca:	fa0c fc05 	lsl.w	ip, ip, r5
 80072ce:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80072d2:	688c      	ldr	r4, [r1, #8]
 80072d4:	40ac      	lsls	r4, r5
 80072d6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80072da:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072dc:	684c      	ldr	r4, [r1, #4]
 80072de:	f004 0403 	and.w	r4, r4, #3
 80072e2:	2c02      	cmp	r4, #2
 80072e4:	d089      	beq.n	80071fa <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80072e6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80072e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80072ec:	f04f 0c03 	mov.w	ip, #3
 80072f0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80072f4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80072f8:	684c      	ldr	r4, [r1, #4]
 80072fa:	f004 0403 	and.w	r4, r4, #3
 80072fe:	fa04 f40e 	lsl.w	r4, r4, lr
 8007302:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8007306:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007308:	684c      	ldr	r4, [r1, #4]
 800730a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800730e:	d0c1      	beq.n	8007294 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007310:	4c1d      	ldr	r4, [pc, #116]	; (8007388 <HAL_GPIO_Init+0x1c0>)
 8007312:	69a5      	ldr	r5, [r4, #24]
 8007314:	f045 0501 	orr.w	r5, r5, #1
 8007318:	61a5      	str	r5, [r4, #24]
 800731a:	69a4      	ldr	r4, [r4, #24]
 800731c:	f004 0401 	and.w	r4, r4, #1
 8007320:	9401      	str	r4, [sp, #4]
 8007322:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8007324:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007328:	f10c 0502 	add.w	r5, ip, #2
 800732c:	4c14      	ldr	r4, [pc, #80]	; (8007380 <HAL_GPIO_Init+0x1b8>)
 800732e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007332:	f003 0403 	and.w	r4, r3, #3
 8007336:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800733a:	240f      	movs	r4, #15
 800733c:	fa04 f40e 	lsl.w	r4, r4, lr
 8007340:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007344:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007348:	f43f af6e 	beq.w	8007228 <HAL_GPIO_Init+0x60>
 800734c:	4c0f      	ldr	r4, [pc, #60]	; (800738c <HAL_GPIO_Init+0x1c4>)
 800734e:	42a0      	cmp	r0, r4
 8007350:	d00e      	beq.n	8007370 <HAL_GPIO_Init+0x1a8>
 8007352:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007356:	42a0      	cmp	r0, r4
 8007358:	d00c      	beq.n	8007374 <HAL_GPIO_Init+0x1ac>
 800735a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800735e:	42a0      	cmp	r0, r4
 8007360:	d00a      	beq.n	8007378 <HAL_GPIO_Init+0x1b0>
 8007362:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007366:	42a0      	cmp	r0, r4
 8007368:	f43f af5c 	beq.w	8007224 <HAL_GPIO_Init+0x5c>
 800736c:	2405      	movs	r4, #5
 800736e:	e75c      	b.n	800722a <HAL_GPIO_Init+0x62>
 8007370:	2401      	movs	r4, #1
 8007372:	e75a      	b.n	800722a <HAL_GPIO_Init+0x62>
 8007374:	2402      	movs	r4, #2
 8007376:	e758      	b.n	800722a <HAL_GPIO_Init+0x62>
 8007378:	2403      	movs	r4, #3
 800737a:	e756      	b.n	800722a <HAL_GPIO_Init+0x62>
  }
}
 800737c:	b003      	add	sp, #12
 800737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400
 8007388:	40021000 	.word	0x40021000
 800738c:	48000400 	.word	0x48000400

08007390 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007390:	b10a      	cbz	r2, 8007396 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007392:	6181      	str	r1, [r0, #24]
 8007394:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007396:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007398:	4770      	bx	lr
	...

0800739c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800739c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_MspInit+0x2c>)
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	619a      	str	r2, [r3, #24]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	f002 0201 	and.w	r2, r2, #1
 80073ae:	9200      	str	r2, [sp, #0]
 80073b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073b8:	61da      	str	r2, [r3, #28]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073c4:	b002      	add	sp, #8
 80073c6:	4770      	bx	lr
 80073c8:	40021000 	.word	0x40021000

080073cc <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f000 8301 	beq.w	80079d4 <HAL_RCC_OscConfig+0x608>
{
 80073d2:	b570      	push	{r4, r5, r6, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d8:	6803      	ldr	r3, [r0, #0]
 80073da:	f013 0f01 	tst.w	r3, #1
 80073de:	d03b      	beq.n	8007458 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80073e0:	4bb5      	ldr	r3, [pc, #724]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 030c 	and.w	r3, r3, #12
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d01e      	beq.n	800742a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80073ec:	4bb2      	ldr	r3, [pc, #712]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d013      	beq.n	8007420 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fe:	d068      	beq.n	80074d2 <HAL_RCC_OscConfig+0x106>
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8092 	bne.w	800752a <HAL_RCC_OscConfig+0x15e>
 8007406:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800740a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e05d      	b.n	80074dc <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007420:	4ba5      	ldr	r3, [pc, #660]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007428:	d0e6      	beq.n	80073f8 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800742e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007432:	4ba1      	ldr	r3, [pc, #644]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007434:	6819      	ldr	r1, [r3, #0]
 8007436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800743a:	fa93 f3a3 	rbit	r3, r3
 800743e:	fab3 f383 	clz	r3, r3
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2201      	movs	r2, #1
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	420b      	tst	r3, r1
 800744e:	d003      	beq.n	8007458 <HAL_RCC_OscConfig+0x8c>
 8007450:	6863      	ldr	r3, [r4, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 82c0 	beq.w	80079d8 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	f013 0f02 	tst.w	r3, #2
 800745e:	f000 80c5 	beq.w	80075ec <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007462:	4b95      	ldr	r3, [pc, #596]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f013 0f0c 	tst.w	r3, #12
 800746a:	f000 809c 	beq.w	80075a6 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800746e:	4b92      	ldr	r3, [pc, #584]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b08      	cmp	r3, #8
 8007478:	f000 808f 	beq.w	800759a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80f2 	beq.w	8007668 <HAL_RCC_OscConfig+0x29c>
 8007484:	2201      	movs	r2, #1
 8007486:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800748a:	fab3 f383 	clz	r3, r3
 800748e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749a:	f7ff fdcd 	bl	8007038 <HAL_GetTick>
 800749e:	4605      	mov	r5, r0
 80074a0:	2302      	movs	r3, #2
 80074a2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a6:	4b84      	ldr	r3, [pc, #528]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80074a8:	6819      	ldr	r1, [r3, #0]
 80074aa:	2302      	movs	r3, #2
 80074ac:	fa93 f3a3 	rbit	r3, r3
 80074b0:	fab3 f383 	clz	r3, r3
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2201      	movs	r2, #1
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	420b      	tst	r3, r1
 80074c0:	f040 80c3 	bne.w	800764a <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c4:	f7ff fdb8 	bl	8007038 <HAL_GetTick>
 80074c8:	1b40      	subs	r0, r0, r5
 80074ca:	2802      	cmp	r0, #2
 80074cc:	d9e8      	bls.n	80074a0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80074ce:	2003      	movs	r0, #3
 80074d0:	e28b      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d2:	4a79      	ldr	r2, [pc, #484]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074da:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074dc:	4a76      	ldr	r2, [pc, #472]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80074de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80074e0:	f023 030f 	bic.w	r3, r3, #15
 80074e4:	68a1      	ldr	r1, [r4, #8]
 80074e6:	430b      	orrs	r3, r1
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d036      	beq.n	800755e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80074f0:	f7ff fda2 	bl	8007038 <HAL_GetTick>
 80074f4:	4605      	mov	r5, r0
 80074f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074fe:	4b6e      	ldr	r3, [pc, #440]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007506:	fa93 f3a3 	rbit	r3, r3
 800750a:	fab3 f383 	clz	r3, r3
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2201      	movs	r2, #1
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	420b      	tst	r3, r1
 800751a:	d19d      	bne.n	8007458 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800751c:	f7ff fd8c 	bl	8007038 <HAL_GetTick>
 8007520:	1b40      	subs	r0, r0, r5
 8007522:	2864      	cmp	r0, #100	; 0x64
 8007524:	d9e7      	bls.n	80074f6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8007526:	2003      	movs	r0, #3
 8007528:	e25f      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800752a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800752e:	d009      	beq.n	8007544 <HAL_RCC_OscConfig+0x178>
 8007530:	4b61      	ldr	r3, [pc, #388]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e7cb      	b.n	80074dc <HAL_RCC_OscConfig+0x110>
 8007544:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007548:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e7be      	b.n	80074dc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800755e:	f7ff fd6b 	bl	8007038 <HAL_GetTick>
 8007562:	4605      	mov	r5, r0
 8007564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007568:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800756c:	4b52      	ldr	r3, [pc, #328]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007574:	fa93 f3a3 	rbit	r3, r3
 8007578:	fab3 f383 	clz	r3, r3
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2201      	movs	r2, #1
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	420b      	tst	r3, r1
 8007588:	f43f af66 	beq.w	8007458 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800758c:	f7ff fd54 	bl	8007038 <HAL_GetTick>
 8007590:	1b40      	subs	r0, r0, r5
 8007592:	2864      	cmp	r0, #100	; 0x64
 8007594:	d9e6      	bls.n	8007564 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8007596:	2003      	movs	r0, #3
 8007598:	e227      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800759a:	4b47      	ldr	r3, [pc, #284]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80075a2:	f47f af6b 	bne.w	800747c <HAL_RCC_OscConfig+0xb0>
 80075a6:	2302      	movs	r3, #2
 80075a8:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ac:	4b42      	ldr	r3, [pc, #264]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	2302      	movs	r3, #2
 80075b2:	fa93 f3a3 	rbit	r3, r3
 80075b6:	fab3 f383 	clz	r3, r3
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	420b      	tst	r3, r1
 80075c6:	d003      	beq.n	80075d0 <HAL_RCC_OscConfig+0x204>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f040 8206 	bne.w	80079dc <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d0:	4839      	ldr	r0, [pc, #228]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 80075d2:	6803      	ldr	r3, [r0, #0]
 80075d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80075d8:	6961      	ldr	r1, [r4, #20]
 80075da:	22f8      	movs	r2, #248	; 0xf8
 80075dc:	fa92 f2a2 	rbit	r2, r2
 80075e0:	fab2 f282 	clz	r2, r2
 80075e4:	fa01 f202 	lsl.w	r2, r1, r2
 80075e8:	4313      	orrs	r3, r2
 80075ea:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	f013 0f08 	tst.w	r3, #8
 80075f2:	f000 808d 	beq.w	8007710 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075f6:	69a3      	ldr	r3, [r4, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d061      	beq.n	80076c0 <HAL_RCC_OscConfig+0x2f4>
 80075fc:	2101      	movs	r1, #1
 80075fe:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007602:	fab2 f282 	clz	r2, r2
 8007606:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <HAL_RCC_OscConfig+0x2f0>)
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800760e:	f7ff fd13 	bl	8007038 <HAL_GetTick>
 8007612:	4605      	mov	r5, r0
 8007614:	2302      	movs	r3, #2
 8007616:	fa93 f2a3 	rbit	r2, r3
 800761a:	fa93 f2a3 	rbit	r2, r3
 800761e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007622:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 8007624:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8007626:	fa93 f3a3 	rbit	r3, r3
 800762a:	fab3 f383 	clz	r3, r3
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	2201      	movs	r2, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	420b      	tst	r3, r1
 800763a:	d169      	bne.n	8007710 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800763c:	f7ff fcfc 	bl	8007038 <HAL_GetTick>
 8007640:	1b40      	subs	r0, r0, r5
 8007642:	2802      	cmp	r0, #2
 8007644:	d9e6      	bls.n	8007614 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8007646:	2003      	movs	r0, #3
 8007648:	e1cf      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800764a:	481b      	ldr	r0, [pc, #108]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 800764c:	6803      	ldr	r3, [r0, #0]
 800764e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007652:	6961      	ldr	r1, [r4, #20]
 8007654:	22f8      	movs	r2, #248	; 0xf8
 8007656:	fa92 f2a2 	rbit	r2, r2
 800765a:	fab2 f282 	clz	r2, r2
 800765e:	fa01 f202 	lsl.w	r2, r1, r2
 8007662:	4313      	orrs	r3, r2
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	e7c1      	b.n	80075ec <HAL_RCC_OscConfig+0x220>
 8007668:	2301      	movs	r3, #1
 800766a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800766e:	fab3 f383 	clz	r3, r3
 8007672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007680:	f7ff fcda 	bl	8007038 <HAL_GetTick>
 8007684:	4605      	mov	r5, r0
 8007686:	2302      	movs	r3, #2
 8007688:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <HAL_RCC_OscConfig+0x2ec>)
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	2302      	movs	r3, #2
 8007692:	fa93 f3a3 	rbit	r3, r3
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2201      	movs	r2, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	420b      	tst	r3, r1
 80076a6:	d0a1      	beq.n	80075ec <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a8:	f7ff fcc6 	bl	8007038 <HAL_GetTick>
 80076ac:	1b40      	subs	r0, r0, r5
 80076ae:	2802      	cmp	r0, #2
 80076b0:	d9e9      	bls.n	8007686 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80076b2:	2003      	movs	r0, #3
 80076b4:	e199      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
 80076b6:	bf00      	nop
 80076b8:	40021000 	.word	0x40021000
 80076bc:	10908120 	.word	0x10908120
 80076c0:	2201      	movs	r2, #1
 80076c2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076c6:	fab2 f282 	clz	r2, r2
 80076ca:	4bb7      	ldr	r3, [pc, #732]	; (80079a8 <HAL_RCC_OscConfig+0x5dc>)
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076d4:	f7ff fcb0 	bl	8007038 <HAL_GetTick>
 80076d8:	4605      	mov	r5, r0
 80076da:	2302      	movs	r3, #2
 80076dc:	fa93 f2a3 	rbit	r2, r3
 80076e0:	fa93 f2a3 	rbit	r2, r3
 80076e4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076e8:	4ab0      	ldr	r2, [pc, #704]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80076ea:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80076ec:	fa93 f3a3 	rbit	r3, r3
 80076f0:	fab3 f383 	clz	r3, r3
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	2201      	movs	r2, #1
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	420b      	tst	r3, r1
 8007700:	d006      	beq.n	8007710 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007702:	f7ff fc99 	bl	8007038 <HAL_GetTick>
 8007706:	1b40      	subs	r0, r0, r5
 8007708:	2802      	cmp	r0, #2
 800770a:	d9e6      	bls.n	80076da <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800770c:	2003      	movs	r0, #3
 800770e:	e16c      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	f013 0f04 	tst.w	r3, #4
 8007716:	f000 80a9 	beq.w	800786c <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800771a:	4ba4      	ldr	r3, [pc, #656]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007722:	d120      	bne.n	8007766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007724:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800772c:	61da      	str	r2, [r3, #28]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007738:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800773a:	4b9d      	ldr	r3, [pc, #628]	; (80079b0 <HAL_RCC_OscConfig+0x5e4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007742:	d012      	beq.n	800776a <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007744:	68e3      	ldr	r3, [r4, #12]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d023      	beq.n	8007792 <HAL_RCC_OscConfig+0x3c6>
 800774a:	bb73      	cbnz	r3, 80077aa <HAL_RCC_OscConfig+0x3de>
 800774c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007750:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	621a      	str	r2, [r3, #32]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	f022 0204 	bic.w	r2, r2, #4
 8007762:	621a      	str	r2, [r3, #32]
 8007764:	e01a      	b.n	800779c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8007766:	2500      	movs	r5, #0
 8007768:	e7e7      	b.n	800773a <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800776a:	4a91      	ldr	r2, [pc, #580]	; (80079b0 <HAL_RCC_OscConfig+0x5e4>)
 800776c:	6813      	ldr	r3, [r2, #0]
 800776e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007772:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007774:	f7ff fc60 	bl	8007038 <HAL_GetTick>
 8007778:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777a:	4b8d      	ldr	r3, [pc, #564]	; (80079b0 <HAL_RCC_OscConfig+0x5e4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007782:	d1df      	bne.n	8007744 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007784:	f7ff fc58 	bl	8007038 <HAL_GetTick>
 8007788:	1b80      	subs	r0, r0, r6
 800778a:	2864      	cmp	r0, #100	; 0x64
 800778c:	d9f5      	bls.n	800777a <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800778e:	2003      	movs	r0, #3
 8007790:	e12b      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007792:	4a86      	ldr	r2, [pc, #536]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007794:	6a13      	ldr	r3, [r2, #32]
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800779c:	68e3      	ldr	r3, [r4, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d03c      	beq.n	800781c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a2:	f7ff fc49 	bl	8007038 <HAL_GetTick>
 80077a6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a8:	e02b      	b.n	8007802 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	d009      	beq.n	80077c2 <HAL_RCC_OscConfig+0x3f6>
 80077ae:	4b7f      	ldr	r3, [pc, #508]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	621a      	str	r2, [r3, #32]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	f022 0204 	bic.w	r2, r2, #4
 80077be:	621a      	str	r2, [r3, #32]
 80077c0:	e7ec      	b.n	800779c <HAL_RCC_OscConfig+0x3d0>
 80077c2:	4b7a      	ldr	r3, [pc, #488]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	f042 0204 	orr.w	r2, r2, #4
 80077ca:	621a      	str	r2, [r3, #32]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	621a      	str	r2, [r3, #32]
 80077d4:	e7e2      	b.n	800779c <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077d6:	4b75      	ldr	r3, [pc, #468]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80077d8:	6a19      	ldr	r1, [r3, #32]
 80077da:	2302      	movs	r3, #2
 80077dc:	fa93 f3a3 	rbit	r3, r3
 80077e0:	fab3 f383 	clz	r3, r3
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2201      	movs	r2, #1
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	4219      	tst	r1, r3
 80077f0:	d13b      	bne.n	800786a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f2:	f7ff fc21 	bl	8007038 <HAL_GetTick>
 80077f6:	1b80      	subs	r0, r0, r6
 80077f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80077fc:	4298      	cmp	r0, r3
 80077fe:	f200 80ef 	bhi.w	80079e0 <HAL_RCC_OscConfig+0x614>
 8007802:	2302      	movs	r3, #2
 8007804:	fa93 f2a3 	rbit	r2, r3
 8007808:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e2      	bne.n	80077d6 <HAL_RCC_OscConfig+0x40a>
 8007810:	2302      	movs	r3, #2
 8007812:	fa93 f3a3 	rbit	r3, r3
 8007816:	4b65      	ldr	r3, [pc, #404]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007818:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800781a:	e7de      	b.n	80077da <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800781c:	f7ff fc0c 	bl	8007038 <HAL_GetTick>
 8007820:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007822:	e015      	b.n	8007850 <HAL_RCC_OscConfig+0x484>
 8007824:	4b61      	ldr	r3, [pc, #388]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007826:	6a19      	ldr	r1, [r3, #32]
 8007828:	2302      	movs	r3, #2
 800782a:	fa93 f3a3 	rbit	r3, r3
 800782e:	fab3 f383 	clz	r3, r3
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2201      	movs	r2, #1
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	4219      	tst	r1, r3
 800783e:	d014      	beq.n	800786a <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007840:	f7ff fbfa 	bl	8007038 <HAL_GetTick>
 8007844:	1b80      	subs	r0, r0, r6
 8007846:	f241 3388 	movw	r3, #5000	; 0x1388
 800784a:	4298      	cmp	r0, r3
 800784c:	f200 80ca 	bhi.w	80079e4 <HAL_RCC_OscConfig+0x618>
 8007850:	2302      	movs	r3, #2
 8007852:	fa93 f2a3 	rbit	r2, r3
 8007856:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e2      	bne.n	8007824 <HAL_RCC_OscConfig+0x458>
 800785e:	2302      	movs	r3, #2
 8007860:	fa93 f3a3 	rbit	r3, r3
 8007864:	4b51      	ldr	r3, [pc, #324]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007866:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007868:	e7de      	b.n	8007828 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800786a:	bbb5      	cbnz	r5, 80078da <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800786c:	69e3      	ldr	r3, [r4, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80ba 	beq.w	80079e8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007874:	4a4d      	ldr	r2, [pc, #308]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	f002 020c 	and.w	r2, r2, #12
 800787c:	2a08      	cmp	r2, #8
 800787e:	f000 8099 	beq.w	80079b4 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007882:	2b02      	cmp	r3, #2
 8007884:	d02f      	beq.n	80078e6 <HAL_RCC_OscConfig+0x51a>
 8007886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800788a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788e:	fab3 f383 	clz	r3, r3
 8007892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a0:	f7ff fbca 	bl	8007038 <HAL_GetTick>
 80078a4:	4604      	mov	r4, r0
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078ae:	4b3f      	ldr	r3, [pc, #252]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80078b0:	6819      	ldr	r1, [r3, #0]
 80078b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b6:	fa93 f3a3 	rbit	r3, r3
 80078ba:	fab3 f383 	clz	r3, r3
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2201      	movs	r2, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	4219      	tst	r1, r3
 80078ca:	d06b      	beq.n	80079a4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078cc:	f7ff fbb4 	bl	8007038 <HAL_GetTick>
 80078d0:	1b00      	subs	r0, r0, r4
 80078d2:	2802      	cmp	r0, #2
 80078d4:	d9e7      	bls.n	80078a6 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80078d6:	2003      	movs	r0, #3
 80078d8:	e087      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80078da:	4a34      	ldr	r2, [pc, #208]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 80078dc:	69d3      	ldr	r3, [r2, #28]
 80078de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e2:	61d3      	str	r3, [r2, #28]
 80078e4:	e7c2      	b.n	800786c <HAL_RCC_OscConfig+0x4a0>
 80078e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078ea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80078ee:	fab3 f383 	clz	r3, r3
 80078f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80078f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007900:	f7ff fb9a 	bl	8007038 <HAL_GetTick>
 8007904:	4605      	mov	r5, r0
 8007906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800790a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800790e:	4b27      	ldr	r3, [pc, #156]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007916:	fa93 f3a3 	rbit	r3, r3
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2201      	movs	r2, #1
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	4219      	tst	r1, r3
 800792a:	d006      	beq.n	800793a <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800792c:	f7ff fb84 	bl	8007038 <HAL_GetTick>
 8007930:	1b40      	subs	r0, r0, r5
 8007932:	2802      	cmp	r0, #2
 8007934:	d9e7      	bls.n	8007906 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8007936:	2003      	movs	r0, #3
 8007938:	e057      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800793a:	491c      	ldr	r1, [pc, #112]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 800793c:	684b      	ldr	r3, [r1, #4]
 800793e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8007942:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007944:	6a20      	ldr	r0, [r4, #32]
 8007946:	4302      	orrs	r2, r0
 8007948:	4313      	orrs	r3, r2
 800794a:	604b      	str	r3, [r1, #4]
 800794c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007950:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8007954:	fab3 f383 	clz	r3, r3
 8007958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800795c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	2201      	movs	r2, #1
 8007964:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007966:	f7ff fb67 	bl	8007038 <HAL_GetTick>
 800796a:	4604      	mov	r4, r0
 800796c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007970:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007974:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <HAL_RCC_OscConfig+0x5e0>)
 8007976:	6819      	ldr	r1, [r3, #0]
 8007978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800797c:	fa93 f3a3 	rbit	r3, r3
 8007980:	fab3 f383 	clz	r3, r3
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2201      	movs	r2, #1
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	4219      	tst	r1, r3
 8007990:	d106      	bne.n	80079a0 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007992:	f7ff fb51 	bl	8007038 <HAL_GetTick>
 8007996:	1b00      	subs	r0, r0, r4
 8007998:	2802      	cmp	r0, #2
 800799a:	d9e7      	bls.n	800796c <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 800799c:	2003      	movs	r0, #3
 800799e:	e024      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80079a0:	2000      	movs	r0, #0
 80079a2:	e022      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
 80079a4:	2000      	movs	r0, #0
 80079a6:	e020      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
 80079a8:	10908120 	.word	0x10908120
 80079ac:	40021000 	.word	0x40021000
 80079b0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d01a      	beq.n	80079ee <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <HAL_RCC_OscConfig+0x630>)
 80079ba:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80079bc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80079c0:	6a22      	ldr	r2, [r4, #32]
 80079c2:	4291      	cmp	r1, r2
 80079c4:	d115      	bne.n	80079f2 <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80079c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80079ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d112      	bne.n	80079f6 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 80079d0:	2000      	movs	r0, #0
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 80079d4:	2001      	movs	r0, #1
}
 80079d6:	4770      	bx	lr
        return HAL_ERROR;
 80079d8:	2001      	movs	r0, #1
 80079da:	e006      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 80079dc:	2001      	movs	r0, #1
 80079de:	e004      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80079e0:	2003      	movs	r0, #3
 80079e2:	e002      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80079e4:	2003      	movs	r0, #3
 80079e6:	e000      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 80079e8:	2000      	movs	r0, #0
}
 80079ea:	b002      	add	sp, #8
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80079ee:	2001      	movs	r0, #1
 80079f0:	e7fb      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 80079f2:	2001      	movs	r0, #1
 80079f4:	e7f9      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
 80079f6:	2001      	movs	r0, #1
 80079f8:	e7f7      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
 80079fa:	bf00      	nop
 80079fc:	40021000 	.word	0x40021000

08007a00 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x48>)
 8007a02:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a04:	f002 030c 	and.w	r3, r2, #12
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d018      	beq.n	8007a3e <HAL_RCC_GetSysClockFreq+0x3e>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d118      	bne.n	8007a42 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007a10:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8007a14:	490d      	ldr	r1, [pc, #52]	; (8007a4c <HAL_RCC_GetSysClockFreq+0x4c>)
 8007a16:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x48>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	490b      	ldr	r1, [pc, #44]	; (8007a50 <HAL_RCC_GetSysClockFreq+0x50>)
 8007a22:	5cc9      	ldrb	r1, [r1, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007a24:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007a28:	d005      	beq.n	8007a36 <HAL_RCC_GetSysClockFreq+0x36>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a30:	fb03 f000 	mul.w	r0, r3, r0
 8007a34:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007a36:	4b08      	ldr	r3, [pc, #32]	; (8007a58 <HAL_RCC_GetSysClockFreq+0x58>)
 8007a38:	fb03 f000 	mul.w	r0, r3, r0
 8007a3c:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8007a3e:	4805      	ldr	r0, [pc, #20]	; (8007a54 <HAL_RCC_GetSysClockFreq+0x54>)
 8007a40:	4770      	bx	lr
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a42:	4806      	ldr	r0, [pc, #24]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x5c>)
      break;
    }
  }
  return sysclockfreq;
}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	08009b60 	.word	0x08009b60
 8007a50:	08009b70 	.word	0x08009b70
 8007a54:	00f42400 	.word	0x00f42400
 8007a58:	003d0900 	.word	0x003d0900
 8007a5c:	007a1200 	.word	0x007a1200

08007a60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f000 80be 	beq.w	8007be2 <HAL_RCC_ClockConfig+0x182>
{
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b61      	ldr	r3, [pc, #388]	; (8007bf4 <HAL_RCC_ClockConfig+0x194>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	428b      	cmp	r3, r1
 8007a76:	d20b      	bcs.n	8007a90 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a78:	4a5e      	ldr	r2, [pc, #376]	; (8007bf4 <HAL_RCC_ClockConfig+0x194>)
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	428b      	cmp	r3, r1
 8007a8c:	f040 80ab 	bne.w	8007be6 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	f013 0f02 	tst.w	r3, #2
 8007a96:	d006      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a98:	4a57      	ldr	r2, [pc, #348]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007a9a:	6853      	ldr	r3, [r2, #4]
 8007a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa0:	68a1      	ldr	r1, [r4, #8]
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f013 0f01 	tst.w	r3, #1
 8007aac:	d05a      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d02d      	beq.n	8007b10 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d040      	beq.n	8007b3a <HAL_RCC_ClockConfig+0xda>
 8007ab8:	2202      	movs	r2, #2
 8007aba:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007abe:	4a4e      	ldr	r2, [pc, #312]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007ac0:	6810      	ldr	r0, [r2, #0]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	fa92 f2a2 	rbit	r2, r2
 8007ac8:	fab2 f282 	clz	r2, r2
 8007acc:	f002 021f 	and.w	r2, r2, #31
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad6:	4210      	tst	r0, r2
 8007ad8:	f000 8087 	beq.w	8007bea <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007adc:	4946      	ldr	r1, [pc, #280]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007ade:	684a      	ldr	r2, [r1, #4]
 8007ae0:	f022 0203 	bic.w	r2, r2, #3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8007ae8:	f7ff faa6 	bl	8007038 <HAL_GetTick>
 8007aec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aee:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 030c 	and.w	r3, r3, #12
 8007af6:	6862      	ldr	r2, [r4, #4]
 8007af8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007afc:	d032      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007afe:	f7ff fa9b 	bl	8007038 <HAL_GetTick>
 8007b02:	1b80      	subs	r0, r0, r6
 8007b04:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	d9f0      	bls.n	8007aee <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8007b0c:	2003      	movs	r0, #3
 8007b0e:	e067      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
 8007b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b14:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b18:	4a37      	ldr	r2, [pc, #220]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007b1a:	6810      	ldr	r0, [r2, #0]
 8007b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b20:	fa92 f2a2 	rbit	r2, r2
 8007b24:	fab2 f282 	clz	r2, r2
 8007b28:	f002 021f 	and.w	r2, r2, #31
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b32:	4202      	tst	r2, r0
 8007b34:	d1d2      	bne.n	8007adc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8007b36:	2001      	movs	r0, #1
 8007b38:	e052      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
 8007b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b3e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b42:	4a2d      	ldr	r2, [pc, #180]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007b44:	6810      	ldr	r0, [r2, #0]
 8007b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b4a:	fa92 f2a2 	rbit	r2, r2
 8007b4e:	fab2 f282 	clz	r2, r2
 8007b52:	f002 021f 	and.w	r2, r2, #31
 8007b56:	2101      	movs	r1, #1
 8007b58:	fa01 f202 	lsl.w	r2, r1, r2
 8007b5c:	4210      	tst	r0, r2
 8007b5e:	d1bd      	bne.n	8007adc <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8007b60:	2001      	movs	r0, #1
 8007b62:	e03d      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b64:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <HAL_RCC_ClockConfig+0x194>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	42ab      	cmp	r3, r5
 8007b6e:	d90a      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b70:	4a20      	ldr	r2, [pc, #128]	; (8007bf4 <HAL_RCC_ClockConfig+0x194>)
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	432b      	orrs	r3, r5
 8007b7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	d133      	bne.n	8007bee <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	f013 0f04 	tst.w	r3, #4
 8007b8c:	d006      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8e:	4a1a      	ldr	r2, [pc, #104]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007b90:	6853      	ldr	r3, [r2, #4]
 8007b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b96:	68e1      	ldr	r1, [r4, #12]
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	f013 0f08 	tst.w	r3, #8
 8007ba2:	d007      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ba4:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007ba6:	6853      	ldr	r3, [r2, #4]
 8007ba8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007bac:	6921      	ldr	r1, [r4, #16]
 8007bae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007bb2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007bb4:	f7ff ff24 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
 8007bb8:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <HAL_RCC_ClockConfig+0x198>)
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc0:	22f0      	movs	r2, #240	; 0xf0
 8007bc2:	fa92 f2a2 	rbit	r2, r2
 8007bc6:	fab2 f282 	clz	r2, r2
 8007bca:	40d3      	lsrs	r3, r2
 8007bcc:	4a0b      	ldr	r2, [pc, #44]	; (8007bfc <HAL_RCC_ClockConfig+0x19c>)
 8007bce:	5cd3      	ldrb	r3, [r2, r3]
 8007bd0:	40d8      	lsrs	r0, r3
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_RCC_ClockConfig+0x1a0>)
 8007bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCC_ClockConfig+0x1a4>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f7ff f9e9 	bl	8006fb0 <HAL_InitTick>
  return HAL_OK;
 8007bde:	2000      	movs	r0, #0
}
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007be2:	2001      	movs	r0, #1
}
 8007be4:	4770      	bx	lr
      return HAL_ERROR;
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7fa      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8007bea:	2001      	movs	r0, #1
 8007bec:	e7f8      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e7f6      	b.n	8007be0 <HAL_RCC_ClockConfig+0x180>
 8007bf2:	bf00      	nop
 8007bf4:	40022000 	.word	0x40022000
 8007bf8:	40021000 	.word	0x40021000
 8007bfc:	08009b80 	.word	0x08009b80
 8007c00:	20000224 	.word	0x20000224
 8007c04:	20000220 	.word	0x20000220

08007c08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007c08:	4b01      	ldr	r3, [pc, #4]	; (8007c10 <HAL_RCC_GetHCLKFreq+0x8>)
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000224 	.word	0x20000224

08007c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007c16:	f7ff fff7 	bl	8007c08 <HAL_RCC_GetHCLKFreq>
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c26:	fa92 f2a2 	rbit	r2, r2
 8007c2a:	fab2 f282 	clz	r2, r2
 8007c2e:	40d3      	lsrs	r3, r2
 8007c30:	4a02      	ldr	r2, [pc, #8]	; (8007c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c32:	5cd3      	ldrb	r3, [r2, r3]
}    
 8007c34:	40d8      	lsrs	r0, r3
 8007c36:	bd08      	pop	{r3, pc}
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	08009b90 	.word	0x08009b90

08007c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c40:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007c42:	f7ff ffe1 	bl	8007c08 <HAL_RCC_GetHCLKFreq>
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007c4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007c52:	fa92 f2a2 	rbit	r2, r2
 8007c56:	fab2 f282 	clz	r2, r2
 8007c5a:	40d3      	lsrs	r3, r2
 8007c5c:	4a02      	ldr	r2, [pc, #8]	; (8007c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c5e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8007c60:	40d8      	lsrs	r0, r3
 8007c62:	bd08      	pop	{r3, pc}
 8007c64:	40021000 	.word	0x40021000
 8007c68:	08009b90 	.word	0x08009b90

08007c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c72:	6803      	ldr	r3, [r0, #0]
 8007c74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007c78:	d048      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c7a:	4b91      	ldr	r3, [pc, #580]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007c82:	f040 80d4 	bne.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c86:	4b8e      	ldr	r3, [pc, #568]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c8e:	61da      	str	r2, [r3, #28]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c9a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c9c:	4b89      	ldr	r3, [pc, #548]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007ca4:	f000 80c5 	beq.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ca8:	4b85      	ldr	r3, [pc, #532]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007caa:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007cb0:	d022      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8007cb2:	6862      	ldr	r2, [r4, #4]
 8007cb4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d01d      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cbc:	4880      	ldr	r0, [pc, #512]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007cbe:	6a01      	ldr	r1, [r0, #32]
 8007cc0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8007cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cc8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ccc:	fab2 f282 	clz	r2, r2
 8007cd0:	4f7d      	ldr	r7, [pc, #500]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007cd2:	443a      	add	r2, r7
 8007cd4:	0092      	lsls	r2, r2, #2
 8007cd6:	f04f 0c01 	mov.w	ip, #1
 8007cda:	f8c2 c000 	str.w	ip, [r2]
 8007cde:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ce2:	fab3 f383 	clz	r3, r3
 8007ce6:	443b      	add	r3, r7
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007cee:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007cf0:	f011 0f01 	tst.w	r1, #1
 8007cf4:	f040 80b2 	bne.w	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007cf8:	4a71      	ldr	r2, [pc, #452]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007cfa:	6a13      	ldr	r3, [r2, #32]
 8007cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d00:	6861      	ldr	r1, [r4, #4]
 8007d02:	430b      	orrs	r3, r1
 8007d04:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	f040 80cf 	bne.w	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	f013 0f01 	tst.w	r3, #1
 8007d12:	d006      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d14:	4a6a      	ldr	r2, [pc, #424]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d18:	f023 0303 	bic.w	r3, r3, #3
 8007d1c:	68a1      	ldr	r1, [r4, #8]
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	f013 0f02 	tst.w	r3, #2
 8007d28:	d006      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d2a:	4a65      	ldr	r2, [pc, #404]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d32:	68e1      	ldr	r1, [r4, #12]
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	f013 0f04 	tst.w	r3, #4
 8007d3e:	d006      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d40:	4a5f      	ldr	r2, [pc, #380]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d44:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007d48:	6921      	ldr	r1, [r4, #16]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f013 0f20 	tst.w	r3, #32
 8007d54:	d006      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d56:	4a5a      	ldr	r2, [pc, #360]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d5a:	f023 0310 	bic.w	r3, r3, #16
 8007d5e:	69e1      	ldr	r1, [r4, #28]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d6a:	d006      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007d6c:	4a54      	ldr	r2, [pc, #336]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d6e:	6853      	ldr	r3, [r2, #4]
 8007d70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007d74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d80:	d006      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d82:	4a4f      	ldr	r2, [pc, #316]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d86:	f023 0320 	bic.w	r3, r3, #32
 8007d8a:	6a21      	ldr	r1, [r4, #32]
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	f013 0f08 	tst.w	r3, #8
 8007d96:	d006      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d98:	4a49      	ldr	r2, [pc, #292]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007d9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007da0:	6961      	ldr	r1, [r4, #20]
 8007da2:	430b      	orrs	r3, r1
 8007da4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	f013 0f10 	tst.w	r3, #16
 8007dac:	d006      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dae:	4a44      	ldr	r2, [pc, #272]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007db2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007db6:	69a1      	ldr	r1, [r4, #24]
 8007db8:	430b      	orrs	r3, r1
 8007dba:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007dc2:	d006      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007dc4:	4a3e      	ldr	r2, [pc, #248]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007dc6:	6853      	ldr	r3, [r2, #4]
 8007dc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007dcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007dd8:	d006      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007dda:	4a39      	ldr	r2, [pc, #228]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007dde:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8007de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007de4:	430b      	orrs	r3, r1
 8007de6:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007dee:	d006      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007df0:	4a33      	ldr	r2, [pc, #204]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007df2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007df4:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8007df8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007e04:	d006      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007e06:	4a2e      	ldr	r2, [pc, #184]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007e08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007e1a:	d04d      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007e1c:	4a28      	ldr	r2, [pc, #160]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007e1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e26:	430b      	orrs	r3, r1
 8007e28:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e045      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 8007e2e:	2500      	movs	r5, #0
 8007e30:	e734      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e32:	4a24      	ldr	r2, [pc, #144]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e34:	6813      	ldr	r3, [r2, #0]
 8007e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007e3c:	f7ff f8fc 	bl	8007038 <HAL_GetTick>
 8007e40:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e42:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007e4a:	f47f af2d 	bne.w	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e4e:	f7ff f8f3 	bl	8007038 <HAL_GetTick>
 8007e52:	1b80      	subs	r0, r0, r6
 8007e54:	2864      	cmp	r0, #100	; 0x64
 8007e56:	d9f4      	bls.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8007e58:	2003      	movs	r0, #3
 8007e5a:	e02e      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8007e5c:	f7ff f8ec 	bl	8007038 <HAL_GetTick>
 8007e60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e62:	e015      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8007e64:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007e66:	6a19      	ldr	r1, [r3, #32]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	fa93 f3a3 	rbit	r3, r3
 8007e6e:	fab3 f383 	clz	r3, r3
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2201      	movs	r2, #1
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	420b      	tst	r3, r1
 8007e7e:	f47f af3b 	bne.w	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e82:	f7ff f8d9 	bl	8007038 <HAL_GetTick>
 8007e86:	1b80      	subs	r0, r0, r6
 8007e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	d811      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8007e90:	2302      	movs	r3, #2
 8007e92:	fa93 f2a3 	rbit	r2, r3
 8007e96:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e2      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	fa93 f3a3 	rbit	r3, r3
 8007ea4:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007ea6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ea8:	e7de      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eaa:	69d3      	ldr	r3, [r2, #28]
 8007eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eb0:	61d3      	str	r3, [r2, #28]
 8007eb2:	e72b      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8007eb4:	2003      	movs	r0, #3
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8007eb8:	2000      	movs	r0, #0
}
 8007eba:	b003      	add	sp, #12
 8007ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40021000 	.word	0x40021000
 8007ec4:	40007000 	.word	0x40007000
 8007ec8:	10908100 	.word	0x10908100

08007ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	4688      	mov	r8, r1
 8007ed6:	4617      	mov	r7, r2
 8007ed8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007eda:	f7ff f8ad 	bl	8007038 <HAL_GetTick>
 8007ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee0:	1a1b      	subs	r3, r3, r0
 8007ee2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8007ee6:	f7ff f8a7 	bl	8007038 <HAL_GetTick>
 8007eea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007ef4:	fb09 f303 	mul.w	r3, r9, r3
 8007ef8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	689c      	ldr	r4, [r3, #8]
 8007efe:	ea38 0304 	bics.w	r3, r8, r4
 8007f02:	bf0c      	ite	eq
 8007f04:	f04f 0c01 	moveq.w	ip, #1
 8007f08:	f04f 0c00 	movne.w	ip, #0
 8007f0c:	45bc      	cmp	ip, r7
 8007f0e:	d040      	beq.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f10:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007f14:	d0f1      	beq.n	8007efa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f16:	f7ff f88f 	bl	8007038 <HAL_GetTick>
 8007f1a:	eba0 000a 	sub.w	r0, r0, sl
 8007f1e:	4548      	cmp	r0, r9
 8007f20:	d20a      	bcs.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	d007      	beq.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	b102      	cbz	r2, 8007f2e <SPI_WaitFlagStateUntilTimeout+0x62>
 8007f2c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	4691      	mov	r9, r2
 8007f36:	e7e0      	b.n	8007efa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f38:	682a      	ldr	r2, [r5, #0]
 8007f3a:	6853      	ldr	r3, [r2, #4]
 8007f3c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007f40:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f42:	686b      	ldr	r3, [r5, #4]
 8007f44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f48:	d00b      	beq.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f50:	d014      	beq.n	8007f7c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007f5e:	2003      	movs	r0, #3
 8007f60:	e018      	b.n	8007f94 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f62:	68ab      	ldr	r3, [r5, #8]
 8007f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f68:	d002      	beq.n	8007f70 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6e:	d1ec      	bne.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8007f70:	682a      	ldr	r2, [r5, #0]
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e7e6      	b.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8007f7c:	682a      	ldr	r2, [r5, #0]
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	682a      	ldr	r2, [r5, #0]
 8007f88:	6813      	ldr	r3, [r2, #0]
 8007f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e7df      	b.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8007f92:	2000      	movs	r0, #0
}
 8007f94:	b002      	add	sp, #8
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000224 	.word	0x20000224

08007fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	4615      	mov	r5, r2
 8007fac:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fb4:	f7ff f840 	bl	8007038 <HAL_GetTick>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	1a1b      	subs	r3, r3, r0
 8007fbc:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8007fc0:	f7ff f83a 	bl	8007038 <HAL_GetTick>
 8007fc4:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fc6:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fca:	4b31      	ldr	r3, [pc, #196]	; (8008090 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fd2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007fd6:	0d1b      	lsrs	r3, r3, #20
 8007fd8:	fb08 f303 	mul.w	r3, r8, r3
 8007fdc:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007fde:	e002      	b.n	8007fe6 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fe0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8007fe4:	d112      	bne.n	800800c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8007fe6:	6833      	ldr	r3, [r6, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	ea03 0c04 	and.w	ip, r3, r4
 8007fee:	45ac      	cmp	ip, r5
 8007ff0:	d04a      	beq.n	8008088 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ff2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8007ff6:	d1f3      	bne.n	8007fe0 <SPI_WaitFifoStateUntilTimeout+0x40>
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	d1f1      	bne.n	8007fe0 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8007ffc:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8008006:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800800a:	e7e9      	b.n	8007fe0 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800800c:	f7ff f814 	bl	8007038 <HAL_GetTick>
 8008010:	eba0 0009 	sub.w	r0, r0, r9
 8008014:	4540      	cmp	r0, r8
 8008016:	d20a      	bcs.n	800802e <SPI_WaitFifoStateUntilTimeout+0x8e>
 8008018:	f1b8 0f00 	cmp.w	r8, #0
 800801c:	d007      	beq.n	800802e <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800801e:	9a01      	ldr	r2, [sp, #4]
 8008020:	b102      	cbz	r2, 8008024 <SPI_WaitFifoStateUntilTimeout+0x84>
 8008022:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	3b01      	subs	r3, #1
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	4690      	mov	r8, r2
 800802c:	e7db      	b.n	8007fe6 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800802e:	6832      	ldr	r2, [r6, #0]
 8008030:	6853      	ldr	r3, [r2, #4]
 8008032:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008036:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008038:	6873      	ldr	r3, [r6, #4]
 800803a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803e:	d00b      	beq.n	8008058 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008040:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008046:	d014      	beq.n	8008072 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8008048:	2301      	movs	r3, #1
 800804a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800804e:	2300      	movs	r3, #0
 8008050:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008054:	2003      	movs	r0, #3
 8008056:	e018      	b.n	800808a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008058:	68b3      	ldr	r3, [r6, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805e:	d002      	beq.n	8008066 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008064:	d1ec      	bne.n	8008040 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8008066:	6832      	ldr	r2, [r6, #0]
 8008068:	6813      	ldr	r3, [r2, #0]
 800806a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	e7e6      	b.n	8008040 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8008072:	6832      	ldr	r2, [r6, #0]
 8008074:	6813      	ldr	r3, [r2, #0]
 8008076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	6832      	ldr	r2, [r6, #0]
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	e7df      	b.n	8008048 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8008088:	2000      	movs	r0, #0
}
 800808a:	b002      	add	sp, #8
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	20000224 	.word	0x20000224

08008094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800809e:	9200      	str	r2, [sp, #0]
 80080a0:	460b      	mov	r3, r1
 80080a2:	2200      	movs	r2, #0
 80080a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80080a8:	f7ff ff7a 	bl	8007fa0 <SPI_WaitFifoStateUntilTimeout>
 80080ac:	b9b0      	cbnz	r0, 80080dc <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080ae:	9600      	str	r6, [sp, #0]
 80080b0:	462b      	mov	r3, r5
 80080b2:	2200      	movs	r2, #0
 80080b4:	2180      	movs	r1, #128	; 0x80
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ff08 	bl	8007ecc <SPI_WaitFlagStateUntilTimeout>
 80080bc:	b9a8      	cbnz	r0, 80080ea <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080be:	9600      	str	r6, [sp, #0]
 80080c0:	462b      	mov	r3, r5
 80080c2:	2200      	movs	r2, #0
 80080c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff ff69 	bl	8007fa0 <SPI_WaitFifoStateUntilTimeout>
 80080ce:	b150      	cbz	r0, 80080e6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80080d2:	f043 0320 	orr.w	r3, r3, #32
 80080d6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80080d8:	2003      	movs	r0, #3
 80080da:	e004      	b.n	80080e6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80080de:	f043 0320 	orr.w	r3, r3, #32
 80080e2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80080e4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80080e6:	b002      	add	sp, #8
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80080f2:	2003      	movs	r0, #3
 80080f4:	e7f7      	b.n	80080e6 <SPI_EndRxTxTransaction+0x52>

080080f6 <SPI_EndRxTransaction>:
{
 80080f6:	b570      	push	{r4, r5, r6, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008100:	6843      	ldr	r3, [r0, #4]
 8008102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008106:	d00d      	beq.n	8008124 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008108:	9600      	str	r6, [sp, #0]
 800810a:	462b      	mov	r3, r5
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff fedb 	bl	8007ecc <SPI_WaitFlagStateUntilTimeout>
 8008116:	b990      	cbnz	r0, 800813e <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800811e:	d014      	beq.n	800814a <SPI_EndRxTransaction+0x54>
}
 8008120:	b002      	add	sp, #8
 8008122:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008124:	6883      	ldr	r3, [r0, #8]
 8008126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812a:	d002      	beq.n	8008132 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008130:	d1ea      	bne.n	8008108 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	e7e4      	b.n	8008108 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800813e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008140:	f043 0320 	orr.w	r3, r3, #32
 8008144:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008146:	2003      	movs	r0, #3
 8008148:	e7ea      	b.n	8008120 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008150:	d002      	beq.n	8008158 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008156:	d1e3      	bne.n	8008120 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008158:	9600      	str	r6, [sp, #0]
 800815a:	462b      	mov	r3, r5
 800815c:	2200      	movs	r2, #0
 800815e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008162:	4620      	mov	r0, r4
 8008164:	f7ff ff1c 	bl	8007fa0 <SPI_WaitFifoStateUntilTimeout>
 8008168:	2800      	cmp	r0, #0
 800816a:	d0d9      	beq.n	8008120 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800816e:	f043 0320 	orr.w	r3, r3, #32
 8008172:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8008174:	2003      	movs	r0, #3
 8008176:	e7d3      	b.n	8008120 <SPI_EndRxTransaction+0x2a>

08008178 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008178:	2800      	cmp	r0, #0
 800817a:	d06f      	beq.n	800825c <HAL_SPI_Init+0xe4>
{
 800817c:	b510      	push	{r4, lr}
 800817e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008180:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008182:	b933      	cbnz	r3, 8008192 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008184:	6843      	ldr	r3, [r0, #4]
 8008186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818a:	d005      	beq.n	8008198 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800818c:	2300      	movs	r3, #0
 800818e:	61c3      	str	r3, [r0, #28]
 8008190:	e002      	b.n	8008198 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008192:	2300      	movs	r3, #0
 8008194:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008196:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008198:	2300      	movs	r3, #0
 800819a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800819c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d052      	beq.n	800824a <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 80081a4:	2302      	movs	r3, #2
 80081a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	6813      	ldr	r3, [r2, #0]
 80081ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081b4:	68e3      	ldr	r3, [r4, #12]
 80081b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081ba:	d94c      	bls.n	8008256 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081bc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80081c2:	d004      	beq.n	80081ce <HAL_SPI_Init+0x56>
 80081c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081c8:	d001      	beq.n	80081ce <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80081d4:	68a1      	ldr	r1, [r4, #8]
 80081d6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80081da:	430b      	orrs	r3, r1
 80081dc:	6921      	ldr	r1, [r4, #16]
 80081de:	f001 0102 	and.w	r1, r1, #2
 80081e2:	430b      	orrs	r3, r1
 80081e4:	6961      	ldr	r1, [r4, #20]
 80081e6:	f001 0101 	and.w	r1, r1, #1
 80081ea:	430b      	orrs	r3, r1
 80081ec:	69a1      	ldr	r1, [r4, #24]
 80081ee:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80081f2:	430b      	orrs	r3, r1
 80081f4:	69e1      	ldr	r1, [r4, #28]
 80081f6:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80081fa:	430b      	orrs	r3, r1
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008202:	430b      	orrs	r3, r1
 8008204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008206:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800820a:	6820      	ldr	r0, [r4, #0]
 800820c:	430b      	orrs	r3, r1
 800820e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008210:	8b63      	ldrh	r3, [r4, #26]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008218:	f001 0110 	and.w	r1, r1, #16
 800821c:	430b      	orrs	r3, r1
 800821e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008220:	f001 0108 	and.w	r1, r1, #8
 8008224:	430b      	orrs	r3, r1
 8008226:	68e1      	ldr	r1, [r4, #12]
 8008228:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800822c:	430b      	orrs	r3, r1
 800822e:	6821      	ldr	r1, [r4, #0]
 8008230:	4313      	orrs	r3, r2
 8008232:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	69d3      	ldr	r3, [r2, #28]
 8008238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800823c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800823e:	2000      	movs	r0, #0
 8008240:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008242:	2301      	movs	r3, #1
 8008244:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8008248:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800824a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800824e:	4620      	mov	r0, r4
 8008250:	f7fe fe7a 	bl	8006f48 <HAL_SPI_MspInit>
 8008254:	e7a6      	b.n	80081a4 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800825a:	e7b0      	b.n	80081be <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 800825c:	2001      	movs	r0, #1
}
 800825e:	4770      	bx	lr

08008260 <HAL_SPI_Transmit>:
{
 8008260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008264:	b083      	sub	sp, #12
 8008266:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8008268:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800826c:	2b01      	cmp	r3, #1
 800826e:	f000 80f4 	beq.w	800845a <HAL_SPI_Transmit+0x1fa>
 8008272:	4604      	mov	r4, r0
 8008274:	4688      	mov	r8, r1
 8008276:	4691      	mov	r9, r2
 8008278:	2301      	movs	r3, #1
 800827a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800827e:	f7fe fedb 	bl	8007038 <HAL_GetTick>
 8008282:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008284:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8008288:	b2f6      	uxtb	r6, r6
 800828a:	2e01      	cmp	r6, #1
 800828c:	f040 80dd 	bne.w	800844a <HAL_SPI_Transmit+0x1ea>
  if ((pData == NULL) || (Size == 0U))
 8008290:	f1b8 0f00 	cmp.w	r8, #0
 8008294:	f000 80da 	beq.w	800844c <HAL_SPI_Transmit+0x1ec>
 8008298:	f1b9 0f00 	cmp.w	r9, #0
 800829c:	f000 80d6 	beq.w	800844c <HAL_SPI_Transmit+0x1ec>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082a0:	2303      	movs	r3, #3
 80082a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082aa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80082ae:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80082b2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082b6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80082b8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80082bc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80082c0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80082c2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ca:	d01e      	beq.n	800830a <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80082d4:	d103      	bne.n	80082de <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082dc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082de:	68e3      	ldr	r3, [r4, #12]
 80082e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082e4:	d944      	bls.n	8008370 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	b113      	cbz	r3, 80082f0 <HAL_SPI_Transmit+0x90>
 80082ea:	f1b9 0f01 	cmp.w	r9, #1
 80082ee:	d120      	bne.n	8008332 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	8812      	ldrh	r2, [r2, #0]
 80082f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082fa:	3302      	adds	r3, #2
 80082fc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80082fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29b      	uxth	r3, r3
 8008306:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008308:	e013      	b.n	8008332 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008312:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008314:	6822      	ldr	r2, [r4, #0]
 8008316:	6813      	ldr	r3, [r2, #0]
 8008318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	e7d5      	b.n	80082cc <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008320:	f7fe fe8a 	bl	8007038 <HAL_GetTick>
 8008324:	1bc0      	subs	r0, r0, r7
 8008326:	42a8      	cmp	r0, r5
 8008328:	d302      	bcc.n	8008330 <HAL_SPI_Transmit+0xd0>
 800832a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800832e:	d11a      	bne.n	8008366 <HAL_SPI_Transmit+0x106>
 8008330:	b1cd      	cbz	r5, 8008366 <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8008332:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d06f      	beq.n	800841a <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	f012 0f02 	tst.w	r2, #2
 8008342:	d0ed      	beq.n	8008320 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008344:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008346:	8812      	ldrh	r2, [r2, #0]
 8008348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800834a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800834c:	3302      	adds	r3, #2
 800834e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008350:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8008354:	fa1f fc8c 	uxth.w	ip, ip
 8008358:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800835c:	fa1f fc8c 	uxth.w	ip, ip
 8008360:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8008364:	e7e5      	b.n	8008332 <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8008366:	2301      	movs	r3, #1
 8008368:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 800836c:	2603      	movs	r6, #3
          goto error;
 800836e:	e06d      	b.n	800844c <HAL_SPI_Transmit+0x1ec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008370:	6863      	ldr	r3, [r4, #4]
 8008372:	b113      	cbz	r3, 800837a <HAL_SPI_Transmit+0x11a>
 8008374:	f1b9 0f01 	cmp.w	r9, #1
 8008378:	d132      	bne.n	80083e0 <HAL_SPI_Transmit+0x180>
      if (hspi->TxXferCount > 1U)
 800837a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b01      	cmp	r3, #1
 8008380:	d90c      	bls.n	800839c <HAL_SPI_Transmit+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008382:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	8812      	ldrh	r2, [r2, #0]
 8008388:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800838a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800838c:	3302      	adds	r3, #2
 800838e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008390:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b02      	subs	r3, #2
 8008396:	b29b      	uxth	r3, r3
 8008398:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800839a:	e021      	b.n	80083e0 <HAL_SPI_Transmit+0x180>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800839c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80083a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083a6:	3301      	adds	r3, #1
 80083a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80083aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80083b4:	e014      	b.n	80083e0 <HAL_SPI_Transmit+0x180>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80083bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083be:	3301      	adds	r3, #1
 80083c0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80083c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80083cc:	e008      	b.n	80083e0 <HAL_SPI_Transmit+0x180>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ce:	f7fe fe33 	bl	8007038 <HAL_GetTick>
 80083d2:	1bc0      	subs	r0, r0, r7
 80083d4:	42a8      	cmp	r0, r5
 80083d6:	d302      	bcc.n	80083de <HAL_SPI_Transmit+0x17e>
 80083d8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80083dc:	d118      	bne.n	8008410 <HAL_SPI_Transmit+0x1b0>
 80083de:	b1bd      	cbz	r5, 8008410 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 80083e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	b1cb      	cbz	r3, 800841a <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	6893      	ldr	r3, [r2, #8]
 80083ea:	f013 0f02 	tst.w	r3, #2
 80083ee:	d0ee      	beq.n	80083ce <HAL_SPI_Transmit+0x16e>
        if (hspi->TxXferCount > 1U)
 80083f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d9de      	bls.n	80083b6 <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008400:	3302      	adds	r3, #2
 8008402:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008404:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b02      	subs	r3, #2
 800840a:	b29b      	uxth	r3, r3
 800840c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800840e:	e7e7      	b.n	80083e0 <HAL_SPI_Transmit+0x180>
          hspi->State = HAL_SPI_STATE_READY;
 8008410:	2301      	movs	r3, #1
 8008412:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8008416:	2603      	movs	r6, #3
          goto error;
 8008418:	e018      	b.n	800844c <HAL_SPI_Transmit+0x1ec>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800841a:	463a      	mov	r2, r7
 800841c:	4629      	mov	r1, r5
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff fe38 	bl	8008094 <SPI_EndRxTxTransaction>
 8008424:	b108      	cbz	r0, 800842a <HAL_SPI_Transmit+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008426:	2320      	movs	r3, #32
 8008428:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	b933      	cbnz	r3, 800843c <HAL_SPI_Transmit+0x1dc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	9201      	str	r2, [sp, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800843c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800843e:	b92b      	cbnz	r3, 800844c <HAL_SPI_Transmit+0x1ec>
    hspi->State = HAL_SPI_STATE_READY;
 8008440:	2301      	movs	r3, #1
 8008442:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008446:	2600      	movs	r6, #0
 8008448:	e000      	b.n	800844c <HAL_SPI_Transmit+0x1ec>
    errorcode = HAL_BUSY;
 800844a:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 800844c:	2300      	movs	r3, #0
 800844e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008452:	4630      	mov	r0, r6
 8008454:	b003      	add	sp, #12
 8008456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800845a:	2602      	movs	r6, #2
 800845c:	e7f9      	b.n	8008452 <HAL_SPI_Transmit+0x1f2>

0800845e <HAL_SPI_TransmitReceive>:
{
 800845e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008462:	461f      	mov	r7, r3
 8008464:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8008466:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800846a:	2b01      	cmp	r3, #1
 800846c:	f000 816b 	beq.w	8008746 <HAL_SPI_TransmitReceive+0x2e8>
 8008470:	4604      	mov	r4, r0
 8008472:	4688      	mov	r8, r1
 8008474:	4691      	mov	r9, r2
 8008476:	2301      	movs	r3, #1
 8008478:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800847c:	f7fe fddc 	bl	8007038 <HAL_GetTick>
 8008480:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8008482:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008486:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8008488:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800848a:	2b01      	cmp	r3, #1
 800848c:	d00a      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x46>
 800848e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8008492:	f040 8146 	bne.w	8008722 <HAL_SPI_TransmitReceive+0x2c4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008496:	68a2      	ldr	r2, [r4, #8]
 8008498:	2a00      	cmp	r2, #0
 800849a:	f040 8148 	bne.w	800872e <HAL_SPI_TransmitReceive+0x2d0>
 800849e:	2b04      	cmp	r3, #4
 80084a0:	f040 8147 	bne.w	8008732 <HAL_SPI_TransmitReceive+0x2d4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084a4:	f1b8 0f00 	cmp.w	r8, #0
 80084a8:	f000 8145 	beq.w	8008736 <HAL_SPI_TransmitReceive+0x2d8>
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	f000 8143 	beq.w	800873a <HAL_SPI_TransmitReceive+0x2dc>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f000 8142 	beq.w	800873e <HAL_SPI_TransmitReceive+0x2e0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084ba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d002      	beq.n	80084ca <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084c4:	2305      	movs	r3, #5
 80084c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084ca:	2300      	movs	r3, #0
 80084cc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084ce:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80084d2:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80084d6:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084da:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80084de:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80084e0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80084e2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084e4:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084ec:	d801      	bhi.n	80084f2 <HAL_SPI_TransmitReceive+0x94>
 80084ee:	2f01      	cmp	r7, #1
 80084f0:	d923      	bls.n	800853a <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	6853      	ldr	r3, [r2, #4]
 80084f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084fa:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008504:	d103      	bne.n	800850e <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008514:	d95c      	bls.n	80085d0 <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008516:	6863      	ldr	r3, [r4, #4]
 8008518:	b10b      	cbz	r3, 800851e <HAL_SPI_TransmitReceive+0xc0>
 800851a:	2f01      	cmp	r7, #1
 800851c:	d10b      	bne.n	8008536 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	8812      	ldrh	r2, [r2, #0]
 8008524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008528:	3302      	adds	r3, #2
 800852a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800852c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	b29b      	uxth	r3, r3
 8008534:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008536:	2701      	movs	r7, #1
 8008538:	e030      	b.n	800859c <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	6853      	ldr	r3, [r2, #4]
 800853e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008542:	6053      	str	r3, [r2, #4]
 8008544:	e7da      	b.n	80084fc <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008546:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008548:	8812      	ldrh	r2, [r2, #0]
 800854a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800854c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800854e:	3302      	adds	r3, #2
 8008550:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008552:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800855c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	f012 0f01 	tst.w	r2, #1
 8008566:	d011      	beq.n	800858c <HAL_SPI_TransmitReceive+0x12e>
 8008568:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800856c:	b292      	uxth	r2, r2
 800856e:	b16a      	cbz	r2, 800858c <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008574:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008578:	3302      	adds	r3, #2
 800857a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800857c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800858a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800858c:	f7fe fd54 	bl	8007038 <HAL_GetTick>
 8008590:	1b83      	subs	r3, r0, r6
 8008592:	42ab      	cmp	r3, r5
 8008594:	d302      	bcc.n	800859c <HAL_SPI_TransmitReceive+0x13e>
 8008596:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800859a:	d114      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x168>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800859c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800859e:	b29b      	uxth	r3, r3
 80085a0:	b92b      	cbnz	r3, 80085ae <HAL_SPI_TransmitReceive+0x150>
 80085a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80ab 	beq.w	8008704 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	f012 0f02 	tst.w	r2, #2
 80085b6:	d0d2      	beq.n	800855e <HAL_SPI_TransmitReceive+0x100>
 80085b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80085ba:	b292      	uxth	r2, r2
 80085bc:	2a00      	cmp	r2, #0
 80085be:	d0ce      	beq.n	800855e <HAL_SPI_TransmitReceive+0x100>
 80085c0:	2f00      	cmp	r7, #0
 80085c2:	d0cc      	beq.n	800855e <HAL_SPI_TransmitReceive+0x100>
 80085c4:	e7bf      	b.n	8008546 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 80085cc:	2003      	movs	r0, #3
        goto error;
 80085ce:	e0a9      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	b10b      	cbz	r3, 80085d8 <HAL_SPI_TransmitReceive+0x17a>
 80085d4:	2f01      	cmp	r7, #1
 80085d6:	d10f      	bne.n	80085f8 <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 80085d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d90d      	bls.n	80085fc <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	8812      	ldrh	r2, [r2, #0]
 80085e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085ea:	3302      	adds	r3, #2
 80085ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b02      	subs	r3, #2
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80085f8:	2701      	movs	r7, #1
 80085fa:	e049      	b.n	8008690 <HAL_SPI_TransmitReceive+0x232>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008606:	3301      	adds	r3, #1
 8008608:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800860a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29b      	uxth	r3, r3
 8008612:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008614:	e7f0      	b.n	80085f8 <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 8008616:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008618:	b292      	uxth	r2, r2
 800861a:	2a01      	cmp	r2, #1
 800861c:	d90c      	bls.n	8008638 <HAL_SPI_TransmitReceive+0x1da>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800861e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008620:	8812      	ldrh	r2, [r2, #0]
 8008622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008624:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008626:	3302      	adds	r3, #2
 8008628:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800862a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b02      	subs	r3, #2
 8008630:	b29b      	uxth	r3, r3
 8008632:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008634:	2700      	movs	r7, #0
 8008636:	e03d      	b.n	80086b4 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008638:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800863e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008640:	3301      	adds	r3, #1
 8008642:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008644:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29b      	uxth	r3, r3
 800864c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800864e:	2700      	movs	r7, #0
 8008650:	e030      	b.n	80086b4 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	6853      	ldr	r3, [r2, #4]
 8008656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800865a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800865c:	2701      	movs	r7, #1
 800865e:	e00d      	b.n	800867c <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008660:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008662:	7b1b      	ldrb	r3, [r3, #12]
 8008664:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8008666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008668:	3301      	adds	r3, #1
 800866a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800866c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29b      	uxth	r3, r3
 8008676:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800867a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800867c:	f7fe fcdc 	bl	8007038 <HAL_GetTick>
 8008680:	1b80      	subs	r0, r0, r6
 8008682:	42a8      	cmp	r0, r5
 8008684:	d302      	bcc.n	800868c <HAL_SPI_TransmitReceive+0x22e>
 8008686:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800868a:	d136      	bne.n	80086fa <HAL_SPI_TransmitReceive+0x29c>
 800868c:	2d00      	cmp	r5, #0
 800868e:	d034      	beq.n	80086fa <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008690:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008692:	b29b      	uxth	r3, r3
 8008694:	b923      	cbnz	r3, 80086a0 <HAL_SPI_TransmitReceive+0x242>
 8008696:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800869a:	b29b      	uxth	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d031      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	f012 0f02 	tst.w	r2, #2
 80086a8:	d004      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0x256>
 80086aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80086ac:	b292      	uxth	r2, r2
 80086ae:	b10a      	cbz	r2, 80086b4 <HAL_SPI_TransmitReceive+0x256>
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	d1b0      	bne.n	8008616 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	f012 0f01 	tst.w	r2, #1
 80086bc:	d0de      	beq.n	800867c <HAL_SPI_TransmitReceive+0x21e>
 80086be:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80086c2:	b292      	uxth	r2, r2
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	d0d9      	beq.n	800867c <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 80086c8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80086cc:	b292      	uxth	r2, r2
 80086ce:	2a01      	cmp	r2, #1
 80086d0:	d9c6      	bls.n	8008660 <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80086d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086da:	3302      	adds	r3, #2
 80086dc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80086de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b02      	subs	r3, #2
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80086ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d9ad      	bls.n	8008652 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 80086f6:	2701      	movs	r7, #1
 80086f8:	e7c0      	b.n	800867c <HAL_SPI_TransmitReceive+0x21e>
        hspi->State = HAL_SPI_STATE_READY;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 8008700:	2003      	movs	r0, #3
        goto error;
 8008702:	e00f      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008704:	4632      	mov	r2, r6
 8008706:	4629      	mov	r1, r5
 8008708:	4620      	mov	r0, r4
 800870a:	f7ff fcc3 	bl	8008094 <SPI_EndRxTxTransaction>
 800870e:	b110      	cbz	r0, 8008716 <HAL_SPI_TransmitReceive+0x2b8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008710:	2320      	movs	r3, #32
 8008712:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008714:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008716:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008718:	b99b      	cbnz	r3, 8008742 <HAL_SPI_TransmitReceive+0x2e4>
    hspi->State = HAL_SPI_STATE_READY;
 800871a:	2301      	movs	r3, #1
 800871c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8008720:	e000      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_BUSY;
 8008722:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8008724:	2300      	movs	r3, #0
 8008726:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800872e:	2002      	movs	r0, #2
 8008730:	e7f8      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
 8008732:	2002      	movs	r0, #2
 8008734:	e7f6      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8008736:	2001      	movs	r0, #1
 8008738:	e7f4      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
 800873a:	2001      	movs	r0, #1
 800873c:	e7f2      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
 800873e:	2001      	movs	r0, #1
 8008740:	e7f0      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8008742:	2001      	movs	r0, #1
 8008744:	e7ee      	b.n	8008724 <HAL_SPI_TransmitReceive+0x2c6>
  __HAL_LOCK(hspi);
 8008746:	2002      	movs	r0, #2
 8008748:	e7ef      	b.n	800872a <HAL_SPI_TransmitReceive+0x2cc>

0800874a <HAL_SPI_Receive>:
{
 800874a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800874e:	b083      	sub	sp, #12
 8008750:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008752:	f890 605d 	ldrb.w	r6, [r0, #93]	; 0x5d
 8008756:	b2f6      	uxtb	r6, r6
 8008758:	2e01      	cmp	r6, #1
 800875a:	f040 80c0 	bne.w	80088de <HAL_SPI_Receive+0x194>
 800875e:	4688      	mov	r8, r1
 8008760:	4691      	mov	r9, r2
 8008762:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008764:	6843      	ldr	r3, [r0, #4]
 8008766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800876a:	d03d      	beq.n	80087e8 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 800876c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8008770:	2b01      	cmp	r3, #1
 8008772:	f000 80bc 	beq.w	80088ee <HAL_SPI_Receive+0x1a4>
 8008776:	2301      	movs	r3, #1
 8008778:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800877c:	f7fe fc5c 	bl	8007038 <HAL_GetTick>
 8008780:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8008782:	f1b8 0f00 	cmp.w	r8, #0
 8008786:	f000 80ab 	beq.w	80088e0 <HAL_SPI_Receive+0x196>
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	f000 80a7 	beq.w	80088e0 <HAL_SPI_Receive+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008792:	2304      	movs	r3, #4
 8008794:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008798:	2300      	movs	r3, #0
 800879a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800879c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80087a0:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80087a4:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087a8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80087aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80087ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80087ae:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80087b0:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087b8:	d923      	bls.n	8008802 <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	6853      	ldr	r3, [r2, #4]
 80087be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c2:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ca:	d020      	beq.n	800880e <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80087d4:	d103      	bne.n	80087de <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087dc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087e4:	d927      	bls.n	8008836 <HAL_SPI_Receive+0xec>
 80087e6:	e04c      	b.n	8008882 <HAL_SPI_Receive+0x138>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087e8:	6883      	ldr	r3, [r0, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1be      	bne.n	800876c <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087ee:	2304      	movs	r3, #4
 80087f0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087f4:	9500      	str	r5, [sp, #0]
 80087f6:	4613      	mov	r3, r2
 80087f8:	460a      	mov	r2, r1
 80087fa:	f7ff fe30 	bl	800845e <HAL_SPI_TransmitReceive>
 80087fe:	4606      	mov	r6, r0
 8008800:	e071      	b.n	80088e6 <HAL_SPI_Receive+0x19c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008802:	6822      	ldr	r2, [r4, #0]
 8008804:	6853      	ldr	r3, [r2, #4]
 8008806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800880a:	6053      	str	r3, [r2, #4]
 800880c:	e7da      	b.n	80087c4 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 800880e:	6822      	ldr	r2, [r4, #0]
 8008810:	6813      	ldr	r3, [r2, #0]
 8008812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008816:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	e7d3      	b.n	80087cc <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008824:	f7fe fc08 	bl	8007038 <HAL_GetTick>
 8008828:	1bc0      	subs	r0, r0, r7
 800882a:	42a8      	cmp	r0, r5
 800882c:	d302      	bcc.n	8008834 <HAL_SPI_Receive+0xea>
 800882e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008832:	d118      	bne.n	8008866 <HAL_SPI_Receive+0x11c>
 8008834:	b1bd      	cbz	r5, 8008866 <HAL_SPI_Receive+0x11c>
    while (hspi->RxXferCount > 0U)
 8008836:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d03f      	beq.n	80088c0 <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	f012 0f01 	tst.w	r2, #1
 8008848:	d0ec      	beq.n	8008824 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800884a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800884c:	7b1b      	ldrb	r3, [r3, #12]
 800884e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008852:	3301      	adds	r3, #1
 8008854:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008856:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800885a:	b29b      	uxth	r3, r3
 800885c:	3b01      	subs	r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008864:	e7e7      	b.n	8008836 <HAL_SPI_Receive+0xec>
          hspi->State = HAL_SPI_STATE_READY;
 8008866:	2301      	movs	r3, #1
 8008868:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 800886c:	2603      	movs	r6, #3
          goto error;
 800886e:	e037      	b.n	80088e0 <HAL_SPI_Receive+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008870:	f7fe fbe2 	bl	8007038 <HAL_GetTick>
 8008874:	1bc0      	subs	r0, r0, r7
 8008876:	42a8      	cmp	r0, r5
 8008878:	d302      	bcc.n	8008880 <HAL_SPI_Receive+0x136>
 800887a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800887e:	d11a      	bne.n	80088b6 <HAL_SPI_Receive+0x16c>
 8008880:	b1cd      	cbz	r5, 80088b6 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 8008882:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008886:	b29b      	uxth	r3, r3
 8008888:	b1d3      	cbz	r3, 80088c0 <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	f012 0f01 	tst.w	r2, #1
 8008892:	d0ed      	beq.n	8008870 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800889a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800889c:	3302      	adds	r3, #2
 800889e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80088a0:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 80088a4:	fa1f fc8c 	uxth.w	ip, ip
 80088a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80088ac:	fa1f fc8c 	uxth.w	ip, ip
 80088b0:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 80088b4:	e7e5      	b.n	8008882 <HAL_SPI_Receive+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 80088bc:	2603      	movs	r6, #3
          goto error;
 80088be:	e00f      	b.n	80088e0 <HAL_SPI_Receive+0x196>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088c0:	463a      	mov	r2, r7
 80088c2:	4629      	mov	r1, r5
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7ff fc16 	bl	80080f6 <SPI_EndRxTransaction>
 80088ca:	b108      	cbz	r0, 80088d0 <HAL_SPI_Receive+0x186>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088cc:	2320      	movs	r3, #32
 80088ce:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80088d2:	b92b      	cbnz	r3, 80088e0 <HAL_SPI_Receive+0x196>
    hspi->State = HAL_SPI_STATE_READY;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088da:	2600      	movs	r6, #0
 80088dc:	e000      	b.n	80088e0 <HAL_SPI_Receive+0x196>
    errorcode = HAL_BUSY;
 80088de:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80088e0:	2300      	movs	r3, #0
 80088e2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80088e6:	4630      	mov	r0, r6
 80088e8:	b003      	add	sp, #12
 80088ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80088ee:	2602      	movs	r6, #2
 80088f0:	e7f9      	b.n	80088e6 <HAL_SPI_Receive+0x19c>

080088f2 <HAL_SPI_GetState>:
  return hspi->State;
 80088f2:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80088f6:	4770      	bx	lr

080088f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088fa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088fc:	6a04      	ldr	r4, [r0, #32]
 80088fe:	f024 0401 	bic.w	r4, r4, #1
 8008902:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008904:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008906:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800890a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800890e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8008912:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008914:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008916:	6203      	str	r3, [r0, #32]
}
 8008918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800891c:	4770      	bx	lr

0800891e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800891e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008920:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008922:	6a04      	ldr	r4, [r0, #32]
 8008924:	f024 0410 	bic.w	r4, r4, #16
 8008928:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800892c:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008930:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008938:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800893c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800893e:	6203      	str	r3, [r0, #32]
}
 8008940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008946:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894c:	430b      	orrs	r3, r1
 800894e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008952:	6083      	str	r3, [r0, #8]
}
 8008954:	4770      	bx	lr
	...

08008958 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008958:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800895a:	4a30      	ldr	r2, [pc, #192]	; (8008a1c <TIM_Base_SetConfig+0xc4>)
 800895c:	4290      	cmp	r0, r2
 800895e:	d00e      	beq.n	800897e <TIM_Base_SetConfig+0x26>
 8008960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008964:	d00b      	beq.n	800897e <TIM_Base_SetConfig+0x26>
 8008966:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800896a:	4290      	cmp	r0, r2
 800896c:	d007      	beq.n	800897e <TIM_Base_SetConfig+0x26>
 800896e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008972:	4290      	cmp	r0, r2
 8008974:	d003      	beq.n	800897e <TIM_Base_SetConfig+0x26>
 8008976:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800897a:	4290      	cmp	r0, r2
 800897c:	d103      	bne.n	8008986 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008982:	684a      	ldr	r2, [r1, #4]
 8008984:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008986:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <TIM_Base_SetConfig+0xc4>)
 8008988:	4290      	cmp	r0, r2
 800898a:	d01a      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 800898c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008990:	d017      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 8008992:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008996:	4290      	cmp	r0, r2
 8008998:	d013      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 800899a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800899e:	4290      	cmp	r0, r2
 80089a0:	d00f      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 80089a2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80089a6:	4290      	cmp	r0, r2
 80089a8:	d00b      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 80089aa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80089ae:	4290      	cmp	r0, r2
 80089b0:	d007      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 80089b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089b6:	4290      	cmp	r0, r2
 80089b8:	d003      	beq.n	80089c2 <TIM_Base_SetConfig+0x6a>
 80089ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089be:	4290      	cmp	r0, r2
 80089c0:	d103      	bne.n	80089ca <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c6:	68ca      	ldr	r2, [r1, #12]
 80089c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ce:	694a      	ldr	r2, [r1, #20]
 80089d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80089d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d4:	688b      	ldr	r3, [r1, #8]
 80089d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80089d8:	680b      	ldr	r3, [r1, #0]
 80089da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <TIM_Base_SetConfig+0xc4>)
 80089de:	4298      	cmp	r0, r3
 80089e0:	d00f      	beq.n	8008a02 <TIM_Base_SetConfig+0xaa>
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	4298      	cmp	r0, r3
 80089e8:	d00b      	beq.n	8008a02 <TIM_Base_SetConfig+0xaa>
 80089ea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80089ee:	4298      	cmp	r0, r3
 80089f0:	d007      	beq.n	8008a02 <TIM_Base_SetConfig+0xaa>
 80089f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f6:	4298      	cmp	r0, r3
 80089f8:	d003      	beq.n	8008a02 <TIM_Base_SetConfig+0xaa>
 80089fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fe:	4298      	cmp	r0, r3
 8008a00:	d101      	bne.n	8008a06 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008a06:	2301      	movs	r3, #1
 8008a08:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a0a:	6903      	ldr	r3, [r0, #16]
 8008a0c:	f013 0f01 	tst.w	r3, #1
 8008a10:	d003      	beq.n	8008a1a <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a12:	6903      	ldr	r3, [r0, #16]
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	6103      	str	r3, [r0, #16]
}
 8008a1a:	4770      	bx	lr
 8008a1c:	40012c00 	.word	0x40012c00

08008a20 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008a20:	b360      	cbz	r0, 8008a7c <HAL_TIM_Base_Init+0x5c>
{
 8008a22:	b510      	push	{r4, lr}
 8008a24:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008a26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a2a:	b313      	cbz	r3, 8008a72 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a32:	4621      	mov	r1, r4
 8008a34:	f851 0b04 	ldr.w	r0, [r1], #4
 8008a38:	f7ff ff8e 	bl	8008958 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008a46:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008a4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008a4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008a52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008a66:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008a6e:	2000      	movs	r0, #0
}
 8008a70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008a72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008a76:	f000 fd33 	bl	80094e0 <HAL_TIM_Base_MspInit>
 8008a7a:	e7d7      	b.n	8008a2c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008a7c:	2001      	movs	r0, #1
}
 8008a7e:	4770      	bx	lr

08008a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a80:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a82:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a84:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a92:	6082      	str	r2, [r0, #8]
}
 8008a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008a9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d076      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0xf6>
{
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008ab4:	6802      	ldr	r2, [r0, #0]
 8008ab6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ab8:	4b37      	ldr	r3, [pc, #220]	; (8008b98 <HAL_TIM_ConfigClockSource+0xfc>)
 8008aba:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8008abc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008abe:	680b      	ldr	r3, [r1, #0]
 8008ac0:	2b60      	cmp	r3, #96	; 0x60
 8008ac2:	d04c      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0xc2>
 8008ac4:	d829      	bhi.n	8008b1a <HAL_TIM_ConfigClockSource+0x7e>
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d054      	beq.n	8008b74 <HAL_TIM_ConfigClockSource+0xd8>
 8008aca:	d90c      	bls.n	8008ae6 <HAL_TIM_ConfigClockSource+0x4a>
 8008acc:	2b50      	cmp	r3, #80	; 0x50
 8008ace:	d122      	bne.n	8008b16 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad0:	68ca      	ldr	r2, [r1, #12]
 8008ad2:	6849      	ldr	r1, [r1, #4]
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	f7ff ff0f 	bl	80088f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ada:	2150      	movs	r1, #80	; 0x50
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	f7ff ff32 	bl	8008946 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008ae2:	2000      	movs	r0, #0
      break;
 8008ae4:	e005      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d00d      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x6a>
 8008aea:	d909      	bls.n	8008b00 <HAL_TIM_ConfigClockSource+0x64>
 8008aec:	2b30      	cmp	r3, #48	; 0x30
 8008aee:	d00a      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8008af0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008af8:	2300      	movs	r3, #0
 8008afa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008afe:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8008b00:	b10b      	cbz	r3, 8008b06 <HAL_TIM_ConfigClockSource+0x6a>
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d105      	bne.n	8008b12 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b06:	4619      	mov	r1, r3
 8008b08:	6820      	ldr	r0, [r4, #0]
 8008b0a:	f7ff ff1c 	bl	8008946 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008b0e:	2000      	movs	r0, #0
      break;
 8008b10:	e7ef      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8008b12:	2001      	movs	r0, #1
 8008b14:	e7ed      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
 8008b16:	2001      	movs	r0, #1
 8008b18:	e7eb      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1e:	d034      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0xee>
 8008b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b24:	d10c      	bne.n	8008b40 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8008b26:	68cb      	ldr	r3, [r1, #12]
 8008b28:	684a      	ldr	r2, [r1, #4]
 8008b2a:	6889      	ldr	r1, [r1, #8]
 8008b2c:	6820      	ldr	r0, [r4, #0]
 8008b2e:	f7ff ffa7 	bl	8008a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	6893      	ldr	r3, [r2, #8]
 8008b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b3a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3c:	2000      	movs	r0, #0
      break;
 8008b3e:	e7d8      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8008b40:	2b70      	cmp	r3, #112	; 0x70
 8008b42:	d124      	bne.n	8008b8e <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8008b44:	68cb      	ldr	r3, [r1, #12]
 8008b46:	684a      	ldr	r2, [r1, #4]
 8008b48:	6889      	ldr	r1, [r1, #8]
 8008b4a:	6820      	ldr	r0, [r4, #0]
 8008b4c:	f7ff ff98 	bl	8008a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008b58:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b5a:	2000      	movs	r0, #0
      break;
 8008b5c:	e7c9      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b5e:	68ca      	ldr	r2, [r1, #12]
 8008b60:	6849      	ldr	r1, [r1, #4]
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	f7ff fedb 	bl	800891e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b68:	2160      	movs	r1, #96	; 0x60
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	f7ff feeb 	bl	8008946 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008b70:	2000      	movs	r0, #0
      break;
 8008b72:	e7be      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b74:	68ca      	ldr	r2, [r1, #12]
 8008b76:	6849      	ldr	r1, [r1, #4]
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	f7ff febd 	bl	80088f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b7e:	2140      	movs	r1, #64	; 0x40
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	f7ff fee0 	bl	8008946 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008b86:	2000      	movs	r0, #0
      break;
 8008b88:	e7b3      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	e7b1      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8008b8e:	2001      	movs	r0, #1
 8008b90:	e7af      	b.n	8008af2 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8008b92:	2002      	movs	r0, #2
}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	fffe0088 	.word	0xfffe0088

08008b9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d03e      	beq.n	8008c22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8008ba4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	2302      	movs	r3, #2
 8008bae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb2:	6802      	ldr	r2, [r0, #0]
 8008bb4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb6:	6894      	ldr	r4, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bb8:	4d1b      	ldr	r5, [pc, #108]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8008bba:	42aa      	cmp	r2, r5
 8008bbc:	d003      	beq.n	8008bc6 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8008bbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008bc2:	42aa      	cmp	r2, r5
 8008bc4:	d103      	bne.n	8008bce <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bca:	684d      	ldr	r5, [r1, #4]
 8008bcc:	432b      	orrs	r3, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bd2:	680d      	ldr	r5, [r1, #0]
 8008bd4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd8:	6803      	ldr	r3, [r0, #0]
 8008bda:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d012      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be4:	d00f      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008be6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00b      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d007      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008bf6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008bfe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d104      	bne.n	8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c06:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c0a:	688a      	ldr	r2, [r1, #8]
 8008c0c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c0e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c10:	2301      	movs	r3, #1
 8008c12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c16:	2300      	movs	r3, #0
 8008c18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008c1c:	4618      	mov	r0, r3
}
 8008c1e:	bc30      	pop	{r4, r5}
 8008c20:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008c22:	2002      	movs	r0, #2
}
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40012c00 	.word	0x40012c00

08008c2c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c2c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	e852 3f00 	ldrex	r3, [r2]
 8008c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	e842 3100 	strex	r1, r3, [r2]
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	d1f6      	bne.n	8008c2c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c3e:	2320      	movs	r3, #32
 8008c40:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8008c42:	4770      	bx	lr

08008c44 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	e852 3f00 	ldrex	r3, [r2]
 8008c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	e842 3100 	strex	r1, r3, [r2]
 8008c52:	2900      	cmp	r1, #0
 8008c54:	d1f6      	bne.n	8008c44 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	f102 0308 	add.w	r3, r2, #8
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	3208      	adds	r2, #8
 8008c66:	e842 3100 	strex	r1, r3, [r2]
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	d1f3      	bne.n	8008c56 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d006      	beq.n	8008c82 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c74:	2320      	movs	r3, #32
 8008c76:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c7e:	6683      	str	r3, [r0, #104]	; 0x68
}
 8008c80:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	e852 3f00 	ldrex	r3, [r2]
 8008c88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	e842 3100 	strex	r1, r3, [r2]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d1f6      	bne.n	8008c82 <UART_EndRxTransfer+0x3e>
 8008c94:	e7ee      	b.n	8008c74 <UART_EndRxTransfer+0x30>
	...

08008c98 <HAL_UART_Transmit_DMA>:
{
 8008c98:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008c9a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8008c9c:	2a20      	cmp	r2, #32
 8008c9e:	d13b      	bne.n	8008d18 <HAL_UART_Transmit_DMA+0x80>
{
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d039      	beq.n	8008d1c <HAL_UART_Transmit_DMA+0x84>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d039      	beq.n	8008d20 <HAL_UART_Transmit_DMA+0x88>
    huart->pTxBuffPtr  = pData;
 8008cac:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008cae:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8008cb2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cbc:	2221      	movs	r2, #33	; 0x21
 8008cbe:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8008cc0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008cc2:	b1c2      	cbz	r2, 8008cf6 <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cc4:	4917      	ldr	r1, [pc, #92]	; (8008d24 <HAL_UART_Transmit_DMA+0x8c>)
 8008cc6:	6291      	str	r1, [r2, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cc8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008cca:	4917      	ldr	r1, [pc, #92]	; (8008d28 <HAL_UART_Transmit_DMA+0x90>)
 8008ccc:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cce:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008cd0:	4916      	ldr	r1, [pc, #88]	; (8008d2c <HAL_UART_Transmit_DMA+0x94>)
 8008cd2:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferAbortCallback = NULL;
 8008cd4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008cda:	6802      	ldr	r2, [r0, #0]
 8008cdc:	3228      	adds	r2, #40	; 0x28
 8008cde:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008ce0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8008ce2:	f7fe fa37 	bl	8007154 <HAL_DMA_Start_IT>
 8008ce6:	b130      	cbz	r0, 8008cf6 <HAL_UART_Transmit_DMA+0x5e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->gState = HAL_UART_STATE_READY;
 8008cee:	2320      	movs	r3, #32
 8008cf0:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	e00f      	b.n	8008d16 <HAL_UART_Transmit_DMA+0x7e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	2240      	movs	r2, #64	; 0x40
 8008cfa:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	f102 0308 	add.w	r3, r2, #8
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	3208      	adds	r2, #8
 8008d0c:	e842 3100 	strex	r1, r3, [r2]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d1f3      	bne.n	8008cfc <HAL_UART_Transmit_DMA+0x64>
    return HAL_OK;
 8008d14:	2000      	movs	r0, #0
}
 8008d16:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008d18:	2002      	movs	r0, #2
}
 8008d1a:	4770      	bx	lr
      return HAL_ERROR;
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7fa      	b.n	8008d16 <HAL_UART_Transmit_DMA+0x7e>
 8008d20:	2001      	movs	r0, #1
 8008d22:	e7f8      	b.n	8008d16 <HAL_UART_Transmit_DMA+0x7e>
 8008d24:	08008d33 	.word	0x08008d33
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	08008d85 	.word	0x08008d85

08008d30 <HAL_UART_TxCpltCallback>:
}
 8008d30:	4770      	bx	lr

08008d32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d32:	b508      	push	{r3, lr}
 8008d34:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d36:	6a40      	ldr	r0, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d018      	beq.n	8008d70 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	f102 0308 	add.w	r3, r2, #8
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	3208      	adds	r2, #8
 8008d54:	e842 3100 	strex	r1, r3, [r2]
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	d1f3      	bne.n	8008d44 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	e852 3f00 	ldrex	r3, [r2]
 8008d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	e842 3100 	strex	r1, r3, [r2]
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	d1f6      	bne.n	8008d5c <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d6e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008d70:	f7ff ffde 	bl	8008d30 <HAL_UART_TxCpltCallback>
}
 8008d74:	e7fb      	b.n	8008d6e <UART_DMATransmitCplt+0x3c>

08008d76 <HAL_UART_TxHalfCpltCallback>:
}
 8008d76:	4770      	bx	lr

08008d78 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d78:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008d7c:	f7ff fffb 	bl	8008d76 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d80:	bd08      	pop	{r3, pc}

08008d82 <HAL_UART_ErrorCallback>:
}
 8008d82:	4770      	bx	lr

08008d84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d84:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d86:	6a44      	ldr	r4, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d88:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d8a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d96:	d001      	beq.n	8008d9c <UART_DMAError+0x18>
 8008d98:	2a21      	cmp	r2, #33	; 0x21
 8008d9a:	d010      	beq.n	8008dbe <UART_DMAError+0x3a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008da4:	d001      	beq.n	8008daa <UART_DMAError+0x26>
 8008da6:	2d22      	cmp	r5, #34	; 0x22
 8008da8:	d010      	beq.n	8008dcc <UART_DMAError+0x48>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008daa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008dae:	f043 0310 	orr.w	r3, r3, #16
 8008db2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff ffe3 	bl	8008d82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff ff31 	bl	8008c2c <UART_EndTxTransfer>
 8008dca:	e7e7      	b.n	8008d9c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7ff ff36 	bl	8008c44 <UART_EndRxTransfer>
 8008dd8:	e7e7      	b.n	8008daa <UART_DMAError+0x26>
	...

08008ddc <UART_SetConfig>:
{
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008de0:	6883      	ldr	r3, [r0, #8]
 8008de2:	6902      	ldr	r2, [r0, #16]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	6942      	ldr	r2, [r0, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	69c2      	ldr	r2, [r0, #28]
 8008dec:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dee:	6801      	ldr	r1, [r0, #0]
 8008df0:	680b      	ldr	r3, [r1, #0]
 8008df2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008df6:	f023 030c 	bic.w	r3, r3, #12
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfe:	6802      	ldr	r2, [r0, #0]
 8008e00:	6853      	ldr	r3, [r2, #4]
 8008e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e06:	68c1      	ldr	r1, [r0, #12]
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e0c:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8008e0e:	6a03      	ldr	r3, [r0, #32]
 8008e10:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e12:	6801      	ldr	r1, [r0, #0]
 8008e14:	688b      	ldr	r3, [r1, #8]
 8008e16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e1e:	6803      	ldr	r3, [r0, #0]
 8008e20:	4a7b      	ldr	r2, [pc, #492]	; (8009010 <UART_SetConfig+0x234>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00d      	beq.n	8008e42 <UART_SetConfig+0x66>
 8008e26:	4a7b      	ldr	r2, [pc, #492]	; (8009014 <UART_SetConfig+0x238>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d01c      	beq.n	8008e66 <UART_SetConfig+0x8a>
 8008e2c:	4a7a      	ldr	r2, [pc, #488]	; (8009018 <UART_SetConfig+0x23c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d03a      	beq.n	8008ea8 <UART_SetConfig+0xcc>
 8008e32:	4a7a      	ldr	r2, [pc, #488]	; (800901c <UART_SetConfig+0x240>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d04a      	beq.n	8008ece <UART_SetConfig+0xf2>
 8008e38:	4a79      	ldr	r2, [pc, #484]	; (8009020 <UART_SetConfig+0x244>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d05a      	beq.n	8008ef4 <UART_SetConfig+0x118>
 8008e3e:	2310      	movs	r3, #16
 8008e40:	e01f      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008e42:	4b78      	ldr	r3, [pc, #480]	; (8009024 <UART_SetConfig+0x248>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d809      	bhi.n	8008e62 <UART_SetConfig+0x86>
 8008e4e:	e8df f003 	tbb	[pc, r3]
 8008e52:	0402      	.short	0x0402
 8008e54:	6406      	.short	0x6406
 8008e56:	2301      	movs	r3, #1
 8008e58:	e013      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	e011      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e00f      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008e62:	2310      	movs	r3, #16
 8008e64:	e00d      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008e66:	4b6f      	ldr	r3, [pc, #444]	; (8009024 <UART_SetConfig+0x248>)
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e72:	d054      	beq.n	8008f1e <UART_SetConfig+0x142>
 8008e74:	d813      	bhi.n	8008e9e <UART_SetConfig+0xc2>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d053      	beq.n	8008f22 <UART_SetConfig+0x146>
 8008e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7e:	d152      	bne.n	8008f26 <UART_SetConfig+0x14a>
 8008e80:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e82:	69e0      	ldr	r0, [r4, #28]
 8008e84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e88:	d069      	beq.n	8008f5e <UART_SetConfig+0x182>
    switch (clocksource)
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	f200 80b9 	bhi.w	8009002 <UART_SetConfig+0x226>
 8008e90:	e8df f003 	tbb	[pc, r3]
 8008e94:	b790a892 	.word	0xb790a892
 8008e98:	b7b7b7ab 	.word	0xb7b7b7ab
 8008e9c:	ae          	.byte	0xae
 8008e9d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ea2:	d142      	bne.n	8008f2a <UART_SetConfig+0x14e>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e7ec      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008ea8:	4b5e      	ldr	r3, [pc, #376]	; (8009024 <UART_SetConfig+0x248>)
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008eb4:	d03b      	beq.n	8008f2e <UART_SetConfig+0x152>
 8008eb6:	d805      	bhi.n	8008ec4 <UART_SetConfig+0xe8>
 8008eb8:	b3db      	cbz	r3, 8008f32 <UART_SetConfig+0x156>
 8008eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ebe:	d13a      	bne.n	8008f36 <UART_SetConfig+0x15a>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	e7de      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008ec4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ec8:	d137      	bne.n	8008f3a <UART_SetConfig+0x15e>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e7d9      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008ece:	4b55      	ldr	r3, [pc, #340]	; (8009024 <UART_SetConfig+0x248>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eda:	d030      	beq.n	8008f3e <UART_SetConfig+0x162>
 8008edc:	d805      	bhi.n	8008eea <UART_SetConfig+0x10e>
 8008ede:	b383      	cbz	r3, 8008f42 <UART_SetConfig+0x166>
 8008ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ee4:	d12f      	bne.n	8008f46 <UART_SetConfig+0x16a>
 8008ee6:	2304      	movs	r3, #4
 8008ee8:	e7cb      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008eea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008eee:	d12c      	bne.n	8008f4a <UART_SetConfig+0x16e>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e7c6      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008ef4:	4b4b      	ldr	r3, [pc, #300]	; (8009024 <UART_SetConfig+0x248>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f00:	d025      	beq.n	8008f4e <UART_SetConfig+0x172>
 8008f02:	d805      	bhi.n	8008f10 <UART_SetConfig+0x134>
 8008f04:	b32b      	cbz	r3, 8008f52 <UART_SetConfig+0x176>
 8008f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f0a:	d124      	bne.n	8008f56 <UART_SetConfig+0x17a>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	e7b8      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f14:	d121      	bne.n	8008f5a <UART_SetConfig+0x17e>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e7b3      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e7b1      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f1e:	2308      	movs	r3, #8
 8008f20:	e7af      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f22:	2300      	movs	r3, #0
 8008f24:	e7ad      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f26:	2310      	movs	r3, #16
 8008f28:	e7ab      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f2a:	2310      	movs	r3, #16
 8008f2c:	e7a9      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f2e:	2308      	movs	r3, #8
 8008f30:	e7a7      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e7a5      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f36:	2310      	movs	r3, #16
 8008f38:	e7a3      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f3a:	2310      	movs	r3, #16
 8008f3c:	e7a1      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f3e:	2308      	movs	r3, #8
 8008f40:	e79f      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f42:	2300      	movs	r3, #0
 8008f44:	e79d      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f46:	2310      	movs	r3, #16
 8008f48:	e79b      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f4a:	2310      	movs	r3, #16
 8008f4c:	e799      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f4e:	2308      	movs	r3, #8
 8008f50:	e797      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f52:	2300      	movs	r3, #0
 8008f54:	e795      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f56:	2310      	movs	r3, #16
 8008f58:	e793      	b.n	8008e82 <UART_SetConfig+0xa6>
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	e791      	b.n	8008e82 <UART_SetConfig+0xa6>
    switch (clocksource)
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d849      	bhi.n	8008ff6 <UART_SetConfig+0x21a>
 8008f62:	e8df f003 	tbb	[pc, r3]
 8008f66:	1f05      	.short	0x1f05
 8008f68:	48224825 	.word	0x48224825
 8008f6c:	4848      	.short	0x4848
 8008f6e:	09          	.byte	0x09
 8008f6f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f70:	f7fe fe50 	bl	8007c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d040      	beq.n	8008ffa <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f78:	6862      	ldr	r2, [r4, #4]
 8008f7a:	0853      	lsrs	r3, r2, #1
 8008f7c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008f80:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f84:	f1a0 0210 	sub.w	r2, r0, #16
 8008f88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d836      	bhi.n	8008ffe <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f90:	b283      	uxth	r3, r0
 8008f92:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f96:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8008f9a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	60d8      	str	r0, [r3, #12]
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e01b      	b.n	8008fdc <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fa4:	f7fe fe4c 	bl	8007c40 <HAL_RCC_GetPCLK2Freq>
        break;
 8008fa8:	e7e4      	b.n	8008f74 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8008faa:	f7fe fd29 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
        break;
 8008fae:	e7e1      	b.n	8008f74 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 8008fb0:	481d      	ldr	r0, [pc, #116]	; (8009028 <UART_SetConfig+0x24c>)
 8008fb2:	e7e1      	b.n	8008f78 <UART_SetConfig+0x19c>
    switch (clocksource)
 8008fb4:	481c      	ldr	r0, [pc, #112]	; (8009028 <UART_SetConfig+0x24c>)
 8008fb6:	e002      	b.n	8008fbe <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fb8:	f7fe fe2c 	bl	8007c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008fbc:	b318      	cbz	r0, 8009006 <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008fc4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fc8:	f1a0 0210 	sub.w	r2, r0, #16
 8008fcc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d81a      	bhi.n	800900a <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	b280      	uxth	r0, r0
 8008fd8:	60d8      	str	r0, [r3, #12]
 8008fda:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8008fe0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008fe2:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fe4:	f7fe fe2c 	bl	8007c40 <HAL_RCC_GetPCLK2Freq>
        break;
 8008fe8:	e7e8      	b.n	8008fbc <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8008fea:	f7fe fd09 	bl	8007a00 <HAL_RCC_GetSysClockFreq>
        break;
 8008fee:	e7e5      	b.n	8008fbc <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8008ff0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008ff4:	e7e3      	b.n	8008fbe <UART_SetConfig+0x1e2>
    switch (clocksource)
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e7f0      	b.n	8008fdc <UART_SetConfig+0x200>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	e7ee      	b.n	8008fdc <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7ec      	b.n	8008fdc <UART_SetConfig+0x200>
    switch (clocksource)
 8009002:	2001      	movs	r0, #1
 8009004:	e7ea      	b.n	8008fdc <UART_SetConfig+0x200>
 8009006:	2000      	movs	r0, #0
 8009008:	e7e8      	b.n	8008fdc <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 800900a:	2001      	movs	r0, #1
 800900c:	e7e6      	b.n	8008fdc <UART_SetConfig+0x200>
 800900e:	bf00      	nop
 8009010:	40013800 	.word	0x40013800
 8009014:	40004400 	.word	0x40004400
 8009018:	40004800 	.word	0x40004800
 800901c:	40004c00 	.word	0x40004c00
 8009020:	40005000 	.word	0x40005000
 8009024:	40021000 	.word	0x40021000
 8009028:	007a1200 	.word	0x007a1200

0800902c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800902c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800902e:	f013 0f08 	tst.w	r3, #8
 8009032:	d006      	beq.n	8009042 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009034:	6802      	ldr	r2, [r0, #0]
 8009036:	6853      	ldr	r3, [r2, #4]
 8009038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800903c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800903e:	430b      	orrs	r3, r1
 8009040:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009042:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009044:	f013 0f01 	tst.w	r3, #1
 8009048:	d006      	beq.n	8009058 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800904a:	6802      	ldr	r2, [r0, #0]
 800904c:	6853      	ldr	r3, [r2, #4]
 800904e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009052:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009054:	430b      	orrs	r3, r1
 8009056:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009058:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800905a:	f013 0f02 	tst.w	r3, #2
 800905e:	d006      	beq.n	800906e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009060:	6802      	ldr	r2, [r0, #0]
 8009062:	6853      	ldr	r3, [r2, #4]
 8009064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009068:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800906a:	430b      	orrs	r3, r1
 800906c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800906e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009070:	f013 0f04 	tst.w	r3, #4
 8009074:	d006      	beq.n	8009084 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009076:	6802      	ldr	r2, [r0, #0]
 8009078:	6853      	ldr	r3, [r2, #4]
 800907a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800907e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009080:	430b      	orrs	r3, r1
 8009082:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009084:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009086:	f013 0f10 	tst.w	r3, #16
 800908a:	d006      	beq.n	800909a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800908c:	6802      	ldr	r2, [r0, #0]
 800908e:	6893      	ldr	r3, [r2, #8]
 8009090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009094:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009096:	430b      	orrs	r3, r1
 8009098:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800909a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800909c:	f013 0f20 	tst.w	r3, #32
 80090a0:	d006      	beq.n	80090b0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090a2:	6802      	ldr	r2, [r0, #0]
 80090a4:	6893      	ldr	r3, [r2, #8]
 80090a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80090b6:	d00a      	beq.n	80090ce <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	6853      	ldr	r3, [r2, #4]
 80090bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80090c2:	430b      	orrs	r3, r1
 80090c4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090cc:	d00b      	beq.n	80090e6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090d4:	d006      	beq.n	80090e4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d6:	6802      	ldr	r2, [r0, #0]
 80090d8:	6853      	ldr	r3, [r2, #4]
 80090da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80090de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6053      	str	r3, [r2, #4]
}
 80090e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090e6:	6802      	ldr	r2, [r0, #0]
 80090e8:	6853      	ldr	r3, [r2, #4]
 80090ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80090ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6053      	str	r3, [r2, #4]
 80090f4:	e7eb      	b.n	80090ce <UART_AdvFeatureConfig+0xa2>

080090f6 <UART_WaitOnFlagUntilTimeout>:
{
 80090f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fa:	4605      	mov	r5, r0
 80090fc:	460e      	mov	r6, r1
 80090fe:	4617      	mov	r7, r2
 8009100:	4699      	mov	r9, r3
 8009102:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009106:	682c      	ldr	r4, [r5, #0]
 8009108:	69e4      	ldr	r4, [r4, #28]
 800910a:	ea36 0304 	bics.w	r3, r6, r4
 800910e:	bf0c      	ite	eq
 8009110:	f04f 0c01 	moveq.w	ip, #1
 8009114:	f04f 0c00 	movne.w	ip, #0
 8009118:	45bc      	cmp	ip, r7
 800911a:	d136      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0x94>
    if (Timeout != HAL_MAX_DELAY)
 800911c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009120:	d0f1      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009122:	f7fd ff89 	bl	8007038 <HAL_GetTick>
 8009126:	eba0 0009 	sub.w	r0, r0, r9
 800912a:	4540      	cmp	r0, r8
 800912c:	d830      	bhi.n	8009190 <UART_WaitOnFlagUntilTimeout+0x9a>
 800912e:	f1b8 0f00 	cmp.w	r8, #0
 8009132:	d02f      	beq.n	8009194 <UART_WaitOnFlagUntilTimeout+0x9e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	f012 0f04 	tst.w	r2, #4
 800913c:	d0e3      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0x10>
 800913e:	2e80      	cmp	r6, #128	; 0x80
 8009140:	d0e1      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0x10>
 8009142:	2e40      	cmp	r6, #64	; 0x40
 8009144:	d0df      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	f012 0f08 	tst.w	r2, #8
 800914c:	d111      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009154:	d0d7      	beq.n	8009106 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800915a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800915c:	4628      	mov	r0, r5
 800915e:	f7ff fd71 	bl	8008c44 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009162:	2320      	movs	r3, #32
 8009164:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009168:	2300      	movs	r3, #0
 800916a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 800916e:	2003      	movs	r0, #3
 8009170:	e00c      	b.n	800918c <UART_WaitOnFlagUntilTimeout+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009172:	2408      	movs	r4, #8
 8009174:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8009176:	4628      	mov	r0, r5
 8009178:	f7ff fd64 	bl	8008c44 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800917c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009180:	2300      	movs	r3, #0
 8009182:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_ERROR;
 8009186:	2001      	movs	r0, #1
 8009188:	e000      	b.n	800918c <UART_WaitOnFlagUntilTimeout+0x96>
  return HAL_OK;
 800918a:	2000      	movs	r0, #0
}
 800918c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8009190:	2003      	movs	r0, #3
 8009192:	e7fb      	b.n	800918c <UART_WaitOnFlagUntilTimeout+0x96>
 8009194:	2003      	movs	r0, #3
 8009196:	e7f9      	b.n	800918c <UART_WaitOnFlagUntilTimeout+0x96>

08009198 <HAL_UART_Transmit>:
{
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80091a0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	d156      	bne.n	8009254 <HAL_UART_Transmit+0xbc>
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d055      	beq.n	800925c <HAL_UART_Transmit+0xc4>
 80091b0:	b90a      	cbnz	r2, 80091b6 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 80091b2:	2001      	movs	r0, #1
 80091b4:	e04f      	b.n	8009256 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091bc:	2321      	movs	r3, #33	; 0x21
 80091be:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80091c0:	f7fd ff3a 	bl	8007038 <HAL_GetTick>
 80091c4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80091c6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80091ca:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	d002      	beq.n	80091dc <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	e018      	b.n	800920e <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091dc:	6923      	ldr	r3, [r4, #16]
 80091de:	b113      	cbz	r3, 80091e6 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 80091e0:	f04f 0800 	mov.w	r8, #0
 80091e4:	e013      	b.n	800920e <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 80091e6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80091e8:	2500      	movs	r5, #0
 80091ea:	e010      	b.n	800920e <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80091ec:	2320      	movs	r3, #32
 80091ee:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80091f0:	2003      	movs	r0, #3
 80091f2:	e030      	b.n	8009256 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091f4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8009200:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8009204:	b292      	uxth	r2, r2
 8009206:	3a01      	subs	r2, #1
 8009208:	b292      	uxth	r2, r2
 800920a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800920e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8009212:	b29b      	uxth	r3, r3
 8009214:	b17b      	cbz	r3, 8009236 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009216:	9600      	str	r6, [sp, #0]
 8009218:	463b      	mov	r3, r7
 800921a:	2200      	movs	r2, #0
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	4620      	mov	r0, r4
 8009220:	f7ff ff69 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 8009224:	2800      	cmp	r0, #0
 8009226:	d1e1      	bne.n	80091ec <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8009228:	2d00      	cmp	r5, #0
 800922a:	d0e3      	beq.n	80091f4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009232:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009234:	e7e4      	b.n	8009200 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009236:	9600      	str	r6, [sp, #0]
 8009238:	463b      	mov	r3, r7
 800923a:	2200      	movs	r2, #0
 800923c:	2140      	movs	r1, #64	; 0x40
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff ff59 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 8009244:	b910      	cbnz	r0, 800924c <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8009246:	2320      	movs	r3, #32
 8009248:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800924a:	e004      	b.n	8009256 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 800924c:	2320      	movs	r3, #32
 800924e:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8009250:	2003      	movs	r0, #3
 8009252:	e000      	b.n	8009256 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8009254:	2002      	movs	r0, #2
}
 8009256:	b002      	add	sp, #8
 8009258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800925c:	2001      	movs	r0, #1
 800925e:	e7fa      	b.n	8009256 <HAL_UART_Transmit+0xbe>

08009260 <UART_CheckIdleState>:
{
 8009260:	b530      	push	{r4, r5, lr}
 8009262:	b083      	sub	sp, #12
 8009264:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	2300      	movs	r3, #0
 8009268:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800926c:	f7fd fee4 	bl	8007038 <HAL_GetTick>
 8009270:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	f012 0f08 	tst.w	r2, #8
 800927a:	d10f      	bne.n	800929c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f013 0f04 	tst.w	r3, #4
 8009284:	d126      	bne.n	80092d4 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8009286:	2320      	movs	r3, #32
 8009288:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800928a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	2000      	movs	r0, #0
 8009290:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009292:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8009294:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8009298:	b003      	add	sp, #12
 800929a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800929c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	4603      	mov	r3, r0
 80092a4:	2200      	movs	r2, #0
 80092a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff ff23 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d0e3      	beq.n	800927c <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80092b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	e852 3f00 	ldrex	r3, [r2]
 80092ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	e842 3100 	strex	r1, r3, [r2]
 80092c2:	2900      	cmp	r1, #0
 80092c4:	d1f6      	bne.n	80092b4 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 80092c6:	2320      	movs	r3, #32
 80092c8:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80092ca:	2300      	movs	r3, #0
 80092cc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 80092d0:	2003      	movs	r0, #3
 80092d2:	e7e1      	b.n	8009298 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	462b      	mov	r3, r5
 80092dc:	2200      	movs	r2, #0
 80092de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff ff07 	bl	80090f6 <UART_WaitOnFlagUntilTimeout>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d0cc      	beq.n	8009286 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	e852 3f00 	ldrex	r3, [r2]
 80092f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	e842 3100 	strex	r1, r3, [r2]
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d1f6      	bne.n	80092ec <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	f102 0308 	add.w	r3, r2, #8
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	3208      	adds	r2, #8
 800930e:	e842 3100 	strex	r1, r3, [r2]
 8009312:	2900      	cmp	r1, #0
 8009314:	d1f3      	bne.n	80092fe <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8009316:	2320      	movs	r3, #32
 8009318:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 800931c:	2300      	movs	r3, #0
 800931e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8009322:	2003      	movs	r0, #3
 8009324:	e7b8      	b.n	8009298 <UART_CheckIdleState+0x38>

08009326 <HAL_UART_Init>:
  if (huart == NULL)
 8009326:	b368      	cbz	r0, 8009384 <HAL_UART_Init+0x5e>
{
 8009328:	b510      	push	{r4, lr}
 800932a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800932c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800932e:	b303      	cbz	r3, 8009372 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8009330:	2324      	movs	r3, #36	; 0x24
 8009332:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800933e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009340:	b9e3      	cbnz	r3, 800937c <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fd4a 	bl	8008ddc <UART_SetConfig>
 8009348:	2801      	cmp	r0, #1
 800934a:	d011      	beq.n	8009370 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	6853      	ldr	r3, [r2, #4]
 8009350:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009354:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	6893      	ldr	r3, [r2, #8]
 800935a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800935e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff ff78 	bl	8009260 <UART_CheckIdleState>
}
 8009370:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009372:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8009376:	f000 f8e3 	bl	8009540 <HAL_UART_MspInit>
 800937a:	e7d9      	b.n	8009330 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800937c:	4620      	mov	r0, r4
 800937e:	f7ff fe55 	bl	800902c <UART_AdvFeatureConfig>
 8009382:	e7de      	b.n	8009342 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8009384:	2001      	movs	r0, #1
}
 8009386:	4770      	bx	lr

08009388 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009388:	e7fe      	b.n	8009388 <NMI_Handler>

0800938a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800938a:	e7fe      	b.n	800938a <HardFault_Handler>

0800938c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800938c:	e7fe      	b.n	800938c <MemManage_Handler>

0800938e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800938e:	e7fe      	b.n	800938e <BusFault_Handler>

08009390 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009390:	e7fe      	b.n	8009390 <UsageFault_Handler>

08009392 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009392:	4770      	bx	lr

08009394 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009394:	4770      	bx	lr

08009396 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009396:	4770      	bx	lr

08009398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800939a:	f7fd fe41 	bl	8007020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800939e:	bd08      	pop	{r3, pc}

080093a0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80093a0:	2001      	movs	r0, #1
 80093a2:	4770      	bx	lr

080093a4 <_kill>:

int _kill(int pid, int sig)
{
 80093a4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80093a6:	f7f6 ff75 	bl	8000294 <__errno>
 80093aa:	2316      	movs	r3, #22
 80093ac:	6003      	str	r3, [r0, #0]
  return -1;
}
 80093ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b2:	bd08      	pop	{r3, pc}

080093b4 <_exit>:

void _exit (int status)
{
 80093b4:	b508      	push	{r3, lr}
  _kill(status, -1);
 80093b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093ba:	f7ff fff3 	bl	80093a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80093be:	e7fe      	b.n	80093be <_exit+0xa>

080093c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093c6:	2500      	movs	r5, #0
 80093c8:	e006      	b.n	80093d8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80093ca:	f3af 8000 	nop.w
 80093ce:	4621      	mov	r1, r4
 80093d0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093d4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80093d6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093d8:	42b5      	cmp	r5, r6
 80093da:	dbf6      	blt.n	80093ca <_read+0xa>
  }

  return len;
}
 80093dc:	4630      	mov	r0, r6
 80093de:	bd70      	pop	{r4, r5, r6, pc}

080093e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093e6:	2500      	movs	r5, #0
 80093e8:	e004      	b.n	80093f4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80093ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093f2:	3501      	adds	r5, #1
 80093f4:	42b5      	cmp	r5, r6
 80093f6:	dbf8      	blt.n	80093ea <_write+0xa>
  }
  return len;
}
 80093f8:	4630      	mov	r0, r6
 80093fa:	bd70      	pop	{r4, r5, r6, pc}

080093fc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009400:	4770      	bx	lr

08009402 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8009402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009406:	604b      	str	r3, [r1, #4]
  return 0;
}
 8009408:	2000      	movs	r0, #0
 800940a:	4770      	bx	lr

0800940c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800940c:	2001      	movs	r0, #1
 800940e:	4770      	bx	lr

08009410 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8009410:	2000      	movs	r0, #0
 8009412:	4770      	bx	lr

08009414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009414:	b510      	push	{r4, lr}
 8009416:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009418:	4a0c      	ldr	r2, [pc, #48]	; (800944c <_sbrk+0x38>)
 800941a:	490d      	ldr	r1, [pc, #52]	; (8009450 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800941c:	480d      	ldr	r0, [pc, #52]	; (8009454 <_sbrk+0x40>)
 800941e:	6800      	ldr	r0, [r0, #0]
 8009420:	b140      	cbz	r0, 8009434 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009422:	480c      	ldr	r0, [pc, #48]	; (8009454 <_sbrk+0x40>)
 8009424:	6800      	ldr	r0, [r0, #0]
 8009426:	4403      	add	r3, r0
 8009428:	1a52      	subs	r2, r2, r1
 800942a:	4293      	cmp	r3, r2
 800942c:	d806      	bhi.n	800943c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <_sbrk+0x40>)
 8009430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8009432:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8009434:	4807      	ldr	r0, [pc, #28]	; (8009454 <_sbrk+0x40>)
 8009436:	4c08      	ldr	r4, [pc, #32]	; (8009458 <_sbrk+0x44>)
 8009438:	6004      	str	r4, [r0, #0]
 800943a:	e7f2      	b.n	8009422 <_sbrk+0xe>
    errno = ENOMEM;
 800943c:	f7f6 ff2a 	bl	8000294 <__errno>
 8009440:	230c      	movs	r3, #12
 8009442:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8009444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009448:	e7f3      	b.n	8009432 <_sbrk+0x1e>
 800944a:	bf00      	nop
 800944c:	20008000 	.word	0x20008000
 8009450:	00000400 	.word	0x00000400
 8009454:	200005ec 	.word	0x200005ec
 8009458:	200006c8 	.word	0x200006c8

0800945c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800945c:	4a03      	ldr	r2, [pc, #12]	; (800946c <SystemInit+0x10>)
 800945e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009462:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800946a:	4770      	bx	lr
 800946c:	e000ed00 	.word	0xe000ed00

08009470 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009470:	b500      	push	{lr}
 8009472:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009474:	2300      	movs	r3, #0
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	9306      	str	r3, [sp, #24]
 800947c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009484:	4815      	ldr	r0, [pc, #84]	; (80094dc <MX_TIM2_Init+0x6c>)
 8009486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800948a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 800948c:	2247      	movs	r2, #71	; 0x47
 800948e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009490:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8009492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009496:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009498:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800949a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800949c:	f7ff fac0 	bl	8008a20 <HAL_TIM_Base_Init>
 80094a0:	b990      	cbnz	r0, 80094c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80094a8:	a904      	add	r1, sp, #16
 80094aa:	480c      	ldr	r0, [pc, #48]	; (80094dc <MX_TIM2_Init+0x6c>)
 80094ac:	f7ff faf6 	bl	8008a9c <HAL_TIM_ConfigClockSource>
 80094b0:	b968      	cbnz	r0, 80094ce <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094b2:	2300      	movs	r3, #0
 80094b4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094b6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80094b8:	a901      	add	r1, sp, #4
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <MX_TIM2_Init+0x6c>)
 80094bc:	f7ff fb6e 	bl	8008b9c <HAL_TIMEx_MasterConfigSynchronization>
 80094c0:	b940      	cbnz	r0, 80094d4 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80094c2:	b009      	add	sp, #36	; 0x24
 80094c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80094c8:	f7fd fb74 	bl	8006bb4 <Error_Handler>
 80094cc:	e7e9      	b.n	80094a2 <MX_TIM2_Init+0x32>
    Error_Handler();
 80094ce:	f7fd fb71 	bl	8006bb4 <Error_Handler>
 80094d2:	e7ee      	b.n	80094b2 <MX_TIM2_Init+0x42>
    Error_Handler();
 80094d4:	f7fd fb6e 	bl	8006bb4 <Error_Handler>
}
 80094d8:	e7f3      	b.n	80094c2 <MX_TIM2_Init+0x52>
 80094da:	bf00      	nop
 80094dc:	200005f0 	.word	0x200005f0

080094e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80094e0:	6803      	ldr	r3, [r0, #0]
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e6:	d000      	beq.n	80094ea <HAL_TIM_Base_MspInit+0xa>
 80094e8:	4770      	bx	lr
{
 80094ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80094ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80094f0:	69da      	ldr	r2, [r3, #28]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	61da      	str	r2, [r3, #28]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009502:	b002      	add	sp, #8
 8009504:	4770      	bx	lr
	...

08009508 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009508:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800950a:	480b      	ldr	r0, [pc, #44]	; (8009538 <MX_USART1_UART_Init+0x30>)
 800950c:	4b0b      	ldr	r3, [pc, #44]	; (800953c <MX_USART1_UART_Init+0x34>)
 800950e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8009510:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009514:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009516:	2300      	movs	r3, #0
 8009518:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800951a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800951c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800951e:	220c      	movs	r2, #12
 8009520:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009522:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009524:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009526:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009528:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800952a:	f7ff fefc 	bl	8009326 <HAL_UART_Init>
 800952e:	b900      	cbnz	r0, 8009532 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009530:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009532:	f7fd fb3f 	bl	8006bb4 <Error_Handler>
}
 8009536:	e7fb      	b.n	8009530 <MX_USART1_UART_Init+0x28>
 8009538:	2000063c 	.word	0x2000063c
 800953c:	40013800 	.word	0x40013800

08009540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009540:	b500      	push	{lr}
 8009542:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009544:	2300      	movs	r3, #0
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	9306      	str	r3, [sp, #24]
 800954e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8009550:	6802      	ldr	r2, [r0, #0]
 8009552:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <HAL_UART_MspInit+0x64>)
 8009554:	429a      	cmp	r2, r3
 8009556:	d002      	beq.n	800955e <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009558:	b009      	add	sp, #36	; 0x24
 800955a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800955e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009568:	619a      	str	r2, [r3, #24]
 800956a:	699a      	ldr	r2, [r3, #24]
 800956c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009570:	9201      	str	r2, [sp, #4]
 8009572:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009574:	695a      	ldr	r2, [r3, #20]
 8009576:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800957a:	615a      	str	r2, [r3, #20]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800958a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958c:	2302      	movs	r3, #2
 800958e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009590:	2303      	movs	r3, #3
 8009592:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009594:	2307      	movs	r3, #7
 8009596:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009598:	a903      	add	r1, sp, #12
 800959a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800959e:	f7fd fe13 	bl	80071c8 <HAL_GPIO_Init>
}
 80095a2:	e7d9      	b.n	8009558 <HAL_UART_MspInit+0x18>
 80095a4:	40013800 	.word	0x40013800

080095a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80095a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80095ac:	f7ff ff56 	bl	800945c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80095b0:	480c      	ldr	r0, [pc, #48]	; (80095e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80095b2:	490d      	ldr	r1, [pc, #52]	; (80095e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80095b4:	4a0d      	ldr	r2, [pc, #52]	; (80095ec <LoopForever+0xe>)
  movs r3, #0
 80095b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80095b8:	e002      	b.n	80095c0 <LoopCopyDataInit>

080095ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80095ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80095bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80095be:	3304      	adds	r3, #4

080095c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80095c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80095c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80095c4:	d3f9      	bcc.n	80095ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80095c6:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80095c8:	4c0a      	ldr	r4, [pc, #40]	; (80095f4 <LoopForever+0x16>)
  movs r3, #0
 80095ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80095cc:	e001      	b.n	80095d2 <LoopFillZerobss>

080095ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80095ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80095d0:	3204      	adds	r2, #4

080095d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80095d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80095d4:	d3fb      	bcc.n	80095ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80095d6:	f7f6 fe85 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80095da:	f7fd fb2f 	bl	8006c3c <main>

080095de <LoopForever>:

LoopForever:
    b LoopForever
 80095de:	e7fe      	b.n	80095de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80095e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80095e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80095e8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80095ec:	08009cd8 	.word	0x08009cd8
  ldr r2, =_sbss
 80095f0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80095f4:	200006c4 	.word	0x200006c4

080095f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80095f8:	e7fe      	b.n	80095f8 <ADC1_2_IRQHandler>
	...

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
