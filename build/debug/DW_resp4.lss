
build/debug/DW_resp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08007374  08007374  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007374  08007374  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007378  08007378  00017378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800737c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000039c  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000033  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033a35  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007d98  00000000  00000000  00053b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b58  00000000  00000000  0005b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e624  00000000  00000000  0005d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000082bb  00000000  00000000  0007baac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001afcc  00000000  00000000  00083d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000019f8  00000000  00000000  0009ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004838  00000000  00000000  000a0730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000100 	.word	0x20000100
 80001d4:	20000100 	.word	0x20000100
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000100 	.word	0x20000100
 80001f8:	20000100 	.word	0x20000100
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000100 	.word	0x20000100
 8000220:	00000000 	.word	0x00000000
 8000224:	080070f0 	.word	0x080070f0

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000104 	.word	0x20000104
 8000244:	080070f0 	.word	0x080070f0

08000248 <__assert_func>:
 8000248:	b500      	push	{lr}
 800024a:	4c0b      	ldr	r4, [pc, #44]	; (8000278 <__assert_func+0x30>)
 800024c:	6825      	ldr	r5, [r4, #0]
 800024e:	4614      	mov	r4, r2
 8000250:	68ee      	ldr	r6, [r5, #12]
 8000252:	461a      	mov	r2, r3
 8000254:	b085      	sub	sp, #20
 8000256:	4603      	mov	r3, r0
 8000258:	460d      	mov	r5, r1
 800025a:	b14c      	cbz	r4, 8000270 <__assert_func+0x28>
 800025c:	4907      	ldr	r1, [pc, #28]	; (800027c <__assert_func+0x34>)
 800025e:	9500      	str	r5, [sp, #0]
 8000260:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8000264:	4630      	mov	r0, r6
 8000266:	4906      	ldr	r1, [pc, #24]	; (8000280 <__assert_func+0x38>)
 8000268:	f000 f828 	bl	80002bc <fiprintf>
 800026c:	f000 fdfc 	bl	8000e68 <abort>
 8000270:	4904      	ldr	r1, [pc, #16]	; (8000284 <__assert_func+0x3c>)
 8000272:	460c      	mov	r4, r1
 8000274:	e7f3      	b.n	800025e <__assert_func+0x16>
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	080072f8 	.word	0x080072f8
 8000280:	08007308 	.word	0x08007308
 8000284:	0800728c 	.word	0x0800728c

08000288 <__assert>:
 8000288:	b508      	push	{r3, lr}
 800028a:	4613      	mov	r3, r2
 800028c:	2200      	movs	r2, #0
 800028e:	f7ff ffdb 	bl	8000248 <__assert_func>
 8000292:	bf00      	nop

08000294 <__errno>:
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <__errno+0x8>)
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000

080002a0 <_fiprintf_r>:
 80002a0:	b40c      	push	{r2, r3}
 80002a2:	b500      	push	{lr}
 80002a4:	b083      	sub	sp, #12
 80002a6:	ab04      	add	r3, sp, #16
 80002a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f000 f905 	bl	80004bc <_vfiprintf_r>
 80002b2:	b003      	add	sp, #12
 80002b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr

080002bc <fiprintf>:
 80002bc:	b40e      	push	{r1, r2, r3}
 80002be:	b510      	push	{r4, lr}
 80002c0:	b083      	sub	sp, #12
 80002c2:	ab05      	add	r3, sp, #20
 80002c4:	4c06      	ldr	r4, [pc, #24]	; (80002e0 <fiprintf+0x24>)
 80002c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	4601      	mov	r1, r0
 80002ce:	6820      	ldr	r0, [r4, #0]
 80002d0:	f000 f8f4 	bl	80004bc <_vfiprintf_r>
 80002d4:	b003      	add	sp, #12
 80002d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002da:	b003      	add	sp, #12
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4d0d      	ldr	r5, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1b76      	subs	r6, r6, r5
 80002ec:	10b6      	asrs	r6, r6, #2
 80002ee:	d006      	beq.n	80002fe <__libc_init_array+0x1a>
 80002f0:	2400      	movs	r4, #0
 80002f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f6:	3401      	adds	r4, #1
 80002f8:	4798      	blx	r3
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d1f9      	bne.n	80002f2 <__libc_init_array+0xe>
 80002fe:	4e09      	ldr	r6, [pc, #36]	; (8000324 <__libc_init_array+0x40>)
 8000300:	4d09      	ldr	r5, [pc, #36]	; (8000328 <__libc_init_array+0x44>)
 8000302:	1b76      	subs	r6, r6, r5
 8000304:	f006 fef4 	bl	80070f0 <_init>
 8000308:	10b6      	asrs	r6, r6, #2
 800030a:	d006      	beq.n	800031a <__libc_init_array+0x36>
 800030c:	2400      	movs	r4, #0
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	3401      	adds	r4, #1
 8000314:	4798      	blx	r3
 8000316:	42a6      	cmp	r6, r4
 8000318:	d1f9      	bne.n	800030e <__libc_init_array+0x2a>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	08007374 	.word	0x08007374
 8000320:	08007374 	.word	0x08007374
 8000324:	08007378 	.word	0x08007378
 8000328:	08007374 	.word	0x08007374

0800032c <memcmp>:
 800032c:	2a03      	cmp	r2, #3
 800032e:	b570      	push	{r4, r5, r6, lr}
 8000330:	d915      	bls.n	800035e <memcmp+0x32>
 8000332:	ea40 0c01 	orr.w	ip, r0, r1
 8000336:	f01c 0f03 	tst.w	ip, #3
 800033a:	4604      	mov	r4, r0
 800033c:	460b      	mov	r3, r1
 800033e:	d121      	bne.n	8000384 <memcmp+0x58>
 8000340:	4619      	mov	r1, r3
 8000342:	4620      	mov	r0, r4
 8000344:	680e      	ldr	r6, [r1, #0]
 8000346:	6805      	ldr	r5, [r0, #0]
 8000348:	42b5      	cmp	r5, r6
 800034a:	f104 0404 	add.w	r4, r4, #4
 800034e:	f103 0304 	add.w	r3, r3, #4
 8000352:	d117      	bne.n	8000384 <memcmp+0x58>
 8000354:	3a04      	subs	r2, #4
 8000356:	2a03      	cmp	r2, #3
 8000358:	4620      	mov	r0, r4
 800035a:	4619      	mov	r1, r3
 800035c:	d8f0      	bhi.n	8000340 <memcmp+0x14>
 800035e:	1e54      	subs	r4, r2, #1
 8000360:	b1a2      	cbz	r2, 800038c <memcmp+0x60>
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000366:	3901      	subs	r1, #1
 8000368:	e001      	b.n	800036e <memcmp+0x42>
 800036a:	18c3      	adds	r3, r0, r3
 800036c:	d00c      	beq.n	8000388 <memcmp+0x5c>
 800036e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8000372:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000376:	4596      	cmp	lr, r2
 8000378:	eba4 030c 	sub.w	r3, r4, ip
 800037c:	d0f5      	beq.n	800036a <memcmp+0x3e>
 800037e:	ebae 0002 	sub.w	r0, lr, r2
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	1e54      	subs	r4, r2, #1
 8000386:	e7ec      	b.n	8000362 <memcmp+0x36>
 8000388:	4618      	mov	r0, r3
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	4610      	mov	r0, r2
 800038e:	bd70      	pop	{r4, r5, r6, pc}

08000390 <memset>:
 8000390:	0783      	lsls	r3, r0, #30
 8000392:	b530      	push	{r4, r5, lr}
 8000394:	d048      	beq.n	8000428 <memset+0x98>
 8000396:	1e54      	subs	r4, r2, #1
 8000398:	2a00      	cmp	r2, #0
 800039a:	d03f      	beq.n	800041c <memset+0x8c>
 800039c:	b2ca      	uxtb	r2, r1
 800039e:	4603      	mov	r3, r0
 80003a0:	e001      	b.n	80003a6 <memset+0x16>
 80003a2:	3c01      	subs	r4, #1
 80003a4:	d33a      	bcc.n	800041c <memset+0x8c>
 80003a6:	f803 2b01 	strb.w	r2, [r3], #1
 80003aa:	079d      	lsls	r5, r3, #30
 80003ac:	d1f9      	bne.n	80003a2 <memset+0x12>
 80003ae:	2c03      	cmp	r4, #3
 80003b0:	d92d      	bls.n	800040e <memset+0x7e>
 80003b2:	b2cd      	uxtb	r5, r1
 80003b4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80003b8:	2c0f      	cmp	r4, #15
 80003ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80003be:	d936      	bls.n	800042e <memset+0x9e>
 80003c0:	f1a4 0210 	sub.w	r2, r4, #16
 80003c4:	f022 0c0f 	bic.w	ip, r2, #15
 80003c8:	f103 0e20 	add.w	lr, r3, #32
 80003cc:	44e6      	add	lr, ip
 80003ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003d2:	f103 0210 	add.w	r2, r3, #16
 80003d6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003da:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003de:	3210      	adds	r2, #16
 80003e0:	4572      	cmp	r2, lr
 80003e2:	d1f8      	bne.n	80003d6 <memset+0x46>
 80003e4:	f10c 0201 	add.w	r2, ip, #1
 80003e8:	f014 0f0c 	tst.w	r4, #12
 80003ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003f0:	f004 0c0f 	and.w	ip, r4, #15
 80003f4:	d013      	beq.n	800041e <memset+0x8e>
 80003f6:	f1ac 0304 	sub.w	r3, ip, #4
 80003fa:	f023 0303 	bic.w	r3, r3, #3
 80003fe:	3304      	adds	r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	f842 5b04 	str.w	r5, [r2], #4
 8000406:	4293      	cmp	r3, r2
 8000408:	d1fb      	bne.n	8000402 <memset+0x72>
 800040a:	f00c 0403 	and.w	r4, ip, #3
 800040e:	b12c      	cbz	r4, 800041c <memset+0x8c>
 8000410:	b2ca      	uxtb	r2, r1
 8000412:	441c      	add	r4, r3
 8000414:	f803 2b01 	strb.w	r2, [r3], #1
 8000418:	429c      	cmp	r4, r3
 800041a:	d1fb      	bne.n	8000414 <memset+0x84>
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	4664      	mov	r4, ip
 8000420:	4613      	mov	r3, r2
 8000422:	2c00      	cmp	r4, #0
 8000424:	d1f4      	bne.n	8000410 <memset+0x80>
 8000426:	e7f9      	b.n	800041c <memset+0x8c>
 8000428:	4603      	mov	r3, r0
 800042a:	4614      	mov	r4, r2
 800042c:	e7bf      	b.n	80003ae <memset+0x1e>
 800042e:	461a      	mov	r2, r3
 8000430:	46a4      	mov	ip, r4
 8000432:	e7e0      	b.n	80003f6 <memset+0x66>

08000434 <__sfputc_r>:
 8000434:	6893      	ldr	r3, [r2, #8]
 8000436:	3b01      	subs	r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	6093      	str	r3, [r2, #8]
 800043c:	da11      	bge.n	8000462 <__sfputc_r+0x2e>
 800043e:	b410      	push	{r4}
 8000440:	6994      	ldr	r4, [r2, #24]
 8000442:	42a3      	cmp	r3, r4
 8000444:	db09      	blt.n	800045a <__sfputc_r+0x26>
 8000446:	290a      	cmp	r1, #10
 8000448:	d007      	beq.n	800045a <__sfputc_r+0x26>
 800044a:	6813      	ldr	r3, [r2, #0]
 800044c:	1c58      	adds	r0, r3, #1
 800044e:	6010      	str	r0, [r2, #0]
 8000450:	7019      	strb	r1, [r3, #0]
 8000452:	4608      	mov	r0, r1
 8000454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800045e:	f000 bc1d 	b.w	8000c9c <__swbuf_r>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	1c58      	adds	r0, r3, #1
 8000466:	6010      	str	r0, [r2, #0]
 8000468:	7019      	strb	r1, [r3, #0]
 800046a:	4608      	mov	r0, r1
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <__sfputs_r>:
 8000470:	b19b      	cbz	r3, 800049a <__sfputs_r+0x2a>
 8000472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000474:	4413      	add	r3, r2
 8000476:	4606      	mov	r6, r0
 8000478:	460f      	mov	r7, r1
 800047a:	1e54      	subs	r4, r2, #1
 800047c:	1e5d      	subs	r5, r3, #1
 800047e:	e001      	b.n	8000484 <__sfputs_r+0x14>
 8000480:	42ac      	cmp	r4, r5
 8000482:	d008      	beq.n	8000496 <__sfputs_r+0x26>
 8000484:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000488:	463a      	mov	r2, r7
 800048a:	4630      	mov	r0, r6
 800048c:	f7ff ffd2 	bl	8000434 <__sfputc_r>
 8000490:	1c43      	adds	r3, r0, #1
 8000492:	d1f5      	bne.n	8000480 <__sfputs_r+0x10>
 8000494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000496:	2000      	movs	r0, #0
 8000498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800049a:	2000      	movs	r0, #0
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <__sprint_r>:
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	b510      	push	{r4, lr}
 80004a4:	4614      	mov	r4, r2
 80004a6:	b913      	cbnz	r3, 80004ae <__sprint_r+0xe>
 80004a8:	6053      	str	r3, [r2, #4]
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	f000 fef3 	bl	8001298 <__sfvwrite_r>
 80004b2:	2300      	movs	r3, #0
 80004b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop

080004bc <_vfiprintf_r>:
 80004bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c0:	4688      	mov	r8, r1
 80004c2:	b09f      	sub	sp, #124	; 0x7c
 80004c4:	4615      	mov	r5, r2
 80004c6:	461c      	mov	r4, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	b118      	cbz	r0, 80004d4 <_vfiprintf_r+0x18>
 80004cc:	6983      	ldr	r3, [r0, #24]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 80a2 	beq.w	8000618 <_vfiprintf_r+0x15c>
 80004d4:	4b92      	ldr	r3, [pc, #584]	; (8000720 <_vfiprintf_r+0x264>)
 80004d6:	4598      	cmp	r8, r3
 80004d8:	f000 80a4 	beq.w	8000624 <_vfiprintf_r+0x168>
 80004dc:	4b91      	ldr	r3, [pc, #580]	; (8000724 <_vfiprintf_r+0x268>)
 80004de:	4598      	cmp	r8, r3
 80004e0:	f000 80b1 	beq.w	8000646 <_vfiprintf_r+0x18a>
 80004e4:	4b90      	ldr	r3, [pc, #576]	; (8000728 <_vfiprintf_r+0x26c>)
 80004e6:	4598      	cmp	r8, r3
 80004e8:	bf08      	it	eq
 80004ea:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80004ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80004f2:	0718      	lsls	r0, r3, #28
 80004f4:	f140 809d 	bpl.w	8000632 <_vfiprintf_r+0x176>
 80004f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	f000 8098 	beq.w	8000632 <_vfiprintf_r+0x176>
 8000502:	2300      	movs	r3, #0
 8000504:	930b      	str	r3, [sp, #44]	; 0x2c
 8000506:	7829      	ldrb	r1, [r5, #0]
 8000508:	4e88      	ldr	r6, [pc, #544]	; (800072c <_vfiprintf_r+0x270>)
 800050a:	9405      	str	r4, [sp, #20]
 800050c:	2320      	movs	r3, #32
 800050e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8000512:	2330      	movs	r3, #48	; 0x30
 8000514:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000518:	2701      	movs	r7, #1
 800051a:	2900      	cmp	r1, #0
 800051c:	d074      	beq.n	8000608 <_vfiprintf_r+0x14c>
 800051e:	462c      	mov	r4, r5
 8000520:	460b      	mov	r3, r1
 8000522:	e004      	b.n	800052e <_vfiprintf_r+0x72>
 8000524:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000528:	2b00      	cmp	r3, #0
 800052a:	f000 808f 	beq.w	800064c <_vfiprintf_r+0x190>
 800052e:	2b25      	cmp	r3, #37	; 0x25
 8000530:	d1f8      	bne.n	8000524 <_vfiprintf_r+0x68>
 8000532:	ebb4 0b05 	subs.w	fp, r4, r5
 8000536:	f040 808c 	bne.w	8000652 <_vfiprintf_r+0x196>
 800053a:	7823      	ldrb	r3, [r4, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d063      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000540:	2300      	movs	r3, #0
 8000542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000546:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800054a:	9306      	str	r3, [sp, #24]
 800054c:	9309      	str	r3, [sp, #36]	; 0x24
 800054e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000552:	931c      	str	r3, [sp, #112]	; 0x70
 8000554:	3401      	adds	r4, #1
 8000556:	e004      	b.n	8000562 <_vfiprintf_r+0xa6>
 8000558:	9a06      	ldr	r2, [sp, #24]
 800055a:	fa07 f303 	lsl.w	r3, r7, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	9306      	str	r3, [sp, #24]
 8000562:	4625      	mov	r5, r4
 8000564:	2205      	movs	r2, #5
 8000566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800056a:	4630      	mov	r0, r6
 800056c:	f001 f8e0 	bl	8001730 <memchr>
 8000570:	1b83      	subs	r3, r0, r6
 8000572:	2800      	cmp	r0, #0
 8000574:	d1f0      	bne.n	8000558 <_vfiprintf_r+0x9c>
 8000576:	9b06      	ldr	r3, [sp, #24]
 8000578:	06d9      	lsls	r1, r3, #27
 800057a:	bf44      	itt	mi
 800057c:	2220      	movmi	r2, #32
 800057e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000582:	7829      	ldrb	r1, [r5, #0]
 8000584:	071a      	lsls	r2, r3, #28
 8000586:	bf44      	itt	mi
 8000588:	222b      	movmi	r2, #43	; 0x2b
 800058a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800058e:	292a      	cmp	r1, #42	; 0x2a
 8000590:	d170      	bne.n	8000674 <_vfiprintf_r+0x1b8>
 8000592:	9a05      	ldr	r2, [sp, #20]
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	3204      	adds	r2, #4
 8000598:	2900      	cmp	r1, #0
 800059a:	9205      	str	r2, [sp, #20]
 800059c:	f2c0 809b 	blt.w	80006d6 <_vfiprintf_r+0x21a>
 80005a0:	9109      	str	r1, [sp, #36]	; 0x24
 80005a2:	7869      	ldrb	r1, [r5, #1]
 80005a4:	3501      	adds	r5, #1
 80005a6:	292e      	cmp	r1, #46	; 0x2e
 80005a8:	d076      	beq.n	8000698 <_vfiprintf_r+0x1dc>
 80005aa:	4c61      	ldr	r4, [pc, #388]	; (8000730 <_vfiprintf_r+0x274>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	4620      	mov	r0, r4
 80005b0:	f001 f8be 	bl	8001730 <memchr>
 80005b4:	b138      	cbz	r0, 80005c6 <_vfiprintf_r+0x10a>
 80005b6:	9b06      	ldr	r3, [sp, #24]
 80005b8:	1b00      	subs	r0, r0, r4
 80005ba:	2440      	movs	r4, #64	; 0x40
 80005bc:	fa04 f000 	lsl.w	r0, r4, r0
 80005c0:	4303      	orrs	r3, r0
 80005c2:	9306      	str	r3, [sp, #24]
 80005c4:	3501      	adds	r5, #1
 80005c6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80005ca:	485a      	ldr	r0, [pc, #360]	; (8000734 <_vfiprintf_r+0x278>)
 80005cc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80005d0:	2206      	movs	r2, #6
 80005d2:	f001 f8ad 	bl	8001730 <memchr>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	f000 8083 	beq.w	80006e2 <_vfiprintf_r+0x226>
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <_vfiprintf_r+0x27c>)
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d06d      	beq.n	80006be <_vfiprintf_r+0x202>
 80005e2:	aa05      	add	r2, sp, #20
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <_vfiprintf_r+0x280>)
 80005e8:	4642      	mov	r2, r8
 80005ea:	a906      	add	r1, sp, #24
 80005ec:	4648      	mov	r0, r9
 80005ee:	f3af 8000 	nop.w
 80005f2:	9003      	str	r0, [sp, #12]
 80005f4:	9b03      	ldr	r3, [sp, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	d006      	beq.n	8000608 <_vfiprintf_r+0x14c>
 80005fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005fc:	9a03      	ldr	r2, [sp, #12]
 80005fe:	7829      	ldrb	r1, [r5, #0]
 8000600:	4413      	add	r3, r2
 8000602:	930b      	str	r3, [sp, #44]	; 0x2c
 8000604:	2900      	cmp	r1, #0
 8000606:	d18a      	bne.n	800051e <_vfiprintf_r+0x62>
 8000608:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800060c:	065b      	lsls	r3, r3, #25
 800060e:	d417      	bmi.n	8000640 <_vfiprintf_r+0x184>
 8000610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000612:	b01f      	add	sp, #124	; 0x7c
 8000614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000618:	f000 fe1e 	bl	8001258 <__sinit>
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <_vfiprintf_r+0x264>)
 800061e:	4598      	cmp	r8, r3
 8000620:	f47f af5c 	bne.w	80004dc <_vfiprintf_r+0x20>
 8000624:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8000628:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800062c:	0718      	lsls	r0, r3, #28
 800062e:	f53f af63 	bmi.w	80004f8 <_vfiprintf_r+0x3c>
 8000632:	4641      	mov	r1, r8
 8000634:	4648      	mov	r0, r9
 8000636:	f000 fb95 	bl	8000d64 <__swsetup_r>
 800063a:	2800      	cmp	r0, #0
 800063c:	f43f af61 	beq.w	8000502 <_vfiprintf_r+0x46>
 8000640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000644:	e7e5      	b.n	8000612 <_vfiprintf_r+0x156>
 8000646:	f8d9 8008 	ldr.w	r8, [r9, #8]
 800064a:	e750      	b.n	80004ee <_vfiprintf_r+0x32>
 800064c:	ebb4 0b05 	subs.w	fp, r4, r5
 8000650:	d0da      	beq.n	8000608 <_vfiprintf_r+0x14c>
 8000652:	46aa      	mov	sl, r5
 8000654:	f1c5 0501 	rsb	r5, r5, #1
 8000658:	e003      	b.n	8000662 <_vfiprintf_r+0x1a6>
 800065a:	4593      	cmp	fp, r2
 800065c:	d936      	bls.n	80006cc <_vfiprintf_r+0x210>
 800065e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000662:	4642      	mov	r2, r8
 8000664:	4648      	mov	r0, r9
 8000666:	f7ff fee5 	bl	8000434 <__sfputc_r>
 800066a:	3001      	adds	r0, #1
 800066c:	eb05 020a 	add.w	r2, r5, sl
 8000670:	d1f3      	bne.n	800065a <_vfiprintf_r+0x19e>
 8000672:	e7c9      	b.n	8000608 <_vfiprintf_r+0x14c>
 8000674:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000678:	2a09      	cmp	r2, #9
 800067a:	d894      	bhi.n	80005a6 <_vfiprintf_r+0xea>
 800067c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800067e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000686:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800068a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800068e:	2a09      	cmp	r2, #9
 8000690:	d9f5      	bls.n	800067e <_vfiprintf_r+0x1c2>
 8000692:	292e      	cmp	r1, #46	; 0x2e
 8000694:	9309      	str	r3, [sp, #36]	; 0x24
 8000696:	d188      	bne.n	80005aa <_vfiprintf_r+0xee>
 8000698:	7869      	ldrb	r1, [r5, #1]
 800069a:	292a      	cmp	r1, #42	; 0x2a
 800069c:	d12b      	bne.n	80006f6 <_vfiprintf_r+0x23a>
 800069e:	9b05      	ldr	r3, [sp, #20]
 80006a0:	78a9      	ldrb	r1, [r5, #2]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	9207      	str	r2, [sp, #28]
 80006a6:	3304      	adds	r3, #4
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	f105 0002 	add.w	r0, r5, #2
 80006ae:	9305      	str	r3, [sp, #20]
 80006b0:	bfb8      	it	lt
 80006b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80006b6:	4605      	mov	r5, r0
 80006b8:	bfb8      	it	lt
 80006ba:	9307      	strlt	r3, [sp, #28]
 80006bc:	e775      	b.n	80005aa <_vfiprintf_r+0xee>
 80006be:	9b05      	ldr	r3, [sp, #20]
 80006c0:	3307      	adds	r3, #7
 80006c2:	f023 0307 	bic.w	r3, r3, #7
 80006c6:	3308      	adds	r3, #8
 80006c8:	9305      	str	r3, [sp, #20]
 80006ca:	e796      	b.n	80005fa <_vfiprintf_r+0x13e>
 80006cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80006ce:	7823      	ldrb	r3, [r4, #0]
 80006d0:	445a      	add	r2, fp
 80006d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80006d4:	e732      	b.n	800053c <_vfiprintf_r+0x80>
 80006d6:	4249      	negs	r1, r1
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	9109      	str	r1, [sp, #36]	; 0x24
 80006de:	9306      	str	r3, [sp, #24]
 80006e0:	e75f      	b.n	80005a2 <_vfiprintf_r+0xe6>
 80006e2:	aa05      	add	r2, sp, #20
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_vfiprintf_r+0x280>)
 80006e8:	4642      	mov	r2, r8
 80006ea:	a906      	add	r1, sp, #24
 80006ec:	4648      	mov	r0, r9
 80006ee:	f000 f8cb 	bl	8000888 <_printf_i>
 80006f2:	9003      	str	r0, [sp, #12]
 80006f4:	e77e      	b.n	80005f4 <_vfiprintf_r+0x138>
 80006f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006fa:	2300      	movs	r3, #0
 80006fc:	2a09      	cmp	r2, #9
 80006fe:	9307      	str	r3, [sp, #28]
 8000700:	f105 0501 	add.w	r5, r5, #1
 8000704:	f63f af51 	bhi.w	80005aa <_vfiprintf_r+0xee>
 8000708:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800070c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000710:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000714:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000718:	2a09      	cmp	r2, #9
 800071a:	d9f5      	bls.n	8000708 <_vfiprintf_r+0x24c>
 800071c:	9307      	str	r3, [sp, #28]
 800071e:	e744      	b.n	80005aa <_vfiprintf_r+0xee>
 8000720:	0800714c 	.word	0x0800714c
 8000724:	0800712c 	.word	0x0800712c
 8000728:	0800710c 	.word	0x0800710c
 800072c:	08007338 	.word	0x08007338
 8000730:	08007340 	.word	0x08007340
 8000734:	08007344 	.word	0x08007344
 8000738:	00000000 	.word	0x00000000
 800073c:	08000471 	.word	0x08000471

08000740 <vfiprintf>:
 8000740:	b410      	push	{r4}
 8000742:	4c05      	ldr	r4, [pc, #20]	; (8000758 <vfiprintf+0x18>)
 8000744:	4684      	mov	ip, r0
 8000746:	4613      	mov	r3, r2
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800074e:	460a      	mov	r2, r1
 8000750:	4661      	mov	r1, ip
 8000752:	f7ff beb3 	b.w	80004bc <_vfiprintf_r>
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <_printf_common>:
 800075c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000760:	4692      	mov	sl, r2
 8000762:	461f      	mov	r7, r3
 8000764:	690a      	ldr	r2, [r1, #16]
 8000766:	688b      	ldr	r3, [r1, #8]
 8000768:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800076c:	429a      	cmp	r2, r3
 800076e:	bfb8      	it	lt
 8000770:	461a      	movlt	r2, r3
 8000772:	f8ca 2000 	str.w	r2, [sl]
 8000776:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800077a:	460c      	mov	r4, r1
 800077c:	4606      	mov	r6, r0
 800077e:	b113      	cbz	r3, 8000786 <_printf_common+0x2a>
 8000780:	3201      	adds	r2, #1
 8000782:	f8ca 2000 	str.w	r2, [sl]
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	0691      	lsls	r1, r2, #26
 800078a:	d55d      	bpl.n	8000848 <_printf_common+0xec>
 800078c:	f8da 3000 	ldr.w	r3, [sl]
 8000790:	3302      	adds	r3, #2
 8000792:	f8ca 3000 	str.w	r3, [sl]
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	f012 0f06 	tst.w	r2, #6
 800079c:	4611      	mov	r1, r2
 800079e:	d11e      	bne.n	80007de <_printf_common+0x82>
 80007a0:	68e1      	ldr	r1, [r4, #12]
 80007a2:	1acb      	subs	r3, r1, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bfd8      	it	le
 80007a8:	4611      	movle	r1, r2
 80007aa:	dd18      	ble.n	80007de <_printf_common+0x82>
 80007ac:	f104 0b19 	add.w	fp, r4, #25
 80007b0:	f04f 0800 	mov.w	r8, #0
 80007b4:	e005      	b.n	80007c2 <_printf_common+0x66>
 80007b6:	68e5      	ldr	r5, [r4, #12]
 80007b8:	f8da 3000 	ldr.w	r3, [sl]
 80007bc:	1aed      	subs	r5, r5, r3
 80007be:	4545      	cmp	r5, r8
 80007c0:	dd0c      	ble.n	80007dc <_printf_common+0x80>
 80007c2:	2301      	movs	r3, #1
 80007c4:	465a      	mov	r2, fp
 80007c6:	4639      	mov	r1, r7
 80007c8:	4630      	mov	r0, r6
 80007ca:	47c8      	blx	r9
 80007cc:	3001      	adds	r0, #1
 80007ce:	f108 0801 	add.w	r8, r8, #1
 80007d2:	d1f0      	bne.n	80007b6 <_printf_common+0x5a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007dc:	6821      	ldr	r1, [r4, #0]
 80007de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80007e2:	3b00      	subs	r3, #0
 80007e4:	bf18      	it	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	068a      	lsls	r2, r1, #26
 80007ea:	d50a      	bpl.n	8000802 <_printf_common+0xa6>
 80007ec:	18e1      	adds	r1, r4, r3
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	2030      	movs	r0, #48	; 0x30
 80007f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80007f6:	4422      	add	r2, r4
 80007f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80007fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000800:	3302      	adds	r3, #2
 8000802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000806:	4639      	mov	r1, r7
 8000808:	4630      	mov	r0, r6
 800080a:	47c8      	blx	r9
 800080c:	3001      	adds	r0, #1
 800080e:	d0e1      	beq.n	80007d4 <_printf_common+0x78>
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f003 0306 	and.w	r3, r3, #6
 8000816:	2b04      	cmp	r3, #4
 8000818:	d01d      	beq.n	8000856 <_printf_common+0xfa>
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	6922      	ldr	r2, [r4, #16]
 800081e:	4293      	cmp	r3, r2
 8000820:	dd25      	ble.n	800086e <_printf_common+0x112>
 8000822:	f04f 0800 	mov.w	r8, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	4498      	add	r8, r3
 800082a:	341a      	adds	r4, #26
 800082c:	2500      	movs	r5, #0
 800082e:	e001      	b.n	8000834 <_printf_common+0xd8>
 8000830:	4545      	cmp	r5, r8
 8000832:	da1c      	bge.n	800086e <_printf_common+0x112>
 8000834:	2301      	movs	r3, #1
 8000836:	4622      	mov	r2, r4
 8000838:	4639      	mov	r1, r7
 800083a:	4630      	mov	r0, r6
 800083c:	47c8      	blx	r9
 800083e:	3001      	adds	r0, #1
 8000840:	f105 0501 	add.w	r5, r5, #1
 8000844:	d1f4      	bne.n	8000830 <_printf_common+0xd4>
 8000846:	e7c5      	b.n	80007d4 <_printf_common+0x78>
 8000848:	f012 0f06 	tst.w	r2, #6
 800084c:	d012      	beq.n	8000874 <_printf_common+0x118>
 800084e:	3b00      	subs	r3, #0
 8000850:	bf18      	it	ne
 8000852:	2301      	movne	r3, #1
 8000854:	e7d5      	b.n	8000802 <_printf_common+0xa6>
 8000856:	f8da 3000 	ldr.w	r3, [sl]
 800085a:	68e1      	ldr	r1, [r4, #12]
 800085c:	6922      	ldr	r2, [r4, #16]
 800085e:	1ac9      	subs	r1, r1, r3
 8000860:	68a3      	ldr	r3, [r4, #8]
 8000862:	4293      	cmp	r3, r2
 8000864:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8000868:	dcdd      	bgt.n	8000826 <_printf_common+0xca>
 800086a:	2900      	cmp	r1, #0
 800086c:	dcdd      	bgt.n	800082a <_printf_common+0xce>
 800086e:	2000      	movs	r0, #0
 8000870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000874:	68e1      	ldr	r1, [r4, #12]
 8000876:	f8da 3000 	ldr.w	r3, [sl]
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	bfd8      	it	le
 8000880:	4611      	movle	r1, r2
 8000882:	dc93      	bgt.n	80007ac <_printf_common+0x50>
 8000884:	e7ab      	b.n	80007de <_printf_common+0x82>
 8000886:	bf00      	nop

08000888 <_printf_i>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	460c      	mov	r4, r1
 800088e:	b084      	sub	sp, #16
 8000890:	4690      	mov	r8, r2
 8000892:	7e22      	ldrb	r2, [r4, #24]
 8000894:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000896:	4607      	mov	r7, r0
 8000898:	4699      	mov	r9, r3
 800089a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d033      	beq.n	800090a <_printf_i+0x82>
 80008a2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80008a6:	b2dd      	uxtb	r5, r3
 80008a8:	2d20      	cmp	r5, #32
 80008aa:	d867      	bhi.n	800097c <_printf_i+0xf4>
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d865      	bhi.n	800097c <_printf_i+0xf4>
 80008b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80008b4:	006400de 	.word	0x006400de
 80008b8:	00640064 	.word	0x00640064
 80008bc:	00640064 	.word	0x00640064
 80008c0:	00640064 	.word	0x00640064
 80008c4:	00640064 	.word	0x00640064
 80008c8:	00a30064 	.word	0x00a30064
 80008cc:	0064006e 	.word	0x0064006e
 80008d0:	00640064 	.word	0x00640064
 80008d4:	006e0064 	.word	0x006e0064
 80008d8:	00640064 	.word	0x00640064
 80008dc:	00640064 	.word	0x00640064
 80008e0:	007f0021 	.word	0x007f0021
 80008e4:	006400c0 	.word	0x006400c0
 80008e8:	00ae0064 	.word	0x00ae0064
 80008ec:	007f0064 	.word	0x007f0064
 80008f0:	00640064 	.word	0x00640064
 80008f4:	00e5      	.short	0x00e5
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	061a      	lsls	r2, r3, #24
 80008fa:	f140 8104 	bpl.w	8000b06 <_printf_i+0x27e>
 80008fe:	680b      	ldr	r3, [r1, #0]
 8000900:	6962      	ldr	r2, [r4, #20]
 8000902:	1d1d      	adds	r5, r3, #4
 8000904:	600d      	str	r5, [r1, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	4682      	mov	sl, r0
 800090e:	6123      	str	r3, [r4, #16]
 8000910:	f8cd 9000 	str.w	r9, [sp]
 8000914:	4643      	mov	r3, r8
 8000916:	aa03      	add	r2, sp, #12
 8000918:	4621      	mov	r1, r4
 800091a:	4638      	mov	r0, r7
 800091c:	f7ff ff1e 	bl	800075c <_printf_common>
 8000920:	3001      	adds	r0, #1
 8000922:	d020      	beq.n	8000966 <_printf_i+0xde>
 8000924:	6923      	ldr	r3, [r4, #16]
 8000926:	4652      	mov	r2, sl
 8000928:	4641      	mov	r1, r8
 800092a:	4638      	mov	r0, r7
 800092c:	47c8      	blx	r9
 800092e:	3001      	adds	r0, #1
 8000930:	d019      	beq.n	8000966 <_printf_i+0xde>
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	68e0      	ldr	r0, [r4, #12]
 8000936:	9e03      	ldr	r6, [sp, #12]
 8000938:	079b      	lsls	r3, r3, #30
 800093a:	d519      	bpl.n	8000970 <_printf_i+0xe8>
 800093c:	1b83      	subs	r3, r0, r6
 800093e:	2b00      	cmp	r3, #0
 8000940:	dd16      	ble.n	8000970 <_printf_i+0xe8>
 8000942:	f104 0a19 	add.w	sl, r4, #25
 8000946:	2500      	movs	r5, #0
 8000948:	e004      	b.n	8000954 <_printf_i+0xcc>
 800094a:	68e0      	ldr	r0, [r4, #12]
 800094c:	9e03      	ldr	r6, [sp, #12]
 800094e:	1b83      	subs	r3, r0, r6
 8000950:	42ab      	cmp	r3, r5
 8000952:	dd0d      	ble.n	8000970 <_printf_i+0xe8>
 8000954:	2301      	movs	r3, #1
 8000956:	4652      	mov	r2, sl
 8000958:	4641      	mov	r1, r8
 800095a:	4638      	mov	r0, r7
 800095c:	47c8      	blx	r9
 800095e:	3001      	adds	r0, #1
 8000960:	f105 0501 	add.w	r5, r5, #1
 8000964:	d1f1      	bne.n	800094a <_printf_i+0xc2>
 8000966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096a:	b004      	add	sp, #16
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	42b0      	cmp	r0, r6
 8000972:	bfb8      	it	lt
 8000974:	4630      	movlt	r0, r6
 8000976:	b004      	add	sp, #16
 8000978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097c:	2301      	movs	r3, #1
 800097e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000982:	6123      	str	r3, [r4, #16]
 8000984:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000988:	2300      	movs	r3, #0
 800098a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800098e:	e7bf      	b.n	8000910 <_printf_i+0x88>
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	061a      	lsls	r2, r3, #24
 8000994:	d402      	bmi.n	800099c <_printf_i+0x114>
 8000996:	065e      	lsls	r6, r3, #25
 8000998:	f100 80c1 	bmi.w	8000b1e <_printf_i+0x296>
 800099c:	680d      	ldr	r5, [r1, #0]
 800099e:	682a      	ldr	r2, [r5, #0]
 80009a0:	3504      	adds	r5, #4
 80009a2:	600d      	str	r5, [r1, #0]
 80009a4:	4615      	mov	r5, r2
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	db6b      	blt.n	8000a82 <_printf_i+0x1fa>
 80009aa:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000b30 <_printf_i+0x2a8>
 80009ae:	260a      	movs	r6, #10
 80009b0:	e010      	b.n	80009d4 <_printf_i+0x14c>
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	061d      	lsls	r5, r3, #24
 80009b6:	f140 809c 	bpl.w	8000af2 <_printf_i+0x26a>
 80009ba:	680b      	ldr	r3, [r1, #0]
 80009bc:	1d1d      	adds	r5, r3, #4
 80009be:	600d      	str	r5, [r1, #0]
 80009c0:	681d      	ldr	r5, [r3, #0]
 80009c2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8000b30 <_printf_i+0x2a8>
 80009c6:	2a6f      	cmp	r2, #111	; 0x6f
 80009c8:	bf0c      	ite	eq
 80009ca:	2608      	moveq	r6, #8
 80009cc:	260a      	movne	r6, #10
 80009ce:	2300      	movs	r3, #0
 80009d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80009d4:	6862      	ldr	r2, [r4, #4]
 80009d6:	60a2      	str	r2, [r4, #8]
 80009d8:	2a00      	cmp	r2, #0
 80009da:	db7f      	blt.n	8000adc <_printf_i+0x254>
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	f023 0304 	bic.w	r3, r3, #4
 80009e2:	6023      	str	r3, [r4, #0]
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d15b      	bne.n	8000aa0 <_printf_i+0x218>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d179      	bne.n	8000ae0 <_printf_i+0x258>
 80009ec:	4682      	mov	sl, r0
 80009ee:	2e08      	cmp	r6, #8
 80009f0:	d065      	beq.n	8000abe <_printf_i+0x236>
 80009f2:	eba0 000a 	sub.w	r0, r0, sl
 80009f6:	6120      	str	r0, [r4, #16]
 80009f8:	e78a      	b.n	8000910 <_printf_i+0x88>
 80009fa:	680b      	ldr	r3, [r1, #0]
 80009fc:	2201      	movs	r2, #1
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	3304      	adds	r3, #4
 8000a02:	600b      	str	r3, [r1, #0]
 8000a04:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000a08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8000a0c:	6122      	str	r2, [r4, #16]
 8000a0e:	e7bb      	b.n	8000988 <_printf_i+0x100>
 8000a10:	680b      	ldr	r3, [r1, #0]
 8000a12:	6862      	ldr	r2, [r4, #4]
 8000a14:	1d18      	adds	r0, r3, #4
 8000a16:	6008      	str	r0, [r1, #0]
 8000a18:	f8d3 a000 	ldr.w	sl, [r3]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4650      	mov	r0, sl
 8000a20:	f000 fe86 	bl	8001730 <memchr>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	f000 8081 	beq.w	8000b2c <_printf_i+0x2a4>
 8000a2a:	eba0 000a 	sub.w	r0, r0, sl
 8000a2e:	6060      	str	r0, [r4, #4]
 8000a30:	6120      	str	r0, [r4, #16]
 8000a32:	e7a9      	b.n	8000988 <_printf_i+0x100>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	2278      	movs	r2, #120	; 0x78
 8000a3e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8000b34 <_printf_i+0x2ac>
 8000a42:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000a46:	680a      	ldr	r2, [r1, #0]
 8000a48:	1d15      	adds	r5, r2, #4
 8000a4a:	600d      	str	r5, [r1, #0]
 8000a4c:	061d      	lsls	r5, r3, #24
 8000a4e:	d443      	bmi.n	8000ad8 <_printf_i+0x250>
 8000a50:	0659      	lsls	r1, r3, #25
 8000a52:	d541      	bpl.n	8000ad8 <_printf_i+0x250>
 8000a54:	8815      	ldrh	r5, [r2, #0]
 8000a56:	07de      	lsls	r6, r3, #31
 8000a58:	bf44      	itt	mi
 8000a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8000a5e:	6023      	strmi	r3, [r4, #0]
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d144      	bne.n	8000aee <_printf_i+0x266>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6023      	str	r3, [r4, #0]
 8000a6c:	2610      	movs	r6, #16
 8000a6e:	e7ae      	b.n	80009ce <_printf_i+0x146>
 8000a70:	2358      	movs	r3, #88	; 0x58
 8000a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a76:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000b30 <_printf_i+0x2a8>
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	e7e3      	b.n	8000a46 <_printf_i+0x1be>
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	e7dc      	b.n	8000a3c <_printf_i+0x1b4>
 8000a82:	6862      	ldr	r2, [r4, #4]
 8000a84:	60a2      	str	r2, [r4, #8]
 8000a86:	212d      	movs	r1, #45	; 0x2d
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	f1c5 0500 	rsb	r5, r5, #0
 8000a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000a92:	db02      	blt.n	8000a9a <_printf_i+0x212>
 8000a94:	f023 0304 	bic.w	r3, r3, #4
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8000b30 <_printf_i+0x2a8>
 8000a9e:	260a      	movs	r6, #10
 8000aa0:	4682      	mov	sl, r0
 8000aa2:	fbb5 f3f6 	udiv	r3, r5, r6
 8000aa6:	fb06 5113 	mls	r1, r6, r3, r5
 8000aaa:	462a      	mov	r2, r5
 8000aac:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8000ab0:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8000ab4:	42b2      	cmp	r2, r6
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	d2f3      	bcs.n	8000aa2 <_printf_i+0x21a>
 8000aba:	2e08      	cmp	r6, #8
 8000abc:	d199      	bne.n	80009f2 <_printf_i+0x16a>
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	07d9      	lsls	r1, r3, #31
 8000ac2:	d596      	bpl.n	80009f2 <_printf_i+0x16a>
 8000ac4:	6862      	ldr	r2, [r4, #4]
 8000ac6:	6923      	ldr	r3, [r4, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dc92      	bgt.n	80009f2 <_printf_i+0x16a>
 8000acc:	2330      	movs	r3, #48	; 0x30
 8000ace:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8000ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000ad6:	e78c      	b.n	80009f2 <_printf_i+0x16a>
 8000ad8:	6815      	ldr	r5, [r2, #0]
 8000ada:	e7bc      	b.n	8000a56 <_printf_i+0x1ce>
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d1df      	bne.n	8000aa0 <_printf_i+0x218>
 8000ae0:	f89c 3000 	ldrb.w	r3, [ip]
 8000ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ae8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000aec:	e77f      	b.n	80009ee <_printf_i+0x166>
 8000aee:	2610      	movs	r6, #16
 8000af0:	e76d      	b.n	80009ce <_printf_i+0x146>
 8000af2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000af6:	680b      	ldr	r3, [r1, #0]
 8000af8:	f103 0504 	add.w	r5, r3, #4
 8000afc:	600d      	str	r5, [r1, #0]
 8000afe:	bf0c      	ite	eq
 8000b00:	681d      	ldreq	r5, [r3, #0]
 8000b02:	881d      	ldrhne	r5, [r3, #0]
 8000b04:	e75d      	b.n	80009c2 <_printf_i+0x13a>
 8000b06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000b0a:	680b      	ldr	r3, [r1, #0]
 8000b0c:	6962      	ldr	r2, [r4, #20]
 8000b0e:	f103 0504 	add.w	r5, r3, #4
 8000b12:	600d      	str	r5, [r1, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	bf14      	ite	ne
 8000b18:	801a      	strhne	r2, [r3, #0]
 8000b1a:	601a      	streq	r2, [r3, #0]
 8000b1c:	e6f5      	b.n	800090a <_printf_i+0x82>
 8000b1e:	680a      	ldr	r2, [r1, #0]
 8000b20:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000b24:	3204      	adds	r2, #4
 8000b26:	600a      	str	r2, [r1, #0]
 8000b28:	462a      	mov	r2, r5
 8000b2a:	e73c      	b.n	80009a6 <_printf_i+0x11e>
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	e77f      	b.n	8000a30 <_printf_i+0x1a8>
 8000b30:	0800734c 	.word	0x0800734c
 8000b34:	08007360 	.word	0x08007360

08000b38 <_siprintf_r>:
 8000b38:	b40c      	push	{r2, r3}
 8000b3a:	b510      	push	{r4, lr}
 8000b3c:	b09c      	sub	sp, #112	; 0x70
 8000b3e:	ab1e      	add	r3, sp, #120	; 0x78
 8000b40:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8000b44:	e9cd 1406 	strd	r1, r4, [sp, #24]
 8000b48:	9102      	str	r1, [sp, #8]
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <_siprintf_r+0x34>)
 8000b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b50:	9105      	str	r1, [sp, #20]
 8000b52:	a902      	add	r1, sp, #8
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	9404      	str	r4, [sp, #16]
 8000b58:	f001 f912 	bl	8001d80 <_svfiprintf_r>
 8000b5c:	9b02      	ldr	r3, [sp, #8]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	b01c      	add	sp, #112	; 0x70
 8000b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b68:	b002      	add	sp, #8
 8000b6a:	4770      	bx	lr
 8000b6c:	ffff0208 	.word	0xffff0208

08000b70 <siprintf>:
 8000b70:	b40e      	push	{r1, r2, r3}
 8000b72:	b510      	push	{r4, lr}
 8000b74:	b09d      	sub	sp, #116	; 0x74
 8000b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b7a:	ab1f      	add	r3, sp, #124	; 0x7c
 8000b7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000b80:	9104      	str	r1, [sp, #16]
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <siprintf+0x38>)
 8000b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b88:	9002      	str	r0, [sp, #8]
 8000b8a:	4c08      	ldr	r4, [pc, #32]	; (8000bac <siprintf+0x3c>)
 8000b8c:	6808      	ldr	r0, [r1, #0]
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	a902      	add	r1, sp, #8
 8000b92:	9405      	str	r4, [sp, #20]
 8000b94:	f001 f8f4 	bl	8001d80 <_svfiprintf_r>
 8000b98:	9b02      	ldr	r3, [sp, #8]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	b01d      	add	sp, #116	; 0x74
 8000ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba4:	b003      	add	sp, #12
 8000ba6:	4770      	bx	lr
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	ffff0208 	.word	0xffff0208
	...

08000bc0 <strlen>:
 8000bc0:	f890 f000 	pld	[r0]
 8000bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000bc8:	f020 0107 	bic.w	r1, r0, #7
 8000bcc:	f06f 0c00 	mvn.w	ip, #0
 8000bd0:	f010 0407 	ands.w	r4, r0, #7
 8000bd4:	f891 f020 	pld	[r1, #32]
 8000bd8:	f040 8049 	bne.w	8000c6e <strlen+0xae>
 8000bdc:	f04f 0400 	mov.w	r4, #0
 8000be0:	f06f 0007 	mvn.w	r0, #7
 8000be4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000be8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000bec:	f100 0008 	add.w	r0, r0, #8
 8000bf0:	fa82 f24c 	uadd8	r2, r2, ip
 8000bf4:	faa4 f28c 	sel	r2, r4, ip
 8000bf8:	fa83 f34c 	uadd8	r3, r3, ip
 8000bfc:	faa2 f38c 	sel	r3, r2, ip
 8000c00:	bb4b      	cbnz	r3, 8000c56 <strlen+0x96>
 8000c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000c06:	fa82 f24c 	uadd8	r2, r2, ip
 8000c0a:	f100 0008 	add.w	r0, r0, #8
 8000c0e:	faa4 f28c 	sel	r2, r4, ip
 8000c12:	fa83 f34c 	uadd8	r3, r3, ip
 8000c16:	faa2 f38c 	sel	r3, r2, ip
 8000c1a:	b9e3      	cbnz	r3, 8000c56 <strlen+0x96>
 8000c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000c20:	fa82 f24c 	uadd8	r2, r2, ip
 8000c24:	f100 0008 	add.w	r0, r0, #8
 8000c28:	faa4 f28c 	sel	r2, r4, ip
 8000c2c:	fa83 f34c 	uadd8	r3, r3, ip
 8000c30:	faa2 f38c 	sel	r3, r2, ip
 8000c34:	b97b      	cbnz	r3, 8000c56 <strlen+0x96>
 8000c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000c3a:	f101 0120 	add.w	r1, r1, #32
 8000c3e:	fa82 f24c 	uadd8	r2, r2, ip
 8000c42:	f100 0008 	add.w	r0, r0, #8
 8000c46:	faa4 f28c 	sel	r2, r4, ip
 8000c4a:	fa83 f34c 	uadd8	r3, r3, ip
 8000c4e:	faa2 f38c 	sel	r3, r2, ip
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0c6      	beq.n	8000be4 <strlen+0x24>
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	bf04      	itt	eq
 8000c5a:	3004      	addeq	r0, #4
 8000c5c:	461a      	moveq	r2, r3
 8000c5e:	ba12      	rev	r2, r2
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000c6c:	4770      	bx	lr
 8000c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000c72:	f004 0503 	and.w	r5, r4, #3
 8000c76:	f1c4 0000 	rsb	r0, r4, #0
 8000c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000c7e:	f014 0f04 	tst.w	r4, #4
 8000c82:	f891 f040 	pld	[r1, #64]	; 0x40
 8000c86:	fa0c f505 	lsl.w	r5, ip, r5
 8000c8a:	ea62 0205 	orn	r2, r2, r5
 8000c8e:	bf1c      	itt	ne
 8000c90:	ea63 0305 	ornne	r3, r3, r5
 8000c94:	4662      	movne	r2, ip
 8000c96:	f04f 0400 	mov.w	r4, #0
 8000c9a:	e7a9      	b.n	8000bf0 <strlen+0x30>

08000c9c <__swbuf_r>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4614      	mov	r4, r2
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	b108      	cbz	r0, 8000caa <__swbuf_r+0xe>
 8000ca6:	6983      	ldr	r3, [r0, #24]
 8000ca8:	b343      	cbz	r3, 8000cfc <__swbuf_r+0x60>
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <__swbuf_r+0xa4>)
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d02a      	beq.n	8000d06 <__swbuf_r+0x6a>
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <__swbuf_r+0xa8>)
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	d029      	beq.n	8000d0a <__swbuf_r+0x6e>
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <__swbuf_r+0xac>)
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	bf08      	it	eq
 8000cbc:	68f4      	ldreq	r4, [r6, #12]
 8000cbe:	89a3      	ldrh	r3, [r4, #12]
 8000cc0:	69a2      	ldr	r2, [r4, #24]
 8000cc2:	60a2      	str	r2, [r4, #8]
 8000cc4:	071a      	lsls	r2, r3, #28
 8000cc6:	d522      	bpl.n	8000d0e <__swbuf_r+0x72>
 8000cc8:	6923      	ldr	r3, [r4, #16]
 8000cca:	b303      	cbz	r3, 8000d0e <__swbuf_r+0x72>
 8000ccc:	6822      	ldr	r2, [r4, #0]
 8000cce:	6961      	ldr	r1, [r4, #20]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	b2ed      	uxtb	r5, r5
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	462f      	mov	r7, r5
 8000cd8:	dd29      	ble.n	8000d2e <__swbuf_r+0x92>
 8000cda:	3301      	adds	r3, #1
 8000cdc:	68a1      	ldr	r1, [r4, #8]
 8000cde:	3901      	subs	r1, #1
 8000ce0:	60a1      	str	r1, [r4, #8]
 8000ce2:	1c51      	adds	r1, r2, #1
 8000ce4:	6021      	str	r1, [r4, #0]
 8000ce6:	7015      	strb	r5, [r2, #0]
 8000ce8:	6962      	ldr	r2, [r4, #20]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d016      	beq.n	8000d1c <__swbuf_r+0x80>
 8000cee:	89a3      	ldrh	r3, [r4, #12]
 8000cf0:	07db      	lsls	r3, r3, #31
 8000cf2:	d501      	bpl.n	8000cf8 <__swbuf_r+0x5c>
 8000cf4:	2d0a      	cmp	r5, #10
 8000cf6:	d011      	beq.n	8000d1c <__swbuf_r+0x80>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cfc:	f000 faac 	bl	8001258 <__sinit>
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <__swbuf_r+0xa4>)
 8000d02:	429c      	cmp	r4, r3
 8000d04:	d1d4      	bne.n	8000cb0 <__swbuf_r+0x14>
 8000d06:	6874      	ldr	r4, [r6, #4]
 8000d08:	e7d9      	b.n	8000cbe <__swbuf_r+0x22>
 8000d0a:	68b4      	ldr	r4, [r6, #8]
 8000d0c:	e7d7      	b.n	8000cbe <__swbuf_r+0x22>
 8000d0e:	4621      	mov	r1, r4
 8000d10:	4630      	mov	r0, r6
 8000d12:	f000 f827 	bl	8000d64 <__swsetup_r>
 8000d16:	b938      	cbnz	r0, 8000d28 <__swbuf_r+0x8c>
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	e7d7      	b.n	8000ccc <__swbuf_r+0x30>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 f934 	bl	8000f8c <_fflush_r>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d0e7      	beq.n	8000cf8 <__swbuf_r+0x5c>
 8000d28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000d2c:	e7e4      	b.n	8000cf8 <__swbuf_r+0x5c>
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4630      	mov	r0, r6
 8000d32:	f000 f92b 	bl	8000f8c <_fflush_r>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d1f6      	bne.n	8000d28 <__swbuf_r+0x8c>
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e7cd      	b.n	8000cdc <__swbuf_r+0x40>
 8000d40:	0800714c 	.word	0x0800714c
 8000d44:	0800712c 	.word	0x0800712c
 8000d48:	0800710c 	.word	0x0800710c

08000d4c <__swbuf>:
 8000d4c:	b410      	push	{r4}
 8000d4e:	4c04      	ldr	r4, [pc, #16]	; (8000d60 <__swbuf+0x14>)
 8000d50:	4603      	mov	r3, r0
 8000d52:	460a      	mov	r2, r1
 8000d54:	6820      	ldr	r0, [r4, #0]
 8000d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff bf9e 	b.w	8000c9c <__swbuf_r>
 8000d60:	20000000 	.word	0x20000000

08000d64 <__swsetup_r>:
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <__swsetup_r+0xf4>)
 8000d66:	b570      	push	{r4, r5, r6, lr}
 8000d68:	681d      	ldr	r5, [r3, #0]
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	b10d      	cbz	r5, 8000d74 <__swsetup_r+0x10>
 8000d70:	69ab      	ldr	r3, [r5, #24]
 8000d72:	b1e3      	cbz	r3, 8000dae <__swsetup_r+0x4a>
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <__swsetup_r+0xf8>)
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d01f      	beq.n	8000dba <__swsetup_r+0x56>
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <__swsetup_r+0xfc>)
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	d04d      	beq.n	8000e1c <__swsetup_r+0xb8>
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <__swsetup_r+0x100>)
 8000d82:	429c      	cmp	r4, r3
 8000d84:	bf08      	it	eq
 8000d86:	68ec      	ldreq	r4, [r5, #12]
 8000d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d8c:	0718      	lsls	r0, r3, #28
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	d519      	bpl.n	8000dc6 <__swsetup_r+0x62>
 8000d92:	6921      	ldr	r1, [r4, #16]
 8000d94:	b311      	cbz	r1, 8000ddc <__swsetup_r+0x78>
 8000d96:	f012 0001 	ands.w	r0, r2, #1
 8000d9a:	d02f      	beq.n	8000dfc <__swsetup_r+0x98>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	60a0      	str	r0, [r4, #8]
 8000da0:	6960      	ldr	r0, [r4, #20]
 8000da2:	4240      	negs	r0, r0
 8000da4:	61a0      	str	r0, [r4, #24]
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d02e      	beq.n	8000e08 <__swsetup_r+0xa4>
 8000daa:	2000      	movs	r0, #0
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
 8000dae:	4628      	mov	r0, r5
 8000db0:	f000 fa52 	bl	8001258 <__sinit>
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <__swsetup_r+0xf8>)
 8000db6:	429c      	cmp	r4, r3
 8000db8:	d1df      	bne.n	8000d7a <__swsetup_r+0x16>
 8000dba:	686c      	ldr	r4, [r5, #4]
 8000dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dc0:	0718      	lsls	r0, r3, #28
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	d4e5      	bmi.n	8000d92 <__swsetup_r+0x2e>
 8000dc6:	06d1      	lsls	r1, r2, #27
 8000dc8:	d53e      	bpl.n	8000e48 <__swsetup_r+0xe4>
 8000dca:	0752      	lsls	r2, r2, #29
 8000dcc:	d428      	bmi.n	8000e20 <__swsetup_r+0xbc>
 8000dce:	6921      	ldr	r1, [r4, #16]
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	81a3      	strh	r3, [r4, #12]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d1dc      	bne.n	8000d96 <__swsetup_r+0x32>
 8000ddc:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8000de0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000de4:	d0d7      	beq.n	8000d96 <__swsetup_r+0x32>
 8000de6:	4621      	mov	r1, r4
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 fc11 	bl	8001610 <__smakebuf_r>
 8000dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000df2:	6921      	ldr	r1, [r4, #16]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f012 0001 	ands.w	r0, r2, #1
 8000dfa:	d1cf      	bne.n	8000d9c <__swsetup_r+0x38>
 8000dfc:	0795      	lsls	r5, r2, #30
 8000dfe:	bf58      	it	pl
 8000e00:	6960      	ldrpl	r0, [r4, #20]
 8000e02:	60a0      	str	r0, [r4, #8]
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d1d0      	bne.n	8000daa <__swsetup_r+0x46>
 8000e08:	0612      	lsls	r2, r2, #24
 8000e0a:	bf58      	it	pl
 8000e0c:	4608      	movpl	r0, r1
 8000e0e:	d5cd      	bpl.n	8000dac <__swsetup_r+0x48>
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	81a3      	strh	r3, [r4, #12]
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	68ac      	ldr	r4, [r5, #8]
 8000e1e:	e7b3      	b.n	8000d88 <__swsetup_r+0x24>
 8000e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e22:	b151      	cbz	r1, 8000e3a <__swsetup_r+0xd6>
 8000e24:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d004      	beq.n	8000e36 <__swsetup_r+0xd2>
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f000 fde5 	bl	80019fc <_free_r>
 8000e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	6362      	str	r2, [r4, #52]	; 0x34
 8000e3a:	6921      	ldr	r1, [r4, #16]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	e9c4 1200 	strd	r1, r2, [r4]
 8000e42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e46:	e7c3      	b.n	8000dd0 <__swsetup_r+0x6c>
 8000e48:	2209      	movs	r2, #9
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4e:	6032      	str	r2, [r6, #0]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	81a3      	strh	r3, [r4, #12]
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	0800714c 	.word	0x0800714c
 8000e60:	0800712c 	.word	0x0800712c
 8000e64:	0800710c 	.word	0x0800710c

08000e68 <abort>:
 8000e68:	b508      	push	{r3, lr}
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f001 f948 	bl	8002100 <raise>
 8000e70:	2001      	movs	r0, #1
 8000e72:	f005 ffff 	bl	8006e74 <_exit>
 8000e76:	bf00      	nop

08000e78 <__sflush_r>:
 8000e78:	898b      	ldrh	r3, [r1, #12]
 8000e7a:	071a      	lsls	r2, r3, #28
 8000e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e80:	460c      	mov	r4, r1
 8000e82:	4680      	mov	r8, r0
 8000e84:	d43f      	bmi.n	8000f06 <__sflush_r+0x8e>
 8000e86:	684a      	ldr	r2, [r1, #4]
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	dd58      	ble.n	8000f3e <__sflush_r+0xc6>
 8000e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d052      	beq.n	8000f38 <__sflush_r+0xc0>
 8000e92:	2200      	movs	r2, #0
 8000e94:	f8d8 5000 	ldr.w	r5, [r8]
 8000e98:	f8c8 2000 	str.w	r2, [r8]
 8000e9c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8000ea0:	d151      	bne.n	8000f46 <__sflush_r+0xce>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	6a21      	ldr	r1, [r4, #32]
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	47b0      	blx	r6
 8000eaa:	1c43      	adds	r3, r0, #1
 8000eac:	d05e      	beq.n	8000f6c <__sflush_r+0xf4>
 8000eae:	89a3      	ldrh	r3, [r4, #12]
 8000eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000eb2:	075f      	lsls	r7, r3, #29
 8000eb4:	d505      	bpl.n	8000ec2 <__sflush_r+0x4a>
 8000eb6:	6863      	ldr	r3, [r4, #4]
 8000eb8:	1ac0      	subs	r0, r0, r3
 8000eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ebc:	b10b      	cbz	r3, 8000ec2 <__sflush_r+0x4a>
 8000ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ec0:	1ac0      	subs	r0, r0, r3
 8000ec2:	6a21      	ldr	r1, [r4, #32]
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	4640      	mov	r0, r8
 8000eca:	47b0      	blx	r6
 8000ecc:	1c41      	adds	r1, r0, #1
 8000ece:	d13c      	bne.n	8000f4a <__sflush_r+0xd2>
 8000ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d038      	beq.n	8000f4a <__sflush_r+0xd2>
 8000ed8:	2b1d      	cmp	r3, #29
 8000eda:	d001      	beq.n	8000ee0 <__sflush_r+0x68>
 8000edc:	2b16      	cmp	r3, #22
 8000ede:	d14d      	bne.n	8000f7c <__sflush_r+0x104>
 8000ee0:	6923      	ldr	r3, [r4, #16]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	e9c4 3200 	strd	r3, r2, [r4]
 8000ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eea:	f8c8 5000 	str.w	r5, [r8]
 8000eee:	b319      	cbz	r1, 8000f38 <__sflush_r+0xc0>
 8000ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d002      	beq.n	8000efe <__sflush_r+0x86>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	f000 fd7f 	bl	80019fc <_free_r>
 8000efe:	2000      	movs	r0, #0
 8000f00:	6360      	str	r0, [r4, #52]	; 0x34
 8000f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f06:	690e      	ldr	r6, [r1, #16]
 8000f08:	b1b6      	cbz	r6, 8000f38 <__sflush_r+0xc0>
 8000f0a:	680d      	ldr	r5, [r1, #0]
 8000f0c:	600e      	str	r6, [r1, #0]
 8000f0e:	079a      	lsls	r2, r3, #30
 8000f10:	bf0c      	ite	eq
 8000f12:	694b      	ldreq	r3, [r1, #20]
 8000f14:	2300      	movne	r3, #0
 8000f16:	1bad      	subs	r5, r5, r6
 8000f18:	608b      	str	r3, [r1, #8]
 8000f1a:	e00b      	b.n	8000f34 <__sflush_r+0xbc>
 8000f1c:	462b      	mov	r3, r5
 8000f1e:	4632      	mov	r2, r6
 8000f20:	6a21      	ldr	r1, [r4, #32]
 8000f22:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000f24:	4640      	mov	r0, r8
 8000f26:	47b8      	blx	r7
 8000f28:	f1b0 0c00 	subs.w	ip, r0, #0
 8000f2c:	eba5 050c 	sub.w	r5, r5, ip
 8000f30:	4466      	add	r6, ip
 8000f32:	dd13      	ble.n	8000f5c <__sflush_r+0xe4>
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	dcf1      	bgt.n	8000f1c <__sflush_r+0xa4>
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f3e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	dca3      	bgt.n	8000e8c <__sflush_r+0x14>
 8000f44:	e7f8      	b.n	8000f38 <__sflush_r+0xc0>
 8000f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f48:	e7b3      	b.n	8000eb2 <__sflush_r+0x3a>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	6063      	str	r3, [r4, #4]
 8000f4e:	6923      	ldr	r3, [r4, #16]
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	89a3      	ldrh	r3, [r4, #12]
 8000f54:	04db      	lsls	r3, r3, #19
 8000f56:	d5c7      	bpl.n	8000ee8 <__sflush_r+0x70>
 8000f58:	6560      	str	r0, [r4, #84]	; 0x54
 8000f5a:	e7c5      	b.n	8000ee8 <__sflush_r+0x70>
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d09c      	beq.n	8000eae <__sflush_r+0x36>
 8000f74:	2b1d      	cmp	r3, #29
 8000f76:	d006      	beq.n	8000f86 <__sflush_r+0x10e>
 8000f78:	2b16      	cmp	r3, #22
 8000f7a:	d004      	beq.n	8000f86 <__sflush_r+0x10e>
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f82:	81a3      	strh	r3, [r4, #12]
 8000f84:	e7d9      	b.n	8000f3a <__sflush_r+0xc2>
 8000f86:	f8c8 5000 	str.w	r5, [r8]
 8000f8a:	e7d5      	b.n	8000f38 <__sflush_r+0xc0>

08000f8c <_fflush_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	690b      	ldr	r3, [r1, #16]
 8000f90:	b1bb      	cbz	r3, 8000fc2 <_fflush_r+0x36>
 8000f92:	460d      	mov	r5, r1
 8000f94:	4604      	mov	r4, r0
 8000f96:	b108      	cbz	r0, 8000f9c <_fflush_r+0x10>
 8000f98:	6983      	ldr	r3, [r0, #24]
 8000f9a:	b1b3      	cbz	r3, 8000fca <_fflush_r+0x3e>
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <_fflush_r+0x48>)
 8000f9e:	429d      	cmp	r5, r3
 8000fa0:	d011      	beq.n	8000fc6 <_fflush_r+0x3a>
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <_fflush_r+0x4c>)
 8000fa4:	429d      	cmp	r5, r3
 8000fa6:	d013      	beq.n	8000fd0 <_fflush_r+0x44>
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <_fflush_r+0x50>)
 8000faa:	429d      	cmp	r5, r3
 8000fac:	bf08      	it	eq
 8000fae:	68e5      	ldreq	r5, [r4, #12]
 8000fb0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8000fb4:	b12b      	cbz	r3, 8000fc2 <_fflush_r+0x36>
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	4620      	mov	r0, r4
 8000fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fbe:	f7ff bf5b 	b.w	8000e78 <__sflush_r>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
 8000fc6:	6865      	ldr	r5, [r4, #4]
 8000fc8:	e7f2      	b.n	8000fb0 <_fflush_r+0x24>
 8000fca:	f000 f945 	bl	8001258 <__sinit>
 8000fce:	e7e5      	b.n	8000f9c <_fflush_r+0x10>
 8000fd0:	68a5      	ldr	r5, [r4, #8]
 8000fd2:	e7ed      	b.n	8000fb0 <_fflush_r+0x24>
 8000fd4:	0800714c 	.word	0x0800714c
 8000fd8:	0800712c 	.word	0x0800712c
 8000fdc:	0800710c 	.word	0x0800710c

08000fe0 <fflush>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	b340      	cbz	r0, 8001036 <fflush+0x56>
 8000fe4:	6903      	ldr	r3, [r0, #16]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b1e3      	cbz	r3, 8001024 <fflush+0x44>
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <fflush+0x68>)
 8000fec:	681d      	ldr	r5, [r3, #0]
 8000fee:	b10d      	cbz	r5, 8000ff4 <fflush+0x14>
 8000ff0:	69ab      	ldr	r3, [r5, #24]
 8000ff2:	b1cb      	cbz	r3, 8001028 <fflush+0x48>
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <fflush+0x6c>)
 8000ff6:	429c      	cmp	r4, r3
 8000ff8:	d00f      	beq.n	800101a <fflush+0x3a>
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <fflush+0x70>)
 8000ffc:	429c      	cmp	r4, r3
 8000ffe:	d021      	beq.n	8001044 <fflush+0x64>
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <fflush+0x74>)
 8001002:	429c      	cmp	r4, r3
 8001004:	bf08      	it	eq
 8001006:	68ec      	ldreq	r4, [r5, #12]
 8001008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800100c:	b153      	cbz	r3, 8001024 <fflush+0x44>
 800100e:	4621      	mov	r1, r4
 8001010:	4628      	mov	r0, r5
 8001012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001016:	f7ff bf2f 	b.w	8000e78 <__sflush_r>
 800101a:	686c      	ldr	r4, [r5, #4]
 800101c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f4      	bne.n	800100e <fflush+0x2e>
 8001024:	2000      	movs	r0, #0
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	4628      	mov	r0, r5
 800102a:	f000 f915 	bl	8001258 <__sinit>
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <fflush+0x6c>)
 8001030:	429c      	cmp	r4, r3
 8001032:	d1e2      	bne.n	8000ffa <fflush+0x1a>
 8001034:	e7f1      	b.n	800101a <fflush+0x3a>
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <fflush+0x78>)
 8001038:	4908      	ldr	r1, [pc, #32]	; (800105c <fflush+0x7c>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 bac2 	b.w	80015c8 <_fwalk_reent>
 8001044:	68ac      	ldr	r4, [r5, #8]
 8001046:	e7df      	b.n	8001008 <fflush+0x28>
 8001048:	20000000 	.word	0x20000000
 800104c:	0800714c 	.word	0x0800714c
 8001050:	0800712c 	.word	0x0800712c
 8001054:	0800710c 	.word	0x0800710c
 8001058:	08007108 	.word	0x08007108
 800105c:	08000f8d 	.word	0x08000f8d

08001060 <__fp_lock>:
 8001060:	2000      	movs	r0, #0
 8001062:	4770      	bx	lr

08001064 <_cleanup_r>:
 8001064:	4901      	ldr	r1, [pc, #4]	; (800106c <_cleanup_r+0x8>)
 8001066:	f000 baaf 	b.w	80015c8 <_fwalk_reent>
 800106a:	bf00      	nop
 800106c:	08000f8d 	.word	0x08000f8d

08001070 <__fp_unlock>:
 8001070:	2000      	movs	r0, #0
 8001072:	4770      	bx	lr

08001074 <__sfmoreglue>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	2268      	movs	r2, #104	; 0x68
 8001078:	1e4d      	subs	r5, r1, #1
 800107a:	fb02 f505 	mul.w	r5, r2, r5
 800107e:	460e      	mov	r6, r1
 8001080:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001084:	f000 fd1c 	bl	8001ac0 <_malloc_r>
 8001088:	4604      	mov	r4, r0
 800108a:	b140      	cbz	r0, 800109e <__sfmoreglue+0x2a>
 800108c:	2100      	movs	r1, #0
 800108e:	300c      	adds	r0, #12
 8001090:	e9c4 1600 	strd	r1, r6, [r4]
 8001094:	60a0      	str	r0, [r4, #8]
 8001096:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800109a:	f7ff f979 	bl	8000390 <memset>
 800109e:	4620      	mov	r0, r4
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	bf00      	nop

080010a4 <__sfp>:
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <__sfp+0xa0>)
 80010a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010aa:	681e      	ldr	r6, [r3, #0]
 80010ac:	69b3      	ldr	r3, [r6, #24]
 80010ae:	4607      	mov	r7, r0
 80010b0:	b353      	cbz	r3, 8001108 <__sfp+0x64>
 80010b2:	3648      	adds	r6, #72	; 0x48
 80010b4:	f04f 0804 	mov.w	r8, #4
 80010b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80010bc:	3b01      	subs	r3, #1
 80010be:	d504      	bpl.n	80010ca <__sfp+0x26>
 80010c0:	e01e      	b.n	8001100 <__sfp+0x5c>
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80010c8:	d01a      	beq.n	8001100 <__sfp+0x5c>
 80010ca:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d1f6      	bne.n	80010c2 <__sfp+0x1e>
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <__sfp+0xa4>)
 80010d6:	6665      	str	r5, [r4, #100]	; 0x64
 80010d8:	e9c4 5500 	strd	r5, r5, [r4]
 80010dc:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80010e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80010e4:	61a5      	str	r5, [r4, #24]
 80010e6:	2208      	movs	r2, #8
 80010e8:	4629      	mov	r1, r5
 80010ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80010ee:	f7ff f94f 	bl	8000390 <memset>
 80010f2:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80010f6:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80010fa:	4620      	mov	r0, r4
 80010fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001100:	6835      	ldr	r5, [r6, #0]
 8001102:	b12d      	cbz	r5, 8001110 <__sfp+0x6c>
 8001104:	462e      	mov	r6, r5
 8001106:	e7d7      	b.n	80010b8 <__sfp+0x14>
 8001108:	4630      	mov	r0, r6
 800110a:	f000 f81f 	bl	800114c <__sinit.part.0>
 800110e:	e7d0      	b.n	80010b2 <__sfp+0xe>
 8001110:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001114:	4638      	mov	r0, r7
 8001116:	f000 fcd3 	bl	8001ac0 <_malloc_r>
 800111a:	4604      	mov	r4, r0
 800111c:	b168      	cbz	r0, 800113a <__sfp+0x96>
 800111e:	6005      	str	r5, [r0, #0]
 8001120:	f8c0 8004 	str.w	r8, [r0, #4]
 8001124:	300c      	adds	r0, #12
 8001126:	4629      	mov	r1, r5
 8001128:	60a0      	str	r0, [r4, #8]
 800112a:	4625      	mov	r5, r4
 800112c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001130:	f7ff f92e 	bl	8000390 <memset>
 8001134:	6034      	str	r4, [r6, #0]
 8001136:	462e      	mov	r6, r5
 8001138:	e7be      	b.n	80010b8 <__sfp+0x14>
 800113a:	230c      	movs	r3, #12
 800113c:	6030      	str	r0, [r6, #0]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	e7db      	b.n	80010fa <__sfp+0x56>
 8001142:	bf00      	nop
 8001144:	08007108 	.word	0x08007108
 8001148:	ffff0001 	.word	0xffff0001

0800114c <__sinit.part.0>:
 800114c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <__sinit.part.0+0xd8>)
 8001152:	4935      	ldr	r1, [pc, #212]	; (8001228 <__sinit.part.0+0xdc>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	6281      	str	r1, [r0, #40]	; 0x28
 8001158:	4290      	cmp	r0, r2
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001162:	6503      	str	r3, [r0, #80]	; 0x50
 8001164:	bf04      	itt	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	6183      	streq	r3, [r0, #24]
 800116a:	4605      	mov	r5, r0
 800116c:	f7ff ff9a 	bl	80010a4 <__sfp>
 8001170:	6068      	str	r0, [r5, #4]
 8001172:	4628      	mov	r0, r5
 8001174:	f7ff ff96 	bl	80010a4 <__sfp>
 8001178:	60a8      	str	r0, [r5, #8]
 800117a:	4628      	mov	r0, r5
 800117c:	f7ff ff92 	bl	80010a4 <__sfp>
 8001180:	686f      	ldr	r7, [r5, #4]
 8001182:	60e8      	str	r0, [r5, #12]
 8001184:	2400      	movs	r4, #0
 8001186:	2304      	movs	r3, #4
 8001188:	e9c7 4302 	strd	r4, r3, [r7, #8]
 800118c:	2208      	movs	r2, #8
 800118e:	4621      	mov	r1, r4
 8001190:	e9c7 4400 	strd	r4, r4, [r7]
 8001194:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001198:	667c      	str	r4, [r7, #100]	; 0x64
 800119a:	61bc      	str	r4, [r7, #24]
 800119c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80011a0:	f7ff f8f6 	bl	8000390 <memset>
 80011a4:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8001234 <__sinit.part.0+0xe8>
 80011a8:	68ae      	ldr	r6, [r5, #8]
 80011aa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001238 <__sinit.part.0+0xec>
 80011ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800123c <__sinit.part.0+0xf0>
 80011b2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001240 <__sinit.part.0+0xf4>
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <__sinit.part.0+0xe0>)
 80011b8:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 80011bc:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 80011c0:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 80011c4:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80011c8:	2208      	movs	r2, #8
 80011ca:	60f3      	str	r3, [r6, #12]
 80011cc:	e9c6 4400 	strd	r4, r4, [r6]
 80011d0:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80011d4:	6674      	str	r4, [r6, #100]	; 0x64
 80011d6:	60b4      	str	r4, [r6, #8]
 80011d8:	61b4      	str	r4, [r6, #24]
 80011da:	4621      	mov	r1, r4
 80011dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80011e0:	f7ff f8d6 	bl	8000390 <memset>
 80011e4:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80011e8:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80011ec:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80011f0:	68ee      	ldr	r6, [r5, #12]
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <__sinit.part.0+0xe4>)
 80011f4:	60f3      	str	r3, [r6, #12]
 80011f6:	e9c6 4400 	strd	r4, r4, [r6]
 80011fa:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80011fe:	6674      	str	r4, [r6, #100]	; 0x64
 8001200:	60b4      	str	r4, [r6, #8]
 8001202:	61b4      	str	r4, [r6, #24]
 8001204:	4621      	mov	r1, r4
 8001206:	2208      	movs	r2, #8
 8001208:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800120c:	f7ff f8c0 	bl	8000390 <memset>
 8001210:	2301      	movs	r3, #1
 8001212:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001216:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 800121a:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 800121e:	61ab      	str	r3, [r5, #24]
 8001220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001224:	08007108 	.word	0x08007108
 8001228:	08001065 	.word	0x08001065
 800122c:	00010009 	.word	0x00010009
 8001230:	00020012 	.word	0x00020012
 8001234:	08002271 	.word	0x08002271
 8001238:	08002299 	.word	0x08002299
 800123c:	080022d9 	.word	0x080022d9
 8001240:	080022f9 	.word	0x080022f9

08001244 <_cleanup>:
 8001244:	4b02      	ldr	r3, [pc, #8]	; (8001250 <_cleanup+0xc>)
 8001246:	4903      	ldr	r1, [pc, #12]	; (8001254 <_cleanup+0x10>)
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	f000 b9bd 	b.w	80015c8 <_fwalk_reent>
 800124e:	bf00      	nop
 8001250:	08007108 	.word	0x08007108
 8001254:	08000f8d 	.word	0x08000f8d

08001258 <__sinit>:
 8001258:	6983      	ldr	r3, [r0, #24]
 800125a:	b903      	cbnz	r3, 800125e <__sinit+0x6>
 800125c:	e776      	b.n	800114c <__sinit.part.0>
 800125e:	4770      	bx	lr

08001260 <__sfp_lock_acquire>:
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <__sfp_lock_release>:
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <__sinit_lock_acquire>:
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <__sinit_lock_release>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <__fp_lock_all>:
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <__fp_lock_all+0xc>)
 8001272:	4903      	ldr	r1, [pc, #12]	; (8001280 <__fp_lock_all+0x10>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f000 b987 	b.w	8001588 <_fwalk>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	08001061 	.word	0x08001061

08001284 <__fp_unlock_all>:
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <__fp_unlock_all+0xc>)
 8001286:	4903      	ldr	r1, [pc, #12]	; (8001294 <__fp_unlock_all+0x10>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f000 b97d 	b.w	8001588 <_fwalk>
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	08001071 	.word	0x08001071

08001298 <__sfvwrite_r>:
 8001298:	6893      	ldr	r3, [r2, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8085 	beq.w	80013aa <__sfvwrite_r+0x112>
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80012a8:	460c      	mov	r4, r1
 80012aa:	0719      	lsls	r1, r3, #28
 80012ac:	4680      	mov	r8, r0
 80012ae:	b083      	sub	sp, #12
 80012b0:	4617      	mov	r7, r2
 80012b2:	b298      	uxth	r0, r3
 80012b4:	d525      	bpl.n	8001302 <__sfvwrite_r+0x6a>
 80012b6:	6923      	ldr	r3, [r4, #16]
 80012b8:	b31b      	cbz	r3, 8001302 <__sfvwrite_r+0x6a>
 80012ba:	f010 0302 	ands.w	r3, r0, #2
 80012be:	683d      	ldr	r5, [r7, #0]
 80012c0:	d02d      	beq.n	800131e <__sfvwrite_r+0x86>
 80012c2:	f04f 0a00 	mov.w	sl, #0
 80012c6:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8001584 <__sfvwrite_r+0x2ec>
 80012ca:	4656      	mov	r6, sl
 80012cc:	46b9      	mov	r9, r7
 80012ce:	455e      	cmp	r6, fp
 80012d0:	4633      	mov	r3, r6
 80012d2:	4652      	mov	r2, sl
 80012d4:	bf28      	it	cs
 80012d6:	465b      	movcs	r3, fp
 80012d8:	4640      	mov	r0, r8
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d052      	beq.n	8001384 <__sfvwrite_r+0xec>
 80012de:	6a21      	ldr	r1, [r4, #32]
 80012e0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80012e2:	47b8      	blx	r7
 80012e4:	2800      	cmp	r0, #0
 80012e6:	dd56      	ble.n	8001396 <__sfvwrite_r+0xfe>
 80012e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80012ec:	1a1b      	subs	r3, r3, r0
 80012ee:	4482      	add	sl, r0
 80012f0:	1a36      	subs	r6, r6, r0
 80012f2:	f8c9 3008 	str.w	r3, [r9, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e9      	bne.n	80012ce <__sfvwrite_r+0x36>
 80012fa:	2000      	movs	r0, #0
 80012fc:	b003      	add	sp, #12
 80012fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001302:	4621      	mov	r1, r4
 8001304:	4640      	mov	r0, r8
 8001306:	f7ff fd2d 	bl	8000d64 <__swsetup_r>
 800130a:	2800      	cmp	r0, #0
 800130c:	f040 8136 	bne.w	800157c <__sfvwrite_r+0x2e4>
 8001310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001314:	683d      	ldr	r5, [r7, #0]
 8001316:	b298      	uxth	r0, r3
 8001318:	f010 0302 	ands.w	r3, r0, #2
 800131c:	d1d1      	bne.n	80012c2 <__sfvwrite_r+0x2a>
 800131e:	f010 0901 	ands.w	r9, r0, #1
 8001322:	d144      	bne.n	80013ae <__sfvwrite_r+0x116>
 8001324:	464e      	mov	r6, r9
 8001326:	9700      	str	r7, [sp, #0]
 8001328:	b346      	cbz	r6, 800137c <__sfvwrite_r+0xe4>
 800132a:	0582      	lsls	r2, r0, #22
 800132c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001330:	f140 8083 	bpl.w	800143a <__sfvwrite_r+0x1a2>
 8001334:	45b3      	cmp	fp, r6
 8001336:	465a      	mov	r2, fp
 8001338:	f200 80b2 	bhi.w	80014a0 <__sfvwrite_r+0x208>
 800133c:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8001340:	f040 80bf 	bne.w	80014c2 <__sfvwrite_r+0x22a>
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	4649      	mov	r1, r9
 800134a:	f000 fadb 	bl	8001904 <memmove>
 800134e:	68a3      	ldr	r3, [r4, #8]
 8001350:	9a01      	ldr	r2, [sp, #4]
 8001352:	eba3 010b 	sub.w	r1, r3, fp
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	60a1      	str	r1, [r4, #8]
 800135a:	4413      	add	r3, r2
 800135c:	46b2      	mov	sl, r6
 800135e:	6023      	str	r3, [r4, #0]
 8001360:	2600      	movs	r6, #0
 8001362:	9b00      	ldr	r3, [sp, #0]
 8001364:	6898      	ldr	r0, [r3, #8]
 8001366:	eba0 000a 	sub.w	r0, r0, sl
 800136a:	44d1      	add	r9, sl
 800136c:	6098      	str	r0, [r3, #8]
 800136e:	2800      	cmp	r0, #0
 8001370:	d0c3      	beq.n	80012fa <__sfvwrite_r+0x62>
 8001372:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8001376:	b280      	uxth	r0, r0
 8001378:	2e00      	cmp	r6, #0
 800137a:	d1d6      	bne.n	800132a <__sfvwrite_r+0x92>
 800137c:	e9d5 9600 	ldrd	r9, r6, [r5]
 8001380:	3508      	adds	r5, #8
 8001382:	e7d1      	b.n	8001328 <__sfvwrite_r+0x90>
 8001384:	e9d5 a600 	ldrd	sl, r6, [r5]
 8001388:	3508      	adds	r5, #8
 800138a:	e7a0      	b.n	80012ce <__sfvwrite_r+0x36>
 800138c:	4621      	mov	r1, r4
 800138e:	4640      	mov	r0, r8
 8001390:	f7ff fdfc 	bl	8000f8c <_fflush_r>
 8001394:	b380      	cbz	r0, 80013f8 <__sfvwrite_r+0x160>
 8001396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	b003      	add	sp, #12
 80013a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013aa:	2000      	movs	r0, #0
 80013ac:	4770      	bx	lr
 80013ae:	461e      	mov	r6, r3
 80013b0:	46aa      	mov	sl, r5
 80013b2:	4699      	mov	r9, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	461d      	mov	r5, r3
 80013b8:	9700      	str	r7, [sp, #0]
 80013ba:	b356      	cbz	r6, 8001412 <__sfvwrite_r+0x17a>
 80013bc:	b388      	cbz	r0, 8001422 <__sfvwrite_r+0x18a>
 80013be:	464a      	mov	r2, r9
 80013c0:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	42b2      	cmp	r2, r6
 80013c8:	bf28      	it	cs
 80013ca:	4632      	movcs	r2, r6
 80013cc:	4288      	cmp	r0, r1
 80013ce:	d905      	bls.n	80013dc <__sfvwrite_r+0x144>
 80013d0:	68a1      	ldr	r1, [r4, #8]
 80013d2:	eb03 0b01 	add.w	fp, r3, r1
 80013d6:	455a      	cmp	r2, fp
 80013d8:	f300 80a6 	bgt.w	8001528 <__sfvwrite_r+0x290>
 80013dc:	4293      	cmp	r3, r2
 80013de:	dc63      	bgt.n	80014a8 <__sfvwrite_r+0x210>
 80013e0:	6a21      	ldr	r1, [r4, #32]
 80013e2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80013e4:	462a      	mov	r2, r5
 80013e6:	4640      	mov	r0, r8
 80013e8:	47b8      	blx	r7
 80013ea:	f1b0 0b00 	subs.w	fp, r0, #0
 80013ee:	ddd2      	ble.n	8001396 <__sfvwrite_r+0xfe>
 80013f0:	ebb9 090b 	subs.w	r9, r9, fp
 80013f4:	d0ca      	beq.n	800138c <__sfvwrite_r+0xf4>
 80013f6:	2001      	movs	r0, #1
 80013f8:	9a00      	ldr	r2, [sp, #0]
 80013fa:	6893      	ldr	r3, [r2, #8]
 80013fc:	eba3 030b 	sub.w	r3, r3, fp
 8001400:	445d      	add	r5, fp
 8001402:	eba6 060b 	sub.w	r6, r6, fp
 8001406:	6093      	str	r3, [r2, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f43f af76 	beq.w	80012fa <__sfvwrite_r+0x62>
 800140e:	2e00      	cmp	r6, #0
 8001410:	d1d4      	bne.n	80013bc <__sfvwrite_r+0x124>
 8001412:	f10a 0308 	add.w	r3, sl, #8
 8001416:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800141a:	469a      	mov	sl, r3
 800141c:	3308      	adds	r3, #8
 800141e:	2e00      	cmp	r6, #0
 8001420:	d0f9      	beq.n	8001416 <__sfvwrite_r+0x17e>
 8001422:	4632      	mov	r2, r6
 8001424:	210a      	movs	r1, #10
 8001426:	4628      	mov	r0, r5
 8001428:	f000 f982 	bl	8001730 <memchr>
 800142c:	2800      	cmp	r0, #0
 800142e:	f000 809c 	beq.w	800156a <__sfvwrite_r+0x2d2>
 8001432:	3001      	adds	r0, #1
 8001434:	eba0 0905 	sub.w	r9, r0, r5
 8001438:	e7c1      	b.n	80013be <__sfvwrite_r+0x126>
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	6923      	ldr	r3, [r4, #16]
 800143e:	4298      	cmp	r0, r3
 8001440:	d816      	bhi.n	8001470 <__sfvwrite_r+0x1d8>
 8001442:	6963      	ldr	r3, [r4, #20]
 8001444:	42b3      	cmp	r3, r6
 8001446:	d813      	bhi.n	8001470 <__sfvwrite_r+0x1d8>
 8001448:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800144c:	42b2      	cmp	r2, r6
 800144e:	bf28      	it	cs
 8001450:	4632      	movcs	r2, r6
 8001452:	6a21      	ldr	r1, [r4, #32]
 8001454:	fb92 f2f3 	sdiv	r2, r2, r3
 8001458:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4640      	mov	r0, r8
 8001460:	464a      	mov	r2, r9
 8001462:	47b8      	blx	r7
 8001464:	f1b0 0a00 	subs.w	sl, r0, #0
 8001468:	dd95      	ble.n	8001396 <__sfvwrite_r+0xfe>
 800146a:	eba6 060a 	sub.w	r6, r6, sl
 800146e:	e778      	b.n	8001362 <__sfvwrite_r+0xca>
 8001470:	45b3      	cmp	fp, r6
 8001472:	46da      	mov	sl, fp
 8001474:	bf28      	it	cs
 8001476:	46b2      	movcs	sl, r6
 8001478:	4652      	mov	r2, sl
 800147a:	4649      	mov	r1, r9
 800147c:	f000 fa42 	bl	8001904 <memmove>
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	eba3 030a 	sub.w	r3, r3, sl
 8001488:	4452      	add	r2, sl
 800148a:	60a3      	str	r3, [r4, #8]
 800148c:	6022      	str	r2, [r4, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1eb      	bne.n	800146a <__sfvwrite_r+0x1d2>
 8001492:	4621      	mov	r1, r4
 8001494:	4640      	mov	r0, r8
 8001496:	f7ff fd79 	bl	8000f8c <_fflush_r>
 800149a:	2800      	cmp	r0, #0
 800149c:	d0e5      	beq.n	800146a <__sfvwrite_r+0x1d2>
 800149e:	e77a      	b.n	8001396 <__sfvwrite_r+0xfe>
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	46b3      	mov	fp, r6
 80014a4:	4632      	mov	r2, r6
 80014a6:	e74e      	b.n	8001346 <__sfvwrite_r+0xae>
 80014a8:	4629      	mov	r1, r5
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	f000 fa2a 	bl	8001904 <memmove>
 80014b0:	9a01      	ldr	r2, [sp, #4]
 80014b2:	68a3      	ldr	r3, [r4, #8]
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	60a3      	str	r3, [r4, #8]
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	4693      	mov	fp, r2
 80014c0:	e796      	b.n	80013f0 <__sfvwrite_r+0x158>
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	6921      	ldr	r1, [r4, #16]
 80014c6:	eba3 0b01 	sub.w	fp, r3, r1
 80014ca:	6963      	ldr	r3, [r4, #20]
 80014cc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 80014d0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80014d4:	f10b 0301 	add.w	r3, fp, #1
 80014d8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 80014dc:	4433      	add	r3, r6
 80014de:	4553      	cmp	r3, sl
 80014e0:	4652      	mov	r2, sl
 80014e2:	bf84      	itt	hi
 80014e4:	469a      	movhi	sl, r3
 80014e6:	4652      	movhi	r2, sl
 80014e8:	0543      	lsls	r3, r0, #21
 80014ea:	d52c      	bpl.n	8001546 <__sfvwrite_r+0x2ae>
 80014ec:	4611      	mov	r1, r2
 80014ee:	4640      	mov	r0, r8
 80014f0:	f000 fae6 	bl	8001ac0 <_malloc_r>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d03b      	beq.n	8001570 <__sfvwrite_r+0x2d8>
 80014f8:	465a      	mov	r2, fp
 80014fa:	6921      	ldr	r1, [r4, #16]
 80014fc:	9001      	str	r0, [sp, #4]
 80014fe:	f000 f967 	bl	80017d0 <memcpy>
 8001502:	89a2      	ldrh	r2, [r4, #12]
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800150a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150e:	81a2      	strh	r2, [r4, #12]
 8001510:	eb03 000b 	add.w	r0, r3, fp
 8001514:	6123      	str	r3, [r4, #16]
 8001516:	ebaa 030b 	sub.w	r3, sl, fp
 800151a:	f8c4 a014 	str.w	sl, [r4, #20]
 800151e:	60a3      	str	r3, [r4, #8]
 8001520:	6020      	str	r0, [r4, #0]
 8001522:	46b3      	mov	fp, r6
 8001524:	4632      	mov	r2, r6
 8001526:	e70e      	b.n	8001346 <__sfvwrite_r+0xae>
 8001528:	4629      	mov	r1, r5
 800152a:	465a      	mov	r2, fp
 800152c:	f000 f9ea 	bl	8001904 <memmove>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	445b      	add	r3, fp
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	4621      	mov	r1, r4
 8001538:	4640      	mov	r0, r8
 800153a:	f7ff fd27 	bl	8000f8c <_fflush_r>
 800153e:	2800      	cmp	r0, #0
 8001540:	f43f af56 	beq.w	80013f0 <__sfvwrite_r+0x158>
 8001544:	e727      	b.n	8001396 <__sfvwrite_r+0xfe>
 8001546:	4640      	mov	r0, r8
 8001548:	f000 fb14 	bl	8001b74 <_realloc_r>
 800154c:	4603      	mov	r3, r0
 800154e:	2800      	cmp	r0, #0
 8001550:	d1de      	bne.n	8001510 <__sfvwrite_r+0x278>
 8001552:	6921      	ldr	r1, [r4, #16]
 8001554:	4640      	mov	r0, r8
 8001556:	f000 fa51 	bl	80019fc <_free_r>
 800155a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800155e:	220c      	movs	r2, #12
 8001560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001564:	f8c8 2000 	str.w	r2, [r8]
 8001568:	e717      	b.n	800139a <__sfvwrite_r+0x102>
 800156a:	1c72      	adds	r2, r6, #1
 800156c:	4691      	mov	r9, r2
 800156e:	e727      	b.n	80013c0 <__sfvwrite_r+0x128>
 8001570:	220c      	movs	r2, #12
 8001572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001576:	f8c8 2000 	str.w	r2, [r8]
 800157a:	e70e      	b.n	800139a <__sfvwrite_r+0x102>
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	e6bc      	b.n	80012fc <__sfvwrite_r+0x64>
 8001582:	bf00      	nop
 8001584:	7ffffc00 	.word	0x7ffffc00

08001588 <_fwalk>:
 8001588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800158c:	4688      	mov	r8, r1
 800158e:	f100 0748 	add.w	r7, r0, #72	; 0x48
 8001592:	2600      	movs	r6, #0
 8001594:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001598:	3d01      	subs	r5, #1
 800159a:	d40f      	bmi.n	80015bc <_fwalk+0x34>
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80015a4:	d906      	bls.n	80015b4 <_fwalk+0x2c>
 80015a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4620      	mov	r0, r4
 80015ae:	d001      	beq.n	80015b4 <_fwalk+0x2c>
 80015b0:	47c0      	blx	r8
 80015b2:	4306      	orrs	r6, r0
 80015b4:	1c6b      	adds	r3, r5, #1
 80015b6:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80015ba:	d1ef      	bne.n	800159c <_fwalk+0x14>
 80015bc:	683f      	ldr	r7, [r7, #0]
 80015be:	2f00      	cmp	r7, #0
 80015c0:	d1e8      	bne.n	8001594 <_fwalk+0xc>
 80015c2:	4630      	mov	r0, r6
 80015c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015c8 <_fwalk_reent>:
 80015c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015cc:	4607      	mov	r7, r0
 80015ce:	4688      	mov	r8, r1
 80015d0:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80015d4:	f04f 0900 	mov.w	r9, #0
 80015d8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80015dc:	3d01      	subs	r5, #1
 80015de:	d411      	bmi.n	8001604 <_fwalk_reent+0x3c>
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80015e8:	d908      	bls.n	80015fc <_fwalk_reent+0x34>
 80015ea:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4621      	mov	r1, r4
 80015f2:	d003      	beq.n	80015fc <_fwalk_reent+0x34>
 80015f4:	4638      	mov	r0, r7
 80015f6:	47c0      	blx	r8
 80015f8:	ea49 0900 	orr.w	r9, r9, r0
 80015fc:	1c6b      	adds	r3, r5, #1
 80015fe:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001602:	d1ed      	bne.n	80015e0 <_fwalk_reent+0x18>
 8001604:	6836      	ldr	r6, [r6, #0]
 8001606:	2e00      	cmp	r6, #0
 8001608:	d1e6      	bne.n	80015d8 <_fwalk_reent+0x10>
 800160a:	4648      	mov	r0, r9
 800160c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001610 <__smakebuf_r>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	898b      	ldrh	r3, [r1, #12]
 8001614:	460c      	mov	r4, r1
 8001616:	0799      	lsls	r1, r3, #30
 8001618:	b097      	sub	sp, #92	; 0x5c
 800161a:	d507      	bpl.n	800162c <__smakebuf_r+0x1c>
 800161c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001620:	2201      	movs	r2, #1
 8001622:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001626:	6023      	str	r3, [r4, #0]
 8001628:	b017      	add	sp, #92	; 0x5c
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001630:	2900      	cmp	r1, #0
 8001632:	4605      	mov	r5, r0
 8001634:	db2d      	blt.n	8001692 <__smakebuf_r+0x82>
 8001636:	466a      	mov	r2, sp
 8001638:	f000 fe8a 	bl	8002350 <_fstat_r>
 800163c:	2800      	cmp	r0, #0
 800163e:	db27      	blt.n	8001690 <__smakebuf_r+0x80>
 8001640:	9e01      	ldr	r6, [sp, #4]
 8001642:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8001646:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800164a:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 800164e:	fab6 f686 	clz	r6, r6
 8001652:	4639      	mov	r1, r7
 8001654:	4628      	mov	r0, r5
 8001656:	0976      	lsrs	r6, r6, #5
 8001658:	f000 fa32 	bl	8001ac0 <_malloc_r>
 800165c:	b330      	cbz	r0, 80016ac <__smakebuf_r+0x9c>
 800165e:	89a3      	ldrh	r3, [r4, #12]
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <__smakebuf_r+0xbc>)
 8001662:	62aa      	str	r2, [r5, #40]	; 0x28
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800166c:	81a3      	strh	r3, [r4, #12]
 800166e:	6020      	str	r0, [r4, #0]
 8001670:	2e00      	cmp	r6, #0
 8001672:	d0d9      	beq.n	8001628 <__smakebuf_r+0x18>
 8001674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001678:	4628      	mov	r0, r5
 800167a:	f000 fe7f 	bl	800237c <_isatty_r>
 800167e:	2800      	cmp	r0, #0
 8001680:	d0d2      	beq.n	8001628 <__smakebuf_r+0x18>
 8001682:	89a3      	ldrh	r3, [r4, #12]
 8001684:	f023 0303 	bic.w	r3, r3, #3
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	81a3      	strh	r3, [r4, #12]
 800168e:	e7cb      	b.n	8001628 <__smakebuf_r+0x18>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001696:	bf14      	ite	ne
 8001698:	2740      	movne	r7, #64	; 0x40
 800169a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800169e:	4639      	mov	r1, r7
 80016a0:	4628      	mov	r0, r5
 80016a2:	2600      	movs	r6, #0
 80016a4:	f000 fa0c 	bl	8001ac0 <_malloc_r>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d1d8      	bne.n	800165e <__smakebuf_r+0x4e>
 80016ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b0:	059a      	lsls	r2, r3, #22
 80016b2:	d4b9      	bmi.n	8001628 <__smakebuf_r+0x18>
 80016b4:	f023 0303 	bic.w	r3, r3, #3
 80016b8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	2101      	movs	r1, #1
 80016c2:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80016c6:	81a3      	strh	r3, [r4, #12]
 80016c8:	6022      	str	r2, [r4, #0]
 80016ca:	e7ad      	b.n	8001628 <__smakebuf_r+0x18>
 80016cc:	08001065 	.word	0x08001065

080016d0 <__swhatbuf_r>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	460c      	mov	r4, r1
 80016d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d8:	2900      	cmp	r1, #0
 80016da:	b096      	sub	sp, #88	; 0x58
 80016dc:	4616      	mov	r6, r2
 80016de:	461d      	mov	r5, r3
 80016e0:	db13      	blt.n	800170a <__swhatbuf_r+0x3a>
 80016e2:	466a      	mov	r2, sp
 80016e4:	f000 fe34 	bl	8002350 <_fstat_r>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	db0e      	blt.n	800170a <__swhatbuf_r+0x3a>
 80016ec:	9901      	ldr	r1, [sp, #4]
 80016ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80016f2:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 80016f6:	fab1 f181 	clz	r1, r1
 80016fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fe:	0949      	lsrs	r1, r1, #5
 8001700:	2000      	movs	r0, #0
 8001702:	6029      	str	r1, [r5, #0]
 8001704:	6033      	str	r3, [r6, #0]
 8001706:	b016      	add	sp, #88	; 0x58
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	602a      	str	r2, [r5, #0]
 8001714:	d504      	bpl.n	8001720 <__swhatbuf_r+0x50>
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	2000      	movs	r0, #0
 800171a:	6033      	str	r3, [r6, #0]
 800171c:	b016      	add	sp, #88	; 0x58
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001724:	2000      	movs	r0, #0
 8001726:	6033      	str	r3, [r6, #0]
 8001728:	b016      	add	sp, #88	; 0x58
 800172a:	bd70      	pop	{r4, r5, r6, pc}
 800172c:	0000      	movs	r0, r0
	...

08001730 <memchr>:
 8001730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001734:	2a10      	cmp	r2, #16
 8001736:	db2b      	blt.n	8001790 <memchr+0x60>
 8001738:	f010 0f07 	tst.w	r0, #7
 800173c:	d008      	beq.n	8001750 <memchr+0x20>
 800173e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001742:	3a01      	subs	r2, #1
 8001744:	428b      	cmp	r3, r1
 8001746:	d02d      	beq.n	80017a4 <memchr+0x74>
 8001748:	f010 0f07 	tst.w	r0, #7
 800174c:	b342      	cbz	r2, 80017a0 <memchr+0x70>
 800174e:	d1f6      	bne.n	800173e <memchr+0xe>
 8001750:	b4f0      	push	{r4, r5, r6, r7}
 8001752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800175a:	f022 0407 	bic.w	r4, r2, #7
 800175e:	f07f 0700 	mvns.w	r7, #0
 8001762:	2300      	movs	r3, #0
 8001764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001768:	3c08      	subs	r4, #8
 800176a:	ea85 0501 	eor.w	r5, r5, r1
 800176e:	ea86 0601 	eor.w	r6, r6, r1
 8001772:	fa85 f547 	uadd8	r5, r5, r7
 8001776:	faa3 f587 	sel	r5, r3, r7
 800177a:	fa86 f647 	uadd8	r6, r6, r7
 800177e:	faa5 f687 	sel	r6, r5, r7
 8001782:	b98e      	cbnz	r6, 80017a8 <memchr+0x78>
 8001784:	d1ee      	bne.n	8001764 <memchr+0x34>
 8001786:	bcf0      	pop	{r4, r5, r6, r7}
 8001788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800178c:	f002 0207 	and.w	r2, r2, #7
 8001790:	b132      	cbz	r2, 80017a0 <memchr+0x70>
 8001792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001796:	3a01      	subs	r2, #1
 8001798:	ea83 0301 	eor.w	r3, r3, r1
 800179c:	b113      	cbz	r3, 80017a4 <memchr+0x74>
 800179e:	d1f8      	bne.n	8001792 <memchr+0x62>
 80017a0:	2000      	movs	r0, #0
 80017a2:	4770      	bx	lr
 80017a4:	3801      	subs	r0, #1
 80017a6:	4770      	bx	lr
 80017a8:	2d00      	cmp	r5, #0
 80017aa:	bf06      	itte	eq
 80017ac:	4635      	moveq	r5, r6
 80017ae:	3803      	subeq	r0, #3
 80017b0:	3807      	subne	r0, #7
 80017b2:	f015 0f01 	tst.w	r5, #1
 80017b6:	d107      	bne.n	80017c8 <memchr+0x98>
 80017b8:	3001      	adds	r0, #1
 80017ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80017be:	bf02      	ittt	eq
 80017c0:	3001      	addeq	r0, #1
 80017c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80017c6:	3001      	addeq	r0, #1
 80017c8:	bcf0      	pop	{r4, r5, r6, r7}
 80017ca:	3801      	subs	r0, #1
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <memcpy>:
 80017d0:	4684      	mov	ip, r0
 80017d2:	ea41 0300 	orr.w	r3, r1, r0
 80017d6:	f013 0303 	ands.w	r3, r3, #3
 80017da:	d16d      	bne.n	80018b8 <memcpy+0xe8>
 80017dc:	3a40      	subs	r2, #64	; 0x40
 80017de:	d341      	bcc.n	8001864 <memcpy+0x94>
 80017e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017e4:	f840 3b04 	str.w	r3, [r0], #4
 80017e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017ec:	f840 3b04 	str.w	r3, [r0], #4
 80017f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017f4:	f840 3b04 	str.w	r3, [r0], #4
 80017f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017fc:	f840 3b04 	str.w	r3, [r0], #4
 8001800:	f851 3b04 	ldr.w	r3, [r1], #4
 8001804:	f840 3b04 	str.w	r3, [r0], #4
 8001808:	f851 3b04 	ldr.w	r3, [r1], #4
 800180c:	f840 3b04 	str.w	r3, [r0], #4
 8001810:	f851 3b04 	ldr.w	r3, [r1], #4
 8001814:	f840 3b04 	str.w	r3, [r0], #4
 8001818:	f851 3b04 	ldr.w	r3, [r1], #4
 800181c:	f840 3b04 	str.w	r3, [r0], #4
 8001820:	f851 3b04 	ldr.w	r3, [r1], #4
 8001824:	f840 3b04 	str.w	r3, [r0], #4
 8001828:	f851 3b04 	ldr.w	r3, [r1], #4
 800182c:	f840 3b04 	str.w	r3, [r0], #4
 8001830:	f851 3b04 	ldr.w	r3, [r1], #4
 8001834:	f840 3b04 	str.w	r3, [r0], #4
 8001838:	f851 3b04 	ldr.w	r3, [r1], #4
 800183c:	f840 3b04 	str.w	r3, [r0], #4
 8001840:	f851 3b04 	ldr.w	r3, [r1], #4
 8001844:	f840 3b04 	str.w	r3, [r0], #4
 8001848:	f851 3b04 	ldr.w	r3, [r1], #4
 800184c:	f840 3b04 	str.w	r3, [r0], #4
 8001850:	f851 3b04 	ldr.w	r3, [r1], #4
 8001854:	f840 3b04 	str.w	r3, [r0], #4
 8001858:	f851 3b04 	ldr.w	r3, [r1], #4
 800185c:	f840 3b04 	str.w	r3, [r0], #4
 8001860:	3a40      	subs	r2, #64	; 0x40
 8001862:	d2bd      	bcs.n	80017e0 <memcpy+0x10>
 8001864:	3230      	adds	r2, #48	; 0x30
 8001866:	d311      	bcc.n	800188c <memcpy+0xbc>
 8001868:	f851 3b04 	ldr.w	r3, [r1], #4
 800186c:	f840 3b04 	str.w	r3, [r0], #4
 8001870:	f851 3b04 	ldr.w	r3, [r1], #4
 8001874:	f840 3b04 	str.w	r3, [r0], #4
 8001878:	f851 3b04 	ldr.w	r3, [r1], #4
 800187c:	f840 3b04 	str.w	r3, [r0], #4
 8001880:	f851 3b04 	ldr.w	r3, [r1], #4
 8001884:	f840 3b04 	str.w	r3, [r0], #4
 8001888:	3a10      	subs	r2, #16
 800188a:	d2ed      	bcs.n	8001868 <memcpy+0x98>
 800188c:	320c      	adds	r2, #12
 800188e:	d305      	bcc.n	800189c <memcpy+0xcc>
 8001890:	f851 3b04 	ldr.w	r3, [r1], #4
 8001894:	f840 3b04 	str.w	r3, [r0], #4
 8001898:	3a04      	subs	r2, #4
 800189a:	d2f9      	bcs.n	8001890 <memcpy+0xc0>
 800189c:	3204      	adds	r2, #4
 800189e:	d008      	beq.n	80018b2 <memcpy+0xe2>
 80018a0:	07d2      	lsls	r2, r2, #31
 80018a2:	bf1c      	itt	ne
 80018a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80018a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80018ac:	d301      	bcc.n	80018b2 <memcpy+0xe2>
 80018ae:	880b      	ldrh	r3, [r1, #0]
 80018b0:	8003      	strh	r3, [r0, #0]
 80018b2:	4660      	mov	r0, ip
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2a08      	cmp	r2, #8
 80018ba:	d313      	bcc.n	80018e4 <memcpy+0x114>
 80018bc:	078b      	lsls	r3, r1, #30
 80018be:	d08d      	beq.n	80017dc <memcpy+0xc>
 80018c0:	f010 0303 	ands.w	r3, r0, #3
 80018c4:	d08a      	beq.n	80017dc <memcpy+0xc>
 80018c6:	f1c3 0304 	rsb	r3, r3, #4
 80018ca:	1ad2      	subs	r2, r2, r3
 80018cc:	07db      	lsls	r3, r3, #31
 80018ce:	bf1c      	itt	ne
 80018d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80018d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80018d8:	d380      	bcc.n	80017dc <memcpy+0xc>
 80018da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80018de:	f820 3b02 	strh.w	r3, [r0], #2
 80018e2:	e77b      	b.n	80017dc <memcpy+0xc>
 80018e4:	3a04      	subs	r2, #4
 80018e6:	d3d9      	bcc.n	800189c <memcpy+0xcc>
 80018e8:	3a01      	subs	r2, #1
 80018ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018ee:	f800 3b01 	strb.w	r3, [r0], #1
 80018f2:	d2f9      	bcs.n	80018e8 <memcpy+0x118>
 80018f4:	780b      	ldrb	r3, [r1, #0]
 80018f6:	7003      	strb	r3, [r0, #0]
 80018f8:	784b      	ldrb	r3, [r1, #1]
 80018fa:	7043      	strb	r3, [r0, #1]
 80018fc:	788b      	ldrb	r3, [r1, #2]
 80018fe:	7083      	strb	r3, [r0, #2]
 8001900:	4660      	mov	r0, ip
 8001902:	4770      	bx	lr

08001904 <memmove>:
 8001904:	4288      	cmp	r0, r1
 8001906:	d90d      	bls.n	8001924 <memmove+0x20>
 8001908:	188b      	adds	r3, r1, r2
 800190a:	4283      	cmp	r3, r0
 800190c:	d90a      	bls.n	8001924 <memmove+0x20>
 800190e:	eb00 0c02 	add.w	ip, r0, r2
 8001912:	b1ba      	cbz	r2, 8001944 <memmove+0x40>
 8001914:	4662      	mov	r2, ip
 8001916:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800191a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800191e:	4299      	cmp	r1, r3
 8001920:	d1f9      	bne.n	8001916 <memmove+0x12>
 8001922:	4770      	bx	lr
 8001924:	2a0f      	cmp	r2, #15
 8001926:	d80e      	bhi.n	8001946 <memmove+0x42>
 8001928:	4603      	mov	r3, r0
 800192a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800192e:	b14a      	cbz	r2, 8001944 <memmove+0x40>
 8001930:	f10c 0c01 	add.w	ip, ip, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	448c      	add	ip, r1
 8001938:	f811 2b01 	ldrb.w	r2, [r1], #1
 800193c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001940:	4561      	cmp	r1, ip
 8001942:	d1f9      	bne.n	8001938 <memmove+0x34>
 8001944:	4770      	bx	lr
 8001946:	ea40 0301 	orr.w	r3, r0, r1
 800194a:	079b      	lsls	r3, r3, #30
 800194c:	d150      	bne.n	80019f0 <memmove+0xec>
 800194e:	f1a2 0310 	sub.w	r3, r2, #16
 8001952:	b570      	push	{r4, r5, r6, lr}
 8001954:	f101 0c20 	add.w	ip, r1, #32
 8001958:	f023 050f 	bic.w	r5, r3, #15
 800195c:	f101 0e10 	add.w	lr, r1, #16
 8001960:	f100 0410 	add.w	r4, r0, #16
 8001964:	44ac      	add	ip, r5
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800196c:	f844 5c10 	str.w	r5, [r4, #-16]
 8001970:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8001974:	f844 5c0c 	str.w	r5, [r4, #-12]
 8001978:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800197c:	f844 5c08 	str.w	r5, [r4, #-8]
 8001980:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8001984:	f844 5c04 	str.w	r5, [r4, #-4]
 8001988:	f10e 0e10 	add.w	lr, lr, #16
 800198c:	45e6      	cmp	lr, ip
 800198e:	f104 0410 	add.w	r4, r4, #16
 8001992:	d1e9      	bne.n	8001968 <memmove+0x64>
 8001994:	3301      	adds	r3, #1
 8001996:	f012 0f0c 	tst.w	r2, #12
 800199a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800199e:	f002 040f 	and.w	r4, r2, #15
 80019a2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80019a6:	d027      	beq.n	80019f8 <memmove+0xf4>
 80019a8:	3c04      	subs	r4, #4
 80019aa:	f024 0603 	bic.w	r6, r4, #3
 80019ae:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80019b2:	441e      	add	r6, r3
 80019b4:	1f1c      	subs	r4, r3, #4
 80019b6:	468e      	mov	lr, r1
 80019b8:	f85e 5b04 	ldr.w	r5, [lr], #4
 80019bc:	f844 5f04 	str.w	r5, [r4, #4]!
 80019c0:	42b4      	cmp	r4, r6
 80019c2:	d1f9      	bne.n	80019b8 <memmove+0xb4>
 80019c4:	f10c 0401 	add.w	r4, ip, #1
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80019d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80019d4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80019d8:	b14a      	cbz	r2, 80019ee <memmove+0xea>
 80019da:	f10c 0c01 	add.w	ip, ip, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	448c      	add	ip, r1
 80019e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019ea:	4561      	cmp	r1, ip
 80019ec:	d1f9      	bne.n	80019e2 <memmove+0xde>
 80019ee:	bd70      	pop	{r4, r5, r6, pc}
 80019f0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80019f4:	4603      	mov	r3, r0
 80019f6:	e79b      	b.n	8001930 <memmove+0x2c>
 80019f8:	4622      	mov	r2, r4
 80019fa:	e7eb      	b.n	80019d4 <memmove+0xd0>

080019fc <_free_r>:
 80019fc:	2900      	cmp	r1, #0
 80019fe:	d058      	beq.n	8001ab2 <_free_r+0xb6>
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a06:	b083      	sub	sp, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a0e:	bfb8      	it	lt
 8001a10:	18e4      	addlt	r4, r4, r3
 8001a12:	9001      	str	r0, [sp, #4]
 8001a14:	f000 fcda 	bl	80023cc <__malloc_lock>
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <_free_r+0xc0>)
 8001a1a:	9801      	ldr	r0, [sp, #4]
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	b133      	cbz	r3, 8001a2e <_free_r+0x32>
 8001a20:	42a3      	cmp	r3, r4
 8001a22:	d90d      	bls.n	8001a40 <_free_r+0x44>
 8001a24:	6821      	ldr	r1, [r4, #0]
 8001a26:	eb04 0c01 	add.w	ip, r4, r1
 8001a2a:	4563      	cmp	r3, ip
 8001a2c:	d02f      	beq.n	8001a8e <_free_r+0x92>
 8001a2e:	6063      	str	r3, [r4, #4]
 8001a30:	6014      	str	r4, [r2, #0]
 8001a32:	b003      	add	sp, #12
 8001a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a38:	f000 bcca 	b.w	80023d0 <__malloc_unlock>
 8001a3c:	42a3      	cmp	r3, r4
 8001a3e:	d810      	bhi.n	8001a62 <_free_r+0x66>
 8001a40:	461a      	mov	r2, r3
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <_free_r+0x40>
 8001a48:	6811      	ldr	r1, [r2, #0]
 8001a4a:	eb02 0c01 	add.w	ip, r2, r1
 8001a4e:	4564      	cmp	r4, ip
 8001a50:	d019      	beq.n	8001a86 <_free_r+0x8a>
 8001a52:	d32f      	bcc.n	8001ab4 <_free_r+0xb8>
 8001a54:	6063      	str	r3, [r4, #4]
 8001a56:	6054      	str	r4, [r2, #4]
 8001a58:	b003      	add	sp, #12
 8001a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a5e:	f000 bcb7 	b.w	80023d0 <__malloc_unlock>
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	eb02 0c01 	add.w	ip, r2, r1
 8001a68:	45a4      	cmp	ip, r4
 8001a6a:	d016      	beq.n	8001a9a <_free_r+0x9e>
 8001a6c:	d822      	bhi.n	8001ab4 <_free_r+0xb8>
 8001a6e:	6821      	ldr	r1, [r4, #0]
 8001a70:	eb04 0c01 	add.w	ip, r4, r1
 8001a74:	4563      	cmp	r3, ip
 8001a76:	d1ed      	bne.n	8001a54 <_free_r+0x58>
 8001a78:	681d      	ldr	r5, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4429      	add	r1, r5
 8001a7e:	e9c4 1300 	strd	r1, r3, [r4]
 8001a82:	6054      	str	r4, [r2, #4]
 8001a84:	e7d5      	b.n	8001a32 <_free_r+0x36>
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	4419      	add	r1, r3
 8001a8a:	6011      	str	r1, [r2, #0]
 8001a8c:	e7d1      	b.n	8001a32 <_free_r+0x36>
 8001a8e:	681d      	ldr	r5, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4429      	add	r1, r5
 8001a94:	e9c4 1300 	strd	r1, r3, [r4]
 8001a98:	e7ca      	b.n	8001a30 <_free_r+0x34>
 8001a9a:	6824      	ldr	r4, [r4, #0]
 8001a9c:	4421      	add	r1, r4
 8001a9e:	1854      	adds	r4, r2, r1
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	d1c5      	bne.n	8001a32 <_free_r+0x36>
 8001aa6:	e9d3 4300 	ldrd	r4, r3, [r3]
 8001aaa:	4421      	add	r1, r4
 8001aac:	e9c2 1300 	strd	r1, r3, [r2]
 8001ab0:	e7bf      	b.n	8001a32 <_free_r+0x36>
 8001ab2:	4770      	bx	lr
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	6003      	str	r3, [r0, #0]
 8001ab8:	e7bb      	b.n	8001a32 <_free_r+0x36>
 8001aba:	bf00      	nop
 8001abc:	2000011c 	.word	0x2000011c

08001ac0 <_malloc_r>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	1ccd      	adds	r5, r1, #3
 8001ac4:	f025 0503 	bic.w	r5, r5, #3
 8001ac8:	3508      	adds	r5, #8
 8001aca:	2d0c      	cmp	r5, #12
 8001acc:	bf38      	it	cc
 8001ace:	250c      	movcc	r5, #12
 8001ad0:	2d00      	cmp	r5, #0
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	db23      	blt.n	8001b1e <_malloc_r+0x5e>
 8001ad6:	42a9      	cmp	r1, r5
 8001ad8:	d821      	bhi.n	8001b1e <_malloc_r+0x5e>
 8001ada:	4f25      	ldr	r7, [pc, #148]	; (8001b70 <_malloc_r+0xb0>)
 8001adc:	f000 fc76 	bl	80023cc <__malloc_lock>
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b322      	cbz	r2, 8001b2e <_malloc_r+0x6e>
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	e003      	b.n	8001af0 <_malloc_r+0x30>
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	4622      	mov	r2, r4
 8001aec:	b1fb      	cbz	r3, 8001b2e <_malloc_r+0x6e>
 8001aee:	461c      	mov	r4, r3
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	1b5b      	subs	r3, r3, r5
 8001af4:	d4f8      	bmi.n	8001ae8 <_malloc_r+0x28>
 8001af6:	2b0b      	cmp	r3, #11
 8001af8:	d815      	bhi.n	8001b26 <_malloc_r+0x66>
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	4294      	cmp	r4, r2
 8001afe:	bf0c      	ite	eq
 8001b00:	603b      	streq	r3, [r7, #0]
 8001b02:	6053      	strne	r3, [r2, #4]
 8001b04:	4630      	mov	r0, r6
 8001b06:	f000 fc63 	bl	80023d0 <__malloc_unlock>
 8001b0a:	f104 000b 	add.w	r0, r4, #11
 8001b0e:	1d23      	adds	r3, r4, #4
 8001b10:	f020 0007 	bic.w	r0, r0, #7
 8001b14:	1ac2      	subs	r2, r0, r3
 8001b16:	d001      	beq.n	8001b1c <_malloc_r+0x5c>
 8001b18:	1a1b      	subs	r3, r3, r0
 8001b1a:	50a3      	str	r3, [r4, r2]
 8001b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b1e:	230c      	movs	r3, #12
 8001b20:	6033      	str	r3, [r6, #0]
 8001b22:	2000      	movs	r0, #0
 8001b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b26:	6023      	str	r3, [r4, #0]
 8001b28:	441c      	add	r4, r3
 8001b2a:	6025      	str	r5, [r4, #0]
 8001b2c:	e7ea      	b.n	8001b04 <_malloc_r+0x44>
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	b1c9      	cbz	r1, 8001b66 <_malloc_r+0xa6>
 8001b32:	4629      	mov	r1, r5
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 fa3d 	bl	8001fb4 <_sbrk_r>
 8001b3a:	1c43      	adds	r3, r0, #1
 8001b3c:	d00c      	beq.n	8001b58 <_malloc_r+0x98>
 8001b3e:	1cc4      	adds	r4, r0, #3
 8001b40:	f024 0403 	bic.w	r4, r4, #3
 8001b44:	42a0      	cmp	r0, r4
 8001b46:	d005      	beq.n	8001b54 <_malloc_r+0x94>
 8001b48:	1a21      	subs	r1, r4, r0
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f000 fa32 	bl	8001fb4 <_sbrk_r>
 8001b50:	3001      	adds	r0, #1
 8001b52:	d001      	beq.n	8001b58 <_malloc_r+0x98>
 8001b54:	6025      	str	r5, [r4, #0]
 8001b56:	e7d5      	b.n	8001b04 <_malloc_r+0x44>
 8001b58:	230c      	movs	r3, #12
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	6033      	str	r3, [r6, #0]
 8001b5e:	f000 fc37 	bl	80023d0 <__malloc_unlock>
 8001b62:	2000      	movs	r0, #0
 8001b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b66:	4630      	mov	r0, r6
 8001b68:	f000 fa24 	bl	8001fb4 <_sbrk_r>
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	e7e0      	b.n	8001b32 <_malloc_r+0x72>
 8001b70:	2000011c 	.word	0x2000011c

08001b74 <_realloc_r>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	4614      	mov	r4, r2
 8001b78:	b1f9      	cbz	r1, 8001bba <_realloc_r+0x46>
 8001b7a:	b1ca      	cbz	r2, 8001bb0 <_realloc_r+0x3c>
 8001b7c:	4606      	mov	r6, r0
 8001b7e:	460d      	mov	r5, r1
 8001b80:	f000 fc28 	bl	80023d4 <_malloc_usable_size_r>
 8001b84:	42a0      	cmp	r0, r4
 8001b86:	d302      	bcc.n	8001b8e <_realloc_r+0x1a>
 8001b88:	462f      	mov	r7, r5
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8e:	4621      	mov	r1, r4
 8001b90:	4630      	mov	r0, r6
 8001b92:	f7ff ff95 	bl	8001ac0 <_malloc_r>
 8001b96:	4607      	mov	r7, r0
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d0f6      	beq.n	8001b8a <_realloc_r+0x16>
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7ff fe16 	bl	80017d0 <memcpy>
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7ff ff28 	bl	80019fc <_free_r>
 8001bac:	4638      	mov	r0, r7
 8001bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb0:	4627      	mov	r7, r4
 8001bb2:	f7ff ff23 	bl	80019fc <_free_r>
 8001bb6:	4638      	mov	r0, r7
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	f7ff bf7e 	b.w	8001ac0 <_malloc_r>

08001bc4 <__ssputs_r>:
 8001bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc8:	688f      	ldr	r7, [r1, #8]
 8001bca:	429f      	cmp	r7, r3
 8001bcc:	460c      	mov	r4, r1
 8001bce:	461d      	mov	r5, r3
 8001bd0:	4616      	mov	r6, r2
 8001bd2:	d838      	bhi.n	8001c46 <__ssputs_r+0x82>
 8001bd4:	4682      	mov	sl, r0
 8001bd6:	8988      	ldrh	r0, [r1, #12]
 8001bd8:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8001bdc:	d10e      	bne.n	8001bfc <__ssputs_r+0x38>
 8001bde:	6808      	ldr	r0, [r1, #0]
 8001be0:	463d      	mov	r5, r7
 8001be2:	462a      	mov	r2, r5
 8001be4:	4631      	mov	r1, r6
 8001be6:	f7ff fe8d 	bl	8001904 <memmove>
 8001bea:	68a2      	ldr	r2, [r4, #8]
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	1bd2      	subs	r2, r2, r7
 8001bf0:	442b      	add	r3, r5
 8001bf2:	60a2      	str	r2, [r4, #8]
 8001bf4:	6023      	str	r3, [r4, #0]
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bfc:	694b      	ldr	r3, [r1, #20]
 8001bfe:	6909      	ldr	r1, [r1, #16]
 8001c00:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8001c0a:	eba3 0901 	sub.w	r9, r3, r1
 8001c0e:	1c6b      	adds	r3, r5, #1
 8001c10:	ea4f 0868 	mov.w	r8, r8, asr #1
 8001c14:	444b      	add	r3, r9
 8001c16:	4543      	cmp	r3, r8
 8001c18:	4642      	mov	r2, r8
 8001c1a:	bf84      	itt	hi
 8001c1c:	4698      	movhi	r8, r3
 8001c1e:	4642      	movhi	r2, r8
 8001c20:	0543      	lsls	r3, r0, #21
 8001c22:	d513      	bpl.n	8001c4c <__ssputs_r+0x88>
 8001c24:	4611      	mov	r1, r2
 8001c26:	4650      	mov	r0, sl
 8001c28:	f7ff ff4a 	bl	8001ac0 <_malloc_r>
 8001c2c:	4607      	mov	r7, r0
 8001c2e:	b308      	cbz	r0, 8001c74 <__ssputs_r+0xb0>
 8001c30:	6921      	ldr	r1, [r4, #16]
 8001c32:	464a      	mov	r2, r9
 8001c34:	f7ff fdcc 	bl	80017d0 <memcpy>
 8001c38:	89a3      	ldrh	r3, [r4, #12]
 8001c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c42:	81a3      	strh	r3, [r4, #12]
 8001c44:	e007      	b.n	8001c56 <__ssputs_r+0x92>
 8001c46:	6808      	ldr	r0, [r1, #0]
 8001c48:	461f      	mov	r7, r3
 8001c4a:	e7ca      	b.n	8001be2 <__ssputs_r+0x1e>
 8001c4c:	4650      	mov	r0, sl
 8001c4e:	f7ff ff91 	bl	8001b74 <_realloc_r>
 8001c52:	4607      	mov	r7, r0
 8001c54:	b150      	cbz	r0, 8001c6c <__ssputs_r+0xa8>
 8001c56:	eb07 0009 	add.w	r0, r7, r9
 8001c5a:	eba8 0309 	sub.w	r3, r8, r9
 8001c5e:	6127      	str	r7, [r4, #16]
 8001c60:	f8c4 8014 	str.w	r8, [r4, #20]
 8001c64:	60a3      	str	r3, [r4, #8]
 8001c66:	6020      	str	r0, [r4, #0]
 8001c68:	462f      	mov	r7, r5
 8001c6a:	e7ba      	b.n	8001be2 <__ssputs_r+0x1e>
 8001c6c:	6921      	ldr	r1, [r4, #16]
 8001c6e:	4650      	mov	r0, sl
 8001c70:	f7ff fec4 	bl	80019fc <_free_r>
 8001c74:	230c      	movs	r3, #12
 8001c76:	f8ca 3000 	str.w	r3, [sl]
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	e7b7      	b.n	8001bf8 <__ssputs_r+0x34>

08001c88 <__ssprint_r>:
 8001c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8c:	6893      	ldr	r3, [r2, #8]
 8001c8e:	b083      	sub	sp, #12
 8001c90:	4691      	mov	r9, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06e      	beq.n	8001d74 <__ssprint_r+0xec>
 8001c96:	6817      	ldr	r7, [r2, #0]
 8001c98:	688d      	ldr	r5, [r1, #8]
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	6808      	ldr	r0, [r1, #0]
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	e044      	b.n	8001d2e <__ssprint_r+0xa6>
 8001ca4:	89a3      	ldrh	r3, [r4, #12]
 8001ca6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8001caa:	d02e      	beq.n	8001d0a <__ssprint_r+0x82>
 8001cac:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8001cb0:	eba0 0a01 	sub.w	sl, r0, r1
 8001cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001cbc:	eb0a 0006 	add.w	r0, sl, r6
 8001cc0:	106d      	asrs	r5, r5, #1
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	42a8      	cmp	r0, r5
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	bf84      	itt	hi
 8001cca:	4605      	movhi	r5, r0
 8001ccc:	462a      	movhi	r2, r5
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	d537      	bpl.n	8001d42 <__ssprint_r+0xba>
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4640      	mov	r0, r8
 8001cd6:	f7ff fef3 	bl	8001ac0 <_malloc_r>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d03b      	beq.n	8001d56 <__ssprint_r+0xce>
 8001cde:	4652      	mov	r2, sl
 8001ce0:	6921      	ldr	r1, [r4, #16]
 8001ce2:	9001      	str	r0, [sp, #4]
 8001ce4:	f7ff fd74 	bl	80017d0 <memcpy>
 8001ce8:	89a2      	ldrh	r2, [r4, #12]
 8001cea:	9b01      	ldr	r3, [sp, #4]
 8001cec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf4:	81a2      	strh	r2, [r4, #12]
 8001cf6:	eba5 020a 	sub.w	r2, r5, sl
 8001cfa:	eb03 000a 	add.w	r0, r3, sl
 8001cfe:	6165      	str	r5, [r4, #20]
 8001d00:	60a2      	str	r2, [r4, #8]
 8001d02:	6123      	str	r3, [r4, #16]
 8001d04:	6020      	str	r0, [r4, #0]
 8001d06:	4635      	mov	r5, r6
 8001d08:	46b2      	mov	sl, r6
 8001d0a:	4659      	mov	r1, fp
 8001d0c:	4652      	mov	r2, sl
 8001d0e:	f7ff fdf9 	bl	8001904 <memmove>
 8001d12:	68a0      	ldr	r0, [r4, #8]
 8001d14:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	1b45      	subs	r5, r0, r5
 8001d1c:	1b8e      	subs	r6, r1, r6
 8001d1e:	eb03 000a 	add.w	r0, r3, sl
 8001d22:	60a5      	str	r5, [r4, #8]
 8001d24:	6020      	str	r0, [r4, #0]
 8001d26:	f8c9 6008 	str.w	r6, [r9, #8]
 8001d2a:	b31e      	cbz	r6, 8001d74 <__ssprint_r+0xec>
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 8001d32:	2e00      	cmp	r6, #0
 8001d34:	d0fa      	beq.n	8001d2c <__ssprint_r+0xa4>
 8001d36:	42b5      	cmp	r5, r6
 8001d38:	46aa      	mov	sl, r5
 8001d3a:	d9b3      	bls.n	8001ca4 <__ssprint_r+0x1c>
 8001d3c:	4635      	mov	r5, r6
 8001d3e:	46b2      	mov	sl, r6
 8001d40:	e7e3      	b.n	8001d0a <__ssprint_r+0x82>
 8001d42:	4640      	mov	r0, r8
 8001d44:	f7ff ff16 	bl	8001b74 <_realloc_r>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1d3      	bne.n	8001cf6 <__ssprint_r+0x6e>
 8001d4e:	6921      	ldr	r1, [r4, #16]
 8001d50:	4640      	mov	r0, r8
 8001d52:	f7ff fe53 	bl	80019fc <_free_r>
 8001d56:	230c      	movs	r3, #12
 8001d58:	f8c8 3000 	str.w	r3, [r8]
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d68:	81a3      	strh	r3, [r4, #12]
 8001d6a:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8001d6e:	b003      	add	sp, #12
 8001d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d74:	2000      	movs	r0, #0
 8001d76:	f8c9 0004 	str.w	r0, [r9, #4]
 8001d7a:	b003      	add	sp, #12
 8001d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d80 <_svfiprintf_r>:
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	4692      	mov	sl, r2
 8001d86:	898a      	ldrh	r2, [r1, #12]
 8001d88:	0615      	lsls	r5, r2, #24
 8001d8a:	b09d      	sub	sp, #116	; 0x74
 8001d8c:	4688      	mov	r8, r1
 8001d8e:	4681      	mov	r9, r0
 8001d90:	461c      	mov	r4, r3
 8001d92:	d503      	bpl.n	8001d9c <_svfiprintf_r+0x1c>
 8001d94:	690a      	ldr	r2, [r1, #16]
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	f000 80ef 	beq.w	8001f7a <_svfiprintf_r+0x1fa>
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8001da0:	f89a 3000 	ldrb.w	r3, [sl]
 8001da4:	4d7e      	ldr	r5, [pc, #504]	; (8001fa0 <_svfiprintf_r+0x220>)
 8001da6:	9403      	str	r4, [sp, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 8001dae:	2230      	movs	r2, #48	; 0x30
 8001db0:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 8001db4:	2601      	movs	r6, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d072      	beq.n	8001ea0 <_svfiprintf_r+0x120>
 8001dba:	4654      	mov	r4, sl
 8001dbc:	e003      	b.n	8001dc6 <_svfiprintf_r+0x46>
 8001dbe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d076      	beq.n	8001eb4 <_svfiprintf_r+0x134>
 8001dc6:	2b25      	cmp	r3, #37	; 0x25
 8001dc8:	d1f9      	bne.n	8001dbe <_svfiprintf_r+0x3e>
 8001dca:	ebb4 0b0a 	subs.w	fp, r4, sl
 8001dce:	d174      	bne.n	8001eba <_svfiprintf_r+0x13a>
 8001dd0:	7822      	ldrb	r2, [r4, #0]
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d064      	beq.n	8001ea0 <_svfiprintf_r+0x120>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de0:	9304      	str	r3, [sp, #16]
 8001de2:	9307      	str	r3, [sp, #28]
 8001de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001de8:	931a      	str	r3, [sp, #104]	; 0x68
 8001dea:	3401      	adds	r4, #1
 8001dec:	e004      	b.n	8001df8 <_svfiprintf_r+0x78>
 8001dee:	9a04      	ldr	r2, [sp, #16]
 8001df0:	fa06 f303 	lsl.w	r3, r6, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	9304      	str	r3, [sp, #16]
 8001df8:	46a2      	mov	sl, r4
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e00:	4628      	mov	r0, r5
 8001e02:	f7ff fc95 	bl	8001730 <memchr>
 8001e06:	1b43      	subs	r3, r0, r5
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1f0      	bne.n	8001dee <_svfiprintf_r+0x6e>
 8001e0c:	9b04      	ldr	r3, [sp, #16]
 8001e0e:	06d8      	lsls	r0, r3, #27
 8001e10:	bf44      	itt	mi
 8001e12:	2220      	movmi	r2, #32
 8001e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e18:	0719      	lsls	r1, r3, #28
 8001e1a:	f89a 1000 	ldrb.w	r1, [sl]
 8001e1e:	bf44      	itt	mi
 8001e20:	222b      	movmi	r2, #43	; 0x2b
 8001e22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e26:	292a      	cmp	r1, #42	; 0x2a
 8001e28:	d154      	bne.n	8001ed4 <_svfiprintf_r+0x154>
 8001e2a:	9a03      	ldr	r2, [sp, #12]
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	3204      	adds	r2, #4
 8001e30:	2900      	cmp	r1, #0
 8001e32:	9203      	str	r2, [sp, #12]
 8001e34:	db7c      	blt.n	8001f30 <_svfiprintf_r+0x1b0>
 8001e36:	9107      	str	r1, [sp, #28]
 8001e38:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8001e3c:	f10a 0a01 	add.w	sl, sl, #1
 8001e40:	292e      	cmp	r1, #46	; 0x2e
 8001e42:	d059      	beq.n	8001ef8 <_svfiprintf_r+0x178>
 8001e44:	4c57      	ldr	r4, [pc, #348]	; (8001fa4 <_svfiprintf_r+0x224>)
 8001e46:	2203      	movs	r2, #3
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff fc71 	bl	8001730 <memchr>
 8001e4e:	b140      	cbz	r0, 8001e62 <_svfiprintf_r+0xe2>
 8001e50:	9b04      	ldr	r3, [sp, #16]
 8001e52:	1b00      	subs	r0, r0, r4
 8001e54:	2440      	movs	r4, #64	; 0x40
 8001e56:	fa04 f000 	lsl.w	r0, r4, r0
 8001e5a:	4303      	orrs	r3, r0
 8001e5c:	9304      	str	r3, [sp, #16]
 8001e5e:	f10a 0a01 	add.w	sl, sl, #1
 8001e62:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001e66:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <_svfiprintf_r+0x228>)
 8001e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e6c:	2206      	movs	r2, #6
 8001e6e:	f7ff fc5f 	bl	8001730 <memchr>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d062      	beq.n	8001f3c <_svfiprintf_r+0x1bc>
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <_svfiprintf_r+0x22c>)
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d052      	beq.n	8001f22 <_svfiprintf_r+0x1a2>
 8001e7c:	aa03      	add	r2, sp, #12
 8001e7e:	9200      	str	r2, [sp, #0]
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <_svfiprintf_r+0x230>)
 8001e82:	4642      	mov	r2, r8
 8001e84:	a904      	add	r1, sp, #16
 8001e86:	4648      	mov	r0, r9
 8001e88:	f3af 8000 	nop.w
 8001e8c:	4607      	mov	r7, r0
 8001e8e:	1c7a      	adds	r2, r7, #1
 8001e90:	d006      	beq.n	8001ea0 <_svfiprintf_r+0x120>
 8001e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e94:	443b      	add	r3, r7
 8001e96:	9309      	str	r3, [sp, #36]	; 0x24
 8001e98:	f89a 3000 	ldrb.w	r3, [sl]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d18c      	bne.n	8001dba <_svfiprintf_r+0x3a>
 8001ea0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001ea4:	065b      	lsls	r3, r3, #25
 8001ea6:	bf54      	ite	pl
 8001ea8:	9809      	ldrpl	r0, [sp, #36]	; 0x24
 8001eaa:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8001eae:	b01d      	add	sp, #116	; 0x74
 8001eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb4:	ebb4 0b0a 	subs.w	fp, r4, sl
 8001eb8:	d0f2      	beq.n	8001ea0 <_svfiprintf_r+0x120>
 8001eba:	465b      	mov	r3, fp
 8001ebc:	4652      	mov	r2, sl
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	4648      	mov	r0, r9
 8001ec2:	f7ff fe7f 	bl	8001bc4 <__ssputs_r>
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	d0ea      	beq.n	8001ea0 <_svfiprintf_r+0x120>
 8001eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ecc:	7822      	ldrb	r2, [r4, #0]
 8001ece:	445b      	add	r3, fp
 8001ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ed2:	e77e      	b.n	8001dd2 <_svfiprintf_r+0x52>
 8001ed4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001ed8:	2a09      	cmp	r2, #9
 8001eda:	d8b1      	bhi.n	8001e40 <_svfiprintf_r+0xc0>
 8001edc:	9b07      	ldr	r3, [sp, #28]
 8001ede:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001ee2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ee6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001eea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001eee:	2a09      	cmp	r2, #9
 8001ef0:	d9f5      	bls.n	8001ede <_svfiprintf_r+0x15e>
 8001ef2:	292e      	cmp	r1, #46	; 0x2e
 8001ef4:	9307      	str	r3, [sp, #28]
 8001ef6:	d1a5      	bne.n	8001e44 <_svfiprintf_r+0xc4>
 8001ef8:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8001efc:	292a      	cmp	r1, #42	; 0x2a
 8001efe:	d127      	bne.n	8001f50 <_svfiprintf_r+0x1d0>
 8001f00:	9b03      	ldr	r3, [sp, #12]
 8001f02:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	9205      	str	r2, [sp, #20]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	f10a 0002 	add.w	r0, sl, #2
 8001f12:	9303      	str	r3, [sp, #12]
 8001f14:	bfb8      	it	lt
 8001f16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001f1a:	4682      	mov	sl, r0
 8001f1c:	bfb8      	it	lt
 8001f1e:	9305      	strlt	r3, [sp, #20]
 8001f20:	e790      	b.n	8001e44 <_svfiprintf_r+0xc4>
 8001f22:	9b03      	ldr	r3, [sp, #12]
 8001f24:	3307      	adds	r3, #7
 8001f26:	f023 0307 	bic.w	r3, r3, #7
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	9303      	str	r3, [sp, #12]
 8001f2e:	e7b0      	b.n	8001e92 <_svfiprintf_r+0x112>
 8001f30:	4249      	negs	r1, r1
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	9107      	str	r1, [sp, #28]
 8001f38:	9304      	str	r3, [sp, #16]
 8001f3a:	e77d      	b.n	8001e38 <_svfiprintf_r+0xb8>
 8001f3c:	aa03      	add	r2, sp, #12
 8001f3e:	9200      	str	r2, [sp, #0]
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <_svfiprintf_r+0x230>)
 8001f42:	4642      	mov	r2, r8
 8001f44:	a904      	add	r1, sp, #16
 8001f46:	4648      	mov	r0, r9
 8001f48:	f7fe fc9e 	bl	8000888 <_printf_i>
 8001f4c:	4607      	mov	r7, r0
 8001f4e:	e79e      	b.n	8001e8e <_svfiprintf_r+0x10e>
 8001f50:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001f54:	2300      	movs	r3, #0
 8001f56:	2a09      	cmp	r2, #9
 8001f58:	9305      	str	r3, [sp, #20]
 8001f5a:	f10a 0a01 	add.w	sl, sl, #1
 8001f5e:	f63f af71 	bhi.w	8001e44 <_svfiprintf_r+0xc4>
 8001f62:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001f66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001f6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001f72:	2a09      	cmp	r2, #9
 8001f74:	d9f5      	bls.n	8001f62 <_svfiprintf_r+0x1e2>
 8001f76:	9305      	str	r3, [sp, #20]
 8001f78:	e764      	b.n	8001e44 <_svfiprintf_r+0xc4>
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	f7ff fda0 	bl	8001ac0 <_malloc_r>
 8001f80:	f8c8 0000 	str.w	r0, [r8]
 8001f84:	f8c8 0010 	str.w	r0, [r8, #16]
 8001f88:	b118      	cbz	r0, 8001f92 <_svfiprintf_r+0x212>
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	f8c8 2014 	str.w	r2, [r8, #20]
 8001f90:	e704      	b.n	8001d9c <_svfiprintf_r+0x1c>
 8001f92:	230c      	movs	r3, #12
 8001f94:	f8c9 3000 	str.w	r3, [r9]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f9c:	e787      	b.n	8001eae <_svfiprintf_r+0x12e>
 8001f9e:	bf00      	nop
 8001fa0:	08007338 	.word	0x08007338
 8001fa4:	08007340 	.word	0x08007340
 8001fa8:	08007344 	.word	0x08007344
 8001fac:	00000000 	.word	0x00000000
 8001fb0:	08001bc5 	.word	0x08001bc5

08001fb4 <_sbrk_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4d07      	ldr	r5, [pc, #28]	; (8001fd4 <_sbrk_r+0x20>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	602a      	str	r2, [r5, #0]
 8001fc0:	f004 ff88 	bl	8006ed4 <_sbrk>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d000      	beq.n	8001fca <_sbrk_r+0x16>
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0fb      	beq.n	8001fc8 <_sbrk_r+0x14>
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	20000124 	.word	0x20000124

08001fd8 <_init_signal_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fdc:	b10c      	cbz	r4, 8001fe2 <_init_signal_r+0xa>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	4605      	mov	r5, r0
 8001fe6:	f7ff fd6b 	bl	8001ac0 <_malloc_r>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6468      	str	r0, [r5, #68]	; 0x44
 8001fee:	b130      	cbz	r0, 8001ffe <_init_signal_r+0x26>
 8001ff0:	1f03      	subs	r3, r0, #4
 8001ff2:	327c      	adds	r2, #124	; 0x7c
 8001ff4:	f843 4f04 	str.w	r4, [r3, #4]!
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d1fb      	bne.n	8001ff4 <_init_signal_r+0x1c>
 8001ffc:	e7ef      	b.n	8001fde <_init_signal_r+0x6>
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002002:	bd38      	pop	{r3, r4, r5, pc}

08002004 <_signal_r>:
 8002004:	291f      	cmp	r1, #31
 8002006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002008:	4605      	mov	r5, r0
 800200a:	d808      	bhi.n	800201e <_signal_r+0x1a>
 800200c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800200e:	460c      	mov	r4, r1
 8002010:	4617      	mov	r7, r2
 8002012:	b14e      	cbz	r6, 8002028 <_signal_r+0x24>
 8002014:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002018:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800201e:	2316      	movs	r3, #22
 8002020:	6003      	str	r3, [r0, #0]
 8002022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	f7ff fd49 	bl	8001ac0 <_malloc_r>
 800202e:	4606      	mov	r6, r0
 8002030:	6468      	str	r0, [r5, #68]	; 0x44
 8002032:	b140      	cbz	r0, 8002046 <_signal_r+0x42>
 8002034:	1f03      	subs	r3, r0, #4
 8002036:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 800203a:	2100      	movs	r1, #0
 800203c:	f843 1f04 	str.w	r1, [r3, #4]!
 8002040:	429d      	cmp	r5, r3
 8002042:	d1fb      	bne.n	800203c <_signal_r+0x38>
 8002044:	e7e6      	b.n	8002014 <_signal_r+0x10>
 8002046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800204c <_raise_r>:
 800204c:	291f      	cmp	r1, #31
 800204e:	b538      	push	{r3, r4, r5, lr}
 8002050:	4605      	mov	r5, r0
 8002052:	d820      	bhi.n	8002096 <_raise_r+0x4a>
 8002054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002056:	460c      	mov	r4, r1
 8002058:	b16a      	cbz	r2, 8002076 <_raise_r+0x2a>
 800205a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800205e:	b153      	cbz	r3, 8002076 <_raise_r+0x2a>
 8002060:	2b01      	cmp	r3, #1
 8002062:	d016      	beq.n	8002092 <_raise_r+0x46>
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	d010      	beq.n	800208a <_raise_r+0x3e>
 8002068:	2500      	movs	r5, #0
 800206a:	4620      	mov	r0, r4
 800206c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8002070:	4798      	blx	r3
 8002072:	4628      	mov	r0, r5
 8002074:	bd38      	pop	{r3, r4, r5, pc}
 8002076:	4628      	mov	r0, r5
 8002078:	f000 f8f8 	bl	800226c <_getpid_r>
 800207c:	4622      	mov	r2, r4
 800207e:	4601      	mov	r1, r0
 8002080:	4628      	mov	r0, r5
 8002082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002086:	f000 b8db 	b.w	8002240 <_kill_r>
 800208a:	2316      	movs	r3, #22
 800208c:	6003      	str	r3, [r0, #0]
 800208e:	2001      	movs	r0, #1
 8002090:	bd38      	pop	{r3, r4, r5, pc}
 8002092:	2000      	movs	r0, #0
 8002094:	bd38      	pop	{r3, r4, r5, pc}
 8002096:	2316      	movs	r3, #22
 8002098:	6003      	str	r3, [r0, #0]
 800209a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800209e:	bd38      	pop	{r3, r4, r5, pc}

080020a0 <__sigtramp_r>:
 80020a0:	291f      	cmp	r1, #31
 80020a2:	d82a      	bhi.n	80020fa <__sigtramp_r+0x5a>
 80020a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80020a6:	b538      	push	{r3, r4, r5, lr}
 80020a8:	460c      	mov	r4, r1
 80020aa:	4605      	mov	r5, r0
 80020ac:	b182      	cbz	r2, 80020d0 <__sigtramp_r+0x30>
 80020ae:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80020b2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80020b6:	b14b      	cbz	r3, 80020cc <__sigtramp_r+0x2c>
 80020b8:	1c59      	adds	r1, r3, #1
 80020ba:	d019      	beq.n	80020f0 <__sigtramp_r+0x50>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d015      	beq.n	80020ec <__sigtramp_r+0x4c>
 80020c0:	2500      	movs	r5, #0
 80020c2:	4620      	mov	r0, r4
 80020c4:	6015      	str	r5, [r2, #0]
 80020c6:	4798      	blx	r3
 80020c8:	4628      	mov	r0, r5
 80020ca:	bd38      	pop	{r3, r4, r5, pc}
 80020cc:	2001      	movs	r0, #1
 80020ce:	bd38      	pop	{r3, r4, r5, pc}
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	f7ff fcf5 	bl	8001ac0 <_malloc_r>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6468      	str	r0, [r5, #68]	; 0x44
 80020da:	b158      	cbz	r0, 80020f4 <__sigtramp_r+0x54>
 80020dc:	1f03      	subs	r3, r0, #4
 80020de:	2100      	movs	r1, #0
 80020e0:	307c      	adds	r0, #124	; 0x7c
 80020e2:	f843 1f04 	str.w	r1, [r3, #4]!
 80020e6:	4298      	cmp	r0, r3
 80020e8:	d1fb      	bne.n	80020e2 <__sigtramp_r+0x42>
 80020ea:	e7e0      	b.n	80020ae <__sigtramp_r+0xe>
 80020ec:	2003      	movs	r0, #3
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	2002      	movs	r0, #2
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fe:	4770      	bx	lr

08002100 <raise>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <raise+0x54>)
 8002104:	281f      	cmp	r0, #31
 8002106:	681d      	ldr	r5, [r3, #0]
 8002108:	d81f      	bhi.n	800214a <raise+0x4a>
 800210a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800210c:	4604      	mov	r4, r0
 800210e:	b162      	cbz	r2, 800212a <raise+0x2a>
 8002110:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002114:	b14b      	cbz	r3, 800212a <raise+0x2a>
 8002116:	2b01      	cmp	r3, #1
 8002118:	d015      	beq.n	8002146 <raise+0x46>
 800211a:	1c59      	adds	r1, r3, #1
 800211c:	d00f      	beq.n	800213e <raise+0x3e>
 800211e:	2500      	movs	r5, #0
 8002120:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8002124:	4798      	blx	r3
 8002126:	4628      	mov	r0, r5
 8002128:	bd38      	pop	{r3, r4, r5, pc}
 800212a:	4628      	mov	r0, r5
 800212c:	f000 f89e 	bl	800226c <_getpid_r>
 8002130:	4622      	mov	r2, r4
 8002132:	4601      	mov	r1, r0
 8002134:	4628      	mov	r0, r5
 8002136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213a:	f000 b881 	b.w	8002240 <_kill_r>
 800213e:	2316      	movs	r3, #22
 8002140:	602b      	str	r3, [r5, #0]
 8002142:	2001      	movs	r0, #1
 8002144:	bd38      	pop	{r3, r4, r5, pc}
 8002146:	2000      	movs	r0, #0
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	2316      	movs	r3, #22
 800214c:	602b      	str	r3, [r5, #0]
 800214e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002152:	bd38      	pop	{r3, r4, r5, pc}
 8002154:	20000000 	.word	0x20000000

08002158 <signal>:
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <signal+0x4c>)
 800215a:	281f      	cmp	r0, #31
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	681e      	ldr	r6, [r3, #0]
 8002160:	d808      	bhi.n	8002174 <signal+0x1c>
 8002162:	460d      	mov	r5, r1
 8002164:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8002166:	4604      	mov	r4, r0
 8002168:	b149      	cbz	r1, 800217e <signal+0x26>
 800216a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800216e:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	2316      	movs	r3, #22
 8002176:	6033      	str	r3, [r6, #0]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	4630      	mov	r0, r6
 8002182:	f7ff fc9d 	bl	8001ac0 <_malloc_r>
 8002186:	4601      	mov	r1, r0
 8002188:	6470      	str	r0, [r6, #68]	; 0x44
 800218a:	b140      	cbz	r0, 800219e <signal+0x46>
 800218c:	1f03      	subs	r3, r0, #4
 800218e:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8002192:	2200      	movs	r2, #0
 8002194:	f843 2f04 	str.w	r2, [r3, #4]!
 8002198:	4563      	cmp	r3, ip
 800219a:	d1fb      	bne.n	8002194 <signal+0x3c>
 800219c:	e7e5      	b.n	800216a <signal+0x12>
 800219e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	20000000 	.word	0x20000000

080021a8 <_init_signal>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <_init_signal+0x30>)
 80021ac:	681d      	ldr	r5, [r3, #0]
 80021ae:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80021b0:	b10c      	cbz	r4, 80021b6 <_init_signal+0xe>
 80021b2:	2000      	movs	r0, #0
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7ff fc81 	bl	8001ac0 <_malloc_r>
 80021be:	6468      	str	r0, [r5, #68]	; 0x44
 80021c0:	b138      	cbz	r0, 80021d2 <_init_signal+0x2a>
 80021c2:	1f03      	subs	r3, r0, #4
 80021c4:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 80021c8:	f843 4f04 	str.w	r4, [r3, #4]!
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d1fb      	bne.n	80021c8 <_init_signal+0x20>
 80021d0:	e7ef      	b.n	80021b2 <_init_signal+0xa>
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	20000000 	.word	0x20000000

080021dc <__sigtramp>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <__sigtramp+0x60>)
 80021e0:	281f      	cmp	r0, #31
 80021e2:	681d      	ldr	r5, [r3, #0]
 80021e4:	d826      	bhi.n	8002234 <__sigtramp+0x58>
 80021e6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80021e8:	4604      	mov	r4, r0
 80021ea:	b182      	cbz	r2, 800220e <__sigtramp+0x32>
 80021ec:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80021f0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80021f4:	b14b      	cbz	r3, 800220a <__sigtramp+0x2e>
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	d01a      	beq.n	8002230 <__sigtramp+0x54>
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d016      	beq.n	800222c <__sigtramp+0x50>
 80021fe:	2500      	movs	r5, #0
 8002200:	4620      	mov	r0, r4
 8002202:	6015      	str	r5, [r2, #0]
 8002204:	4798      	blx	r3
 8002206:	4628      	mov	r0, r5
 8002208:	bd38      	pop	{r3, r4, r5, pc}
 800220a:	2001      	movs	r0, #1
 800220c:	bd38      	pop	{r3, r4, r5, pc}
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	4628      	mov	r0, r5
 8002212:	f7ff fc55 	bl	8001ac0 <_malloc_r>
 8002216:	4602      	mov	r2, r0
 8002218:	6468      	str	r0, [r5, #68]	; 0x44
 800221a:	b158      	cbz	r0, 8002234 <__sigtramp+0x58>
 800221c:	1f03      	subs	r3, r0, #4
 800221e:	2100      	movs	r1, #0
 8002220:	307c      	adds	r0, #124	; 0x7c
 8002222:	f843 1f04 	str.w	r1, [r3, #4]!
 8002226:	4283      	cmp	r3, r0
 8002228:	d1fb      	bne.n	8002222 <__sigtramp+0x46>
 800222a:	e7df      	b.n	80021ec <__sigtramp+0x10>
 800222c:	2003      	movs	r0, #3
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	2002      	movs	r0, #2
 8002232:	bd38      	pop	{r3, r4, r5, pc}
 8002234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002238:	bd38      	pop	{r3, r4, r5, pc}
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000

08002240 <_kill_r>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	460c      	mov	r4, r1
 8002244:	4d08      	ldr	r5, [pc, #32]	; (8002268 <_kill_r+0x28>)
 8002246:	4603      	mov	r3, r0
 8002248:	2600      	movs	r6, #0
 800224a:	4620      	mov	r0, r4
 800224c:	4611      	mov	r1, r2
 800224e:	461c      	mov	r4, r3
 8002250:	602e      	str	r6, [r5, #0]
 8002252:	f004 fe07 	bl	8006e64 <_kill>
 8002256:	1c43      	adds	r3, r0, #1
 8002258:	d000      	beq.n	800225c <_kill_r+0x1c>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0fb      	beq.n	800225a <_kill_r+0x1a>
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	bf00      	nop
 8002268:	20000124 	.word	0x20000124

0800226c <_getpid_r>:
 800226c:	f004 bdf8 	b.w	8006e60 <_getpid>

08002270 <__sread>:
 8002270:	b510      	push	{r4, lr}
 8002272:	460c      	mov	r4, r1
 8002274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002278:	f000 f8b6 	bl	80023e8 <_read_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	db03      	blt.n	8002288 <__sread+0x18>
 8002280:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002282:	4403      	add	r3, r0
 8002284:	6563      	str	r3, [r4, #84]	; 0x54
 8002286:	bd10      	pop	{r4, pc}
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228e:	81a3      	strh	r3, [r4, #12]
 8002290:	bd10      	pop	{r4, pc}
 8002292:	bf00      	nop

08002294 <__seofread>:
 8002294:	2000      	movs	r0, #0
 8002296:	4770      	bx	lr

08002298 <__swrite>:
 8002298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800229c:	460c      	mov	r4, r1
 800229e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80022a2:	461f      	mov	r7, r3
 80022a4:	05cb      	lsls	r3, r1, #23
 80022a6:	4605      	mov	r5, r0
 80022a8:	4616      	mov	r6, r2
 80022aa:	d40b      	bmi.n	80022c4 <__swrite+0x2c>
 80022ac:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80022b0:	81a1      	strh	r1, [r4, #12]
 80022b2:	463b      	mov	r3, r7
 80022b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022b8:	4632      	mov	r2, r6
 80022ba:	4628      	mov	r0, r5
 80022bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022c0:	f000 b81e 	b.w	8002300 <_write_r>
 80022c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022c8:	2302      	movs	r3, #2
 80022ca:	2200      	movs	r2, #0
 80022cc:	f000 f868 	bl	80023a0 <_lseek_r>
 80022d0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80022d4:	e7ea      	b.n	80022ac <__swrite+0x14>
 80022d6:	bf00      	nop

080022d8 <__sseek>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	460c      	mov	r4, r1
 80022dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e0:	f000 f85e 	bl	80023a0 <_lseek_r>
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	1c42      	adds	r2, r0, #1
 80022e8:	bf0e      	itee	eq
 80022ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022f2:	6560      	strne	r0, [r4, #84]	; 0x54
 80022f4:	81a3      	strh	r3, [r4, #12]
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <__sclose>:
 80022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fc:	f000 b816 	b.w	800232c <_close_r>

08002300 <_write_r>:
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	460c      	mov	r4, r1
 8002304:	4d08      	ldr	r5, [pc, #32]	; (8002328 <_write_r+0x28>)
 8002306:	4684      	mov	ip, r0
 8002308:	4611      	mov	r1, r2
 800230a:	4620      	mov	r0, r4
 800230c:	461a      	mov	r2, r3
 800230e:	2300      	movs	r3, #0
 8002310:	602b      	str	r3, [r5, #0]
 8002312:	4664      	mov	r4, ip
 8002314:	f004 fdc4 	bl	8006ea0 <_write>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d000      	beq.n	800231e <_write_r+0x1e>
 800231c:	bd38      	pop	{r3, r4, r5, pc}
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0fb      	beq.n	800231c <_write_r+0x1c>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	20000124 	.word	0x20000124

0800232c <_close_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	; (800234c <_close_r+0x20>)
 8002330:	2200      	movs	r2, #0
 8002332:	4604      	mov	r4, r0
 8002334:	4608      	mov	r0, r1
 8002336:	602a      	str	r2, [r5, #0]
 8002338:	f004 fdc0 	bl	8006ebc <_close>
 800233c:	1c43      	adds	r3, r0, #1
 800233e:	d000      	beq.n	8002342 <_close_r+0x16>
 8002340:	bd38      	pop	{r3, r4, r5, pc}
 8002342:	682b      	ldr	r3, [r5, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0fb      	beq.n	8002340 <_close_r+0x14>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	20000124 	.word	0x20000124

08002350 <_fstat_r>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	460c      	mov	r4, r1
 8002354:	4d08      	ldr	r5, [pc, #32]	; (8002378 <_fstat_r+0x28>)
 8002356:	4603      	mov	r3, r0
 8002358:	2600      	movs	r6, #0
 800235a:	4620      	mov	r0, r4
 800235c:	4611      	mov	r1, r2
 800235e:	461c      	mov	r4, r3
 8002360:	602e      	str	r6, [r5, #0]
 8002362:	f004 fdae 	bl	8006ec2 <_fstat>
 8002366:	1c43      	adds	r3, r0, #1
 8002368:	d000      	beq.n	800236c <_fstat_r+0x1c>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0fb      	beq.n	800236a <_fstat_r+0x1a>
 8002372:	6023      	str	r3, [r4, #0]
 8002374:	bd70      	pop	{r4, r5, r6, pc}
 8002376:	bf00      	nop
 8002378:	20000124 	.word	0x20000124

0800237c <_isatty_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4d07      	ldr	r5, [pc, #28]	; (800239c <_isatty_r+0x20>)
 8002380:	2200      	movs	r2, #0
 8002382:	4604      	mov	r4, r0
 8002384:	4608      	mov	r0, r1
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	f004 fda0 	bl	8006ecc <_isatty>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d000      	beq.n	8002392 <_isatty_r+0x16>
 8002390:	bd38      	pop	{r3, r4, r5, pc}
 8002392:	682b      	ldr	r3, [r5, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0fb      	beq.n	8002390 <_isatty_r+0x14>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	20000124 	.word	0x20000124

080023a0 <_lseek_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	460c      	mov	r4, r1
 80023a4:	4d08      	ldr	r5, [pc, #32]	; (80023c8 <_lseek_r+0x28>)
 80023a6:	4684      	mov	ip, r0
 80023a8:	4611      	mov	r1, r2
 80023aa:	4620      	mov	r0, r4
 80023ac:	461a      	mov	r2, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	602b      	str	r3, [r5, #0]
 80023b2:	4664      	mov	r4, ip
 80023b4:	f004 fd8c 	bl	8006ed0 <_lseek>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d000      	beq.n	80023be <_lseek_r+0x1e>
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0fb      	beq.n	80023bc <_lseek_r+0x1c>
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	20000124 	.word	0x20000124

080023cc <__malloc_lock>:
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <__malloc_unlock>:
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop

080023d4 <_malloc_usable_size_r>:
 80023d4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80023d8:	2800      	cmp	r0, #0
 80023da:	f1a0 0004 	sub.w	r0, r0, #4
 80023de:	bfbc      	itt	lt
 80023e0:	580b      	ldrlt	r3, [r1, r0]
 80023e2:	18c0      	addlt	r0, r0, r3
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <_read_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	460c      	mov	r4, r1
 80023ec:	4d08      	ldr	r5, [pc, #32]	; (8002410 <_read_r+0x28>)
 80023ee:	4684      	mov	ip, r0
 80023f0:	4611      	mov	r1, r2
 80023f2:	4620      	mov	r0, r4
 80023f4:	461a      	mov	r2, r3
 80023f6:	2300      	movs	r3, #0
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	4664      	mov	r4, ip
 80023fc:	f004 fd40 	bl	8006e80 <_read>
 8002400:	1c43      	adds	r3, r0, #1
 8002402:	d000      	beq.n	8002406 <_read_r+0x1e>
 8002404:	bd38      	pop	{r3, r4, r5, pc}
 8002406:	682b      	ldr	r3, [r5, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0fb      	beq.n	8002404 <_read_r+0x1c>
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	20000124 	.word	0x20000124

08002414 <__aeabi_drsub>:
 8002414:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002418:	e002      	b.n	8002420 <__adddf3>
 800241a:	bf00      	nop

0800241c <__aeabi_dsub>:
 800241c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002420 <__adddf3>:
 8002420:	b530      	push	{r4, r5, lr}
 8002422:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002426:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800242a:	ea94 0f05 	teq	r4, r5
 800242e:	bf08      	it	eq
 8002430:	ea90 0f02 	teqeq	r0, r2
 8002434:	bf1f      	itttt	ne
 8002436:	ea54 0c00 	orrsne.w	ip, r4, r0
 800243a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800243e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002442:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002446:	f000 80e2 	beq.w	800260e <__adddf3+0x1ee>
 800244a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800244e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002452:	bfb8      	it	lt
 8002454:	426d      	neglt	r5, r5
 8002456:	dd0c      	ble.n	8002472 <__adddf3+0x52>
 8002458:	442c      	add	r4, r5
 800245a:	ea80 0202 	eor.w	r2, r0, r2
 800245e:	ea81 0303 	eor.w	r3, r1, r3
 8002462:	ea82 0000 	eor.w	r0, r2, r0
 8002466:	ea83 0101 	eor.w	r1, r3, r1
 800246a:	ea80 0202 	eor.w	r2, r0, r2
 800246e:	ea81 0303 	eor.w	r3, r1, r3
 8002472:	2d36      	cmp	r5, #54	; 0x36
 8002474:	bf88      	it	hi
 8002476:	bd30      	pophi	{r4, r5, pc}
 8002478:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800247c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002480:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002484:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002488:	d002      	beq.n	8002490 <__adddf3+0x70>
 800248a:	4240      	negs	r0, r0
 800248c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002490:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002494:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002498:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800249c:	d002      	beq.n	80024a4 <__adddf3+0x84>
 800249e:	4252      	negs	r2, r2
 80024a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80024a4:	ea94 0f05 	teq	r4, r5
 80024a8:	f000 80a7 	beq.w	80025fa <__adddf3+0x1da>
 80024ac:	f1a4 0401 	sub.w	r4, r4, #1
 80024b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80024b4:	db0d      	blt.n	80024d2 <__adddf3+0xb2>
 80024b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80024ba:	fa22 f205 	lsr.w	r2, r2, r5
 80024be:	1880      	adds	r0, r0, r2
 80024c0:	f141 0100 	adc.w	r1, r1, #0
 80024c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80024c8:	1880      	adds	r0, r0, r2
 80024ca:	fa43 f305 	asr.w	r3, r3, r5
 80024ce:	4159      	adcs	r1, r3
 80024d0:	e00e      	b.n	80024f0 <__adddf3+0xd0>
 80024d2:	f1a5 0520 	sub.w	r5, r5, #32
 80024d6:	f10e 0e20 	add.w	lr, lr, #32
 80024da:	2a01      	cmp	r2, #1
 80024dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80024e0:	bf28      	it	cs
 80024e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80024e6:	fa43 f305 	asr.w	r3, r3, r5
 80024ea:	18c0      	adds	r0, r0, r3
 80024ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80024f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80024f4:	d507      	bpl.n	8002506 <__adddf3+0xe6>
 80024f6:	f04f 0e00 	mov.w	lr, #0
 80024fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80024fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002502:	eb6e 0101 	sbc.w	r1, lr, r1
 8002506:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800250a:	d31b      	bcc.n	8002544 <__adddf3+0x124>
 800250c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002510:	d30c      	bcc.n	800252c <__adddf3+0x10c>
 8002512:	0849      	lsrs	r1, r1, #1
 8002514:	ea5f 0030 	movs.w	r0, r0, rrx
 8002518:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800251c:	f104 0401 	add.w	r4, r4, #1
 8002520:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002524:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002528:	f080 809a 	bcs.w	8002660 <__adddf3+0x240>
 800252c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002530:	bf08      	it	eq
 8002532:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002536:	f150 0000 	adcs.w	r0, r0, #0
 800253a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800253e:	ea41 0105 	orr.w	r1, r1, r5
 8002542:	bd30      	pop	{r4, r5, pc}
 8002544:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002548:	4140      	adcs	r0, r0
 800254a:	eb41 0101 	adc.w	r1, r1, r1
 800254e:	3c01      	subs	r4, #1
 8002550:	bf28      	it	cs
 8002552:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002556:	d2e9      	bcs.n	800252c <__adddf3+0x10c>
 8002558:	f091 0f00 	teq	r1, #0
 800255c:	bf04      	itt	eq
 800255e:	4601      	moveq	r1, r0
 8002560:	2000      	moveq	r0, #0
 8002562:	fab1 f381 	clz	r3, r1
 8002566:	bf08      	it	eq
 8002568:	3320      	addeq	r3, #32
 800256a:	f1a3 030b 	sub.w	r3, r3, #11
 800256e:	f1b3 0220 	subs.w	r2, r3, #32
 8002572:	da0c      	bge.n	800258e <__adddf3+0x16e>
 8002574:	320c      	adds	r2, #12
 8002576:	dd08      	ble.n	800258a <__adddf3+0x16a>
 8002578:	f102 0c14 	add.w	ip, r2, #20
 800257c:	f1c2 020c 	rsb	r2, r2, #12
 8002580:	fa01 f00c 	lsl.w	r0, r1, ip
 8002584:	fa21 f102 	lsr.w	r1, r1, r2
 8002588:	e00c      	b.n	80025a4 <__adddf3+0x184>
 800258a:	f102 0214 	add.w	r2, r2, #20
 800258e:	bfd8      	it	le
 8002590:	f1c2 0c20 	rsble	ip, r2, #32
 8002594:	fa01 f102 	lsl.w	r1, r1, r2
 8002598:	fa20 fc0c 	lsr.w	ip, r0, ip
 800259c:	bfdc      	itt	le
 800259e:	ea41 010c 	orrle.w	r1, r1, ip
 80025a2:	4090      	lslle	r0, r2
 80025a4:	1ae4      	subs	r4, r4, r3
 80025a6:	bfa2      	ittt	ge
 80025a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80025ac:	4329      	orrge	r1, r5
 80025ae:	bd30      	popge	{r4, r5, pc}
 80025b0:	ea6f 0404 	mvn.w	r4, r4
 80025b4:	3c1f      	subs	r4, #31
 80025b6:	da1c      	bge.n	80025f2 <__adddf3+0x1d2>
 80025b8:	340c      	adds	r4, #12
 80025ba:	dc0e      	bgt.n	80025da <__adddf3+0x1ba>
 80025bc:	f104 0414 	add.w	r4, r4, #20
 80025c0:	f1c4 0220 	rsb	r2, r4, #32
 80025c4:	fa20 f004 	lsr.w	r0, r0, r4
 80025c8:	fa01 f302 	lsl.w	r3, r1, r2
 80025cc:	ea40 0003 	orr.w	r0, r0, r3
 80025d0:	fa21 f304 	lsr.w	r3, r1, r4
 80025d4:	ea45 0103 	orr.w	r1, r5, r3
 80025d8:	bd30      	pop	{r4, r5, pc}
 80025da:	f1c4 040c 	rsb	r4, r4, #12
 80025de:	f1c4 0220 	rsb	r2, r4, #32
 80025e2:	fa20 f002 	lsr.w	r0, r0, r2
 80025e6:	fa01 f304 	lsl.w	r3, r1, r4
 80025ea:	ea40 0003 	orr.w	r0, r0, r3
 80025ee:	4629      	mov	r1, r5
 80025f0:	bd30      	pop	{r4, r5, pc}
 80025f2:	fa21 f004 	lsr.w	r0, r1, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	bd30      	pop	{r4, r5, pc}
 80025fa:	f094 0f00 	teq	r4, #0
 80025fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002602:	bf06      	itte	eq
 8002604:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002608:	3401      	addeq	r4, #1
 800260a:	3d01      	subne	r5, #1
 800260c:	e74e      	b.n	80024ac <__adddf3+0x8c>
 800260e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002612:	bf18      	it	ne
 8002614:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002618:	d029      	beq.n	800266e <__adddf3+0x24e>
 800261a:	ea94 0f05 	teq	r4, r5
 800261e:	bf08      	it	eq
 8002620:	ea90 0f02 	teqeq	r0, r2
 8002624:	d005      	beq.n	8002632 <__adddf3+0x212>
 8002626:	ea54 0c00 	orrs.w	ip, r4, r0
 800262a:	bf04      	itt	eq
 800262c:	4619      	moveq	r1, r3
 800262e:	4610      	moveq	r0, r2
 8002630:	bd30      	pop	{r4, r5, pc}
 8002632:	ea91 0f03 	teq	r1, r3
 8002636:	bf1e      	ittt	ne
 8002638:	2100      	movne	r1, #0
 800263a:	2000      	movne	r0, #0
 800263c:	bd30      	popne	{r4, r5, pc}
 800263e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002642:	d105      	bne.n	8002650 <__adddf3+0x230>
 8002644:	0040      	lsls	r0, r0, #1
 8002646:	4149      	adcs	r1, r1
 8002648:	bf28      	it	cs
 800264a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800264e:	bd30      	pop	{r4, r5, pc}
 8002650:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002654:	bf3c      	itt	cc
 8002656:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800265a:	bd30      	popcc	{r4, r5, pc}
 800265c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002660:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002664:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002668:	f04f 0000 	mov.w	r0, #0
 800266c:	bd30      	pop	{r4, r5, pc}
 800266e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002672:	bf1a      	itte	ne
 8002674:	4619      	movne	r1, r3
 8002676:	4610      	movne	r0, r2
 8002678:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800267c:	bf1c      	itt	ne
 800267e:	460b      	movne	r3, r1
 8002680:	4602      	movne	r2, r0
 8002682:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002686:	bf06      	itte	eq
 8002688:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800268c:	ea91 0f03 	teqeq	r1, r3
 8002690:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002694:	bd30      	pop	{r4, r5, pc}
 8002696:	bf00      	nop

08002698 <__aeabi_ui2d>:
 8002698:	f090 0f00 	teq	r0, #0
 800269c:	bf04      	itt	eq
 800269e:	2100      	moveq	r1, #0
 80026a0:	4770      	bxeq	lr
 80026a2:	b530      	push	{r4, r5, lr}
 80026a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80026a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80026ac:	f04f 0500 	mov.w	r5, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	e750      	b.n	8002558 <__adddf3+0x138>
 80026b6:	bf00      	nop

080026b8 <__aeabi_i2d>:
 80026b8:	f090 0f00 	teq	r0, #0
 80026bc:	bf04      	itt	eq
 80026be:	2100      	moveq	r1, #0
 80026c0:	4770      	bxeq	lr
 80026c2:	b530      	push	{r4, r5, lr}
 80026c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80026c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80026cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80026d0:	bf48      	it	mi
 80026d2:	4240      	negmi	r0, r0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	e73e      	b.n	8002558 <__adddf3+0x138>
 80026da:	bf00      	nop

080026dc <__aeabi_f2d>:
 80026dc:	0042      	lsls	r2, r0, #1
 80026de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80026e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80026e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80026ea:	bf1f      	itttt	ne
 80026ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80026f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80026f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80026f8:	4770      	bxne	lr
 80026fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80026fe:	bf08      	it	eq
 8002700:	4770      	bxeq	lr
 8002702:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002706:	bf04      	itt	eq
 8002708:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800270c:	4770      	bxeq	lr
 800270e:	b530      	push	{r4, r5, lr}
 8002710:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002714:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800271c:	e71c      	b.n	8002558 <__adddf3+0x138>
 800271e:	bf00      	nop

08002720 <__aeabi_ul2d>:
 8002720:	ea50 0201 	orrs.w	r2, r0, r1
 8002724:	bf08      	it	eq
 8002726:	4770      	bxeq	lr
 8002728:	b530      	push	{r4, r5, lr}
 800272a:	f04f 0500 	mov.w	r5, #0
 800272e:	e00a      	b.n	8002746 <__aeabi_l2d+0x16>

08002730 <__aeabi_l2d>:
 8002730:	ea50 0201 	orrs.w	r2, r0, r1
 8002734:	bf08      	it	eq
 8002736:	4770      	bxeq	lr
 8002738:	b530      	push	{r4, r5, lr}
 800273a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800273e:	d502      	bpl.n	8002746 <__aeabi_l2d+0x16>
 8002740:	4240      	negs	r0, r0
 8002742:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002746:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800274a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800274e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002752:	f43f aed8 	beq.w	8002506 <__adddf3+0xe6>
 8002756:	f04f 0203 	mov.w	r2, #3
 800275a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800275e:	bf18      	it	ne
 8002760:	3203      	addne	r2, #3
 8002762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002766:	bf18      	it	ne
 8002768:	3203      	addne	r2, #3
 800276a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800276e:	f1c2 0320 	rsb	r3, r2, #32
 8002772:	fa00 fc03 	lsl.w	ip, r0, r3
 8002776:	fa20 f002 	lsr.w	r0, r0, r2
 800277a:	fa01 fe03 	lsl.w	lr, r1, r3
 800277e:	ea40 000e 	orr.w	r0, r0, lr
 8002782:	fa21 f102 	lsr.w	r1, r1, r2
 8002786:	4414      	add	r4, r2
 8002788:	e6bd      	b.n	8002506 <__adddf3+0xe6>
 800278a:	bf00      	nop

0800278c <__aeabi_dmul>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800279a:	bf1d      	ittte	ne
 800279c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80027a0:	ea94 0f0c 	teqne	r4, ip
 80027a4:	ea95 0f0c 	teqne	r5, ip
 80027a8:	f000 f8de 	bleq	8002968 <__aeabi_dmul+0x1dc>
 80027ac:	442c      	add	r4, r5
 80027ae:	ea81 0603 	eor.w	r6, r1, r3
 80027b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80027b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80027ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80027be:	bf18      	it	ne
 80027c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80027c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80027c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027cc:	d038      	beq.n	8002840 <__aeabi_dmul+0xb4>
 80027ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80027d2:	f04f 0500 	mov.w	r5, #0
 80027d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80027da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80027de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80027e2:	f04f 0600 	mov.w	r6, #0
 80027e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80027ea:	f09c 0f00 	teq	ip, #0
 80027ee:	bf18      	it	ne
 80027f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80027f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80027f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80027fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002800:	d204      	bcs.n	800280c <__aeabi_dmul+0x80>
 8002802:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002806:	416d      	adcs	r5, r5
 8002808:	eb46 0606 	adc.w	r6, r6, r6
 800280c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002810:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002814:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002818:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800281c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002820:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002824:	bf88      	it	hi
 8002826:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800282a:	d81e      	bhi.n	800286a <__aeabi_dmul+0xde>
 800282c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002830:	bf08      	it	eq
 8002832:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002836:	f150 0000 	adcs.w	r0, r0, #0
 800283a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002844:	ea46 0101 	orr.w	r1, r6, r1
 8002848:	ea40 0002 	orr.w	r0, r0, r2
 800284c:	ea81 0103 	eor.w	r1, r1, r3
 8002850:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002854:	bfc2      	ittt	gt
 8002856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800285a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800285e:	bd70      	popgt	{r4, r5, r6, pc}
 8002860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002864:	f04f 0e00 	mov.w	lr, #0
 8002868:	3c01      	subs	r4, #1
 800286a:	f300 80ab 	bgt.w	80029c4 <__aeabi_dmul+0x238>
 800286e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002872:	bfde      	ittt	le
 8002874:	2000      	movle	r0, #0
 8002876:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800287a:	bd70      	pople	{r4, r5, r6, pc}
 800287c:	f1c4 0400 	rsb	r4, r4, #0
 8002880:	3c20      	subs	r4, #32
 8002882:	da35      	bge.n	80028f0 <__aeabi_dmul+0x164>
 8002884:	340c      	adds	r4, #12
 8002886:	dc1b      	bgt.n	80028c0 <__aeabi_dmul+0x134>
 8002888:	f104 0414 	add.w	r4, r4, #20
 800288c:	f1c4 0520 	rsb	r5, r4, #32
 8002890:	fa00 f305 	lsl.w	r3, r0, r5
 8002894:	fa20 f004 	lsr.w	r0, r0, r4
 8002898:	fa01 f205 	lsl.w	r2, r1, r5
 800289c:	ea40 0002 	orr.w	r0, r0, r2
 80028a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80028a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80028a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80028ac:	fa21 f604 	lsr.w	r6, r1, r4
 80028b0:	eb42 0106 	adc.w	r1, r2, r6
 80028b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80028b8:	bf08      	it	eq
 80028ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f1c4 040c 	rsb	r4, r4, #12
 80028c4:	f1c4 0520 	rsb	r5, r4, #32
 80028c8:	fa00 f304 	lsl.w	r3, r0, r4
 80028cc:	fa20 f005 	lsr.w	r0, r0, r5
 80028d0:	fa01 f204 	lsl.w	r2, r1, r4
 80028d4:	ea40 0002 	orr.w	r0, r0, r2
 80028d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80028dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80028e0:	f141 0100 	adc.w	r1, r1, #0
 80028e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80028e8:	bf08      	it	eq
 80028ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f1c4 0520 	rsb	r5, r4, #32
 80028f4:	fa00 f205 	lsl.w	r2, r0, r5
 80028f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80028fc:	fa20 f304 	lsr.w	r3, r0, r4
 8002900:	fa01 f205 	lsl.w	r2, r1, r5
 8002904:	ea43 0302 	orr.w	r3, r3, r2
 8002908:	fa21 f004 	lsr.w	r0, r1, r4
 800290c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002910:	fa21 f204 	lsr.w	r2, r1, r4
 8002914:	ea20 0002 	bic.w	r0, r0, r2
 8002918:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800291c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002920:	bf08      	it	eq
 8002922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	f094 0f00 	teq	r4, #0
 800292c:	d10f      	bne.n	800294e <__aeabi_dmul+0x1c2>
 800292e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002932:	0040      	lsls	r0, r0, #1
 8002934:	eb41 0101 	adc.w	r1, r1, r1
 8002938:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800293c:	bf08      	it	eq
 800293e:	3c01      	subeq	r4, #1
 8002940:	d0f7      	beq.n	8002932 <__aeabi_dmul+0x1a6>
 8002942:	ea41 0106 	orr.w	r1, r1, r6
 8002946:	f095 0f00 	teq	r5, #0
 800294a:	bf18      	it	ne
 800294c:	4770      	bxne	lr
 800294e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	eb43 0303 	adc.w	r3, r3, r3
 8002958:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800295c:	bf08      	it	eq
 800295e:	3d01      	subeq	r5, #1
 8002960:	d0f7      	beq.n	8002952 <__aeabi_dmul+0x1c6>
 8002962:	ea43 0306 	orr.w	r3, r3, r6
 8002966:	4770      	bx	lr
 8002968:	ea94 0f0c 	teq	r4, ip
 800296c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002970:	bf18      	it	ne
 8002972:	ea95 0f0c 	teqne	r5, ip
 8002976:	d00c      	beq.n	8002992 <__aeabi_dmul+0x206>
 8002978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800297c:	bf18      	it	ne
 800297e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002982:	d1d1      	bne.n	8002928 <__aeabi_dmul+0x19c>
 8002984:	ea81 0103 	eor.w	r1, r1, r3
 8002988:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800298c:	f04f 0000 	mov.w	r0, #0
 8002990:	bd70      	pop	{r4, r5, r6, pc}
 8002992:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002996:	bf06      	itte	eq
 8002998:	4610      	moveq	r0, r2
 800299a:	4619      	moveq	r1, r3
 800299c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80029a0:	d019      	beq.n	80029d6 <__aeabi_dmul+0x24a>
 80029a2:	ea94 0f0c 	teq	r4, ip
 80029a6:	d102      	bne.n	80029ae <__aeabi_dmul+0x222>
 80029a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80029ac:	d113      	bne.n	80029d6 <__aeabi_dmul+0x24a>
 80029ae:	ea95 0f0c 	teq	r5, ip
 80029b2:	d105      	bne.n	80029c0 <__aeabi_dmul+0x234>
 80029b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80029b8:	bf1c      	itt	ne
 80029ba:	4610      	movne	r0, r2
 80029bc:	4619      	movne	r1, r3
 80029be:	d10a      	bne.n	80029d6 <__aeabi_dmul+0x24a>
 80029c0:	ea81 0103 	eor.w	r1, r1, r3
 80029c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80029c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80029cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80029da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80029de:	bd70      	pop	{r4, r5, r6, pc}

080029e0 <__aeabi_ddiv>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80029e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80029ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80029ee:	bf1d      	ittte	ne
 80029f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80029f4:	ea94 0f0c 	teqne	r4, ip
 80029f8:	ea95 0f0c 	teqne	r5, ip
 80029fc:	f000 f8a7 	bleq	8002b4e <__aeabi_ddiv+0x16e>
 8002a00:	eba4 0405 	sub.w	r4, r4, r5
 8002a04:	ea81 0e03 	eor.w	lr, r1, r3
 8002a08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002a0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002a10:	f000 8088 	beq.w	8002b24 <__aeabi_ddiv+0x144>
 8002a14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002a18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002a1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002a20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002a24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002a28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002a2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002a30:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002a34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002a38:	429d      	cmp	r5, r3
 8002a3a:	bf08      	it	eq
 8002a3c:	4296      	cmpeq	r6, r2
 8002a3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002a42:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002a46:	d202      	bcs.n	8002a4e <__aeabi_ddiv+0x6e>
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002a4e:	1ab6      	subs	r6, r6, r2
 8002a50:	eb65 0503 	sbc.w	r5, r5, r3
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	ea4f 0232 	mov.w	r2, r2, rrx
 8002a5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002a62:	ebb6 0e02 	subs.w	lr, r6, r2
 8002a66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002a6a:	bf22      	ittt	cs
 8002a6c:	1ab6      	subcs	r6, r6, r2
 8002a6e:	4675      	movcs	r5, lr
 8002a70:	ea40 000c 	orrcs.w	r0, r0, ip
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	ea4f 0232 	mov.w	r2, r2, rrx
 8002a7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8002a7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002a82:	bf22      	ittt	cs
 8002a84:	1ab6      	subcs	r6, r6, r2
 8002a86:	4675      	movcs	r5, lr
 8002a88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002a92:	ebb6 0e02 	subs.w	lr, r6, r2
 8002a96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002a9a:	bf22      	ittt	cs
 8002a9c:	1ab6      	subcs	r6, r6, r2
 8002a9e:	4675      	movcs	r5, lr
 8002aa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	ea4f 0232 	mov.w	r2, r2, rrx
 8002aaa:	ebb6 0e02 	subs.w	lr, r6, r2
 8002aae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002ab2:	bf22      	ittt	cs
 8002ab4:	1ab6      	subcs	r6, r6, r2
 8002ab6:	4675      	movcs	r5, lr
 8002ab8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002abc:	ea55 0e06 	orrs.w	lr, r5, r6
 8002ac0:	d018      	beq.n	8002af4 <__aeabi_ddiv+0x114>
 8002ac2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002ac6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002aca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002ace:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002ad2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002ad6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002ada:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002ade:	d1c0      	bne.n	8002a62 <__aeabi_ddiv+0x82>
 8002ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002ae4:	d10b      	bne.n	8002afe <__aeabi_ddiv+0x11e>
 8002ae6:	ea41 0100 	orr.w	r1, r1, r0
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002af2:	e7b6      	b.n	8002a62 <__aeabi_ddiv+0x82>
 8002af4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002af8:	bf04      	itt	eq
 8002afa:	4301      	orreq	r1, r0
 8002afc:	2000      	moveq	r0, #0
 8002afe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002b02:	bf88      	it	hi
 8002b04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002b08:	f63f aeaf 	bhi.w	800286a <__aeabi_dmul+0xde>
 8002b0c:	ebb5 0c03 	subs.w	ip, r5, r3
 8002b10:	bf04      	itt	eq
 8002b12:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002b16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002b1a:	f150 0000 	adcs.w	r0, r0, #0
 8002b1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002b28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002b2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002b30:	bfc2      	ittt	gt
 8002b32:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002b36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002b3a:	bd70      	popgt	{r4, r5, r6, pc}
 8002b3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002b40:	f04f 0e00 	mov.w	lr, #0
 8002b44:	3c01      	subs	r4, #1
 8002b46:	e690      	b.n	800286a <__aeabi_dmul+0xde>
 8002b48:	ea45 0e06 	orr.w	lr, r5, r6
 8002b4c:	e68d      	b.n	800286a <__aeabi_dmul+0xde>
 8002b4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002b52:	ea94 0f0c 	teq	r4, ip
 8002b56:	bf08      	it	eq
 8002b58:	ea95 0f0c 	teqeq	r5, ip
 8002b5c:	f43f af3b 	beq.w	80029d6 <__aeabi_dmul+0x24a>
 8002b60:	ea94 0f0c 	teq	r4, ip
 8002b64:	d10a      	bne.n	8002b7c <__aeabi_ddiv+0x19c>
 8002b66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002b6a:	f47f af34 	bne.w	80029d6 <__aeabi_dmul+0x24a>
 8002b6e:	ea95 0f0c 	teq	r5, ip
 8002b72:	f47f af25 	bne.w	80029c0 <__aeabi_dmul+0x234>
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	e72c      	b.n	80029d6 <__aeabi_dmul+0x24a>
 8002b7c:	ea95 0f0c 	teq	r5, ip
 8002b80:	d106      	bne.n	8002b90 <__aeabi_ddiv+0x1b0>
 8002b82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002b86:	f43f aefd 	beq.w	8002984 <__aeabi_dmul+0x1f8>
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	e722      	b.n	80029d6 <__aeabi_dmul+0x24a>
 8002b90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002b94:	bf18      	it	ne
 8002b96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002b9a:	f47f aec5 	bne.w	8002928 <__aeabi_dmul+0x19c>
 8002b9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002ba2:	f47f af0d 	bne.w	80029c0 <__aeabi_dmul+0x234>
 8002ba6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002baa:	f47f aeeb 	bne.w	8002984 <__aeabi_dmul+0x1f8>
 8002bae:	e712      	b.n	80029d6 <__aeabi_dmul+0x24a>

08002bb0 <__aeabi_d2lz>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	460d      	mov	r5, r1
 8002bba:	f000 f88f 	bl	8002cdc <__aeabi_dcmplt>
 8002bbe:	b928      	cbnz	r0, 8002bcc <__aeabi_d2lz+0x1c>
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bc8:	f000 b80a 	b.w	8002be0 <__aeabi_d2ulz>
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8002bd2:	f000 f805 	bl	8002be0 <__aeabi_d2ulz>
 8002bd6:	4240      	negs	r0, r0
 8002bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
 8002bde:	bf00      	nop

08002be0 <__aeabi_d2ulz>:
 8002be0:	b5d0      	push	{r4, r6, r7, lr}
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__aeabi_d2ulz+0x34>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	4606      	mov	r6, r0
 8002be8:	460f      	mov	r7, r1
 8002bea:	f7ff fdcf 	bl	800278c <__aeabi_dmul>
 8002bee:	f000 f89d 	bl	8002d2c <__aeabi_d2uiz>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	f7ff fd50 	bl	8002698 <__aeabi_ui2d>
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <__aeabi_d2ulz+0x38>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f7ff fdc6 	bl	800278c <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4630      	mov	r0, r6
 8002c06:	4639      	mov	r1, r7
 8002c08:	f7ff fc08 	bl	800241c <__aeabi_dsub>
 8002c0c:	f000 f88e 	bl	8002d2c <__aeabi_d2uiz>
 8002c10:	4621      	mov	r1, r4
 8002c12:	bdd0      	pop	{r4, r6, r7, pc}
 8002c14:	3df00000 	.word	0x3df00000
 8002c18:	41f00000 	.word	0x41f00000

08002c1c <__gedf2>:
 8002c1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002c20:	e006      	b.n	8002c30 <__cmpdf2+0x4>
 8002c22:	bf00      	nop

08002c24 <__ledf2>:
 8002c24:	f04f 0c01 	mov.w	ip, #1
 8002c28:	e002      	b.n	8002c30 <__cmpdf2+0x4>
 8002c2a:	bf00      	nop

08002c2c <__cmpdf2>:
 8002c2c:	f04f 0c01 	mov.w	ip, #1
 8002c30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002c34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002c40:	bf18      	it	ne
 8002c42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002c46:	d01b      	beq.n	8002c80 <__cmpdf2+0x54>
 8002c48:	b001      	add	sp, #4
 8002c4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002c4e:	bf0c      	ite	eq
 8002c50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002c54:	ea91 0f03 	teqne	r1, r3
 8002c58:	bf02      	ittt	eq
 8002c5a:	ea90 0f02 	teqeq	r0, r2
 8002c5e:	2000      	moveq	r0, #0
 8002c60:	4770      	bxeq	lr
 8002c62:	f110 0f00 	cmn.w	r0, #0
 8002c66:	ea91 0f03 	teq	r1, r3
 8002c6a:	bf58      	it	pl
 8002c6c:	4299      	cmppl	r1, r3
 8002c6e:	bf08      	it	eq
 8002c70:	4290      	cmpeq	r0, r2
 8002c72:	bf2c      	ite	cs
 8002c74:	17d8      	asrcs	r0, r3, #31
 8002c76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002c7a:	f040 0001 	orr.w	r0, r0, #1
 8002c7e:	4770      	bx	lr
 8002c80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002c88:	d102      	bne.n	8002c90 <__cmpdf2+0x64>
 8002c8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002c8e:	d107      	bne.n	8002ca0 <__cmpdf2+0x74>
 8002c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002c94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002c98:	d1d6      	bne.n	8002c48 <__cmpdf2+0x1c>
 8002c9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002c9e:	d0d3      	beq.n	8002c48 <__cmpdf2+0x1c>
 8002ca0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <__aeabi_cdrcmple>:
 8002ca8:	4684      	mov	ip, r0
 8002caa:	4610      	mov	r0, r2
 8002cac:	4662      	mov	r2, ip
 8002cae:	468c      	mov	ip, r1
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4663      	mov	r3, ip
 8002cb4:	e000      	b.n	8002cb8 <__aeabi_cdcmpeq>
 8002cb6:	bf00      	nop

08002cb8 <__aeabi_cdcmpeq>:
 8002cb8:	b501      	push	{r0, lr}
 8002cba:	f7ff ffb7 	bl	8002c2c <__cmpdf2>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	bf48      	it	mi
 8002cc2:	f110 0f00 	cmnmi.w	r0, #0
 8002cc6:	bd01      	pop	{r0, pc}

08002cc8 <__aeabi_dcmpeq>:
 8002cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ccc:	f7ff fff4 	bl	8002cb8 <__aeabi_cdcmpeq>
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2001      	moveq	r0, #1
 8002cd4:	2000      	movne	r0, #0
 8002cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8002cda:	bf00      	nop

08002cdc <__aeabi_dcmplt>:
 8002cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ce0:	f7ff ffea 	bl	8002cb8 <__aeabi_cdcmpeq>
 8002ce4:	bf34      	ite	cc
 8002ce6:	2001      	movcc	r0, #1
 8002ce8:	2000      	movcs	r0, #0
 8002cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8002cee:	bf00      	nop

08002cf0 <__aeabi_dcmple>:
 8002cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002cf4:	f7ff ffe0 	bl	8002cb8 <__aeabi_cdcmpeq>
 8002cf8:	bf94      	ite	ls
 8002cfa:	2001      	movls	r0, #1
 8002cfc:	2000      	movhi	r0, #0
 8002cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8002d02:	bf00      	nop

08002d04 <__aeabi_dcmpge>:
 8002d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002d08:	f7ff ffce 	bl	8002ca8 <__aeabi_cdrcmple>
 8002d0c:	bf94      	ite	ls
 8002d0e:	2001      	movls	r0, #1
 8002d10:	2000      	movhi	r0, #0
 8002d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8002d16:	bf00      	nop

08002d18 <__aeabi_dcmpgt>:
 8002d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002d1c:	f7ff ffc4 	bl	8002ca8 <__aeabi_cdrcmple>
 8002d20:	bf34      	ite	cc
 8002d22:	2001      	movcc	r0, #1
 8002d24:	2000      	movcs	r0, #0
 8002d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8002d2a:	bf00      	nop

08002d2c <__aeabi_d2uiz>:
 8002d2c:	004a      	lsls	r2, r1, #1
 8002d2e:	d211      	bcs.n	8002d54 <__aeabi_d2uiz+0x28>
 8002d30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002d34:	d211      	bcs.n	8002d5a <__aeabi_d2uiz+0x2e>
 8002d36:	d50d      	bpl.n	8002d54 <__aeabi_d2uiz+0x28>
 8002d38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002d3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002d40:	d40e      	bmi.n	8002d60 <__aeabi_d2uiz+0x34>
 8002d42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002d4e:	fa23 f002 	lsr.w	r0, r3, r2
 8002d52:	4770      	bx	lr
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	4770      	bx	lr
 8002d5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002d5e:	d102      	bne.n	8002d66 <__aeabi_d2uiz+0x3a>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d64:	4770      	bx	lr
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	4770      	bx	lr

08002d6c <get_sts_mnth>:
uint16_t get_sts_mnth (uint16_t cipher, uint8_t threshold, uint8_t shift_val)
{
    uint32_t  value;
    uint16_t  mod_val;

    value = cipher* (uint32_t)threshold;
 8002d6c:	fb01 f000 	mul.w	r0, r1, r0
    if (shift_val == 3)
 8002d70:	2a03      	cmp	r2, #3
 8002d72:	d00a      	beq.n	8002d8a <get_sts_mnth+0x1e>
    {
        value *= SQRT_FACTOR;//Factor to sqrt(2)
        value >>= SQRT_SHIFT_VAL;
    }

    mod_val = value % MOD_VALUE+ HALF_MOD;
 8002d74:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    value >>= SHIFT_VALUE;
 8002d7c:	0ac0      	lsrs	r0, r0, #11
    /* Check if modulo greater than MOD_VALUE, if yes add 1 */
    if (mod_val >= MOD_VALUE)
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d82:	d300      	bcc.n	8002d86 <get_sts_mnth+0x1a>
        value += 1;
 8002d84:	3001      	adds	r0, #1

    return (uint16_t)value;
}
 8002d86:	b280      	uxth	r0, r0
 8002d88:	4770      	bx	lr
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 8002d8a:	21b5      	movs	r1, #181	; 0xb5
 8002d8c:	fb01 f000 	mul.w	r0, r1, r0
        value >>= SQRT_SHIFT_VAL;
 8002d90:	09c0      	lsrs	r0, r0, #7
 8002d92:	e7ef      	b.n	8002d74 <get_sts_mnth+0x8>

08002d94 <dwt_generatecrc8>:
{
 8002d94:	b500      	push	{lr}
 8002d96:	4686      	mov	lr, r0
 8002d98:	4610      	mov	r0, r2
    for (byte = 0; byte < len; ++byte)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e007      	b.n	8002dae <dwt_generatecrc8+0x1a>
        data = byteArray[byte] ^ crcRemainderInit;
 8002d9e:	f81e c003 	ldrb.w	ip, [lr, r3]
 8002da2:	ea8c 0c00 	eor.w	ip, ip, r0
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <dwt_generatecrc8+0x24>)
 8002da8:	f812 000c 	ldrb.w	r0, [r2, ip]
    for (byte = 0; byte < len; ++byte)
 8002dac:	3301      	adds	r3, #1
 8002dae:	428b      	cmp	r3, r1
 8002db0:	dbf5      	blt.n	8002d9e <dwt_generatecrc8+0xa>
}
 8002db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002db6:	bf00      	nop
 8002db8:	20000178 	.word	0x20000178

08002dbc <dwt_xfer3000>:
{
 8002dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	4614      	mov	r4, r2
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 8002dca:	1808      	adds	r0, r1, r0
 8002dcc:	f3c0 4004 	ubfx	r0, r0, #16, #5
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 8002dd0:	198b      	adds	r3, r1, r6
    assert(length       < 0x3100);
 8002dd2:	f5b4 5f44 	cmp.w	r4, #12544	; 0x3100
 8002dd6:	d246      	bcs.n	8002e66 <dwt_xfer3000+0xaa>
 8002dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    assert(mode == DW3000_SPI_WR_BIT ||\
 8002ddc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002de0:	d00c      	beq.n	8002dfc <dwt_xfer3000+0x40>
 8002de2:	b15a      	cbz	r2, 8002dfc <dwt_xfer3000+0x40>
 8002de4:	f248 0101 	movw	r1, #32769	; 0x8001
 8002de8:	428a      	cmp	r2, r1
 8002dea:	d007      	beq.n	8002dfc <dwt_xfer3000+0x40>
 8002dec:	f248 0102 	movw	r1, #32770	; 0x8002
 8002df0:	428a      	cmp	r2, r1
 8002df2:	d003      	beq.n	8002dfc <dwt_xfer3000+0x40>
 8002df4:	f248 0103 	movw	r1, #32771	; 0x8003
 8002df8:	428a      	cmp	r2, r1
 8002dfa:	d13a      	bne.n	8002e72 <dwt_xfer3000+0xb6>
    addr = (reg_file << 9) | (reg_offset << 2);
 8002dfc:	0099      	lsls	r1, r3, #2
 8002dfe:	ea41 2c40 	orr.w	ip, r1, r0, lsl #9
 8002e02:	4661      	mov	r1, ip
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002e04:	4311      	orrs	r1, r2
 8002e06:	0a09      	lsrs	r1, r1, #8
 8002e08:	f88d 100c 	strb.w	r1, [sp, #12]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 8002e0c:	f002 0003 	and.w	r0, r2, #3
 8002e10:	ea40 000c 	orr.w	r0, r0, ip
 8002e14:	f88d 000d 	strb.w	r0, [sp, #13]
    if (/*reg_offset == 0 && */length == 0)
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d136      	bne.n	8002e8a <dwt_xfer3000+0xce>
        assert(mode == DW3000_SPI_WR_BIT);
 8002e1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e20:	d12d      	bne.n	8002e7e <dwt_xfer3000+0xc2>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8002e22:	0073      	lsls	r3, r6, #1
 8002e24:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8002e28:	f88d 300c 	strb.w	r3, [sp, #12]
        cnt = 1;
 8002e2c:	2701      	movs	r7, #1
    switch (mode)
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d041      	beq.n	8002eb6 <dwt_xfer3000+0xfa>
 8002e32:	f482 4100 	eor.w	r1, r2, #32768	; 0x8000
 8002e36:	2903      	cmp	r1, #3
 8002e38:	d864      	bhi.n	8002f04 <dwt_xfer3000+0x148>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 8002e3a:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <dwt_xfer3000+0x14c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	7d1b      	ldrb	r3, [r3, #20]
 8002e40:	b393      	cbz	r3, 8002ea8 <dwt_xfer3000+0xec>
            crc8 = dwt_generatecrc8(header, cnt, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	4639      	mov	r1, r7
 8002e46:	a803      	add	r0, sp, #12
 8002e48:	f7ff ffa4 	bl	8002d94 <dwt_generatecrc8>
 8002e4c:	4602      	mov	r2, r0
            crc8 = dwt_generatecrc8(buffer, length, crc8);
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f7ff ff9f 	bl	8002d94 <dwt_generatecrc8>
            writetospiwithcrc(cnt, header, length, buffer, crc8);
 8002e56:	9000      	str	r0, [sp, #0]
 8002e58:	462b      	mov	r3, r5
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	a903      	add	r1, sp, #12
 8002e5e:	4638      	mov	r0, r7
 8002e60:	f001 f8b8 	bl	8003fd4 <writetospiwithcrc>
 8002e64:	e032      	b.n	8002ecc <dwt_xfer3000+0x110>
    assert(length       < 0x3100);
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <dwt_xfer3000+0x150>)
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <dwt_xfer3000+0x154>)
 8002e6a:	21d5      	movs	r1, #213	; 0xd5
 8002e6c:	4829      	ldr	r0, [pc, #164]	; (8002f14 <dwt_xfer3000+0x158>)
 8002e6e:	f7fd f9eb 	bl	8000248 <__assert_func>
    assert(mode == DW3000_SPI_WR_BIT ||\
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <dwt_xfer3000+0x15c>)
 8002e74:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <dwt_xfer3000+0x154>)
 8002e76:	21d6      	movs	r1, #214	; 0xd6
 8002e78:	4826      	ldr	r0, [pc, #152]	; (8002f14 <dwt_xfer3000+0x158>)
 8002e7a:	f7fd f9e5 	bl	8000248 <__assert_func>
        assert(mode == DW3000_SPI_WR_BIT);
 8002e7e:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <dwt_xfer3000+0x160>)
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <dwt_xfer3000+0x154>)
 8002e82:	21e8      	movs	r1, #232	; 0xe8
 8002e84:	4823      	ldr	r0, [pc, #140]	; (8002f14 <dwt_xfer3000+0x158>)
 8002e86:	f7fd f9df 	bl	8000248 <__assert_func>
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 8002e8a:	b91b      	cbnz	r3, 8002e94 <dwt_xfer3000+0xd8>
 8002e8c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e90:	d006      	beq.n	8002ea0 <dwt_xfer3000+0xe4>
 8002e92:	b13a      	cbz	r2, 8002ea4 <dwt_xfer3000+0xe8>
        header[0] |= DW3000_SPI_EAMRW;
 8002e94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e98:	f88d 100c 	strb.w	r1, [sp, #12]
        cnt = 2;
 8002e9c:	2702      	movs	r7, #2
 8002e9e:	e7c6      	b.n	8002e2e <dwt_xfer3000+0x72>
        cnt = 1;
 8002ea0:	2701      	movs	r7, #1
 8002ea2:	e7c4      	b.n	8002e2e <dwt_xfer3000+0x72>
 8002ea4:	2701      	movs	r7, #1
 8002ea6:	e7c2      	b.n	8002e2e <dwt_xfer3000+0x72>
            writetospi(cnt, header, length, buffer);
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	4622      	mov	r2, r4
 8002eac:	a903      	add	r1, sp, #12
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f001 f8c6 	bl	8004040 <writetospi>
 8002eb4:	e00a      	b.n	8002ecc <dwt_xfer3000+0x110>
            readfromspi(cnt, header, length, buffer);
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	4622      	mov	r2, r4
 8002eba:	a903      	add	r1, sp, #12
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	f001 f8f1 	bl	80040a4 <readfromspi>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <dwt_xfer3000+0x14c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	7d1b      	ldrb	r3, [r3, #20]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d001      	beq.n	8002ed0 <dwt_xfer3000+0x114>
} // end dwt_xfer3000()
 8002ecc:	b005      	add	sp, #20
 8002ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 8002ed0:	2e18      	cmp	r6, #24
 8002ed2:	d0fb      	beq.n	8002ecc <dwt_xfer3000+0x110>
                crc8 = dwt_generatecrc8(header, cnt, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4639      	mov	r1, r7
 8002ed8:	a803      	add	r0, sp, #12
 8002eda:	f7ff ff5b 	bl	8002d94 <dwt_generatecrc8>
 8002ede:	4602      	mov	r2, r0
                crc8 = dwt_generatecrc8(buffer, length, crc8);
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f7ff ff56 	bl	8002d94 <dwt_generatecrc8>
 8002ee8:	4604      	mov	r4, r0
                dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 8002eea:	2100      	movs	r1, #0
 8002eec:	2018      	movs	r0, #24
 8002eee:	f000 f8dc 	bl	80030aa <dwt_read8bitoffsetreg>
                if (crc8 != dwcrc8)
 8002ef2:	4284      	cmp	r4, r0
 8002ef4:	d0ea      	beq.n	8002ecc <dwt_xfer3000+0x110>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <dwt_xfer3000+0x14c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0e5      	beq.n	8002ecc <dwt_xfer3000+0x110>
                        pdw3000local->cbSPIRDErr();
 8002f00:	4798      	blx	r3
 8002f02:	e7e3      	b.n	8002ecc <dwt_xfer3000+0x110>
        while(1);
 8002f04:	e7fe      	b.n	8002f04 <dwt_xfer3000+0x148>
 8002f06:	bf00      	nop
 8002f08:	2000008c 	.word	0x2000008c
 8002f0c:	0800716c 	.word	0x0800716c
 8002f10:	08007248 	.word	0x08007248
 8002f14:	0800717c 	.word	0x0800717c
 8002f18:	08007194 	.word	0x08007194
 8002f1c:	0800722c 	.word	0x0800722c

08002f20 <dwt_writetodevice>:
{
 8002f20:	b510      	push	{r4, lr}
 8002f22:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 8002f24:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8002f28:	9400      	str	r4, [sp, #0]
 8002f2a:	f7ff ff47 	bl	8002dbc <dwt_xfer3000>
}
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <dwt_write32bitoffsetreg>:
{
 8002f32:	b500      	push	{lr}
 8002f34:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
 8002f36:	2300      	movs	r3, #0
 8002f38:	e006      	b.n	8002f48 <dwt_write32bitoffsetreg+0x16>
        buffer[j] = (uint8_t)regval;
 8002f3a:	f103 0c08 	add.w	ip, r3, #8
 8002f3e:	44ec      	add	ip, sp
 8002f40:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
 8002f44:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8002f46:	3301      	adds	r3, #1
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	ddf6      	ble.n	8002f3a <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002f4c:	ab01      	add	r3, sp, #4
 8002f4e:	2204      	movs	r2, #4
 8002f50:	b289      	uxth	r1, r1
 8002f52:	f7ff ffe5 	bl	8002f20 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002f56:	b003      	add	sp, #12
 8002f58:	f85d fb04 	ldr.w	pc, [sp], #4

08002f5c <dwt_disable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void)
{
 8002f5c:	b508      	push	{r3, lr}
    dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4611      	mov	r1, r2
 8002f62:	4802      	ldr	r0, [pc, #8]	; (8002f6c <dwt_disable_rftx_blocks+0x10>)
 8002f64:	f7ff ffe5 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8002f68:	bd08      	pop	{r3, pc}
 8002f6a:	bf00      	nop
 8002f6c:	00070004 	.word	0x00070004

08002f70 <dwt_disable_rf_tx>:
{
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
    dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 8002f74:	2200      	movs	r2, #0
 8002f76:	4611      	mov	r1, r2
 8002f78:	4808      	ldr	r0, [pc, #32]	; (8002f9c <dwt_disable_rf_tx+0x2c>)
 8002f7a:	f7ff ffda 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4611      	mov	r1, r2
 8002f82:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002f86:	f7ff ffd4 	bl	8002f32 <dwt_write32bitoffsetreg>
    if (switch_config)
 8002f8a:	b904      	cbnz	r4, 8002f8e <dwt_disable_rf_tx+0x1e>
}
 8002f8c:	bd10      	pop	{r4, pc}
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8002f8e:	f04f 52e0 	mov.w	r2, #469762048	; 0x1c000000
 8002f92:	2100      	movs	r1, #0
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <dwt_disable_rf_tx+0x30>)
 8002f96:	f7ff ffcc 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8002f9a:	e7f7      	b.n	8002f8c <dwt_disable_rf_tx+0x1c>
 8002f9c:	00070048 	.word	0x00070048
 8002fa0:	00070014 	.word	0x00070014

08002fa4 <dwt_write16bitoffsetreg>:
{
 8002fa4:	b500      	push	{lr}
 8002fa6:	b083      	sub	sp, #12
    buffer[0] = (uint8_t)regval;
 8002fa8:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8002fac:	0a12      	lsrs	r2, r2, #8
 8002fae:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002fb2:	ab01      	add	r3, sp, #4
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	b289      	uxth	r1, r1
 8002fb8:	f7ff ffb2 	bl	8002f20 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002fbc:	b003      	add	sp, #12
 8002fbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002fc4 <dwt_force_clocks>:
{
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4604      	mov	r4, r0
    if (clocks == FORCE_CLK_SYS_TX)
 8002fc8:	2801      	cmp	r0, #1
 8002fca:	d002      	beq.n	8002fd2 <dwt_force_clocks+0xe>
    if (clocks == FORCE_CLK_AUTO)
 8002fcc:	2c05      	cmp	r4, #5
 8002fce:	d007      	beq.n	8002fe0 <dwt_force_clocks+0x1c>
} // end dwt_force_clocks()
 8002fd0:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 8002fd2:	f641 0222 	movw	r2, #6178	; 0x1822
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <dwt_force_clocks+0x2c>)
 8002fda:	f7ff ffe3 	bl	8002fa4 <dwt_write16bitoffsetreg>
 8002fde:	e7f5      	b.n	8002fcc <dwt_force_clocks+0x8>
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS);  //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 8002fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <dwt_force_clocks+0x2c>)
 8002fe8:	f7ff ffdc 	bl	8002fa4 <dwt_write16bitoffsetreg>
} // end dwt_force_clocks()
 8002fec:	e7f0      	b.n	8002fd0 <dwt_force_clocks+0xc>
 8002fee:	bf00      	nop
 8002ff0:	00110004 	.word	0x00110004

08002ff4 <dwt_write8bitoffsetreg>:
{
 8002ff4:	b500      	push	{lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002ffc:	f10d 0307 	add.w	r3, sp, #7
 8003000:	2201      	movs	r2, #1
 8003002:	b289      	uxth	r1, r1
 8003004:	f7ff ff8c 	bl	8002f20 <dwt_writetodevice>
}
 8003008:	b003      	add	sp, #12
 800300a:	f85d fb04 	ldr.w	pc, [sp], #4

0800300e <dwt_readfromdevice>:
{
 800300e:	b510      	push	{r4, lr}
 8003010:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8003012:	2400      	movs	r4, #0
 8003014:	9400      	str	r4, [sp, #0]
 8003016:	f7ff fed1 	bl	8002dbc <dwt_xfer3000>
}
 800301a:	b002      	add	sp, #8
 800301c:	bd10      	pop	{r4, pc}

0800301e <dwt_read32bitoffsetreg>:
{
 800301e:	b500      	push	{lr}
 8003020:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8003022:	ab01      	add	r3, sp, #4
 8003024:	2204      	movs	r2, #4
 8003026:	b289      	uxth	r1, r1
 8003028:	f7ff fff1 	bl	800300e <dwt_readfromdevice>
    uint32_t  regval = 0 ;
 800302c:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 800302e:	2303      	movs	r3, #3
 8003030:	e007      	b.n	8003042 <dwt_read32bitoffsetreg+0x24>
        regval = (regval << 8) + buffer[j] ;
 8003032:	f103 0208 	add.w	r2, r3, #8
 8003036:	446a      	add	r2, sp
 8003038:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 800303c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8003040:	3b01      	subs	r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	daf5      	bge.n	8003032 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
 8003046:	b003      	add	sp, #12
 8003048:	f85d fb04 	ldr.w	pc, [sp], #4

0800304c <_dwt_otpread>:
{
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4604      	mov	r4, r0
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 8003050:	4d0a      	ldr	r5, [pc, #40]	; (800307c <_dwt_otpread+0x30>)
 8003052:	2201      	movs	r2, #1
 8003054:	2100      	movs	r1, #0
 8003056:	4628      	mov	r0, r5
 8003058:	f7ff ffa4 	bl	8002fa4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 800305c:	4622      	mov	r2, r4
 800305e:	2100      	movs	r1, #0
 8003060:	4807      	ldr	r0, [pc, #28]	; (8003080 <_dwt_otpread+0x34>)
 8003062:	f7ff ff9f 	bl	8002fa4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 8003066:	2202      	movs	r2, #2
 8003068:	2100      	movs	r1, #0
 800306a:	4628      	mov	r0, r5
 800306c:	f7ff ff9a 	bl	8002fa4 <dwt_write16bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 8003070:	2100      	movs	r1, #0
 8003072:	4804      	ldr	r0, [pc, #16]	; (8003084 <_dwt_otpread+0x38>)
 8003074:	f7ff ffd3 	bl	800301e <dwt_read32bitoffsetreg>
}
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	000b0008 	.word	0x000b0008
 8003080:	000b0004 	.word	0x000b0004
 8003084:	000b0010 	.word	0x000b0010

08003088 <dwt_read16bitoffsetreg>:
{
 8003088:	b500      	push	{lr}
 800308a:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800308c:	ab01      	add	r3, sp, #4
 800308e:	2202      	movs	r2, #2
 8003090:	b289      	uxth	r1, r1
 8003092:	f7ff ffbc 	bl	800300e <dwt_readfromdevice>
    regval = ((uint16_t)buffer[1] << 8) + buffer[0] ;
 8003096:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800309a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800309e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 80030a2:	b280      	uxth	r0, r0
 80030a4:	b003      	add	sp, #12
 80030a6:	f85d fb04 	ldr.w	pc, [sp], #4

080030aa <dwt_read8bitoffsetreg>:
{
 80030aa:	b500      	push	{lr}
 80030ac:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80030ae:	f10d 0307 	add.w	r3, sp, #7
 80030b2:	2201      	movs	r2, #1
 80030b4:	b289      	uxth	r1, r1
 80030b6:	f7ff ffaa 	bl	800300e <dwt_readfromdevice>
}
 80030ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80030be:	b003      	add	sp, #12
 80030c0:	f85d fb04 	ldr.w	pc, [sp], #4

080030c4 <dwt_modify32bitoffsetreg>:
{
 80030c4:	b500      	push	{lr}
 80030c6:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 80030c8:	f88d 2008 	strb.w	r2, [sp, #8]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 80030cc:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80030d0:	f88d c009 	strb.w	ip, [sp, #9]
    buf[2] = (uint8_t)(_and>>16);// &0xFF;
 80030d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80030d8:	f88d c00a 	strb.w	ip, [sp, #10]
    buf[3] = (uint8_t)(_and>>24);// &0xFF;
 80030dc:	0e12      	lsrs	r2, r2, #24
 80030de:	f88d 200b 	strb.w	r2, [sp, #11]
    buf[4] = (uint8_t)_or;//        &0xFF;
 80030e2:	f88d 300c 	strb.w	r3, [sp, #12]
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 80030e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80030ea:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 80030ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80030f2:	f88d 200e 	strb.w	r2, [sp, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 80030f6:	0e1b      	lsrs	r3, r3, #24
 80030f8:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 80030fc:	f248 0303 	movw	r3, #32771	; 0x8003
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	ab02      	add	r3, sp, #8
 8003104:	2208      	movs	r2, #8
 8003106:	b289      	uxth	r1, r1
 8003108:	f7ff fe58 	bl	8002dbc <dwt_xfer3000>
}
 800310c:	b005      	add	sp, #20
 800310e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003114 <_dwt_kick_dgc_on_wakeup>:
{
 8003114:	b508      	push	{r3, lr}
    if (channel == 5)
 8003116:	2805      	cmp	r0, #5
 8003118:	d002      	beq.n	8003120 <_dwt_kick_dgc_on_wakeup+0xc>
    else if (channel == 9)
 800311a:	2809      	cmp	r0, #9
 800311c:	d008      	beq.n	8003130 <_dwt_kick_dgc_on_wakeup+0x1c>
}
 800311e:	bd08      	pop	{r3, pc}
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8003120:	2340      	movs	r3, #64	; 0x40
 8003122:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8003126:	2100      	movs	r1, #0
 8003128:	4806      	ldr	r0, [pc, #24]	; (8003144 <_dwt_kick_dgc_on_wakeup+0x30>)
 800312a:	f7ff ffcb 	bl	80030c4 <dwt_modify32bitoffsetreg>
 800312e:	e7f6      	b.n	800311e <_dwt_kick_dgc_on_wakeup+0xa>
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8003130:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8003134:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8003138:	2100      	movs	r1, #0
 800313a:	4802      	ldr	r0, [pc, #8]	; (8003144 <_dwt_kick_dgc_on_wakeup+0x30>)
 800313c:	f7ff ffc2 	bl	80030c4 <dwt_modify32bitoffsetreg>
}
 8003140:	e7ed      	b.n	800311e <_dwt_kick_dgc_on_wakeup+0xa>
 8003142:	bf00      	nop
 8003144:	000b0008 	.word	0x000b0008

08003148 <dwt_enable_rf_tx>:
{
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	4605      	mov	r5, r0
 800314c:	460c      	mov	r4, r1
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK |
 800314e:	4e16      	ldr	r6, [pc, #88]	; (80031a8 <dwt_enable_rf_tx+0x60>)
 8003150:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	2100      	movs	r1, #0
 800315a:	4630      	mov	r0, r6
 800315c:	f7ff ffb2 	bl	80030c4 <dwt_modify32bitoffsetreg>
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK |
 8003160:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8003164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003168:	2100      	movs	r1, #0
 800316a:	4630      	mov	r0, r6
 800316c:	f7ff ffaa 	bl	80030c4 <dwt_modify32bitoffsetreg>
    if (channel == SEL_CHANNEL5)
 8003170:	2d05      	cmp	r5, #5
 8003172:	d009      	beq.n	8003188 <dwt_enable_rf_tx+0x40>
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <dwt_enable_rf_tx+0x64>)
 8003176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317a:	2100      	movs	r1, #0
 800317c:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8003180:	f7ff ffa0 	bl	80030c4 <dwt_modify32bitoffsetreg>
    if (switch_control)
 8003184:	b94c      	cbnz	r4, 800319a <dwt_enable_rf_tx+0x52>
}
 8003186:	bd70      	pop	{r4, r5, r6, pc}
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <dwt_enable_rf_tx+0x68>)
 800318a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800318e:	2100      	movs	r1, #0
 8003190:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8003194:	f7ff ff96 	bl	80030c4 <dwt_modify32bitoffsetreg>
 8003198:	e7f4      	b.n	8003184 <dwt_enable_rf_tx+0x3c>
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 800319a:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <dwt_enable_rf_tx+0x6c>)
 800319c:	2100      	movs	r1, #0
 800319e:	4806      	ldr	r0, [pc, #24]	; (80031b8 <dwt_enable_rf_tx+0x70>)
 80031a0:	f7ff fec7 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 80031a4:	e7ef      	b.n	8003186 <dwt_enable_rf_tx+0x3e>
 80031a6:	bf00      	nop
 80031a8:	00070048 	.word	0x00070048
 80031ac:	02001c00 	.word	0x02001c00
 80031b0:	02003c00 	.word	0x02003c00
 80031b4:	01011100 	.word	0x01011100
 80031b8:	00070014 	.word	0x00070014

080031bc <dwt_enable_rftx_blocks>:
{
 80031bc:	b508      	push	{r3, lr}
    if (channel == SEL_CHANNEL5)
 80031be:	2805      	cmp	r0, #5
 80031c0:	d002      	beq.n	80031c8 <dwt_enable_rftx_blocks+0xc>
    else if (channel == SEL_CHANNEL9)
 80031c2:	2809      	cmp	r0, #9
 80031c4:	d008      	beq.n	80031d8 <dwt_enable_rftx_blocks+0x1c>
}
 80031c6:	bd08      	pop	{r3, pc}
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <dwt_enable_rftx_blocks+0x2c>)
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ce:	2100      	movs	r1, #0
 80031d0:	4806      	ldr	r0, [pc, #24]	; (80031ec <dwt_enable_rftx_blocks+0x30>)
 80031d2:	f7ff ff77 	bl	80030c4 <dwt_modify32bitoffsetreg>
 80031d6:	e7f6      	b.n	80031c6 <dwt_enable_rftx_blocks+0xa>
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <dwt_enable_rftx_blocks+0x34>)
 80031da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031de:	2100      	movs	r1, #0
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <dwt_enable_rftx_blocks+0x30>)
 80031e2:	f7ff ff6f 	bl	80030c4 <dwt_modify32bitoffsetreg>
}
 80031e6:	e7ee      	b.n	80031c6 <dwt_enable_rftx_blocks+0xa>
 80031e8:	02003c00 	.word	0x02003c00
 80031ec:	00070004 	.word	0x00070004
 80031f0:	02001c00 	.word	0x02001c00

080031f4 <dwt_modify16bitoffsetreg>:
{
 80031f4:	b500      	push	{lr}
 80031f6:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 80031f8:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 80031fc:	0a12      	lsrs	r2, r2, #8
 80031fe:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[2] = (uint8_t)_or;//        &0xFF;
 8003202:	f88d 300e 	strb.w	r3, [sp, #14]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 800320c:	f248 0302 	movw	r3, #32770	; 0x8002
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	ab03      	add	r3, sp, #12
 8003214:	2204      	movs	r2, #4
 8003216:	b289      	uxth	r1, r1
 8003218:	f7ff fdd0 	bl	8002dbc <dwt_xfer3000>
}
 800321c:	b005      	add	sp, #20
 800321e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003224 <_dwt_prog_ldo_and_bias_tune>:
{
 8003224:	b508      	push	{r3, lr}
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 8003226:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800322a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322e:	2100      	movs	r1, #0
 8003230:	4806      	ldr	r0, [pc, #24]	; (800324c <_dwt_prog_ldo_and_bias_tune+0x28>)
 8003232:	f7ff ffdf 	bl	80031f4 <dwt_modify16bitoffsetreg>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <_dwt_prog_ldo_and_bias_tune+0x2c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	7a1b      	ldrb	r3, [r3, #8]
 800323c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003240:	2100      	movs	r1, #0
 8003242:	4804      	ldr	r0, [pc, #16]	; (8003254 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8003244:	f7ff ffd6 	bl	80031f4 <dwt_modify16bitoffsetreg>
}
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	000b0008 	.word	0x000b0008
 8003250:	2000008c 	.word	0x2000008c
 8003254:	0011001f 	.word	0x0011001f

08003258 <dwt_modify8bitoffsetreg>:
{
 8003258:	b500      	push	{lr}
 800325a:	b085      	sub	sp, #20
    buf[0] = _and;
 800325c:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = _or;
 8003260:	f88d 300d 	strb.w	r3, [sp, #13]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf),buf, DW3000_SPI_AND_OR_8);
 8003264:	f248 0301 	movw	r3, #32769	; 0x8001
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	ab03      	add	r3, sp, #12
 800326c:	2202      	movs	r2, #2
 800326e:	b289      	uxth	r1, r1
 8003270:	f7ff fda4 	bl	8002dbc <dwt_xfer3000>
}
 8003274:	b005      	add	sp, #20
 8003276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800327c <dwt_setdwstate>:
{
 800327c:	b510      	push	{r4, lr}
    if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 800327e:	2801      	cmp	r0, #1
 8003280:	d017      	beq.n	80032b2 <dwt_setdwstate+0x36>
    else if(state == DWT_DW_IDLE_RC)  //Change state to IDLE_RC and clear auto INIT2IDLE bit
 8003282:	2802      	cmp	r0, #2
 8003284:	d01f      	beq.n	80032c6 <dwt_setdwstate+0x4a>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 8003286:	2301      	movs	r3, #1
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	2100      	movs	r1, #0
 800328c:	481a      	ldr	r0, [pc, #104]	; (80032f8 <dwt_setdwstate+0x7c>)
 800328e:	f7ff ffe3 	bl	8003258 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8003292:	4c1a      	ldr	r4, [pc, #104]	; (80032fc <dwt_setdwstate+0x80>)
 8003294:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003298:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800329c:	2100      	movs	r1, #0
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff ff10 	bl	80030c4 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 80032a4:	2300      	movs	r3, #0
 80032a6:	227f      	movs	r2, #127	; 0x7f
 80032a8:	2102      	movs	r1, #2
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ffd4 	bl	8003258 <dwt_modify8bitoffsetreg>
}
 80032b0:	bd10      	pop	{r4, pc}
        dwt_force_clocks(FORCE_CLK_AUTO);
 80032b2:	2005      	movs	r0, #5
 80032b4:	f7ff fe86 	bl	8002fc4 <dwt_force_clocks>
        dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 80032b8:	2301      	movs	r3, #1
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	4619      	mov	r1, r3
 80032be:	480f      	ldr	r0, [pc, #60]	; (80032fc <dwt_setdwstate+0x80>)
 80032c0:	f7ff ffca 	bl	8003258 <dwt_modify8bitoffsetreg>
 80032c4:	e7f4      	b.n	80032b0 <dwt_setdwstate+0x34>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 80032c6:	2303      	movs	r3, #3
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	2100      	movs	r1, #0
 80032cc:	480a      	ldr	r0, [pc, #40]	; (80032f8 <dwt_setdwstate+0x7c>)
 80032ce:	f7ff ffc3 	bl	8003258 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 80032d2:	4c0a      	ldr	r4, [pc, #40]	; (80032fc <dwt_setdwstate+0x80>)
 80032d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80032d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032dc:	2100      	movs	r1, #0
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff fef0 	bl	80030c4 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 80032e4:	2300      	movs	r3, #0
 80032e6:	227f      	movs	r2, #127	; 0x7f
 80032e8:	2102      	movs	r1, #2
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff ffb4 	bl	8003258 <dwt_modify8bitoffsetreg>
        dwt_force_clocks(FORCE_CLK_AUTO);
 80032f0:	2005      	movs	r0, #5
 80032f2:	f7ff fe67 	bl	8002fc4 <dwt_force_clocks>
 80032f6:	e7db      	b.n	80032b0 <dwt_setdwstate+0x34>
 80032f8:	00110004 	.word	0x00110004
 80032fc:	00110008 	.word	0x00110008

08003300 <dwt_readdevid>:
{
 8003300:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8003302:	2100      	movs	r1, #0
 8003304:	4608      	mov	r0, r1
 8003306:	f7ff fe8a 	bl	800301e <dwt_read32bitoffsetreg>
}
 800330a:	bd08      	pop	{r3, pc}

0800330c <dwt_configurestskey>:
{
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_KEY0_ID, pStsKey->key0);
 8003310:	6802      	ldr	r2, [r0, #0]
 8003312:	2100      	movs	r1, #0
 8003314:	4809      	ldr	r0, [pc, #36]	; (800333c <dwt_configurestskey+0x30>)
 8003316:	f7ff fe0c 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY1_ID, pStsKey->key1);
 800331a:	6862      	ldr	r2, [r4, #4]
 800331c:	2100      	movs	r1, #0
 800331e:	4808      	ldr	r0, [pc, #32]	; (8003340 <dwt_configurestskey+0x34>)
 8003320:	f7ff fe07 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY2_ID, pStsKey->key2);
 8003324:	68a2      	ldr	r2, [r4, #8]
 8003326:	2100      	movs	r1, #0
 8003328:	4806      	ldr	r0, [pc, #24]	; (8003344 <dwt_configurestskey+0x38>)
 800332a:	f7ff fe02 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY3_ID, pStsKey->key3);
 800332e:	68e2      	ldr	r2, [r4, #12]
 8003330:	2100      	movs	r1, #0
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <dwt_configurestskey+0x3c>)
 8003334:	f7ff fdfd 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8003338:	bd10      	pop	{r4, pc}
 800333a:	bf00      	nop
 800333c:	0002000c 	.word	0x0002000c
 8003340:	00020010 	.word	0x00020010
 8003344:	00020014 	.word	0x00020014
 8003348:	00020018 	.word	0x00020018

0800334c <dwt_configurestsiv>:
{
 800334c:	b510      	push	{r4, lr}
 800334e:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_IV0_ID, pStsIv->iv0);
 8003350:	6802      	ldr	r2, [r0, #0]
 8003352:	2100      	movs	r1, #0
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <dwt_configurestsiv+0x30>)
 8003356:	f7ff fdec 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV1_ID, pStsIv->iv1);
 800335a:	6862      	ldr	r2, [r4, #4]
 800335c:	2100      	movs	r1, #0
 800335e:	4808      	ldr	r0, [pc, #32]	; (8003380 <dwt_configurestsiv+0x34>)
 8003360:	f7ff fde7 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV2_ID, pStsIv->iv2);
 8003364:	68a2      	ldr	r2, [r4, #8]
 8003366:	2100      	movs	r1, #0
 8003368:	4806      	ldr	r0, [pc, #24]	; (8003384 <dwt_configurestsiv+0x38>)
 800336a:	f7ff fde2 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV3_ID, pStsIv->iv3);
 800336e:	68e2      	ldr	r2, [r4, #12]
 8003370:	2100      	movs	r1, #0
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <dwt_configurestsiv+0x3c>)
 8003374:	f7ff fddd 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	0002001c 	.word	0x0002001c
 8003380:	00020020 	.word	0x00020020
 8003384:	00020024 	.word	0x00020024
 8003388:	00020028 	.word	0x00020028

0800338c <dwt_configurestsloadiv>:
{
 800338c:	b508      	push	{r3, lr}
    dwt_or8bitoffsetreg(STS_CTRL_ID, 0, STS_CTRL_LOAD_IV_BIT_MASK);
 800338e:	2301      	movs	r3, #1
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	2100      	movs	r1, #0
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <dwt_configurestsloadiv+0x10>)
 8003396:	f7ff ff5f 	bl	8003258 <dwt_modify8bitoffsetreg>
}
 800339a:	bd08      	pop	{r3, pc}
 800339c:	00020004 	.word	0x00020004

080033a0 <dwt_configmrxlut>:
{
 80033a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (channel == 5)
 80033a4:	2805      	cmp	r0, #5
 80033a6:	d036      	beq.n	8003416 <dwt_configmrxlut+0x76>
        lut6 = (uint32_t)CH9_DGC_LUT_6;
 80033a8:	4c20      	ldr	r4, [pc, #128]	; (800342c <dwt_configmrxlut+0x8c>)
        lut5 = (uint32_t)CH9_DGC_LUT_5;
 80033aa:	4625      	mov	r5, r4
        lut4 = (uint32_t)CH9_DGC_LUT_4;
 80033ac:	4e20      	ldr	r6, [pc, #128]	; (8003430 <dwt_configmrxlut+0x90>)
        lut3 = (uint32_t)CH9_DGC_LUT_3;
 80033ae:	4f21      	ldr	r7, [pc, #132]	; (8003434 <dwt_configmrxlut+0x94>)
        lut2 = (uint32_t)CH9_DGC_LUT_2;
 80033b0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800347c <dwt_configmrxlut+0xdc>
        lut1 = (uint32_t)CH9_DGC_LUT_1;
 80033b4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003480 <dwt_configmrxlut+0xe0>
        lut0 = (uint32_t)CH9_DGC_LUT_0;
 80033b8:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <dwt_configmrxlut+0x98>)
    dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 80033ba:	2100      	movs	r1, #0
 80033bc:	481f      	ldr	r0, [pc, #124]	; (800343c <dwt_configmrxlut+0x9c>)
 80033be:	f7ff fdb8 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 80033c2:	464a      	mov	r2, r9
 80033c4:	2100      	movs	r1, #0
 80033c6:	481e      	ldr	r0, [pc, #120]	; (8003440 <dwt_configmrxlut+0xa0>)
 80033c8:	f7ff fdb3 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 80033cc:	4642      	mov	r2, r8
 80033ce:	2100      	movs	r1, #0
 80033d0:	481c      	ldr	r0, [pc, #112]	; (8003444 <dwt_configmrxlut+0xa4>)
 80033d2:	f7ff fdae 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 80033d6:	463a      	mov	r2, r7
 80033d8:	2100      	movs	r1, #0
 80033da:	481b      	ldr	r0, [pc, #108]	; (8003448 <dwt_configmrxlut+0xa8>)
 80033dc:	f7ff fda9 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 80033e0:	4632      	mov	r2, r6
 80033e2:	2100      	movs	r1, #0
 80033e4:	4819      	ldr	r0, [pc, #100]	; (800344c <dwt_configmrxlut+0xac>)
 80033e6:	f7ff fda4 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 80033ea:	462a      	mov	r2, r5
 80033ec:	2100      	movs	r1, #0
 80033ee:	4818      	ldr	r0, [pc, #96]	; (8003450 <dwt_configmrxlut+0xb0>)
 80033f0:	f7ff fd9f 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 80033f4:	4622      	mov	r2, r4
 80033f6:	2100      	movs	r1, #0
 80033f8:	4816      	ldr	r0, [pc, #88]	; (8003454 <dwt_configmrxlut+0xb4>)
 80033fa:	f7ff fd9a 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <dwt_configmrxlut+0xb8>)
 8003400:	2100      	movs	r1, #0
 8003402:	4816      	ldr	r0, [pc, #88]	; (800345c <dwt_configmrxlut+0xbc>)
 8003404:	f7ff fd95 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <dwt_configmrxlut+0xc0>)
 800340a:	2100      	movs	r1, #0
 800340c:	4815      	ldr	r0, [pc, #84]	; (8003464 <dwt_configmrxlut+0xc4>)
 800340e:	f7ff fd90 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8003412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lut6 = (uint32_t)CH5_DGC_LUT_6;
 8003416:	4c14      	ldr	r4, [pc, #80]	; (8003468 <dwt_configmrxlut+0xc8>)
        lut5 = (uint32_t)CH5_DGC_LUT_5;
 8003418:	4d14      	ldr	r5, [pc, #80]	; (800346c <dwt_configmrxlut+0xcc>)
        lut4 = (uint32_t)CH5_DGC_LUT_4;
 800341a:	4e15      	ldr	r6, [pc, #84]	; (8003470 <dwt_configmrxlut+0xd0>)
        lut3 = (uint32_t)CH5_DGC_LUT_3;
 800341c:	4f15      	ldr	r7, [pc, #84]	; (8003474 <dwt_configmrxlut+0xd4>)
        lut2 = (uint32_t)CH5_DGC_LUT_2;
 800341e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003484 <dwt_configmrxlut+0xe4>
        lut1 = (uint32_t)CH5_DGC_LUT_1;
 8003422:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003488 <dwt_configmrxlut+0xe8>
        lut0 = (uint32_t)CH5_DGC_LUT_0;
 8003426:	4a14      	ldr	r2, [pc, #80]	; (8003478 <dwt_configmrxlut+0xd8>)
 8003428:	e7c7      	b.n	80033ba <dwt_configmrxlut+0x1a>
 800342a:	bf00      	nop
 800342c:	0002afb5 	.word	0x0002afb5
 8003430:	0002af7d 	.word	0x0002af7d
 8003434:	0002af3e 	.word	0x0002af3e
 8003438:	0002a8fe 	.word	0x0002a8fe
 800343c:	00030038 	.word	0x00030038
 8003440:	0003003c 	.word	0x0003003c
 8003444:	00030040 	.word	0x00030040
 8003448:	00030044 	.word	0x00030044
 800344c:	00030048 	.word	0x00030048
 8003450:	0003004c 	.word	0x0003004c
 8003454:	00030050 	.word	0x00030050
 8003458:	10000240 	.word	0x10000240
 800345c:	0003001c 	.word	0x0003001c
 8003460:	1b6da489 	.word	0x1b6da489
 8003464:	00030020 	.word	0x00030020
 8003468:	0001cff5 	.word	0x0001cff5
 800346c:	0001cfb5 	.word	0x0001cfb5
 8003470:	0001cf36 	.word	0x0001cf36
 8003474:	0001c77e 	.word	0x0001c77e
 8003478:	0001c0fd 	.word	0x0001c0fd
 800347c:	0002a5fe 	.word	0x0002a5fe
 8003480:	0002ac36 	.word	0x0002ac36
 8003484:	0001c6be 	.word	0x0001c6be
 8003488:	0001c43e 	.word	0x0001c43e

0800348c <dwt_run_pgfcal>:
{
 800348c:	b538      	push	{r3, r4, r5, lr}
    dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 800348e:	4c26      	ldr	r4, [pc, #152]	; (8003528 <dwt_run_pgfcal+0x9c>)
 8003490:	4a26      	ldr	r2, [pc, #152]	; (800352c <dwt_run_pgfcal+0xa0>)
 8003492:	2100      	movs	r1, #0
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff fd4c 	bl	8002f32 <dwt_write32bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 800349a:	2310      	movs	r3, #16
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	2100      	movs	r1, #0
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7ff fed9 	bl	8003258 <dwt_modify8bitoffsetreg>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 80034a6:	2400      	movs	r4, #0
 80034a8:	e001      	b.n	80034ae <dwt_run_pgfcal+0x22>
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2e4      	uxtb	r4, r4
 80034ae:	2c02      	cmp	r4, #2
 80034b0:	d80a      	bhi.n	80034c8 <dwt_run_pgfcal+0x3c>
        deca_usleep(DELAY_20uUSec);
 80034b2:	2014      	movs	r0, #20
 80034b4:	f000 fd8a 	bl	8003fcc <deca_usleep>
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 80034b8:	2100      	movs	r1, #0
 80034ba:	481d      	ldr	r0, [pc, #116]	; (8003530 <dwt_run_pgfcal+0xa4>)
 80034bc:	f7ff fdf5 	bl	80030aa <dwt_read8bitoffsetreg>
 80034c0:	2801      	cmp	r0, #1
 80034c2:	d1f2      	bne.n	80034aa <dwt_run_pgfcal+0x1e>
            flag=0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <dwt_run_pgfcal+0x3e>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 80034c8:	2301      	movs	r3, #1
    if (flag)
 80034ca:	bb1b      	cbnz	r3, 8003514 <dwt_run_pgfcal+0x88>
    int result = DWT_SUCCESS;
 80034cc:	2500      	movs	r5, #0
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 80034ce:	4c16      	ldr	r4, [pc, #88]	; (8003528 <dwt_run_pgfcal+0x9c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	4611      	mov	r1, r2
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7ff fd8d 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 80034da:	2201      	movs	r2, #1
 80034dc:	2100      	movs	r1, #0
 80034de:	4814      	ldr	r0, [pc, #80]	; (8003530 <dwt_run_pgfcal+0xa4>)
 80034e0:	f7ff fd88 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 80034e4:	2301      	movs	r3, #1
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	2102      	movs	r1, #2
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7ff feb4 	bl	8003258 <dwt_modify8bitoffsetreg>
    val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 80034f0:	2100      	movs	r1, #0
 80034f2:	4810      	ldr	r0, [pc, #64]	; (8003534 <dwt_run_pgfcal+0xa8>)
 80034f4:	f7ff fd93 	bl	800301e <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 80034f8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d00c      	beq.n	800351a <dwt_run_pgfcal+0x8e>
    val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 8003500:	2100      	movs	r1, #0
 8003502:	480d      	ldr	r0, [pc, #52]	; (8003538 <dwt_run_pgfcal+0xac>)
 8003504:	f7ff fd8b 	bl	800301e <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 8003508:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800350c:	4298      	cmp	r0, r3
 800350e:	d007      	beq.n	8003520 <dwt_run_pgfcal+0x94>
}
 8003510:	4628      	mov	r0, r5
 8003512:	bd38      	pop	{r3, r4, r5, pc}
        result = DWT_ERROR;
 8003514:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003518:	e7d9      	b.n	80034ce <dwt_run_pgfcal+0x42>
        result = DWT_ERROR;
 800351a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800351e:	e7ef      	b.n	8003500 <dwt_run_pgfcal+0x74>
        result = DWT_ERROR;
 8003520:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return result;
 8003524:	e7f4      	b.n	8003510 <dwt_run_pgfcal+0x84>
 8003526:	bf00      	nop
 8003528:	0004000c 	.word	0x0004000c
 800352c:	00020001 	.word	0x00020001
 8003530:	00040020 	.word	0x00040020
 8003534:	00040014 	.word	0x00040014
 8003538:	0004001c 	.word	0x0004001c

0800353c <dwt_pgf_cal>:
{
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4604      	mov	r4, r0
 8003540:	2600      	movs	r6, #0
    if (ldoen == 1)
 8003542:	2801      	cmp	r0, #1
 8003544:	d006      	beq.n	8003554 <dwt_pgf_cal+0x18>
    temp = dwt_run_pgfcal();
 8003546:	f7ff ffa1 	bl	800348c <dwt_run_pgfcal>
 800354a:	4605      	mov	r5, r0
    if (ldoen == 1)
 800354c:	2c01      	cmp	r4, #1
 800354e:	d010      	beq.n	8003572 <dwt_pgf_cal+0x36>
}
 8003550:	4628      	mov	r0, r5
 8003552:	bd70      	pop	{r4, r5, r6, pc}
        val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 8003554:	4d0a      	ldr	r5, [pc, #40]	; (8003580 <dwt_pgf_cal+0x44>)
 8003556:	4631      	mov	r1, r6
 8003558:	4628      	mov	r0, r5
 800355a:	f7ff fd95 	bl	8003088 <dwt_read16bitoffsetreg>
 800355e:	4606      	mov	r6, r0
        dwt_or16bitoffsetreg(LDO_CTRL_ID, 0, (
 8003560:	f240 1305 	movw	r3, #261	; 0x105
 8003564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003568:	2100      	movs	r1, #0
 800356a:	4628      	mov	r0, r5
 800356c:	f7ff fe42 	bl	80031f4 <dwt_modify16bitoffsetreg>
 8003570:	e7e9      	b.n	8003546 <dwt_pgf_cal+0xa>
        dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 8003572:	2300      	movs	r3, #0
 8003574:	4632      	mov	r2, r6
 8003576:	4619      	mov	r1, r3
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <dwt_pgf_cal+0x44>)
 800357a:	f7ff fe3b 	bl	80031f4 <dwt_modify16bitoffsetreg>
    return temp;
 800357e:	e7e7      	b.n	8003550 <dwt_pgf_cal+0x14>
 8003580:	00070048 	.word	0x00070048

08003584 <dwt_setrxantennadelay>:
{
 8003584:	b508      	push	{r3, lr}
 8003586:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(CIA_CONF_ID, 0, rxDelay);
 8003588:	2100      	movs	r1, #0
 800358a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 800358e:	f7ff fd09 	bl	8002fa4 <dwt_write16bitoffsetreg>
}
 8003592:	bd08      	pop	{r3, pc}

08003594 <dwt_settxantennadelay>:
{
 8003594:	b508      	push	{r3, lr}
 8003596:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, 0, txDelay);
 8003598:	2100      	movs	r1, #0
 800359a:	4802      	ldr	r0, [pc, #8]	; (80035a4 <dwt_settxantennadelay+0x10>)
 800359c:	f7ff fd02 	bl	8002fa4 <dwt_write16bitoffsetreg>
}
 80035a0:	bd08      	pop	{r3, pc}
 80035a2:	bf00      	nop
 80035a4:	00010004 	.word	0x00010004

080035a8 <dwt_writetxdata>:
    if ((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN)
 80035a8:	1813      	adds	r3, r2, r0
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	da20      	bge.n	80035f2 <dwt_writetxdata+0x4a>
{
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	460e      	mov	r6, r1
 80035b6:	4614      	mov	r4, r2
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80035b8:	2a7f      	cmp	r2, #127	; 0x7f
 80035ba:	d808      	bhi.n	80035ce <dwt_writetxdata+0x26>
            dwt_writetodevice(TX_BUFFER_ID, txBufferOffset, txDataLength, txDataBytes);
 80035bc:	460b      	mov	r3, r1
 80035be:	4602      	mov	r2, r0
 80035c0:	4621      	mov	r1, r4
 80035c2:	f44f 10a0 	mov.w	r0, #1310720	; 0x140000
 80035c6:	f7ff fcab 	bl	8002f20 <dwt_writetodevice>
        return DWT_SUCCESS;
 80035ca:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (TX_BUFFER_ID >> 16) );
 80035ce:	2214      	movs	r2, #20
 80035d0:	2100      	movs	r1, #0
 80035d2:	4809      	ldr	r0, [pc, #36]	; (80035f8 <dwt_writetxdata+0x50>)
 80035d4:	f7ff fcad 	bl	8002f32 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   txBufferOffset);
 80035d8:	4622      	mov	r2, r4
 80035da:	2100      	movs	r1, #0
 80035dc:	4807      	ldr	r0, [pc, #28]	; (80035fc <dwt_writetxdata+0x54>)
 80035de:	f7ff fca8 	bl	8002f32 <dwt_write32bitoffsetreg>
            dwt_writetodevice(INDIRECT_POINTER_A_ID, 0, txDataLength, txDataBytes);
 80035e2:	4633      	mov	r3, r6
 80035e4:	462a      	mov	r2, r5
 80035e6:	2100      	movs	r1, #0
 80035e8:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 80035ec:	f7ff fc98 	bl	8002f20 <dwt_writetodevice>
 80035f0:	e7eb      	b.n	80035ca <dwt_writetxdata+0x22>
        return DWT_ERROR;
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
} // end dwt_writetxdata()
 80035f6:	4770      	bx	lr
 80035f8:	001f0004 	.word	0x001f0004
 80035fc:	001f0008 	.word	0x001f0008

08003600 <dwt_writetxfctrl>:
{
 8003600:	b508      	push	{r3, lr}
    if(txBufferOffset <= 127)
 8003602:	297f      	cmp	r1, #127	; 0x7f
 8003604:	d809      	bhi.n	800361a <dwt_writetxfctrl+0x1a>
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 8003606:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 800360a:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 800360e:	4a0b      	ldr	r2, [pc, #44]	; (800363c <dwt_writetxfctrl+0x3c>)
 8003610:	2100      	movs	r1, #0
 8003612:	2024      	movs	r0, #36	; 0x24
 8003614:	f7ff fd56 	bl	80030c4 <dwt_modify32bitoffsetreg>
} // end dwt_writetxfctrl()
 8003618:	bd08      	pop	{r3, pc}
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 800361a:	3180      	adds	r1, #128	; 0x80
 800361c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 8003620:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 8003624:	4a05      	ldr	r2, [pc, #20]	; (800363c <dwt_writetxfctrl+0x3c>)
 8003626:	2100      	movs	r1, #0
 8003628:	2024      	movs	r0, #36	; 0x24
 800362a:	f7ff fd4b 	bl	80030c4 <dwt_modify32bitoffsetreg>
        reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
 800362e:	2100      	movs	r1, #0
 8003630:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003634:	f7ff fd39 	bl	80030aa <dwt_read8bitoffsetreg>
} // end dwt_writetxfctrl()
 8003638:	e7ee      	b.n	8003618 <dwt_writetxfctrl+0x18>
 800363a:	bf00      	nop
 800363c:	fc00f400 	.word	0xfc00f400

08003640 <dwt_setplenfine>:
{
 8003640:	b508      	push	{r3, lr}
 8003642:	4602      	mov	r2, r0
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8003644:	2101      	movs	r1, #1
 8003646:	2028      	movs	r0, #40	; 0x28
 8003648:	f7ff fcd4 	bl	8002ff4 <dwt_write8bitoffsetreg>
}
 800364c:	bd08      	pop	{r3, pc}
	...

08003650 <dwt_configure>:
{
 8003650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003654:	4604      	mov	r4, r0
    uint8_t chan = config->chan,cnt,flag;
 8003656:	7807      	ldrb	r7, [r0, #0]
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8003658:	7903      	ldrb	r3, [r0, #4]
 800365a:	2b18      	cmp	r3, #24
 800365c:	d804      	bhi.n	8003668 <dwt_configure+0x18>
 800365e:	78c3      	ldrb	r3, [r0, #3]
 8003660:	2b18      	cmp	r3, #24
 8003662:	d915      	bls.n	8003690 <dwt_configure+0x40>
 8003664:	2601      	movs	r6, #1
 8003666:	e000      	b.n	800366a <dwt_configure+0x1a>
 8003668:	2601      	movs	r6, #1
 800366a:	b2f6      	uxtb	r6, r6
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 800366c:	79e3      	ldrb	r3, [r4, #7]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d010      	beq.n	8003694 <dwt_configure+0x44>
 8003672:	2100      	movs	r1, #0
    switch (config->txPreambLength)
 8003674:	7863      	ldrb	r3, [r4, #1]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b06      	cmp	r3, #6
 800367a:	f200 80f9 	bhi.w	8003870 <dwt_configure+0x220>
 800367e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003682:	00fa      	.short	0x00fa
 8003684:	00f700f7 	.word	0x00f700f7
 8003688:	00f4000b 	.word	0x00f4000b
 800368c:	000e00f7 	.word	0x000e00f7
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8003690:	2600      	movs	r6, #0
 8003692:	e7ea      	b.n	800366a <dwt_configure+0x1a>
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 8003694:	2110      	movs	r1, #16
 8003696:	e7ed      	b.n	8003674 <dwt_configure+0x24>
    switch (config->txPreambLength)
 8003698:	f04f 0920 	mov.w	r9, #32
 800369c:	e001      	b.n	80036a2 <dwt_configure+0x52>
        preamble_len = 72;
 800369e:	f04f 0948 	mov.w	r9, #72	; 0x48
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 80036a2:	4bb7      	ldr	r3, [pc, #732]	; (8003980 <dwt_configure+0x330>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	8a1a      	ldrh	r2, [r3, #16]
 80036a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036ac:	821a      	strh	r2, [r3, #16]
    pdw3000local->longFrames = config->phrMode ;
 80036ae:	79e2      	ldrb	r2, [r4, #7]
 80036b0:	731a      	strb	r2, [r3, #12]
    sts_len=GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 80036b2:	7b65      	ldrb	r5, [r4, #13]
 80036b4:	1caa      	adds	r2, r5, #2
 80036b6:	2501      	movs	r5, #1
 80036b8:	4095      	lsls	r5, r2
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 80036ba:	fa1f f885 	uxth.w	r8, r5
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	ee07 2a90 	vmov	s15, r2
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003984 <dwt_configure+0x334>
 80036ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d6:	ee17 2a90 	vmov	r2, s15
 80036da:	825a      	strh	r2, [r3, #18]
    pdw3000local->stsconfig = config->stsMode;
 80036dc:	7b22      	ldrb	r2, [r4, #12]
 80036de:	755a      	strb	r2, [r3, #21]
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 80036e0:	7ba3      	ldrb	r3, [r4, #14]
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 80036e2:	0312      	lsls	r2, r2, #12
 80036e4:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80036e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 80036ec:	7a23      	ldrb	r3, [r4, #8]
 80036ee:	015b      	lsls	r3, r3, #5
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	4313      	orrs	r3, r2
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 80036f6:	430b      	orrs	r3, r1
 80036f8:	4aa3      	ldr	r2, [pc, #652]	; (8003988 <dwt_configure+0x338>)
 80036fa:	2100      	movs	r1, #0
 80036fc:	2010      	movs	r0, #16
 80036fe:	f7ff fce1 	bl	80030c4 <dwt_modify32bitoffsetreg>
    if (scp)
 8003702:	2e00      	cmp	r6, #0
 8003704:	f040 80ba 	bne.w	800387c <dwt_configure+0x22c>
        if (config->stsMode != DWT_STS_MODE_OFF)
 8003708:	7b23      	ldrb	r3, [r4, #12]
 800370a:	b1ab      	cbz	r3, 8003738 <dwt_configure+0xe8>
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 800370c:	7ba3      	ldrb	r3, [r4, #14]
 800370e:	2b01      	cmp	r3, #1
 8003710:	f240 80d9 	bls.w	80038c6 <dwt_configure+0x276>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 4);
 8003714:	7b60      	ldrb	r0, [r4, #13]
 8003716:	2204      	movs	r2, #4
 8003718:	2110      	movs	r1, #16
 800371a:	4b9c      	ldr	r3, [pc, #624]	; (800398c <dwt_configure+0x33c>)
 800371c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003720:	f7ff fb24 	bl	8002d6c <get_sts_mnth>
            preamble_len += (sts_len) * 8;
 8003724:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8003728:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 800372c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8003730:	2102      	movs	r1, #2
 8003732:	4897      	ldr	r0, [pc, #604]	; (8003990 <dwt_configure+0x340>)
 8003734:	f7ff fd5e 	bl	80031f4 <dwt_modify16bitoffsetreg>
        if (preamble_len >= 256)
 8003738:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800373c:	f340 80cc 	ble.w	80038d8 <dwt_configure+0x288>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8003740:	4b8f      	ldr	r3, [pc, #572]	; (8003980 <dwt_configure+0x330>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	8a13      	ldrh	r3, [r2, #16]
 8003746:	f043 0320 	orr.w	r3, r3, #32
 800374a:	8213      	strh	r3, [r2, #16]
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8003754:	2100      	movs	r1, #0
 8003756:	488f      	ldr	r0, [pc, #572]	; (8003994 <dwt_configure+0x344>)
 8003758:	f7ff fcb4 	bl	80030c4 <dwt_modify32bitoffsetreg>
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 800375c:	78a3      	ldrb	r3, [r4, #2]
 800375e:	22fc      	movs	r2, #252	; 0xfc
 8003760:	2100      	movs	r1, #0
 8003762:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8003766:	f7ff fd77 	bl	8003258 <dwt_modify8bitoffsetreg>
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, sts_len-1);    /*Starts from 0 that is why -1*/
 800376a:	1e6a      	subs	r2, r5, #1
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	2100      	movs	r1, #0
 8003770:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003774:	f7ff fc3e 	bl	8002ff4 <dwt_write8bitoffsetreg>
    if (config->txPreambLength == DWT_PLEN_72)
 8003778:	7863      	ldrb	r3, [r4, #1]
 800377a:	2b07      	cmp	r3, #7
 800377c:	f000 80b5 	beq.w	80038ea <dwt_configure+0x29a>
        dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 8003780:	2000      	movs	r0, #0
 8003782:	f7ff ff5d 	bl	8003640 <dwt_setplenfine>
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 8003786:	7b23      	ldrb	r3, [r4, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	f000 80b0 	beq.w	80038f2 <dwt_configure+0x2a2>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 8003792:	4a81      	ldr	r2, [pc, #516]	; (8003998 <dwt_configure+0x348>)
 8003794:	2100      	movs	r1, #0
 8003796:	4881      	ldr	r0, [pc, #516]	; (800399c <dwt_configure+0x34c>)
 8003798:	f7ff fbcb 	bl	8002f32 <dwt_write32bitoffsetreg>
    temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 800379c:	2100      	movs	r1, #0
 800379e:	4880      	ldr	r0, [pc, #512]	; (80039a0 <dwt_configure+0x350>)
 80037a0:	f7ff fc3d 	bl	800301e <dwt_read32bitoffsetreg>
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 80037a4:	f420 53ff 	bic.w	r3, r0, #8160	; 0x1fe0
 80037a8:	f023 031f 	bic.w	r3, r3, #31
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80037ac:	2f09      	cmp	r7, #9
 80037ae:	f000 80a6 	beq.w	80038fe <dwt_configure+0x2ae>
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 80037b2:	7922      	ldrb	r2, [r4, #4]
 80037b4:	0212      	lsls	r2, r2, #8
 80037b6:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80037ba:	431a      	orrs	r2, r3
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 80037bc:	78e3      	ldrb	r3, [r4, #3]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4313      	orrs	r3, r2
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 80037c4:	7962      	ldrb	r2, [r4, #5]
 80037c6:	0052      	lsls	r2, r2, #1
 80037c8:	f002 0206 	and.w	r2, r2, #6
    dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 80037cc:	431a      	orrs	r2, r3
 80037ce:	2100      	movs	r1, #0
 80037d0:	4873      	ldr	r0, [pc, #460]	; (80039a0 <dwt_configure+0x350>)
 80037d2:	f7ff fbae 	bl	8002f32 <dwt_write32bitoffsetreg>
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 80037d6:	79a2      	ldrb	r2, [r4, #6]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 80037d8:	7863      	ldrb	r3, [r4, #1]
 80037da:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 80037dc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80037e0:	f46f 4274 	mvn.w	r2, #62464	; 0xf400
 80037e4:	2100      	movs	r1, #0
 80037e6:	2024      	movs	r0, #36	; 0x24
 80037e8:	f7ff fc6c 	bl	80030c4 <dwt_modify32bitoffsetreg>
    if (config->sfdTO == 0)
 80037ec:	8963      	ldrh	r3, [r4, #10]
 80037ee:	b90b      	cbnz	r3, 80037f4 <dwt_configure+0x1a4>
        config->sfdTO = DWT_SFDTOC_DEF;
 80037f0:	2381      	movs	r3, #129	; 0x81
 80037f2:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 80037f4:	8962      	ldrh	r2, [r4, #10]
 80037f6:	2102      	movs	r1, #2
 80037f8:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 80037fc:	f7ff fbd2 	bl	8002fa4 <dwt_write16bitoffsetreg>
    if (chan == 9)
 8003800:	2f09      	cmp	r7, #9
 8003802:	d07f      	beq.n	8003904 <dwt_configure+0x2b4>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 8003804:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <dwt_configure+0x354>)
 8003806:	2100      	movs	r1, #0
 8003808:	4867      	ldr	r0, [pc, #412]	; (80039a8 <dwt_configure+0x358>)
 800380a:	f7ff fb92 	bl	8002f32 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 800380e:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8003812:	2100      	movs	r1, #0
 8003814:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8003818:	f7ff fbc4 	bl	8002fa4 <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 800381c:	2214      	movs	r2, #20
 800381e:	2101      	movs	r1, #1
 8003820:	4862      	ldr	r0, [pc, #392]	; (80039ac <dwt_configure+0x35c>)
 8003822:	f7ff fbe7 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8003826:	220e      	movs	r2, #14
 8003828:	2102      	movs	r1, #2
 800382a:	4861      	ldr	r0, [pc, #388]	; (80039b0 <dwt_configure+0x360>)
 800382c:	f7ff fbe2 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 8003830:	2281      	movs	r2, #129	; 0x81
 8003832:	2100      	movs	r1, #0
 8003834:	485f      	ldr	r0, [pc, #380]	; (80039b4 <dwt_configure+0x364>)
 8003836:	f7ff fbdd 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 800383a:	2202      	movs	r2, #2
 800383c:	2100      	movs	r1, #0
 800383e:	2044      	movs	r0, #68	; 0x44
 8003840:	f7ff fbd8 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_setdwstate(DWT_DW_IDLE);
 8003844:	2001      	movs	r0, #1
 8003846:	f7ff fd19 	bl	800327c <dwt_setdwstate>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 800384a:	2500      	movs	r5, #0
 800384c:	2d05      	cmp	r5, #5
 800384e:	d86b      	bhi.n	8003928 <dwt_configure+0x2d8>
        deca_usleep(DELAY_20uUSec);
 8003850:	2014      	movs	r0, #20
 8003852:	f000 fbbb 	bl	8003fcc <deca_usleep>
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 8003856:	2100      	movs	r1, #0
 8003858:	2044      	movs	r0, #68	; 0x44
 800385a:	f7ff fc26 	bl	80030aa <dwt_read8bitoffsetreg>
 800385e:	f010 0f02 	tst.w	r0, #2
 8003862:	d17d      	bne.n	8003960 <dwt_configure+0x310>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8003864:	3501      	adds	r5, #1
 8003866:	b2ed      	uxtb	r5, r5
 8003868:	e7f0      	b.n	800384c <dwt_configure+0x1fc>
        preamble_len = 128;
 800386a:	f04f 0980 	mov.w	r9, #128	; 0x80
        break;
 800386e:	e718      	b.n	80036a2 <dwt_configure+0x52>
        preamble_len = 256;
 8003870:	f44f 7980 	mov.w	r9, #256	; 0x100
        break;
 8003874:	e715      	b.n	80036a2 <dwt_configure+0x52>
        preamble_len = 64;
 8003876:	f04f 0940 	mov.w	r9, #64	; 0x40
 800387a:	e712      	b.n	80036a2 <dwt_configure+0x52>
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 800387c:	4b40      	ldr	r3, [pc, #256]	; (8003980 <dwt_configure+0x330>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	8a13      	ldrh	r3, [r2, #16]
 8003882:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003886:	8213      	strh	r3, [r2, #16]
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);
 8003888:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800388c:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8003890:	2100      	movs	r1, #0
 8003892:	4840      	ldr	r0, [pc, #256]	; (8003994 <dwt_configure+0x344>)
 8003894:	f7ff fc16 	bl	80030c4 <dwt_modify32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP);       //Set this if Ipatov analysis is used in SCP mode
 8003898:	f240 3206 	movw	r2, #774	; 0x306
 800389c:	2100      	movs	r1, #0
 800389e:	4846      	ldr	r0, [pc, #280]	; (80039b8 <dwt_configure+0x368>)
 80038a0:	f7ff fb47 	bl	8002f32 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 80038a4:	2200      	movs	r2, #0
 80038a6:	4611      	mov	r1, r2
 80038a8:	f04f 100e 	mov.w	r0, #917518	; 0xe000e
 80038ac:	f7ff fb41 	bl	8002f32 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 80038b0:	4a42      	ldr	r2, [pc, #264]	; (80039bc <dwt_configure+0x36c>)
 80038b2:	2100      	movs	r1, #0
 80038b4:	4836      	ldr	r0, [pc, #216]	; (8003990 <dwt_configure+0x340>)
 80038b6:	f7ff fb3c 	bl	8002f32 <dwt_write32bitoffsetreg>
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 80038ba:	227d      	movs	r2, #125	; 0x7d
 80038bc:	2100      	movs	r1, #0
 80038be:	4840      	ldr	r0, [pc, #256]	; (80039c0 <dwt_configure+0x370>)
 80038c0:	f7ff fb98 	bl	8002ff4 <dwt_write8bitoffsetreg>
 80038c4:	e74a      	b.n	800375c <dwt_configure+0x10c>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 80038c6:	7b60      	ldrb	r0, [r4, #13]
 80038c8:	2203      	movs	r2, #3
 80038ca:	2110      	movs	r1, #16
 80038cc:	4b2f      	ldr	r3, [pc, #188]	; (800398c <dwt_configure+0x33c>)
 80038ce:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80038d2:	f7ff fa4b 	bl	8002d6c <get_sts_mnth>
 80038d6:	e725      	b.n	8003724 <dwt_configure+0xd4>
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SHORT | OTP_CFG_OPS_KICK_BIT_MASK);
 80038d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038dc:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 80038e0:	2100      	movs	r1, #0
 80038e2:	482c      	ldr	r0, [pc, #176]	; (8003994 <dwt_configure+0x344>)
 80038e4:	f7ff fbee 	bl	80030c4 <dwt_modify32bitoffsetreg>
 80038e8:	e738      	b.n	800375c <dwt_configure+0x10c>
        dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 80038ea:	2008      	movs	r0, #8
 80038ec:	f7ff fea8 	bl	8003640 <dwt_setplenfine>
 80038f0:	e749      	b.n	8003786 <dwt_configure+0x136>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 80038f2:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <dwt_configure+0x374>)
 80038f4:	2100      	movs	r1, #0
 80038f6:	4829      	ldr	r0, [pc, #164]	; (800399c <dwt_configure+0x34c>)
 80038f8:	f7ff fb1b 	bl	8002f32 <dwt_write32bitoffsetreg>
 80038fc:	e74e      	b.n	800379c <dwt_configure+0x14c>
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	e756      	b.n	80037b2 <dwt_configure+0x162>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8003904:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <dwt_configure+0x378>)
 8003906:	2100      	movs	r1, #0
 8003908:	4827      	ldr	r0, [pc, #156]	; (80039a8 <dwt_configure+0x358>)
 800390a:	f7ff fb12 	bl	8002f32 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 800390e:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003912:	2100      	movs	r1, #0
 8003914:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8003918:	f7ff fb44 	bl	8002fa4 <dwt_write16bitoffsetreg>
        dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <dwt_configure+0x37c>)
 800391e:	2100      	movs	r1, #0
 8003920:	482b      	ldr	r0, [pc, #172]	; (80039d0 <dwt_configure+0x380>)
 8003922:	f7ff fb06 	bl	8002f32 <dwt_write32bitoffsetreg>
 8003926:	e779      	b.n	800381c <dwt_configure+0x1cc>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8003928:	2301      	movs	r3, #1
    if (flag)
 800392a:	bb33      	cbnz	r3, 800397a <dwt_configure+0x32a>
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 800392c:	7923      	ldrb	r3, [r4, #4]
 800392e:	3b09      	subs	r3, #9
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b0f      	cmp	r3, #15
 8003934:	d81a      	bhi.n	800396c <dwt_configure+0x31c>
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <dwt_configure+0x330>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	7a5b      	ldrb	r3, [r3, #9]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d011      	beq.n	8003964 <dwt_configure+0x314>
            dwt_configmrxlut(chan);
 8003940:	4638      	mov	r0, r7
 8003942:	f7ff fd2d 	bl	80033a0 <dwt_configmrxlut>
        dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0, (uint16_t)~DGC_CFG_THR_64_BIT_MASK, DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
 8003946:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800394a:	f248 12ff 	movw	r2, #33279	; 0x81ff
 800394e:	2100      	movs	r1, #0
 8003950:	4820      	ldr	r0, [pc, #128]	; (80039d4 <dwt_configure+0x384>)
 8003952:	f7ff fc4f 	bl	80031f4 <dwt_modify16bitoffsetreg>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003956:	2001      	movs	r0, #1
 8003958:	f7ff fdf0 	bl	800353c <dwt_pgf_cal>
} // end dwt_configure()
 800395c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            flag=0;
 8003960:	2300      	movs	r3, #0
 8003962:	e7e2      	b.n	800392a <dwt_configure+0x2da>
            _dwt_kick_dgc_on_wakeup(chan);
 8003964:	b278      	sxtb	r0, r7
 8003966:	f7ff fbd5 	bl	8003114 <_dwt_kick_dgc_on_wakeup>
 800396a:	e7ec      	b.n	8003946 <dwt_configure+0x2f6>
        dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0, (uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
 800396c:	2300      	movs	r3, #0
 800396e:	22fe      	movs	r2, #254	; 0xfe
 8003970:	4619      	mov	r1, r3
 8003972:	4818      	ldr	r0, [pc, #96]	; (80039d4 <dwt_configure+0x384>)
 8003974:	f7ff fc70 	bl	8003258 <dwt_modify8bitoffsetreg>
 8003978:	e7ed      	b.n	8003956 <dwt_configure+0x306>
        return  DWT_ERROR;
 800397a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800397e:	e7ed      	b.n	800395c <dwt_configure+0x30c>
 8003980:	2000008c 	.word	0x2000008c
 8003984:	3f666666 	.word	0x3f666666
 8003988:	fffc4fcf 	.word	0xfffc4fcf
 800398c:	08007258 	.word	0x08007258
 8003990:	000e0012 	.word	0x000e0012
 8003994:	000b0008 	.word	0x000b0008
 8003998:	af5f584c 	.word	0xaf5f584c
 800399c:	0006000c 	.word	0x0006000c
 80039a0:	00010014 	.word	0x00010014
 80039a4:	1c071134 	.word	0x1c071134
 80039a8:	0007001c 	.word	0x0007001c
 80039ac:	00070050 	.word	0x00070050
 80039b0:	00070018 	.word	0x00070018
 80039b4:	00090008 	.word	0x00090008
 80039b8:	000e000c 	.word	0x000e000c
 80039bc:	000c5a0a 	.word	0x000c5a0a
 80039c0:	000e0016 	.word	0x000e0016
 80039c4:	af5f35cc 	.word	0xaf5f35cc
 80039c8:	1c010034 	.word	0x1c010034
 80039cc:	08b5a833 	.word	0x08b5a833
 80039d0:	00070010 	.word	0x00070010
 80039d4:	00030018 	.word	0x00030018

080039d8 <dwt_readrxdata>:
{
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	4606      	mov	r6, r0
 80039dc:	460d      	mov	r5, r1
 80039de:	4614      	mov	r4, r2
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <dwt_readrxdata+0x58>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	7bdb      	ldrb	r3, [r3, #15]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d00d      	beq.n	8003a06 <dwt_readrxdata+0x2e>
        rx_buff_addr=RX_BUFFER_0_ID;
 80039ea:	f44f 1090 	mov.w	r0, #1179648	; 0x120000
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 80039ee:	1963      	adds	r3, r4, r5
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	da06      	bge.n	8003a04 <dwt_readrxdata+0x2c>
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80039f6:	2c7f      	cmp	r4, #127	; 0x7f
 80039f8:	d808      	bhi.n	8003a0c <dwt_readrxdata+0x34>
            dwt_readfromdevice(rx_buff_addr,rxBufferOffset,length,buffer);
 80039fa:	4633      	mov	r3, r6
 80039fc:	462a      	mov	r2, r5
 80039fe:	4621      	mov	r1, r4
 8003a00:	f7ff fb05 	bl	800300e <dwt_readfromdevice>
}
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
        rx_buff_addr=RX_BUFFER_1_ID;
 8003a06:	f44f 1098 	mov.w	r0, #1245184	; 0x130000
 8003a0a:	e7f0      	b.n	80039ee <dwt_readrxdata+0x16>
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16) );
 8003a0c:	0c02      	lsrs	r2, r0, #16
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4808      	ldr	r0, [pc, #32]	; (8003a34 <dwt_readrxdata+0x5c>)
 8003a12:	f7ff fa8e 	bl	8002f32 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   rxBufferOffset);
 8003a16:	4622      	mov	r2, r4
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4807      	ldr	r0, [pc, #28]	; (8003a38 <dwt_readrxdata+0x60>)
 8003a1c:	f7ff fa89 	bl	8002f32 <dwt_write32bitoffsetreg>
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 8003a20:	4633      	mov	r3, r6
 8003a22:	462a      	mov	r2, r5
 8003a24:	2100      	movs	r1, #0
 8003a26:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 8003a2a:	f7ff faf0 	bl	800300e <dwt_readfromdevice>
}
 8003a2e:	e7e9      	b.n	8003a04 <dwt_readrxdata+0x2c>
 8003a30:	2000008c 	.word	0x2000008c
 8003a34:	001f0004 	.word	0x001f0004
 8003a38:	001f0008 	.word	0x001f0008

08003a3c <dwt_readstsquality>:
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	4604      	mov	r4, r0
    preambleCount = dwt_read16bitoffsetreg(STS_STS_ID, 0) & STS_STS_ACC_QUAL_BIT_MASK; //  dwt_read16bitoffsetreg(CP_PRNG_ID, CP_STS_OFFSET) & CP_ACC_CP_QUAL_MASK;
 8003a40:	2100      	movs	r1, #0
 8003a42:	4809      	ldr	r0, [pc, #36]	; (8003a68 <dwt_readstsquality+0x2c>)
 8003a44:	f7ff fb20 	bl	8003088 <dwt_read16bitoffsetreg>
 8003a48:	f3c0 030b 	ubfx	r3, r0, #0, #12
    if(preambleCount & STS_ACC_CP_QUAL_SIGNTST)
 8003a4c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003a50:	d001      	beq.n	8003a56 <dwt_readstsquality+0x1a>
        preambleCount |= STS_ACC_CP_QUAL_SIGNEXT;
 8003a52:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    *rxStsQualityIndex = (int16_t)preambleCount;
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	8023      	strh	r3, [r4, #0]
    return (int)((int16_t)preambleCount - pdw3000local->ststhreshold);
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <dwt_readstsquality+0x30>)
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	f9b2 0012 	ldrsh.w	r0, [r2, #18]
}
 8003a62:	1a18      	subs	r0, r3, r0
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	bf00      	nop
 8003a68:	00020008 	.word	0x00020008
 8003a6c:	2000008c 	.word	0x2000008c

08003a70 <dwt_readstsstatus>:
{
 8003a70:	b510      	push	{r4, lr}
 8003a72:	4604      	mov	r4, r0
    uint32_t stsStatusRegAdd = (sts_num == 1) ? BUF0_STS1_STAT : BUF0_STS_STAT;
 8003a74:	2901      	cmp	r1, #1
 8003a76:	d017      	beq.n	8003aa8 <dwt_readstsstatus+0x38>
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <dwt_readstsstatus+0x60>)
    uint32_t stsStatusRegAddN = (sts_num == 1) ? STS1_TOA_HI_ID : STS_TOA_HI_ID;
 8003a7a:	2901      	cmp	r1, #1
 8003a7c:	d016      	beq.n	8003aac <dwt_readstsstatus+0x3c>
 8003a7e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
    switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <dwt_readstsstatus+0x64>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	7bdb      	ldrb	r3, [r3, #15]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d011      	beq.n	8003ab0 <dwt_readstsstatus+0x40>
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d116      	bne.n	8003abe <dwt_readstsstatus+0x4e>
        *stsStatus = dwt_read16bitoffsetreg(INDIRECT_POINTER_B_ID, (stsStatusRegAdd-BUF0_RX_FINFO+2)) >> 7;
 8003a90:	4911      	ldr	r1, [pc, #68]	; (8003ad8 <dwt_readstsstatus+0x68>)
 8003a92:	4411      	add	r1, r2
 8003a94:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8003a98:	f7ff faf6 	bl	8003088 <dwt_read16bitoffsetreg>
 8003a9c:	09c0      	lsrs	r0, r0, #7
 8003a9e:	8020      	strh	r0, [r4, #0]
    if (*stsStatus != 0 /*& DWT_SFD_COUNT_WARN*/)
 8003aa0:	8823      	ldrh	r3, [r4, #0]
 8003aa2:	b993      	cbnz	r3, 8003aca <dwt_readstsstatus+0x5a>
    int ret = DWT_SUCCESS;
 8003aa4:	2000      	movs	r0, #0
}
 8003aa6:	bd10      	pop	{r4, pc}
    uint32_t stsStatusRegAdd = (sts_num == 1) ? BUF0_STS1_STAT : BUF0_STS_STAT;
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <dwt_readstsstatus+0x6c>)
 8003aaa:	e7e6      	b.n	8003a7a <dwt_readstsstatus+0xa>
    uint32_t stsStatusRegAddN = (sts_num == 1) ? STS1_TOA_HI_ID : STS_TOA_HI_ID;
 8003aac:	480c      	ldr	r0, [pc, #48]	; (8003ae0 <dwt_readstsstatus+0x70>)
 8003aae:	e7e8      	b.n	8003a82 <dwt_readstsstatus+0x12>
        *stsStatus = (dwt_read16bitoffsetreg(stsStatusRegAdd, 2) >> 7);
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff fae8 	bl	8003088 <dwt_read16bitoffsetreg>
 8003ab8:	09c0      	lsrs	r0, r0, #7
 8003aba:	8020      	strh	r0, [r4, #0]
        break;
 8003abc:	e7f0      	b.n	8003aa0 <dwt_readstsstatus+0x30>
        *stsStatus = (dwt_read16bitoffsetreg(stsStatusRegAddN, 2) >> 7);
 8003abe:	2102      	movs	r1, #2
 8003ac0:	f7ff fae2 	bl	8003088 <dwt_read16bitoffsetreg>
 8003ac4:	09c0      	lsrs	r0, r0, #7
 8003ac6:	8020      	strh	r0, [r4, #0]
        break;
 8003ac8:	e7ea      	b.n	8003aa0 <dwt_readstsstatus+0x30>
        ret = DWT_ERROR;
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 8003ace:	e7ea      	b.n	8003aa6 <dwt_readstsstatus+0x36>
 8003ad0:	0018002c 	.word	0x0018002c
 8003ad4:	2000008c 	.word	0x2000008c
 8003ad8:	ffe80002 	.word	0xffe80002
 8003adc:	00180034 	.word	0x00180034
 8003ae0:	000c0014 	.word	0x000c0014

08003ae4 <dwt_readtxtimestamp>:
{
 8003ae4:	b508      	push	{r3, lr}
 8003ae6:	4603      	mov	r3, r0
    dwt_readfromdevice(TX_TIME_LO_ID, 0, TX_TIME_TX_STAMP_LEN, timestamp); // Read bytes directly into buffer
 8003ae8:	2205      	movs	r2, #5
 8003aea:	2100      	movs	r1, #0
 8003aec:	2074      	movs	r0, #116	; 0x74
 8003aee:	f7ff fa8e 	bl	800300e <dwt_readfromdevice>
}
 8003af2:	bd08      	pop	{r3, pc}

08003af4 <dwt_readrxtimestamp>:
{
 8003af4:	b508      	push	{r3, lr}
 8003af6:	4603      	mov	r3, r0
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8003af8:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <dwt_readrxtimestamp+0x38>)
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	7bd2      	ldrb	r2, [r2, #15]
 8003afe:	2a01      	cmp	r2, #1
 8003b00:	d008      	beq.n	8003b14 <dwt_readrxtimestamp+0x20>
 8003b02:	2a03      	cmp	r2, #3
 8003b04:	d10c      	bne.n	8003b20 <dwt_readrxtimestamp+0x2c>
        dwt_readfromdevice(INDIRECT_POINTER_B_ID, BUF1_RX_TIME -BUF1_RX_FINFO, RX_TIME_RX_STAMP_LEN, timestamp);
 8003b06:	2205      	movs	r2, #5
 8003b08:	2104      	movs	r1, #4
 8003b0a:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8003b0e:	f7ff fa7e 	bl	800300e <dwt_readfromdevice>
}
 8003b12:	bd08      	pop	{r3, pc}
        dwt_readfromdevice(BUF0_RX_TIME, 0, RX_TIME_RX_STAMP_LEN, timestamp);
 8003b14:	2205      	movs	r2, #5
 8003b16:	2100      	movs	r1, #0
 8003b18:	4805      	ldr	r0, [pc, #20]	; (8003b30 <dwt_readrxtimestamp+0x3c>)
 8003b1a:	f7ff fa78 	bl	800300e <dwt_readfromdevice>
        break;
 8003b1e:	e7f8      	b.n	8003b12 <dwt_readrxtimestamp+0x1e>
        dwt_readfromdevice(RX_TIME_0_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp); // Get the adjusted time of arrival
 8003b20:	2205      	movs	r2, #5
 8003b22:	2100      	movs	r1, #0
 8003b24:	2064      	movs	r0, #100	; 0x64
 8003b26:	f7ff fa72 	bl	800300e <dwt_readfromdevice>
}
 8003b2a:	e7f2      	b.n	8003b12 <dwt_readrxtimestamp+0x1e>
 8003b2c:	2000008c 	.word	0x2000008c
 8003b30:	00180004 	.word	0x00180004

08003b34 <dwt_configureframefilter>:
{
 8003b34:	b510      	push	{r4, lr}
    if(enabletype == DWT_FF_ENABLE_802_15_4)
 8003b36:	2802      	cmp	r0, #2
 8003b38:	d00b      	beq.n	8003b52 <dwt_configureframefilter+0x1e>
        dwt_and8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(~(SYS_CFG_FFEN_BIT_MASK)));
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	22fe      	movs	r2, #254	; 0xfe
 8003b3e:	4619      	mov	r1, r3
 8003b40:	2010      	movs	r0, #16
 8003b42:	f7ff fb89 	bl	8003258 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, 0x0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2014      	movs	r0, #20
 8003b4c:	f7ff fa2a 	bl	8002fa4 <dwt_write16bitoffsetreg>
}
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	460c      	mov	r4, r1
        dwt_or8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(SYS_CFG_FFEN_BIT_MASK));
 8003b54:	2301      	movs	r3, #1
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2010      	movs	r0, #16
 8003b5c:	f7ff fb7c 	bl	8003258 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, filtermode);
 8003b60:	4622      	mov	r2, r4
 8003b62:	2100      	movs	r1, #0
 8003b64:	2014      	movs	r0, #20
 8003b66:	f7ff fa1d 	bl	8002fa4 <dwt_write16bitoffsetreg>
 8003b6a:	e7f1      	b.n	8003b50 <dwt_configureframefilter+0x1c>

08003b6c <dwt_setpanid>:
{
 8003b6c:	b508      	push	{r3, lr}
 8003b6e:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_BYTE_OFFSET, panID);
 8003b70:	2102      	movs	r1, #2
 8003b72:	200c      	movs	r0, #12
 8003b74:	f7ff fa16 	bl	8002fa4 <dwt_write16bitoffsetreg>
}
 8003b78:	bd08      	pop	{r3, pc}

08003b7a <dwt_setaddress16>:
{
 8003b7a:	b508      	push	{r3, lr}
 8003b7c:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORTADDR_BIT_OFFSET, shortAddress);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	200c      	movs	r0, #12
 8003b82:	f7ff fa0f 	bl	8002fa4 <dwt_write16bitoffsetreg>
}
 8003b86:	bd08      	pop	{r3, pc}

08003b88 <dwt_check_dev_id>:
{
 8003b88:	b508      	push	{r3, lr}
    dev_id = dwt_readdevid();
 8003b8a:	f7ff fbb9 	bl	8003300 <dwt_readdevid>
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <dwt_check_dev_id+0x20>)
 8003b90:	4298      	cmp	r0, r3
 8003b92:	d004      	beq.n	8003b9e <dwt_check_dev_id+0x16>
 8003b94:	3b10      	subs	r3, #16
 8003b96:	4298      	cmp	r0, r3
 8003b98:	d103      	bne.n	8003ba2 <dwt_check_dev_id+0x1a>
    return DWT_SUCCESS;
 8003b9a:	2000      	movs	r0, #0
}
 8003b9c:	bd08      	pop	{r3, pc}
    return DWT_SUCCESS;
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e7fc      	b.n	8003b9c <dwt_check_dev_id+0x14>
        return DWT_ERROR;
 8003ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba6:	e7f9      	b.n	8003b9c <dwt_check_dev_id+0x14>
 8003ba8:	deca0312 	.word	0xdeca0312

08003bac <dwt_initialise>:
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	4604      	mov	r4, r0
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <dwt_initialise+0x114>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	73da      	strb	r2, [r3, #15]
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 8003bb8:	2102      	movs	r1, #2
 8003bba:	8219      	strh	r1, [r3, #16]
    pdw3000local->spicrc = 0;
 8003bbc:	751a      	strb	r2, [r3, #20]
    pdw3000local->stsconfig = 0; //STS off
 8003bbe:	755a      	strb	r2, [r3, #21]
    pdw3000local->vBatP = 0;
 8003bc0:	729a      	strb	r2, [r3, #10]
    pdw3000local->tempP = 0;
 8003bc2:	72da      	strb	r2, [r3, #11]
    pdw3000local->cbTxDone = NULL;
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
    pdw3000local->cbRxOk = NULL;
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw3000local->cbRxTo = NULL;
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
    pdw3000local->cbRxErr = NULL;
 8003bca:	635a      	str	r2, [r3, #52]	; 0x34
    pdw3000local->cbSPIRdy = NULL;
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c
    pdw3000local->cbSPIErr = NULL;
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
    if (dwt_check_dev_id()!=DWT_SUCCESS)
 8003bd0:	f7ff ffda 	bl	8003b88 <dwt_check_dev_id>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d16f      	bne.n	8003cb8 <dwt_initialise+0x10c>
 8003bd8:	4606      	mov	r6, r0
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 8003bda:	2004      	movs	r0, #4
 8003bdc:	f7ff fa36 	bl	800304c <_dwt_otpread>
 8003be0:	4605      	mov	r5, r0
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 8003be2:	2005      	movs	r0, #5
 8003be4:	f7ff fa32 	bl	800304c <_dwt_otpread>
 8003be8:	4607      	mov	r7, r0
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 8003bea:	200a      	movs	r0, #10
 8003bec:	f7ff fa2e 	bl	800304c <_dwt_otpread>
 8003bf0:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <dwt_initialise+0x114>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8003bf8:	7210      	strb	r0, [r2, #8]
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 8003bfa:	b115      	cbz	r5, 8003c02 <dwt_initialise+0x56>
 8003bfc:	b10f      	cbz	r7, 8003c02 <dwt_initialise+0x56>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d136      	bne.n	8003c70 <dwt_initialise+0xc4>
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 8003c02:	2020      	movs	r0, #32
 8003c04:	f7ff fa22 	bl	800304c <_dwt_otpread>
 8003c08:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <dwt_initialise+0x118>)
 8003c0a:	4298      	cmp	r0, r3
 8003c0c:	d033      	beq.n	8003c76 <dwt_initialise+0xca>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <dwt_initialise+0x114>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	725a      	strb	r2, [r3, #9]
    if(mode & DWT_READ_OTP_PID)
 8003c16:	f014 0f10 	tst.w	r4, #16
 8003c1a:	d131      	bne.n	8003c80 <dwt_initialise+0xd4>
    if (mode & DWT_READ_OTP_LID)
 8003c1c:	f014 0f20 	tst.w	r4, #32
 8003c20:	d135      	bne.n	8003c8e <dwt_initialise+0xe2>
    if (mode & DWT_READ_OTP_BAT)
 8003c22:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003c26:	d139      	bne.n	8003c9c <dwt_initialise+0xf0>
    if (mode & DWT_READ_OTP_TMP)
 8003c28:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003c2c:	d13d      	bne.n	8003caa <dwt_initialise+0xfe>
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 8003c2e:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <dwt_initialise+0x114>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	7ada      	ldrb	r2, [r3, #11]
 8003c34:	b90a      	cbnz	r2, 8003c3a <dwt_initialise+0x8e>
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 8003c36:	2285      	movs	r2, #133	; 0x85
 8003c38:	72da      	strb	r2, [r3, #11]
    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 8003c3a:	7a9a      	ldrb	r2, [r3, #10]
 8003c3c:	b90a      	cbnz	r2, 8003c42 <dwt_initialise+0x96>
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 8003c3e:	2274      	movs	r2, #116	; 0x74
 8003c40:	729a      	strb	r2, [r3, #10]
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 8003c42:	201f      	movs	r0, #31
 8003c44:	f7ff fa02 	bl	800304c <_dwt_otpread>
 8003c48:	4c1d      	ldr	r4, [pc, #116]	; (8003cc0 <dwt_initialise+0x114>)
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	7358      	strb	r0, [r3, #13]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 8003c4e:	201e      	movs	r0, #30
 8003c50:	f7ff f9fc 	bl	800304c <_dwt_otpread>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003c5a:	7398      	strb	r0, [r3, #14]
    if(pdw3000local->init_xtrim == 0)
 8003c5c:	b908      	cbnz	r0, 8003c62 <dwt_initialise+0xb6>
        pdw3000local->init_xtrim = 0x2E ; //set default value
 8003c5e:	222e      	movs	r2, #46	; 0x2e
 8003c60:	739a      	strb	r2, [r3, #14]
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 8003c62:	7b9a      	ldrb	r2, [r3, #14]
 8003c64:	2100      	movs	r1, #0
 8003c66:	4818      	ldr	r0, [pc, #96]	; (8003cc8 <dwt_initialise+0x11c>)
 8003c68:	f7ff f9c4 	bl	8002ff4 <dwt_write8bitoffsetreg>
} // end dwt_initialise()
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _dwt_prog_ldo_and_bias_tune();
 8003c70:	f7ff fad8 	bl	8003224 <_dwt_prog_ldo_and_bias_tune>
 8003c74:	e7c5      	b.n	8003c02 <dwt_initialise+0x56>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <dwt_initialise+0x114>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	725a      	strb	r2, [r3, #9]
 8003c7e:	e7ca      	b.n	8003c16 <dwt_initialise+0x6a>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <dwt_initialise+0x114>)
 8003c82:	681d      	ldr	r5, [r3, #0]
 8003c84:	2006      	movs	r0, #6
 8003c86:	f7ff f9e1 	bl	800304c <_dwt_otpread>
 8003c8a:	6028      	str	r0, [r5, #0]
 8003c8c:	e7c6      	b.n	8003c1c <dwt_initialise+0x70>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <dwt_initialise+0x114>)
 8003c90:	681d      	ldr	r5, [r3, #0]
 8003c92:	2007      	movs	r0, #7
 8003c94:	f7ff f9da 	bl	800304c <_dwt_otpread>
 8003c98:	6068      	str	r0, [r5, #4]
 8003c9a:	e7c2      	b.n	8003c22 <dwt_initialise+0x76>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 8003c9c:	2008      	movs	r0, #8
 8003c9e:	f7ff f9d5 	bl	800304c <_dwt_otpread>
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <dwt_initialise+0x114>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	7298      	strb	r0, [r3, #10]
 8003ca8:	e7be      	b.n	8003c28 <dwt_initialise+0x7c>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 8003caa:	2009      	movs	r0, #9
 8003cac:	f7ff f9ce 	bl	800304c <_dwt_otpread>
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <dwt_initialise+0x114>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	72d8      	strb	r0, [r3, #11]
 8003cb6:	e7ba      	b.n	8003c2e <dwt_initialise+0x82>
        return DWT_ERROR;
 8003cb8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003cbc:	e7d6      	b.n	8003c6c <dwt_initialise+0xc0>
 8003cbe:	bf00      	nop
 8003cc0:	2000008c 	.word	0x2000008c
 8003cc4:	10000240 	.word	0x10000240
 8003cc8:	00090014 	.word	0x00090014

08003ccc <dwt_setrxaftertxdelay>:
{
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4604      	mov	r4, r0
    uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 8003cd0:	4d07      	ldr	r5, [pc, #28]	; (8003cf0 <dwt_setrxaftertxdelay+0x24>)
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f7ff f9a2 	bl	800301e <dwt_read32bitoffsetreg>
    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 8003cda:	0d00      	lsrs	r0, r0, #20
 8003cdc:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8003cde:	f3c4 0213 	ubfx	r2, r4, #0, #20
    dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8003ce2:	4302      	orrs	r2, r0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f7ff f923 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
 8003cee:	bf00      	nop
 8003cf0:	00010008 	.word	0x00010008

08003cf4 <dwt_checkidlerc>:
{
 8003cf4:	b508      	push	{r3, lr}
    uint32_t reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	2044      	movs	r0, #68	; 0x44
 8003cfa:	f7ff f9c5 	bl	8003088 <dwt_read16bitoffsetreg>
}
 8003cfe:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8003d02:	bd08      	pop	{r3, pc}

08003d04 <dwt_setdelayedtrxtime>:
{
 8003d04:	b508      	push	{r3, lr}
 8003d06:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
 8003d08:	2100      	movs	r1, #0
 8003d0a:	202c      	movs	r0, #44	; 0x2c
 8003d0c:	f7ff f911 	bl	8002f32 <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 8003d10:	bd08      	pop	{r3, pc}
	...

08003d14 <dwt_starttx>:
{
 8003d14:	b508      	push	{r3, lr}
    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 8003d16:	f010 0f1d 	tst.w	r0, #29
 8003d1a:	d06d      	beq.n	8003df8 <dwt_starttx+0xe4>
        if(mode & DWT_START_TX_DELAYED) //delayed TX
 8003d1c:	f010 0f01 	tst.w	r0, #1
 8003d20:	d01f      	beq.n	8003d62 <dwt_starttx+0x4e>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003d22:	f010 0f02 	tst.w	r0, #2
 8003d26:	d015      	beq.n	8003d54 <dwt_starttx+0x40>
                dwt_writefastCMD(CMD_DTX_W4R);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	200d      	movs	r0, #13
 8003d30:	f7ff f8f6 	bl	8002f20 <dwt_writetodevice>
        checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8003d34:	2103      	movs	r1, #3
 8003d36:	2044      	movs	r0, #68	; 0x44
 8003d38:	f7ff f9b7 	bl	80030aa <dwt_read8bitoffsetreg>
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 8003d3c:	f010 0f08 	tst.w	r0, #8
 8003d40:	d151      	bne.n	8003de6 <dwt_starttx+0xd2>
            sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
 8003d42:	2100      	movs	r1, #0
 8003d44:	4841      	ldr	r0, [pc, #260]	; (8003e4c <dwt_starttx+0x138>)
 8003d46:	f7ff f96a 	bl	800301e <dwt_read32bitoffsetreg>
            if (sys_state == DW_SYS_STATE_TXERR)
 8003d4a:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8003d4e:	d041      	beq.n	8003dd4 <dwt_starttx+0xc0>
                retval = DWT_SUCCESS ; // All okay
 8003d50:	2000      	movs	r0, #0
} // end dwt_starttx()
 8003d52:	bd08      	pop	{r3, pc}
                dwt_writefastCMD(CMD_DTX);
 8003d54:	2300      	movs	r3, #0
 8003d56:	461a      	mov	r2, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	f7ff f8e0 	bl	8002f20 <dwt_writetodevice>
 8003d60:	e7e8      	b.n	8003d34 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8003d62:	f010 0f08 	tst.w	r0, #8
 8003d66:	d010      	beq.n	8003d8a <dwt_starttx+0x76>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003d68:	f010 0f02 	tst.w	r0, #2
 8003d6c:	d006      	beq.n	8003d7c <dwt_starttx+0x68>
                dwt_writefastCMD(CMD_DTX_RS_W4R);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	461a      	mov	r2, r3
 8003d72:	4619      	mov	r1, r3
 8003d74:	200f      	movs	r0, #15
 8003d76:	f7ff f8d3 	bl	8002f20 <dwt_writetodevice>
 8003d7a:	e7db      	b.n	8003d34 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_RS);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4619      	mov	r1, r3
 8003d82:	2007      	movs	r0, #7
 8003d84:	f7ff f8cc 	bl	8002f20 <dwt_writetodevice>
 8003d88:	e7d4      	b.n	8003d34 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 8003d8a:	f010 0f10 	tst.w	r0, #16
 8003d8e:	d010      	beq.n	8003db2 <dwt_starttx+0x9e>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003d90:	f010 0f02 	tst.w	r0, #2
 8003d94:	d006      	beq.n	8003da4 <dwt_starttx+0x90>
                dwt_writefastCMD(CMD_DTX_TS_W4R);
 8003d96:	2300      	movs	r3, #0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	200e      	movs	r0, #14
 8003d9e:	f7ff f8bf 	bl	8002f20 <dwt_writetodevice>
 8003da2:	e7c7      	b.n	8003d34 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_TS);
 8003da4:	2300      	movs	r3, #0
 8003da6:	461a      	mov	r2, r3
 8003da8:	4619      	mov	r1, r3
 8003daa:	2005      	movs	r0, #5
 8003dac:	f7ff f8b8 	bl	8002f20 <dwt_writetodevice>
 8003db0:	e7c0      	b.n	8003d34 <dwt_starttx+0x20>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003db2:	f010 0f02 	tst.w	r0, #2
 8003db6:	d006      	beq.n	8003dc6 <dwt_starttx+0xb2>
                dwt_writefastCMD(CMD_DTX_REF_W4R);
 8003db8:	2300      	movs	r3, #0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	2010      	movs	r0, #16
 8003dc0:	f7ff f8ae 	bl	8002f20 <dwt_writetodevice>
 8003dc4:	e7b6      	b.n	8003d34 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_REF);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4619      	mov	r1, r3
 8003dcc:	2009      	movs	r0, #9
 8003dce:	f7ff f8a7 	bl	8002f20 <dwt_writetodevice>
 8003dd2:	e7af      	b.n	8003d34 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_TXRXOFF);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f8a0 	bl	8002f20 <dwt_writetodevice>
                retval = DWT_ERROR ; // Failed !
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de4:	e7b5      	b.n	8003d52 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TXRXOFF);
 8003de6:	2300      	movs	r3, #0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4619      	mov	r1, r3
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f897 	bl	8002f20 <dwt_writetodevice>
            retval = DWT_ERROR ; // Failed !
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df6:	e7ac      	b.n	8003d52 <dwt_starttx+0x3e>
    else if(mode & DWT_START_TX_CCA)
 8003df8:	f010 0f20 	tst.w	r0, #32
 8003dfc:	d012      	beq.n	8003e24 <dwt_starttx+0x110>
        if(mode & DWT_RESPONSE_EXPECTED)
 8003dfe:	f010 0f02 	tst.w	r0, #2
 8003e02:	d007      	beq.n	8003e14 <dwt_starttx+0x100>
            dwt_writefastCMD(CMD_CCA_TX_W4R);
 8003e04:	2300      	movs	r3, #0
 8003e06:	461a      	mov	r2, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	2011      	movs	r0, #17
 8003e0c:	f7ff f888 	bl	8002f20 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003e10:	2000      	movs	r0, #0
 8003e12:	e79e      	b.n	8003d52 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_CCA_TX);
 8003e14:	2300      	movs	r3, #0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	200b      	movs	r0, #11
 8003e1c:	f7ff f880 	bl	8002f20 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003e20:	2000      	movs	r0, #0
 8003e22:	e796      	b.n	8003d52 <dwt_starttx+0x3e>
        if(mode & DWT_RESPONSE_EXPECTED)
 8003e24:	f010 0f02 	tst.w	r0, #2
 8003e28:	d007      	beq.n	8003e3a <dwt_starttx+0x126>
            dwt_writefastCMD(CMD_TX_W4R);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4619      	mov	r1, r3
 8003e30:	200c      	movs	r0, #12
 8003e32:	f7ff f875 	bl	8002f20 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003e36:	2000      	movs	r0, #0
 8003e38:	e78b      	b.n	8003d52 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TX);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7ff f86d 	bl	8002f20 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003e46:	2000      	movs	r0, #0
 8003e48:	e783      	b.n	8003d52 <dwt_starttx+0x3e>
 8003e4a:	bf00      	nop
 8003e4c:	000f0030 	.word	0x000f0030

08003e50 <dwt_rxenable>:
{
 8003e50:	b510      	push	{r4, lr}
    if(mode == DWT_START_RX_IMMEDIATE)
 8003e52:	4604      	mov	r4, r0
 8003e54:	b170      	cbz	r0, 8003e74 <dwt_rxenable+0x24>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8003e56:	f020 0302 	bic.w	r3, r0, #2
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d848      	bhi.n	8003ef2 <dwt_rxenable+0xa2>
 8003e60:	e8df f003 	tbb	[pc, r3]
 8003e64:	1f474710 	.word	0x1f474710
 8003e68:	26474747 	.word	0x26474747
 8003e6c:	47474747 	.word	0x47474747
 8003e70:	2d474747 	.word	0x2d474747
        dwt_writefastCMD(CMD_RX);
 8003e74:	2300      	movs	r3, #0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	2002      	movs	r0, #2
 8003e7c:	f7ff f850 	bl	8002f20 <dwt_writetodevice>
    return DWT_SUCCESS;
 8003e80:	4620      	mov	r0, r4
 8003e82:	e00d      	b.n	8003ea0 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_DRX);
 8003e84:	2300      	movs	r3, #0
 8003e86:	461a      	mov	r2, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	2004      	movs	r0, #4
 8003e8c:	f7ff f848 	bl	8002f20 <dwt_writetodevice>
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8003e90:	2103      	movs	r1, #3
 8003e92:	2044      	movs	r0, #68	; 0x44
 8003e94:	f7ff f909 	bl	80030aa <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8003e98:	f010 0f08 	tst.w	r0, #8
 8003e9c:	d116      	bne.n	8003ecc <dwt_rxenable+0x7c>
    return DWT_SUCCESS;
 8003e9e:	2000      	movs	r0, #0
} // end dwt_rxenable()
 8003ea0:	bd10      	pop	{r4, pc}
                dwt_writefastCMD(CMD_DRX_REF);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	200a      	movs	r0, #10
 8003eaa:	f7ff f839 	bl	8002f20 <dwt_writetodevice>
            break;
 8003eae:	e7ef      	b.n	8003e90 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_RS);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	2008      	movs	r0, #8
 8003eb8:	f7ff f832 	bl	8002f20 <dwt_writetodevice>
            break;
 8003ebc:	e7e8      	b.n	8003e90 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_TS);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	2006      	movs	r0, #6
 8003ec6:	f7ff f82b 	bl	8002f20 <dwt_writetodevice>
            break;
 8003eca:	e7e1      	b.n	8003e90 <dwt_rxenable+0x40>
            dwt_writefastCMD(CMD_TXRXOFF);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff f824 	bl	8002f20 <dwt_writetodevice>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8003ed8:	f014 0f02 	tst.w	r4, #2
 8003edc:	d002      	beq.n	8003ee4 <dwt_rxenable+0x94>
            return DWT_ERROR; // return warning indication
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee2:	e7dd      	b.n	8003ea0 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_RX);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	2002      	movs	r0, #2
 8003eec:	f7ff f818 	bl	8002f20 <dwt_writetodevice>
 8003ef0:	e7f5      	b.n	8003ede <dwt_rxenable+0x8e>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef6:	e7d3      	b.n	8003ea0 <dwt_rxenable+0x50>

08003ef8 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	460c      	mov	r4, r1
    // Force system clock to FOSC/4 and TX clocks on and enable RF blocks
    dwt_force_clocks(FORCE_CLK_SYS_TX);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f7ff f860 	bl	8002fc4 <dwt_force_clocks>
    dwt_enable_rf_tx(channel, 0);
 8003f04:	2100      	movs	r1, #0
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7ff f91e 	bl	8003148 <dwt_enable_rf_tx>
    dwt_enable_rftx_blocks(channel);
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f7ff f955 	bl	80031bc <dwt_enable_rftx_blocks>

    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 8003f12:	f3c5 020b 	ubfx	r2, r5, #0, #12
 8003f16:	2100      	movs	r1, #0
 8003f18:	480f      	ldr	r0, [pc, #60]	; (8003f58 <dwt_calcbandwidthadj+0x60>)
 8003f1a:	f7ff f843 	bl	8002fa4 <dwt_write16bitoffsetreg>
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
 8003f1e:	2303      	movs	r3, #3
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	2100      	movs	r1, #0
 8003f24:	480d      	ldr	r0, [pc, #52]	; (8003f5c <dwt_calcbandwidthadj+0x64>)
 8003f26:	f7ff f997 	bl	8003258 <dwt_modify8bitoffsetreg>
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	480b      	ldr	r0, [pc, #44]	; (8003f5c <dwt_calcbandwidthadj+0x64>)
 8003f2e:	f7ff f8bc 	bl	80030aa <dwt_read8bitoffsetreg>
 8003f32:	f010 0f01 	tst.w	r0, #1
 8003f36:	d1f8      	bne.n	8003f2a <dwt_calcbandwidthadj+0x32>

    //Restore clocks to AUTO and turn off TX blocks
    dwt_disable_rftx_blocks();
 8003f38:	f7ff f810 	bl	8002f5c <dwt_disable_rftx_blocks>
    dwt_disable_rf_tx(0);
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff f817 	bl	8002f70 <dwt_disable_rf_tx>
    dwt_force_clocks(FORCE_CLK_AUTO);
 8003f42:	2005      	movs	r0, #5
 8003f44:	f7ff f83e 	bl	8002fc4 <dwt_force_clocks>

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4805      	ldr	r0, [pc, #20]	; (8003f60 <dwt_calcbandwidthadj+0x68>)
 8003f4c:	f7ff f8ad 	bl	80030aa <dwt_read8bitoffsetreg>
}
 8003f50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003f54:	bd38      	pop	{r3, r4, r5, pc}
 8003f56:	bf00      	nop
 8003f58:	0008001c 	.word	0x0008001c
 8003f5c:	00080010 	.word	0x00080010
 8003f60:	0007001c 	.word	0x0007001c

08003f64 <dwt_configuretxrf>:
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4604      	mov	r4, r0
    if (config->PGcount == 0) {
 8003f68:	8903      	ldrh	r3, [r0, #8]
 8003f6a:	b953      	cbnz	r3, 8003f82 <dwt_configuretxrf+0x1e>
        dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8003f6c:	7802      	ldrb	r2, [r0, #0]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	480b      	ldr	r0, [pc, #44]	; (8003fa0 <dwt_configuretxrf+0x3c>)
 8003f72:	f7ff f83f 	bl	8002ff4 <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <dwt_configuretxrf+0x40>)
 8003f7c:	f7fe ffd9 	bl	8002f32 <dwt_write32bitoffsetreg>
}
 8003f80:	bd10      	pop	{r4, pc}
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 8003f82:	2100      	movs	r1, #0
 8003f84:	4808      	ldr	r0, [pc, #32]	; (8003fa8 <dwt_configuretxrf+0x44>)
 8003f86:	f7ff f890 	bl	80030aa <dwt_read8bitoffsetreg>
 8003f8a:	f010 0f01 	tst.w	r0, #1
 8003f8e:	d104      	bne.n	8003f9a <dwt_configuretxrf+0x36>
        uint8_t channel = 5;
 8003f90:	2105      	movs	r1, #5
        dwt_calcbandwidthadj(config->PGcount, channel);
 8003f92:	8920      	ldrh	r0, [r4, #8]
 8003f94:	f7ff ffb0 	bl	8003ef8 <dwt_calcbandwidthadj>
 8003f98:	e7ed      	b.n	8003f76 <dwt_configuretxrf+0x12>
            channel = 9;
 8003f9a:	2109      	movs	r1, #9
 8003f9c:	e7f9      	b.n	8003f92 <dwt_configuretxrf+0x2e>
 8003f9e:	bf00      	nop
 8003fa0:	0007001c 	.word	0x0007001c
 8003fa4:	0001000c 	.word	0x0001000c
 8003fa8:	00010014 	.word	0x00010014

08003fac <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8003fac:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8003fae:	f000 fc11 	bl	80047d4 <port_GetEXT_IRQStatus>

	if(s) {
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	b908      	cbnz	r0, 8003fba <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8003fba:	f000 fbdc 	bl	8004776 <port_DisableEXT_IRQ>
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8003fbe:	e7fa      	b.n	8003fb6 <decamutexon+0xa>

08003fc0 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8003fc0:	b900      	cbnz	r0, 8003fc4 <decamutexoff+0x4>
 8003fc2:	4770      	bx	lr
{
 8003fc4:	b508      	push	{r3, lr}
		port_EnableEXT_IRQ();
 8003fc6:	f000 fbdd 	bl	8004784 <port_EnableEXT_IRQ>
	}
}
 8003fca:	bd08      	pop	{r3, pc}

08003fcc <deca_usleep>:
}


/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8003fcc:	b508      	push	{r3, lr}
    usleep(time_us);
 8003fce:	f000 fbab 	bl	8004728 <usleep>
}
 8003fd2:	bd08      	pop	{r3, pc}

08003fd4 <writetospiwithcrc>:
                uint16_t      headerLength,
                const uint8_t *headerBuffer,
                uint16_t      bodyLength,
                const uint8_t *bodyBuffer,
                uint8_t       crc8)
{
 8003fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	4681      	mov	r9, r0
 8003fda:	4688      	mov	r8, r1
 8003fdc:	4617      	mov	r7, r2
 8003fde:	461e      	mov	r6, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003fe0:	f7ff ffe4 	bl	8003fac <decamutexon>
 8003fe4:	4604      	mov	r4, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003fe6:	4815      	ldr	r0, [pc, #84]	; (800403c <writetospiwithcrc+0x68>)
 8003fe8:	f002 fa89 	bl	80064fe <HAL_SPI_GetState>
 8003fec:	2801      	cmp	r0, #1
 8003fee:	d1fa      	bne.n	8003fe6 <writetospiwithcrc+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff8:	f000 ffd0 	bl	8004f9c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 8003ffc:	4d0f      	ldr	r5, [pc, #60]	; (800403c <writetospiwithcrc+0x68>)
 8003ffe:	230a      	movs	r3, #10
 8004000:	464a      	mov	r2, r9
 8004002:	4641      	mov	r1, r8
 8004004:	4628      	mov	r0, r5
 8004006:	f001 ff31 	bl	8005e6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 800400a:	230a      	movs	r3, #10
 800400c:	463a      	mov	r2, r7
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	f001 ff2b 	bl	8005e6c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 8004016:	230a      	movs	r3, #10
 8004018:	2201      	movs	r2, #1
 800401a:	a908      	add	r1, sp, #32
 800401c:	4628      	mov	r0, r5
 800401e:	f001 ff25 	bl	8005e6c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004022:	2201      	movs	r2, #1
 8004024:	2110      	movs	r1, #16
 8004026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402a:	f000 ffb7 	bl	8004f9c <HAL_GPIO_WritePin>
    decamutexoff(stat);
 800402e:	4620      	mov	r0, r4
 8004030:	f7ff ffc6 	bl	8003fc0 <decamutexoff>
    return 0;
} // end writetospiwithcrc()
 8004034:	2000      	movs	r0, #0
 8004036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800403a:	bf00      	nop
 800403c:	20000318 	.word	0x20000318

08004040 <writetospi>:
 */
int writetospi(uint16_t       headerLength,
               const uint8_t  *headerBuffer,
               uint16_t       bodyLength,
               const uint8_t  *bodyBuffer)
{
 8004040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	4607      	mov	r7, r0
 8004046:	460e      	mov	r6, r1
 8004048:	4614      	mov	r4, r2
 800404a:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800404c:	f7ff ffae 	bl	8003fac <decamutexon>
 8004050:	4605      	mov	r5, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004052:	4813      	ldr	r0, [pc, #76]	; (80040a0 <writetospi+0x60>)
 8004054:	f002 fa53 	bl	80064fe <HAL_SPI_GetState>
 8004058:	2801      	cmp	r0, #1
 800405a:	d1fa      	bne.n	8004052 <writetospi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800405c:	2200      	movs	r2, #0
 800405e:	2110      	movs	r1, #16
 8004060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004064:	f000 ff9a 	bl	8004f9c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8004068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406c:	463a      	mov	r2, r7
 800406e:	4631      	mov	r1, r6
 8004070:	480b      	ldr	r0, [pc, #44]	; (80040a0 <writetospi+0x60>)
 8004072:	f001 fefb 	bl	8005e6c <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8004076:	b95c      	cbnz	r4, 8004090 <writetospi+0x50>
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004078:	2201      	movs	r2, #1
 800407a:	2110      	movs	r1, #16
 800407c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004080:	f000 ff8c 	bl	8004f9c <HAL_GPIO_WritePin>
    decamutexoff(stat);
 8004084:	4628      	mov	r0, r5
 8004086:	f7ff ff9b 	bl	8003fc0 <decamutexoff>
    return 0;
} // end writetospi()
 800408a:	2000      	movs	r0, #0
 800408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8004090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004094:	4622      	mov	r2, r4
 8004096:	4641      	mov	r1, r8
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <writetospi+0x60>)
 800409a:	f001 fee7 	bl	8005e6c <HAL_SPI_Transmit>
 800409e:	e7eb      	b.n	8004078 <writetospi+0x38>
 80040a0:	20000318 	.word	0x20000318

080040a4 <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t  headerLength,
                uint8_t   *headerBuffer,
                uint16_t  readlength,
                uint8_t   *readBuffer)
{
 80040a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a8:	4605      	mov	r5, r0
 80040aa:	460e      	mov	r6, r1
 80040ac:	4691      	mov	r9, r2
 80040ae:	4698      	mov	r8, r3
    int i;

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80040b0:	f7ff ff7c 	bl	8003fac <decamutexon>
 80040b4:	4607      	mov	r7, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80040b6:	4814      	ldr	r0, [pc, #80]	; (8004108 <readfromspi+0x64>)
 80040b8:	f002 fa21 	bl	80064fe <HAL_SPI_GetState>
 80040bc:	2801      	cmp	r0, #1
 80040be:	d1fa      	bne.n	80040b6 <readfromspi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80040c0:	2200      	movs	r2, #0
 80040c2:	2110      	movs	r1, #16
 80040c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c8:	f000 ff68 	bl	8004f9c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80040cc:	2400      	movs	r4, #0
 80040ce:	e007      	b.n	80040e0 <readfromspi+0x3c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t*)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d4:	2201      	movs	r2, #1
 80040d6:	1931      	adds	r1, r6, r4
 80040d8:	480b      	ldr	r0, [pc, #44]	; (8004108 <readfromspi+0x64>)
 80040da:	f001 fec7 	bl	8005e6c <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80040de:	3401      	adds	r4, #1
 80040e0:	42a5      	cmp	r5, r4
 80040e2:	dcf5      	bgt.n	80040d0 <readfromspi+0x2c>
//        }
//
//        (*readBuffer++) = hspi3.Instance->DR;  //copy data read form (MISO)
//    }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 80040e4:	2364      	movs	r3, #100	; 0x64
 80040e6:	464a      	mov	r2, r9
 80040e8:	4641      	mov	r1, r8
 80040ea:	4807      	ldr	r0, [pc, #28]	; (8004108 <readfromspi+0x64>)
 80040ec:	f002 f933 	bl	8006356 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80040f0:	2201      	movs	r2, #1
 80040f2:	2110      	movs	r1, #16
 80040f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f8:	f000 ff50 	bl	8004f9c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80040fc:	4638      	mov	r0, r7
 80040fe:	f7ff ff5f 	bl	8003fc0 <decamutexoff>

    return 0;
} // end readfromspi()
 8004102:	2000      	movs	r0, #0
 8004104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004108:	20000318 	.word	0x20000318

0800410c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800410c:	b500      	push	{lr}
 800410e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <MX_DMA_Init+0x30>)
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	615a      	str	r2, [r3, #20]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	4611      	mov	r1, r2
 8004128:	200e      	movs	r0, #14
 800412a:	f000 fd51 	bl	8004bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800412e:	200e      	movs	r0, #14
 8004130:	f000 fd86 	bl	8004c40 <HAL_NVIC_EnableIRQ>

}
 8004134:	b003      	add	sp, #12
 8004136:	f85d fb04 	ldr.w	pc, [sp], #4
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <ds_twr_responder_sts>:
 * @param  none
 *
 * @return none
 */
int ds_twr_responder_sts(void)
{
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b08d      	sub	sp, #52	; 0x34
    int16_t stsQual; /* This will contain STS quality index and status */
    int goodSts = 0; /* Used for checking STS quality in received signal */
    uint8_t loopCount = 0;
    uint8_t messageFlag = 0; /* Used to track whether STS count should be reinitialised or not */
    /* Display application name on UART. */
    test_run_info((unsigned char *)APP_NAME);
 8004146:	487f      	ldr	r0, [pc, #508]	; (8004344 <ds_twr_responder_sts+0x204>)
 8004148:	f000 fa6a 	bl	8004620 <test_run_info>


    /* Reset DW IC */
    my_reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 800414c:	f000 fb4a 	bl	80047e4 <my_reset_DWIC>


    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8004150:	f7ff fdd0 	bl	8003cf4 <dwt_checkidlerc>
 8004154:	2800      	cmp	r0, #0
 8004156:	d0fb      	beq.n	8004150 <ds_twr_responder_sts+0x10>
    { };

    /* ====> Start timer from STM <==== */
    //HAL_TIM_Base_Start(&htim2);

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8004158:	2001      	movs	r0, #1
 800415a:	f7ff fd27 	bl	8003bac <dwt_initialise>
 800415e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004162:	d031      	beq.n	80041c8 <ds_twr_responder_sts+0x88>
    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards.
	 * Note, in real low power applications the LEDs should not be used. */
    //dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK) ;

    /* Configure DW IC. See NOTE 14 below. */
    if(dwt_configure(&config_options)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8004164:	4878      	ldr	r0, [pc, #480]	; (8004348 <ds_twr_responder_sts+0x208>)
 8004166:	f7ff fa73 	bl	8003650 <dwt_configure>
 800416a:	bb88      	cbnz	r0, 80041d0 <ds_twr_responder_sts+0x90>
        while (1)
        { };
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    if(config_options.chan == 5)
 800416c:	4b76      	ldr	r3, [pc, #472]	; (8004348 <ds_twr_responder_sts+0x208>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d031      	beq.n	80041d8 <ds_twr_responder_sts+0x98>
    {
        dwt_configuretxrf(&txconfig_options);
    }
    else
    {
        dwt_configuretxrf(&txconfig_options_ch9);
 8004174:	4875      	ldr	r0, [pc, #468]	; (800434c <ds_twr_responder_sts+0x20c>)
 8004176:	f7ff fef5 	bl	8003f64 <dwt_configuretxrf>
    }

    /* ====> Enable frame filtering <==== */
    dwt_configureframefilter(DWT_FF_ENABLE_802_15_4, DWT_FF_DATA_EN);
 800417a:	2102      	movs	r1, #2
 800417c:	4608      	mov	r0, r1
 800417e:	f7ff fcd9 	bl	8003b34 <dwt_configureframefilter>
    dwt_setpanid(0xDECA);
 8004182:	f64d 60ca 	movw	r0, #57034	; 0xdeca
 8004186:	f7ff fcf1 	bl	8003b6c <dwt_setpanid>
    dwt_setaddress16(0x343);
 800418a:	f240 3043 	movw	r0, #835	; 0x343
 800418e:	f7ff fcf4 	bl	8003b7a <dwt_setaddress16>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8004192:	f244 00a3 	movw	r0, #16547	; 0x40a3
 8004196:	f7ff f9f5 	bl	8003584 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800419a:	f244 00a3 	movw	r0, #16547	; 0x40a3
 800419e:	f7ff f9f9 	bl	8003594 <dwt_settxantennadelay>


    //Delay between the response frame and final frame
    dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80041a2:	f240 40e7 	movw	r0, #1255	; 0x4e7
 80041a6:	f7ff fd91 	bl	8003ccc <dwt_setrxaftertxdelay>
    uint8_t messageFlag = 0; /* Used to track whether STS count should be reinitialised or not */
 80041aa:	2600      	movs	r6, #0
    uint8_t loopCount = 0;
 80041ac:	4634      	mov	r4, r6
    {
        /*
         * Set CP encryption key and IV (nonce).
         * See Note 16 below.
         */
        if (!messageFlag)
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	f040 80b3 	bne.w	800431a <ds_twr_responder_sts+0x1da>
        {
            if (!loopCount)
 80041b4:	b9a4      	cbnz	r4, 80041e0 <ds_twr_responder_sts+0xa0>
            {
                /*
                 * On first loop, configure the STS key & IV, then load them.
                 */
                dwt_configurestskey(&cp_key);
 80041b6:	4866      	ldr	r0, [pc, #408]	; (8004350 <ds_twr_responder_sts+0x210>)
 80041b8:	f7ff f8a8 	bl	800330c <dwt_configurestskey>
                dwt_configurestsiv(&cp_iv);
 80041bc:	4865      	ldr	r0, [pc, #404]	; (8004354 <ds_twr_responder_sts+0x214>)
 80041be:	f7ff f8c5 	bl	800334c <dwt_configurestsiv>
                dwt_configurestsloadiv();
 80041c2:	f7ff f8e3 	bl	800338c <dwt_configurestsloadiv>
 80041c6:	e0a8      	b.n	800431a <ds_twr_responder_sts+0x1da>
        test_run_info((unsigned char *)"INIT FAILED     ");
 80041c8:	4863      	ldr	r0, [pc, #396]	; (8004358 <ds_twr_responder_sts+0x218>)
 80041ca:	f000 fa29 	bl	8004620 <test_run_info>
        while (1)
 80041ce:	e7fe      	b.n	80041ce <ds_twr_responder_sts+0x8e>
        test_run_info((unsigned char *)"CONFIG FAILED     ");
 80041d0:	4862      	ldr	r0, [pc, #392]	; (800435c <ds_twr_responder_sts+0x21c>)
 80041d2:	f000 fa25 	bl	8004620 <test_run_info>
        while (1)
 80041d6:	e7fe      	b.n	80041d6 <ds_twr_responder_sts+0x96>
        dwt_configuretxrf(&txconfig_options);
 80041d8:	4861      	ldr	r0, [pc, #388]	; (8004360 <ds_twr_responder_sts+0x220>)
 80041da:	f7ff fec3 	bl	8003f64 <dwt_configuretxrf>
 80041de:	e7cc      	b.n	800417a <ds_twr_responder_sts+0x3a>
            else
            {
                /*
                 * On subsequent loops, we only need to reload the lower 32 bits of STS IV.
                 */
                dwt_writetodevice(STS_IV0_ID, 0, 4, (uint8_t *)&cp_iv);
 80041e0:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <ds_twr_responder_sts+0x214>)
 80041e2:	2204      	movs	r2, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	485f      	ldr	r0, [pc, #380]	; (8004364 <ds_twr_responder_sts+0x224>)
 80041e8:	f7fe fe9a 	bl	8002f20 <dwt_writetodevice>
                dwt_configurestsloadiv();
 80041ec:	f7ff f8ce 	bl	800338c <dwt_configurestsloadiv>
 80041f0:	e093      	b.n	800431a <ds_twr_responder_sts+0x1da>
			/* Activate reception immediately. */
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
        }

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80041f2:	2100      	movs	r1, #0
 80041f4:	2044      	movs	r0, #68	; 0x44
 80041f6:	f7fe ff12 	bl	800301e <dwt_read32bitoffsetreg>
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <ds_twr_responder_sts+0x228>)
 80041fc:	6018      	str	r0, [r3, #0]
 80041fe:	4b5b      	ldr	r3, [pc, #364]	; (800436c <ds_twr_responder_sts+0x22c>)
 8004200:	4003      	ands	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f5      	beq.n	80041f2 <ds_twr_responder_sts+0xb2>
        //timtick_1 = __HAL_TIM_GET_COUNTER(&htim2);

        /*
         * Need to check the STS has been received and is good.
         */
        goodSts = dwt_readstsquality(&stsQual);
 8004206:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 800420a:	f7ff fc17 	bl	8003a3c <dwt_readstsquality>

        /*
         * Check for a good frame and STS count.
         */
        if ((status_reg & SYS_STATUS_RXFCG_BIT_MASK) && (goodSts >= 0))
 800420e:	4b56      	ldr	r3, [pc, #344]	; (8004368 <ds_twr_responder_sts+0x228>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004216:	f000 816b 	beq.w	80044f0 <ds_twr_responder_sts+0x3b0>
 800421a:	2800      	cmp	r0, #0
 800421c:	f2c0 8168 	blt.w	80044f0 <ds_twr_responder_sts+0x3b0>
        {
            uint32_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8004220:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004224:	2100      	movs	r1, #0
 8004226:	2044      	movs	r0, #68	; 0x44
 8004228:	f7fe fe83 	bl	8002f32 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
 800422c:	2100      	movs	r1, #0
 800422e:	204c      	movs	r0, #76	; 0x4c
 8004230:	f7fe fef5 	bl	800301e <dwt_read32bitoffsetreg>
 8004234:	f000 017f 	and.w	r1, r0, #127	; 0x7f
            if (frame_len <= sizeof(rx_buffer))
 8004238:	2918      	cmp	r1, #24
 800423a:	f200 8153 	bhi.w	80044e4 <ds_twr_responder_sts+0x3a4>
            {
            	//test_run_info((unsigned char *)"Jestem2");
            	dwt_readrxdata(rx_buffer, frame_len, 0);
 800423e:	4d4c      	ldr	r5, [pc, #304]	; (8004370 <ds_twr_responder_sts+0x230>)
 8004240:	2200      	movs	r2, #0
 8004242:	4628      	mov	r0, r5
 8004244:	f7ff fbc8 	bl	80039d8 <dwt_readrxdata>

                /* Check that the frame is a poll sent by "SS TWR initiator STS" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	70ab      	strb	r3, [r5, #2]
                if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 800424c:	220a      	movs	r2, #10
 800424e:	4949      	ldr	r1, [pc, #292]	; (8004374 <ds_twr_responder_sts+0x234>)
 8004250:	4628      	mov	r0, r5
 8004252:	f7fc f86b 	bl	800032c <memcmp>
 8004256:	2800      	cmp	r0, #0
 8004258:	d168      	bne.n	800432c <ds_twr_responder_sts+0x1ec>
                {
                    uint32_t resp_tx_time;
                    int ret;

                    /* Retrieve poll reception timestamp. */
                    poll_rx_ts = get_rx_timestamp_u64();
 800425a:	f000 fbc5 	bl	80049e8 <get_rx_timestamp_u64>
 800425e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004390 <ds_twr_responder_sts+0x250>
 8004262:	e9c8 0100 	strd	r0, r1, [r8]

                    resp_tx_time = (poll_rx_ts                               /* Received timestamp value */
                            + ((POLL_RX_TO_RESP_TX_DLY_UUS                   /* Set delay time */
                                    + get_rx_delay_time_data_rate()          /* Added delay time for data rate set */
 8004266:	f000 fb9b 	bl	80049a0 <get_rx_delay_time_data_rate>
 800426a:	4605      	mov	r5, r0
                                    + get_rx_delay_time_txpreamble()         /* Added delay for TX preamble length */
 800426c:	f000 fb76 	bl	800495c <get_rx_delay_time_txpreamble>
 8004270:	4428      	add	r0, r5
                                    + ((1<<(config_options.stsLength+2))*8)) /* Added delay for STS length */
 8004272:	4b35      	ldr	r3, [pc, #212]	; (8004348 <ds_twr_responder_sts+0x208>)
 8004274:	7b5d      	ldrb	r5, [r3, #13]
 8004276:	1cab      	adds	r3, r5, #2
 8004278:	2508      	movs	r5, #8
 800427a:	409d      	lsls	r5, r3
 800427c:	4428      	add	r0, r5
                                    * UUS_TO_DWT_TIME)) >> 8;                /* Converted to time units for chip */
 800427e:	f64f 139a 	movw	r3, #63898	; 0xf99a
 8004282:	4d3d      	ldr	r5, [pc, #244]	; (8004378 <ds_twr_responder_sts+0x238>)
 8004284:	fb03 5500 	mla	r5, r3, r0, r5
 8004288:	2700      	movs	r7, #0
                            + ((POLL_RX_TO_RESP_TX_DLY_UUS                   /* Set delay time */
 800428a:	f8d8 2000 	ldr.w	r2, [r8]
 800428e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004292:	18ad      	adds	r5, r5, r2
 8004294:	f143 0300 	adc.w	r3, r3, #0
                                    * UUS_TO_DWT_TIME)) >> 8;                /* Converted to time units for chip */
 8004298:	0a2d      	lsrs	r5, r5, #8
 800429a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
                    dwt_setdelayedtrxtime(resp_tx_time);
 800429e:	4628      	mov	r0, r5
 80042a0:	f7ff fd30 	bl	8003d04 <dwt_setdelayedtrxtime>

                    /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                    resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80042a4:	022b      	lsls	r3, r5, #8
 80042a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	0e2d      	lsrs	r5, r5, #24
 80042b0:	f244 02a3 	movw	r2, #16547	; 0x40a3
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	f145 0500 	adc.w	r5, r5, #0
 80042ba:	4a30      	ldr	r2, [pc, #192]	; (800437c <ds_twr_responder_sts+0x23c>)
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	6055      	str	r5, [r2, #4]

                    /* Write and send the response message. See NOTE 9 below. */
                    tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80042c0:	4d2f      	ldr	r5, [pc, #188]	; (8004380 <ds_twr_responder_sts+0x240>)
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <ds_twr_responder_sts+0x244>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	70ab      	strb	r3, [r5, #2]
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	4639      	mov	r1, r7
 80042cc:	2044      	movs	r0, #68	; 0x44
 80042ce:	f7fe fe30 	bl	8002f32 <dwt_write32bitoffsetreg>
                    dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80042d2:	463a      	mov	r2, r7
 80042d4:	4629      	mov	r1, r5
 80042d6:	200c      	movs	r0, #12
 80042d8:	f7ff f966 	bl	80035a8 <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 80042dc:	2201      	movs	r2, #1
 80042de:	4639      	mov	r1, r7
 80042e0:	200c      	movs	r0, #12
 80042e2:	f7ff f98d 	bl	8003600 <dwt_writetxfctrl>
                    /*
                     * As described above, we will be delaying the transmission of the RESP message
                     * with a set value that is also with reference to the timestamp of the received
                     * POLL message.
                     */
                    dwt_setrxaftertxdelay(100); // receiver can be delayed as Final message will not come immediately
 80042e6:	2064      	movs	r0, #100	; 0x64
 80042e8:	f7ff fcf0 	bl	8003ccc <dwt_setrxaftertxdelay>
                    ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 80042ec:	2003      	movs	r0, #3
 80042ee:	f7ff fd11 	bl	8003d14 <dwt_starttx>
					//timtick_2 = __HAL_TIM_GET_COUNTER(&htim2);
					/* ====> Take difference  <==== */
					//diff = timtick_2 - timtick_1;

                    /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 10 below. */
                    if (ret == DWT_SUCCESS)
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f47f af5b 	bne.w	80041ae <ds_twr_responder_sts+0x6e>
                    {
                        /* Poll DW IC until TX frame sent event set. See NOTE 6 below. */
                        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 80042f8:	2100      	movs	r1, #0
 80042fa:	2044      	movs	r0, #68	; 0x44
 80042fc:	f7fe fe8f 	bl	800301e <dwt_read32bitoffsetreg>
 8004300:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004304:	d0f8      	beq.n	80042f8 <ds_twr_responder_sts+0x1b8>
                        { };

                        /* Clear TXFRS event. */
                        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8004306:	2280      	movs	r2, #128	; 0x80
 8004308:	2100      	movs	r1, #0
 800430a:	2044      	movs	r0, #68	; 0x44
 800430c:	f7fe fe11 	bl	8002f32 <dwt_write32bitoffsetreg>

                        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                        frame_seq_nb++;
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <ds_twr_responder_sts+0x244>)
 8004312:	7813      	ldrb	r3, [r2, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	7013      	strb	r3, [r2, #0]
                        /*
                         * This flag is set high here so that we do not reset the STS count before receiving
                         * the final message from the initiator. Otherwise, the STS count would be bad and
                         * we would be unable to receive it.
                         */
                        messageFlag = 1;
 8004318:	2601      	movs	r6, #1
        if(!messageFlag)  // Responder will enable the receive when waiting for Poll message,
 800431a:	2e00      	cmp	r6, #0
 800431c:	f47f af69 	bne.w	80041f2 <ds_twr_responder_sts+0xb2>
            loopCount++;  // increment the loop count only when starting ranging exchange
 8004320:	3401      	adds	r4, #1
 8004322:	b2e4      	uxtb	r4, r4
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8004324:	2000      	movs	r0, #0
 8004326:	f7ff fd93 	bl	8003e50 <dwt_rxenable>
 800432a:	e762      	b.n	80041f2 <ds_twr_responder_sts+0xb2>
                    }
                }
                else if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800432c:	220a      	movs	r2, #10
 800432e:	4916      	ldr	r1, [pc, #88]	; (8004388 <ds_twr_responder_sts+0x248>)
 8004330:	480f      	ldr	r0, [pc, #60]	; (8004370 <ds_twr_responder_sts+0x230>)
 8004332:	f7fb fffb 	bl	800032c <memcmp>
 8004336:	b368      	cbz	r0, 8004394 <ds_twr_responder_sts+0x254>
                     */
                    messageFlag = 0;
                }
                else
                {
                    errors[BAD_FRAME_ERR_IDX] += 1;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <ds_twr_responder_sts+0x24c>)
 800433a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800433c:	3301      	adds	r3, #1
 800433e:	6293      	str	r3, [r2, #40]	; 0x28
                    /*
                     * If any error occurs, we can reset the STS count back to default value.
                     */
                    messageFlag = 0;
 8004340:	2600      	movs	r6, #0
 8004342:	e737      	b.n	80041b4 <ds_twr_responder_sts+0x74>
 8004344:	08007268 	.word	0x08007268
 8004348:	20000064 	.word	0x20000064
 800434c:	20000080 	.word	0x20000080
 8004350:	200000a0 	.word	0x200000a0
 8004354:	20000090 	.word	0x20000090
 8004358:	0800727c 	.word	0x0800727c
 800435c:	08007290 	.word	0x08007290
 8004360:	20000074 	.word	0x20000074
 8004364:	0002001c 	.word	0x0002001c
 8004368:	20000310 	.word	0x20000310
 800436c:	2427d000 	.word	0x2427d000
 8004370:	200002f8 	.word	0x200002f8
 8004374:	200000c8 	.word	0x200000c8
 8004378:	064da296 	.word	0x064da296
 800437c:	200002f0 	.word	0x200002f0
 8004380:	200000e8 	.word	0x200000e8
 8004384:	200002e4 	.word	0x200002e4
 8004388:	200000b0 	.word	0x200000b0
 800438c:	20000288 	.word	0x20000288
 8004390:	200002e8 	.word	0x200002e8
                    resp_tx_ts = get_tx_timestamp_u64();
 8004394:	f000 fb0e 	bl	80049b4 <get_tx_timestamp_u64>
 8004398:	4e6b      	ldr	r6, [pc, #428]	; (8004548 <ds_twr_responder_sts+0x408>)
 800439a:	e9c6 0100 	strd	r0, r1, [r6]
                    final_rx_ts = get_rx_timestamp_u64();
 800439e:	f000 fb23 	bl	80049e8 <get_rx_timestamp_u64>
 80043a2:	4680      	mov	r8, r0
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 80043a4:	4d69      	ldr	r5, [pc, #420]	; (800454c <ds_twr_responder_sts+0x40c>)
 80043a6:	a905      	add	r1, sp, #20
 80043a8:	f105 000a 	add.w	r0, r5, #10
 80043ac:	f000 fb36 	bl	8004a1c <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80043b0:	a906      	add	r1, sp, #24
 80043b2:	f105 000e 	add.w	r0, r5, #14
 80043b6:	f000 fb31 	bl	8004a1c <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80043ba:	a907      	add	r1, sp, #28
 80043bc:	f105 0012 	add.w	r0, r5, #18
 80043c0:	f000 fb2c 	bl	8004a1c <final_msg_get_ts>
                    poll_rx_ts_32 = (uint32_t)poll_rx_ts;
 80043c4:	4b62      	ldr	r3, [pc, #392]	; (8004550 <ds_twr_responder_sts+0x410>)
 80043c6:	f8d3 b000 	ldr.w	fp, [r3]
                    resp_tx_ts_32 = (uint32_t)resp_tx_ts;
 80043ca:	6835      	ldr	r5, [r6, #0]
                    Ra = (double)(resp_rx_ts - poll_tx_ts);
 80043cc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80043d0:	9805      	ldr	r0, [sp, #20]
 80043d2:	ebaa 0000 	sub.w	r0, sl, r0
 80043d6:	f7fe f95f 	bl	8002698 <__aeabi_ui2d>
 80043da:	4606      	mov	r6, r0
 80043dc:	460f      	mov	r7, r1
                    Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80043de:	eba8 0005 	sub.w	r0, r8, r5
 80043e2:	f7fe f959 	bl	8002698 <__aeabi_ui2d>
 80043e6:	4680      	mov	r8, r0
 80043e8:	4689      	mov	r9, r1
                    Da = (double)(final_tx_ts - resp_rx_ts);
 80043ea:	9807      	ldr	r0, [sp, #28]
 80043ec:	eba0 000a 	sub.w	r0, r0, sl
 80043f0:	f7fe f952 	bl	8002698 <__aeabi_ui2d>
 80043f4:	e9cd 0100 	strd	r0, r1, [sp]
                    Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 80043f8:	eba5 000b 	sub.w	r0, r5, fp
 80043fc:	f7fe f94c 	bl	8002698 <__aeabi_ui2d>
 8004400:	4682      	mov	sl, r0
 8004402:	468b      	mov	fp, r1
                    tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8004404:	4642      	mov	r2, r8
 8004406:	464b      	mov	r3, r9
 8004408:	4630      	mov	r0, r6
 800440a:	4639      	mov	r1, r7
 800440c:	f7fe f9be 	bl	800278c <__aeabi_dmul>
 8004410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004414:	4652      	mov	r2, sl
 8004416:	465b      	mov	r3, fp
 8004418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800441c:	f7fe f9b6 	bl	800278c <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004428:	f7fd fff8 	bl	800241c <__aeabi_dsub>
 800442c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	4630      	mov	r0, r6
 8004436:	4639      	mov	r1, r7
 8004438:	f7fd fff2 	bl	8002420 <__adddf3>
 800443c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004440:	f7fd ffee 	bl	8002420 <__adddf3>
 8004444:	4652      	mov	r2, sl
 8004446:	465b      	mov	r3, fp
 8004448:	f7fd ffea 	bl	8002420 <__adddf3>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004454:	f7fe fac4 	bl	80029e0 <__aeabi_ddiv>
 8004458:	f7fe fbaa 	bl	8002bb0 <__aeabi_d2lz>
                    tof = tof_dtu * DWT_TIME_UNITS;
 800445c:	f7fe f968 	bl	8002730 <__aeabi_l2d>
 8004460:	a335      	add	r3, pc, #212	; (adr r3, 8004538 <ds_twr_responder_sts+0x3f8>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f7fe f991 	bl	800278c <__aeabi_dmul>
                    distance = tof * SPEED_OF_LIGHT;
 800446a:	a335      	add	r3, pc, #212	; (adr r3, 8004540 <ds_twr_responder_sts+0x400>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fe f98c 	bl	800278c <__aeabi_dmul>
 8004474:	e9cd 0108 	strd	r0, r1, [sp, #32]
                    Send_Float_Over_UART(&distance);    
 8004478:	a808      	add	r0, sp, #32
 800447a:	f000 f8e7 	bl	800464c <Send_Float_Over_UART>
                    sprintf(dist_str_to_PC, "%3.2fm" ,distance);
 800447e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004482:	4934      	ldr	r1, [pc, #208]	; (8004554 <ds_twr_responder_sts+0x414>)
 8004484:	4834      	ldr	r0, [pc, #208]	; (8004558 <ds_twr_responder_sts+0x418>)
 8004486:	f7fc fb73 	bl	8000b70 <siprintf>
					dwt_writetxdata(sizeof(tx_dist_to_PC), tx_dist_to_PC, 0); /* Zero offset in TX buffer. */
 800448a:	2200      	movs	r2, #0
 800448c:	4933      	ldr	r1, [pc, #204]	; (800455c <ds_twr_responder_sts+0x41c>)
 800448e:	2012      	movs	r0, #18
 8004490:	f7ff f88a 	bl	80035a8 <dwt_writetxdata>
					dwt_writetxfctrl(sizeof(tx_dist_to_PC), 0, 1); /* Zero offset in TX buffer, ranging. */
 8004494:	2201      	movs	r2, #1
 8004496:	2100      	movs	r1, #0
 8004498:	2012      	movs	r0, #18
 800449a:	f7ff f8b1 	bl	8003600 <dwt_writetxfctrl>
					ret = dwt_starttx(DWT_START_TX_IMMEDIATE);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7ff fc38 	bl	8003d14 <dwt_starttx>
				   if (ret == DWT_SUCCESS)
 80044a4:	b188      	cbz	r0, 80044ca <ds_twr_responder_sts+0x38a>
					   test_run_info((unsigned char *)"NW");
 80044a6:	482e      	ldr	r0, [pc, #184]	; (8004560 <ds_twr_responder_sts+0x420>)
 80044a8:	f000 f8ba 	bl	8004620 <test_run_info>
                    sprintf(dist_str, "C: %3.2fm" ,distance);
 80044ac:	4d2d      	ldr	r5, [pc, #180]	; (8004564 <ds_twr_responder_sts+0x424>)
 80044ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044b2:	492d      	ldr	r1, [pc, #180]	; (8004568 <ds_twr_responder_sts+0x428>)
 80044b4:	4628      	mov	r0, r5
 80044b6:	f7fc fb5b 	bl	8000b70 <siprintf>
                    test_run_info((unsigned char *)dist_str);
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f8b0 	bl	8004620 <test_run_info>
                    Sleep(RNG_DELAY_MS - 10);  //start couple of ms earlier
 80044c0:	20be      	movs	r0, #190	; 0xbe
 80044c2:	f000 f94d 	bl	8004760 <Sleep>
                    messageFlag = 0;
 80044c6:	2600      	movs	r6, #0
 80044c8:	e674      	b.n	80041b4 <ds_twr_responder_sts+0x74>
					   while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 80044ca:	2100      	movs	r1, #0
 80044cc:	2044      	movs	r0, #68	; 0x44
 80044ce:	f7fe fda6 	bl	800301e <dwt_read32bitoffsetreg>
 80044d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80044d6:	d0f8      	beq.n	80044ca <ds_twr_responder_sts+0x38a>
					   dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	2100      	movs	r1, #0
 80044dc:	2044      	movs	r0, #68	; 0x44
 80044de:	f7fe fd28 	bl	8002f32 <dwt_write32bitoffsetreg>
 80044e2:	e7e3      	b.n	80044ac <ds_twr_responder_sts+0x36c>
                }
            }
            else
            {
            	//test_run_info((unsigned char *)"Jestem_6");
                errors[RTO_ERR_IDX] += 1;
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <ds_twr_responder_sts+0x42c>)
 80044e6:	6953      	ldr	r3, [r2, #20]
 80044e8:	3301      	adds	r3, #1
 80044ea:	6153      	str	r3, [r2, #20]
                /*
                 * If any error occurs, we can reset the STS count back to default value.
                 */
                messageFlag = 0;
 80044ec:	2600      	movs	r6, #0
 80044ee:	e661      	b.n	80041b4 <ds_twr_responder_sts+0x74>
            }
        }
        else
        {
        	//test_run_info((unsigned char *)"Jestem7");
            check_for_status_errors(status_reg, errors);
 80044f0:	4605      	mov	r5, r0
 80044f2:	4618      	mov	r0, r3
 80044f4:	491d      	ldr	r1, [pc, #116]	; (800456c <ds_twr_responder_sts+0x42c>)
 80044f6:	f000 f9b1 	bl	800485c <check_for_status_errors>

            if (!(status_reg & SYS_STATUS_RXFCG_BIT_MASK))
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <ds_twr_responder_sts+0x430>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004502:	d103      	bne.n	800450c <ds_twr_responder_sts+0x3cc>
            {
                errors[BAD_FRAME_ERR_IDX] += 1;
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <ds_twr_responder_sts+0x42c>)
 8004506:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004508:	3301      	adds	r3, #1
 800450a:	6293      	str	r3, [r2, #40]	; 0x28
            }
            if (goodSts < 0)
 800450c:	2d00      	cmp	r5, #0
 800450e:	db0e      	blt.n	800452e <ds_twr_responder_sts+0x3ee>
            {
                errors[PREAMBLE_COUNT_ERR_IDX] += 1;
            }
            if (stsQual <= 0)
 8004510:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8004514:	2b00      	cmp	r3, #0
 8004516:	dc03      	bgt.n	8004520 <ds_twr_responder_sts+0x3e0>
            {
                errors[CP_QUAL_ERR_IDX] += 1;
 8004518:	4a14      	ldr	r2, [pc, #80]	; (800456c <ds_twr_responder_sts+0x42c>)
 800451a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800451c:	3301      	adds	r3, #1
 800451e:	6313      	str	r3, [r2, #48]	; 0x30
            }
            /* Clear RX error events in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <ds_twr_responder_sts+0x434>)
 8004522:	2100      	movs	r1, #0
 8004524:	2044      	movs	r0, #68	; 0x44
 8004526:	f7fe fd04 	bl	8002f32 <dwt_write32bitoffsetreg>

            /*
             * If any error occurs, we can reset the STS count back to default value.
             */
            messageFlag = 0;
 800452a:	2600      	movs	r6, #0
 800452c:	e642      	b.n	80041b4 <ds_twr_responder_sts+0x74>
                errors[PREAMBLE_COUNT_ERR_IDX] += 1;
 800452e:	4a0f      	ldr	r2, [pc, #60]	; (800456c <ds_twr_responder_sts+0x42c>)
 8004530:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004532:	3301      	adds	r3, #1
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004536:	e7eb      	b.n	8004510 <ds_twr_responder_sts+0x3d0>
 8004538:	3bce48fa 	.word	0x3bce48fa
 800453c:	3db13518 	.word	0x3db13518
 8004540:	13000000 	.word	0x13000000
 8004544:	41b1dd19 	.word	0x41b1dd19
 8004548:	200002f0 	.word	0x200002f0
 800454c:	200002f8 	.word	0x200002f8
 8004550:	200002e8 	.word	0x200002e8
 8004554:	080072a4 	.word	0x080072a4
 8004558:	20000278 	.word	0x20000278
 800455c:	200000d4 	.word	0x200000d4
 8004560:	080072ac 	.word	0x080072ac
 8004564:	20000128 	.word	0x20000128
 8004568:	080072b0 	.word	0x080072b0
 800456c:	20000288 	.word	0x20000288
 8004570:	20000310 	.word	0x20000310
 8004574:	24059000 	.word	0x24059000

08004578 <build_examples>:
#endif

#ifdef TEST_DS_TWR_RESPONDER_STS
    extern int ds_twr_responder_sts(void);

    example_pointer=ds_twr_responder_sts;
 8004578:	4b01      	ldr	r3, [pc, #4]	; (8004580 <build_examples+0x8>)
 800457a:	4a02      	ldr	r2, [pc, #8]	; (8004584 <build_examples+0xc>)
 800457c:	601a      	str	r2, [r3, #0]
#endif

    //Check that only 1 test was enabled in test_selection.h file
    assert(test_cnt==1);

}
 800457e:	4770      	bx	lr
 8004580:	20000314 	.word	0x20000314
 8004584:	08004141 	.word	0x08004141

08004588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	2400      	movs	r4, #0
 800458e:	9403      	str	r4, [sp, #12]
 8004590:	9404      	str	r4, [sp, #16]
 8004592:	9405      	str	r4, [sp, #20]
 8004594:	9406      	str	r4, [sp, #24]
 8004596:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004598:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <MX_GPIO_Init+0x90>)
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80045a0:	615a      	str	r2, [r3, #20]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045b2:	615a      	str	r2, [r3, #20]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80045ba:	9201      	str	r2, [sp, #4]
 80045bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045c4:	615a      	str	r2, [r3, #20]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045cc:	9302      	str	r3, [sp, #8]
 80045ce:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 80045d0:	4622      	mov	r2, r4
 80045d2:	2110      	movs	r1, #16
 80045d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d8:	f000 fce0 	bl	8004f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_IRQn_Pin|DW_RESET_Pin, GPIO_PIN_RESET);
 80045dc:	4d0f      	ldr	r5, [pc, #60]	; (800461c <MX_GPIO_Init+0x94>)
 80045de:	4622      	mov	r2, r4
 80045e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 fcd9 	bl	8004f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80045ea:	2310      	movs	r3, #16
 80045ec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ee:	2601      	movs	r6, #1
 80045f0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80045f6:	a903      	add	r1, sp, #12
 80045f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fc:	f000 fbea 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQn_Pin DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin|DW_RESET_Pin;
 8004600:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004604:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004606:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460c:	a903      	add	r1, sp, #12
 800460e:	4628      	mov	r0, r5
 8004610:	f000 fbe0 	bl	8004dd4 <HAL_GPIO_Init>

}
 8004614:	b008      	add	sp, #32
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	48000400 	.word	0x48000400

08004620 <test_run_info>:
  }
}

/* USER CODE BEGIN 4 */
void test_run_info(unsigned char *data)
{
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4604      	mov	r4, r0
    uint16_t    data_length;

    data_length=strlen((const char *)data);
 8004624:	f7fc facc 	bl	8000bc0 <strlen>
    HAL_UART_Transmit(&huart1, data, data_length, 10);/*Transmit the data through USB - Virtual port*/
 8004628:	4d06      	ldr	r5, [pc, #24]	; (8004644 <test_run_info+0x24>)
 800462a:	230a      	movs	r3, #10
 800462c:	b282      	uxth	r2, r0
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f002 fb09 	bl	8006c48 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 10);/*Transmit end of line through USB - Virtual port*/
 8004636:	230a      	movs	r3, #10
 8004638:	2202      	movs	r2, #2
 800463a:	4903      	ldr	r1, [pc, #12]	; (8004648 <test_run_info+0x28>)
 800463c:	4628      	mov	r0, r5
 800463e:	f002 fb03 	bl	8006c48 <HAL_UART_Transmit>

}
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000414 	.word	0x20000414
 8004648:	080072bc 	.word	0x080072bc

0800464c <Send_Float_Over_UART>:

void Send_Float_Over_UART(float *number) {
 800464c:	b500      	push	{lr}
 800464e:	b083      	sub	sp, #12
  uint8_t buffer[4];  // Float is 4 bytes in size

  // Copy the float into the buffer
  memcpy(buffer, &number, sizeof(float));
 8004650:	9001      	str	r0, [sp, #4]

  // Send the buffer over UART
  HAL_UART_Transmit(&huart1, buffer, sizeof(float), HAL_MAX_DELAY);
 8004652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004656:	2204      	movs	r2, #4
 8004658:	eb0d 0102 	add.w	r1, sp, r2
 800465c:	4802      	ldr	r0, [pc, #8]	; (8004668 <Send_Float_Over_UART+0x1c>)
 800465e:	f002 faf3 	bl	8006c48 <HAL_UART_Transmit>
}
 8004662:	b003      	add	sp, #12
 8004664:	f85d fb04 	ldr.w	pc, [sp], #4
 8004668:	20000414 	.word	0x20000414

0800466c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800466c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800466e:	e7fe      	b.n	800466e <Error_Handler+0x2>

08004670 <SystemClock_Config>:
{
 8004670:	b500      	push	{lr}
 8004672:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004674:	2228      	movs	r2, #40	; 0x28
 8004676:	2100      	movs	r1, #0
 8004678:	a814      	add	r0, sp, #80	; 0x50
 800467a:	f7fb fe89 	bl	8000390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800467e:	2100      	movs	r1, #0
 8004680:	910f      	str	r1, [sp, #60]	; 0x3c
 8004682:	9110      	str	r1, [sp, #64]	; 0x40
 8004684:	9111      	str	r1, [sp, #68]	; 0x44
 8004686:	9112      	str	r1, [sp, #72]	; 0x48
 8004688:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800468a:	223c      	movs	r2, #60	; 0x3c
 800468c:	4668      	mov	r0, sp
 800468e:	f7fb fe7f 	bl	8000390 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004692:	2301      	movs	r3, #1
 8004694:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800469a:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800469c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800469e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046a0:	2302      	movs	r3, #2
 80046a2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046a4:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80046a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80046aa:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046ac:	a814      	add	r0, sp, #80	; 0x50
 80046ae:	f000 fc93 	bl	8004fd8 <HAL_RCC_OscConfig>
 80046b2:	b9c0      	cbnz	r0, 80046e6 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046b4:	230f      	movs	r3, #15
 80046b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046b8:	2102      	movs	r1, #2
 80046ba:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046bc:	2300      	movs	r3, #0
 80046be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046c8:	a80f      	add	r0, sp, #60	; 0x3c
 80046ca:	f000 ffcf 	bl	800566c <HAL_RCC_ClockConfig>
 80046ce:	b960      	cbnz	r0, 80046ea <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046d0:	2301      	movs	r3, #1
 80046d2:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046d4:	2300      	movs	r3, #0
 80046d6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046d8:	4668      	mov	r0, sp
 80046da:	f001 f8cd 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 80046de:	b930      	cbnz	r0, 80046ee <SystemClock_Config+0x7e>
}
 80046e0:	b01f      	add	sp, #124	; 0x7c
 80046e2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80046e6:	f7ff ffc1 	bl	800466c <Error_Handler>
    Error_Handler();
 80046ea:	f7ff ffbf 	bl	800466c <Error_Handler>
    Error_Handler();
 80046ee:	f7ff ffbd 	bl	800466c <Error_Handler>
	...

080046f4 <main>:
{
 80046f4:	b508      	push	{r3, lr}
  build_examples();
 80046f6:	f7ff ff3f 	bl	8004578 <build_examples>
  HAL_Init();
 80046fa:	f000 fa1f 	bl	8004b3c <HAL_Init>
  SystemClock_Config();
 80046fe:	f7ff ffb7 	bl	8004670 <SystemClock_Config>
  MX_GPIO_Init();
 8004702:	f7ff ff41 	bl	8004588 <MX_GPIO_Init>
  MX_DMA_Init();
 8004706:	f7ff fd01 	bl	800410c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800470a:	f002 fc5d 	bl	8006fc8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800470e:	f000 f995 	bl	8004a3c <MX_SPI1_Init>
  MX_TIM2_Init();
 8004712:	f002 fc0d 	bl	8006f30 <MX_TIM2_Init>
  port_DisableEXT_IRQ();
 8004716:	f000 f82e 	bl	8004776 <port_DisableEXT_IRQ>
  example_pointer();
 800471a:	4b02      	ldr	r3, [pc, #8]	; (8004724 <main+0x30>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4798      	blx	r3
  while (1)
 8004720:	e7fe      	b.n	8004720 <main+0x2c>
 8004722:	bf00      	nop
 8004724:	20000314 	.word	0x20000314

08004728 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec*=12;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	607b      	str	r3, [r7, #4]
    for(i=0;i<usec;i++)
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e003      	b.n	800474a <usleep+0x22>
    {
        __NOP();
 8004742:	bf00      	nop
    for(i=0;i<usec;i++)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d3f7      	bcc.n	8004742 <usleep+0x1a>
    }
    return 0;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa0b 	bl	8004b84 <HAL_Delay>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(EXTI0_IRQn);
 800477a:	2006      	movs	r0, #6
 800477c:	f000 f85c 	bl	8004838 <__NVIC_DisableIRQ>
}
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}

08004784 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(EXTI0_IRQn);
 8004788:	2006      	movs	r0, #6
 800478a:	f000 f847 	bl	800481c <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <EXTI_GetITEnStatus>:
  * @brief  Checks whether the specified IRQn line is enabled or not.
  * @param  IRQn: specifies the IRQn line to check.
  * @return "0" when IRQn is "not enabled" and !0 otherwise
  */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
        return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] &\
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <EXTI_GetITEnStatus+0x3c>)
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e100 	.word	0xe000e100

080047d4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(EXTI0_IRQn);
 80047d8:	2006      	movs	r0, #6
 80047da:	f7ff ffdb 	bl	8004794 <EXTI_GetITEnStatus>
 80047de:	4603      	mov	r3, r0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <my_reset_DWIC>:
    Sleep(2);

}

void my_reset_DWIC(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047ee:	480a      	ldr	r0, [pc, #40]	; (8004818 <my_reset_DWIC+0x34>)
 80047f0:	f000 fbd4 	bl	8004f9c <HAL_GPIO_WritePin>
    HAL_Delay(6);
 80047f4:	2006      	movs	r0, #6
 80047f6:	f000 f9c5 	bl	8004b84 <HAL_Delay>
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80047fa:	2201      	movs	r2, #1
 80047fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004800:	4805      	ldr	r0, [pc, #20]	; (8004818 <my_reset_DWIC+0x34>)
 8004802:	f000 fbcb 	bl	8004f9c <HAL_GPIO_WritePin>
    HAL_Delay(3);
 8004806:	2003      	movs	r0, #3
 8004808:	f000 f9bc 	bl	8004b84 <HAL_Delay>
    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 800480c:	2002      	movs	r0, #2
 800480e:	f7ff ffa7 	bl	8004760 <Sleep>

}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	48000400 	.word	0x48000400

0800481c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800481c:	2800      	cmp	r0, #0
 800481e:	db07      	blt.n	8004830 <__NVIC_EnableIRQ+0x14>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004820:	f000 021f 	and.w	r2, r0, #31
 8004824:	0940      	lsrs	r0, r0, #5
 8004826:	2301      	movs	r3, #1
 8004828:	4093      	lsls	r3, r2
 800482a:	4a02      	ldr	r2, [pc, #8]	; (8004834 <__NVIC_EnableIRQ+0x18>)
 800482c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  }
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000e100 	.word	0xe000e100

08004838 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004838:	2800      	cmp	r0, #0
 800483a:	db0c      	blt.n	8004856 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483c:	f000 021f 	and.w	r2, r0, #31
 8004840:	0940      	lsrs	r0, r0, #5
 8004842:	2301      	movs	r3, #1
 8004844:	4093      	lsls	r3, r2
 8004846:	3020      	adds	r0, #32
 8004848:	4a03      	ldr	r2, [pc, #12]	; (8004858 <__NVIC_DisableIRQ+0x20>)
 800484a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800484e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004852:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100

0800485c <check_for_status_errors>:
 * @param errors: pointer to a uint32_t buffer that contains the sum of different errors logged during program operation.
 *
 * @return none
 */
void check_for_status_errors(uint32_t reg, uint32_t * errors)
{
 800485c:	b510      	push	{r4, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	460c      	mov	r4, r1
    uint16_t stsStatus = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	f8ad 3006 	strh.w	r3, [sp, #6]

    if (!(reg & SYS_STATUS_RXFCG_BIT_MASK))
 8004868:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800486c:	d102      	bne.n	8004874 <check_for_status_errors+0x18>
    {
        errors[BAD_FRAME_ERR_IDX] += 1;
 800486e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004870:	3301      	adds	r3, #1
 8004872:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (reg & SYS_STATUS_RXFSL_BIT_MASK)
 8004874:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8004878:	d002      	beq.n	8004880 <check_for_status_errors+0x24>
    {
        errors[RSE_ERR_IDX] += 1;
 800487a:	6863      	ldr	r3, [r4, #4]
 800487c:	3301      	adds	r3, #1
 800487e:	6063      	str	r3, [r4, #4]
    }

    if (reg & SYS_STATUS_RXPHE_BIT_MASK)
 8004880:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8004884:	d002      	beq.n	800488c <check_for_status_errors+0x30>
    {
        errors[PHE_ERR_IDX] += 1;
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	3301      	adds	r3, #1
 800488a:	60a3      	str	r3, [r4, #8]
    }

    if (reg & SYS_STATUS_RXPTO_BIT_MASK)
 800488c:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004890:	d002      	beq.n	8004898 <check_for_status_errors+0x3c>
    {
        errors[PTO_ERR_IDX] += 1;
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	3301      	adds	r3, #1
 8004896:	6123      	str	r3, [r4, #16]
    }

    if (reg & SYS_STATUS_ARFE_BIT_MASK)
 8004898:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800489c:	d002      	beq.n	80048a4 <check_for_status_errors+0x48>
    {
        errors[ARFE_ERR_IDX] += 1;
 800489e:	6a23      	ldr	r3, [r4, #32]
 80048a0:	3301      	adds	r3, #1
 80048a2:	6223      	str	r3, [r4, #32]
    }

    if ((reg & SYS_STATUS_RXFR_BIT_MASK) && !(reg & SYS_STATUS_RXFCG_BIT_MASK))
 80048a4:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 80048a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ac:	d010      	beq.n	80048d0 <check_for_status_errors+0x74>
    {
        errors[CRC_ERR_IDX] += 1;
    }

    if ((reg & SYS_STATUS_RXFTO_BIT_MASK) || (reg & SYS_STATUS_ALL_RX_TO))
 80048ae:	f410 1f08 	tst.w	r0, #2228224	; 0x220000
 80048b2:	d002      	beq.n	80048ba <check_for_status_errors+0x5e>
    {
        errors[RTO_ERR_IDX] += 1;
 80048b4:	6963      	ldr	r3, [r4, #20]
 80048b6:	3301      	adds	r3, #1
 80048b8:	6163      	str	r3, [r4, #20]
    }

    if (reg & SYS_STATUS_RXSTO_BIT_MASK)
 80048ba:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80048be:	d002      	beq.n	80048c6 <check_for_status_errors+0x6a>
    {
        errors[SFDTO_ERR_IDX] += 1;
 80048c0:	68e3      	ldr	r3, [r4, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60e3      	str	r3, [r4, #12]
    }

    if (reg & SYS_STATUS_CPERR_BIT_MASK)
 80048c6:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80048ca:	d105      	bne.n	80048d8 <check_for_status_errors+0x7c>
        {
            // Logistic regression failed
            errors[STS_LOG_REG_FAILED_ERR] += 1;
        }
    }
}
 80048cc:	b002      	add	sp, #8
 80048ce:	bd10      	pop	{r4, pc}
        errors[CRC_ERR_IDX] += 1;
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	e7ea      	b.n	80048ae <check_for_status_errors+0x52>
        errors[STS_PREAMBLE_ERR] += 1;
 80048d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048da:	3301      	adds	r3, #1
 80048dc:	6363      	str	r3, [r4, #52]	; 0x34
        dwt_readstsstatus(&stsStatus, 0);
 80048de:	2100      	movs	r1, #0
 80048e0:	f10d 0006 	add.w	r0, sp, #6
 80048e4:	f7ff f8c4 	bl	8003a70 <dwt_readstsstatus>
        if (stsStatus & 0x100)
 80048e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80048ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048f0:	d002      	beq.n	80048f8 <check_for_status_errors+0x9c>
            errors[STS_PEAK_GROWTH_RATE_ERR] += 1;
 80048f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048f4:	3201      	adds	r2, #1
 80048f6:	63a2      	str	r2, [r4, #56]	; 0x38
        if (stsStatus & 0x080)
 80048f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048fc:	d002      	beq.n	8004904 <check_for_status_errors+0xa8>
            errors[STS_ADC_COUNT_ERR] += 1;
 80048fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004900:	3201      	adds	r2, #1
 8004902:	63e2      	str	r2, [r4, #60]	; 0x3c
        if (stsStatus & 0x040)
 8004904:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004908:	d002      	beq.n	8004910 <check_for_status_errors+0xb4>
            errors[STS_SFD_COUNT_ERR] += 1;
 800490a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800490c:	3201      	adds	r2, #1
 800490e:	6422      	str	r2, [r4, #64]	; 0x40
        if (stsStatus & 0x020)
 8004910:	f013 0f20 	tst.w	r3, #32
 8004914:	d002      	beq.n	800491c <check_for_status_errors+0xc0>
            errors[STS_LATE_FIRST_PATH_ERR] += 1;
 8004916:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004918:	3201      	adds	r2, #1
 800491a:	6462      	str	r2, [r4, #68]	; 0x44
        if (stsStatus & 0x010)
 800491c:	f013 0f10 	tst.w	r3, #16
 8004920:	d002      	beq.n	8004928 <check_for_status_errors+0xcc>
            errors[STS_LATE_COARSE_EST_ERR] += 1;
 8004922:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004924:	3201      	adds	r2, #1
 8004926:	64a2      	str	r2, [r4, #72]	; 0x48
        if (stsStatus & 0x008)
 8004928:	f013 0f08 	tst.w	r3, #8
 800492c:	d002      	beq.n	8004934 <check_for_status_errors+0xd8>
            errors[STS_COARSE_EST_EMPTY_ERR] += 1;
 800492e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004930:	3201      	adds	r2, #1
 8004932:	64e2      	str	r2, [r4, #76]	; 0x4c
        if (stsStatus & 0x004)
 8004934:	f013 0f04 	tst.w	r3, #4
 8004938:	d002      	beq.n	8004940 <check_for_status_errors+0xe4>
            errors[STS_HIGH_NOISE_THREASH_ERR] += 1;
 800493a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800493c:	3201      	adds	r2, #1
 800493e:	6522      	str	r2, [r4, #80]	; 0x50
        if (stsStatus & 0x002)
 8004940:	f013 0f02 	tst.w	r3, #2
 8004944:	d002      	beq.n	800494c <check_for_status_errors+0xf0>
            errors[STS_NON_TRIANGLE_ERR] += 1;
 8004946:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004948:	3201      	adds	r2, #1
 800494a:	6562      	str	r2, [r4, #84]	; 0x54
        if (stsStatus & 0x001)
 800494c:	f013 0f01 	tst.w	r3, #1
 8004950:	d0bc      	beq.n	80048cc <check_for_status_errors+0x70>
            errors[STS_LOG_REG_FAILED_ERR] += 1;
 8004952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004954:	3301      	adds	r3, #1
 8004956:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004958:	e7b8      	b.n	80048cc <check_for_status_errors+0x70>
	...

0800495c <get_rx_delay_time_txpreamble>:
{
    uint32_t delay_time = 0;
    /* Standard delay values for preamble lengths of 32, 64, 72 & 128 should be adequate.
     * Additional time delay will be needed for larger preamble lengths.
     * Delay required is dependent on the preamble length as it increases the frame length. */
    switch (config_options.txPreambLength)
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <get_rx_delay_time_txpreamble+0x40>)
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	3b02      	subs	r3, #2
 8004962:	2b0b      	cmp	r3, #11
 8004964:	d807      	bhi.n	8004976 <get_rx_delay_time_txpreamble+0x1a>
 8004966:	e8df f003 	tbb	[pc, r3]
 800496a:	140b      	.short	0x140b
 800496c:	060e0606 	.word	0x060e0606
 8004970:	06111706 	.word	0x06111706
 8004974:	0806      	.short	0x0806
 8004976:	2000      	movs	r0, #0
 8004978:	4770      	bx	lr
    {
    case DWT_PLEN_256:
        delay_time += 128; /* 256 - 128 */
        break;
    case DWT_PLEN_512:
        delay_time += 384; /* 512 - 128 */
 800497a:	f44f 70c0 	mov.w	r0, #384	; 0x180
        break;
 800497e:	4770      	bx	lr
    case DWT_PLEN_1024:
        delay_time += 896; /* 1024 - 128 */
 8004980:	f44f 7060 	mov.w	r0, #896	; 0x380
        break;
 8004984:	4770      	bx	lr
    case DWT_PLEN_1536:
        delay_time += 1408; /* 1536 - 128 */
 8004986:	f44f 60b0 	mov.w	r0, #1408	; 0x580
        break;
 800498a:	4770      	bx	lr
    case DWT_PLEN_2048:
        delay_time += 1920; /* 2048 - 128 */
 800498c:	f44f 60f0 	mov.w	r0, #1920	; 0x780
        break;
 8004990:	4770      	bx	lr
    case DWT_PLEN_4096:
        delay_time += 3968; /* 4096 - 128 */
 8004992:	f44f 6078 	mov.w	r0, #3968	; 0xf80
        break;
 8004996:	4770      	bx	lr
        delay_time += 128; /* 256 - 128 */
 8004998:	2080      	movs	r0, #128	; 0x80
    default:
        break;
    }

    return delay_time;
}
 800499a:	4770      	bx	lr
 800499c:	20000064 	.word	0x20000064

080049a0 <get_rx_delay_time_data_rate>:
    uint32_t delay_time = 0;
    /*
     * If data rate is set to 850k (slower rate),
     * increase the delay time
     */
    switch (config_options.dataRate)
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <get_rx_delay_time_data_rate+0x10>)
 80049a2:	799b      	ldrb	r3, [r3, #6]
 80049a4:	b10b      	cbz	r3, 80049aa <get_rx_delay_time_data_rate+0xa>
    uint32_t delay_time = 0;
 80049a6:	2000      	movs	r0, #0
 80049a8:	4770      	bx	lr
    {
    case DWT_BR_850K:
        delay_time += 200;
 80049aa:	20c8      	movs	r0, #200	; 0xc8
    default:
        break;
    }

    return delay_time;
}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000064 	.word	0x20000064

080049b4 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 80049b4:	b500      	push	{lr}
 80049b6:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 80049b8:	4668      	mov	r0, sp
 80049ba:	f7ff f893 	bl	8003ae4 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80049be:	2304      	movs	r3, #4
    uint64_t ts = 0;
 80049c0:	2000      	movs	r0, #0
 80049c2:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 80049c4:	e00b      	b.n	80049de <get_tx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 80049c6:	0209      	lsls	r1, r1, #8
 80049c8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 80049cc:	f103 0208 	add.w	r2, r3, #8
 80049d0:	446a      	add	r2, sp
 80049d2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80049d6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 80049da:	3b01      	subs	r3, #1
 80049dc:	b25b      	sxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	daf1      	bge.n	80049c6 <get_tx_timestamp_u64+0x12>
    }
    return ts;
}
 80049e2:	b003      	add	sp, #12
 80049e4:	f85d fb04 	ldr.w	pc, [sp], #4

080049e8 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 80049e8:	b500      	push	{lr}
 80049ea:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 80049ec:	4668      	mov	r0, sp
 80049ee:	f7ff f881 	bl	8003af4 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80049f2:	2304      	movs	r3, #4
    uint64_t ts = 0;
 80049f4:	2000      	movs	r0, #0
 80049f6:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 80049f8:	e00b      	b.n	8004a12 <get_rx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 80049fa:	0209      	lsls	r1, r1, #8
 80049fc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8004a00:	f103 0208 	add.w	r2, r3, #8
 8004a04:	446a      	add	r2, sp
 8004a06:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8004a0a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	daf1      	bge.n	80049fa <get_rx_timestamp_u64+0x12>
    }
    return ts;
}
 8004a16:	b003      	add	sp, #12
 8004a18:	f85d fb04 	ldr.w	pc, [sp], #4

08004a1c <final_msg_get_ts>:
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
    uint8_t i;
    *ts = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	600b      	str	r3, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8004a20:	e009      	b.n	8004a36 <final_msg_get_ts+0x1a>
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 8004a22:	5cc2      	ldrb	r2, [r0, r3]
 8004a24:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8004a28:	fa02 fc0c 	lsl.w	ip, r2, ip
 8004a2c:	680a      	ldr	r2, [r1, #0]
 8004a2e:	4462      	add	r2, ip
 8004a30:	600a      	str	r2, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8004a32:	3301      	adds	r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d9f3      	bls.n	8004a22 <final_msg_get_ts+0x6>
    }
}
 8004a3a:	4770      	bx	lr

08004a3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004a3c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004a3e:	4810      	ldr	r0, [pc, #64]	; (8004a80 <MX_SPI1_Init+0x44>)
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <MX_SPI1_Init+0x48>)
 8004a42:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004a48:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a52:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a54:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a56:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a5e:	2218      	movs	r2, #24
 8004a60:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a62:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a64:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a66:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a68:	2207      	movs	r2, #7
 8004a6a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a6c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a72:	f001 f987 	bl	8005d84 <HAL_SPI_Init>
 8004a76:	b900      	cbnz	r0, 8004a7a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a7a:	f7ff fdf7 	bl	800466c <Error_Handler>
}
 8004a7e:	e7fb      	b.n	8004a78 <MX_SPI1_Init+0x3c>
 8004a80:	20000318 	.word	0x20000318
 8004a84:	40013000 	.word	0x40013000

08004a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a88:	b500      	push	{lr}
 8004a8a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	9306      	str	r3, [sp, #24]
 8004a96:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8004a98:	6802      	ldr	r2, [r0, #0]
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_SPI_MspInit+0x64>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004aa0:	b009      	add	sp, #36	; 0x24
 8004aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab0:	619a      	str	r2, [r3, #24]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ab8:	9201      	str	r2, [sp, #4]
 8004aba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ac2:	615a      	str	r2, [r3, #20]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	9302      	str	r3, [sp, #8]
 8004acc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ace:	23e0      	movs	r3, #224	; 0xe0
 8004ad0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ada:	2305      	movs	r3, #5
 8004adc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ade:	a903      	add	r1, sp, #12
 8004ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae4:	f000 f976 	bl	8004dd4 <HAL_GPIO_Init>
}
 8004ae8:	e7da      	b.n	8004aa0 <HAL_SPI_MspInit+0x18>
 8004aea:	bf00      	nop
 8004aec:	40013000 	.word	0x40013000

08004af0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_InitTick+0x40>)
 8004af6:	7818      	ldrb	r0, [r3, #0]
 8004af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004afc:	fbb3 f3f0 	udiv	r3, r3, r0
 8004b00:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <HAL_InitTick+0x44>)
 8004b02:	6810      	ldr	r0, [r2, #0]
 8004b04:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b08:	f000 f8a8 	bl	8004c5c <HAL_SYSTICK_Config>
 8004b0c:	b968      	cbnz	r0, 8004b2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b0e:	2c0f      	cmp	r4, #15
 8004b10:	d901      	bls.n	8004b16 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
 8004b14:	e00a      	b.n	8004b2c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b16:	2200      	movs	r2, #0
 8004b18:	4621      	mov	r1, r4
 8004b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b1e:	f000 f857 	bl	8004bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_InitTick+0x48>)
 8004b24:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8004b26:	2000      	movs	r0, #0
 8004b28:	e000      	b.n	8004b2c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004b2a:	2001      	movs	r0, #1
}
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	200000f4 	.word	0x200000f4
 8004b34:	200000fc 	.word	0x200000fc
 8004b38:	200000f8 	.word	0x200000f8

08004b3c <HAL_Init>:
{
 8004b3c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_Init+0x20>)
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	f043 0310 	orr.w	r3, r3, #16
 8004b46:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b48:	2003      	movs	r0, #3
 8004b4a:	f000 f82f 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b4e:	200f      	movs	r0, #15
 8004b50:	f7ff ffce 	bl	8004af0 <HAL_InitTick>
  HAL_MspInit();
 8004b54:	f000 fa28 	bl	8004fa8 <HAL_MspInit>
}
 8004b58:	2000      	movs	r0, #0
 8004b5a:	bd08      	pop	{r3, pc}
 8004b5c:	40022000 	.word	0x40022000

08004b60 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b60:	4a03      	ldr	r2, [pc, #12]	; (8004b70 <HAL_IncTick+0x10>)
 8004b62:	6811      	ldr	r1, [r2, #0]
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <HAL_IncTick+0x14>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	440b      	add	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	2000037c 	.word	0x2000037c
 8004b74:	200000f4 	.word	0x200000f4

08004b78 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004b78:	4b01      	ldr	r3, [pc, #4]	; (8004b80 <HAL_GetTick+0x8>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	2000037c 	.word	0x2000037c

08004b84 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7ff fff6 	bl	8004b78 <HAL_GetTick>
 8004b8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b8e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004b92:	d002      	beq.n	8004b9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <HAL_Delay+0x24>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b9a:	f7ff ffed 	bl	8004b78 <HAL_GetTick>
 8004b9e:	1b40      	subs	r0, r0, r5
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d3fa      	bcc.n	8004b9a <HAL_Delay+0x16>
  {
  }
}
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200000f4 	.word	0x200000f4

08004bac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bac:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004bae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb8:	0200      	lsls	r0, r0, #8
 8004bba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bbe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004bc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd2:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_NVIC_SetPriority+0x68>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bda:	f1c3 0c07 	rsb	ip, r3, #7
 8004bde:	f1bc 0f04 	cmp.w	ip, #4
 8004be2:	bf28      	it	cs
 8004be4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be8:	f103 0e04 	add.w	lr, r3, #4
 8004bec:	f1be 0f06 	cmp.w	lr, #6
 8004bf0:	d918      	bls.n	8004c24 <HAL_NVIC_SetPriority+0x54>
 8004bf2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004bf8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004bfc:	ea21 010c 	bic.w	r1, r1, ip
 8004c00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c02:	fa0e f303 	lsl.w	r3, lr, r3
 8004c06:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c0a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	db0b      	blt.n	8004c28 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c10:	0109      	lsls	r1, r1, #4
 8004c12:	b2c9      	uxtb	r1, r1
 8004c14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c1c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c20:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c24:	2300      	movs	r3, #0
 8004c26:	e7e5      	b.n	8004bf4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c28:	f000 000f 	and.w	r0, r0, #15
 8004c2c:	0109      	lsls	r1, r1, #4
 8004c2e:	b2c9      	uxtb	r1, r1
 8004c30:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <HAL_NVIC_SetPriority+0x6c>)
 8004c32:	5419      	strb	r1, [r3, r0]
 8004c34:	e7f4      	b.n	8004c20 <HAL_NVIC_SetPriority+0x50>
 8004c36:	bf00      	nop
 8004c38:	e000ed00 	.word	0xe000ed00
 8004c3c:	e000ed14 	.word	0xe000ed14

08004c40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c40:	2800      	cmp	r0, #0
 8004c42:	db07      	blt.n	8004c54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c44:	f000 021f 	and.w	r2, r0, #31
 8004c48:	0940      	lsrs	r0, r0, #5
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4093      	lsls	r3, r2
 8004c4e:	4a02      	ldr	r2, [pc, #8]	; (8004c58 <HAL_NVIC_EnableIRQ+0x18>)
 8004c50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	e000e100 	.word	0xe000e100

08004c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c5c:	3801      	subs	r0, #1
 8004c5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c62:	d20b      	bcs.n	8004c7c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004c68:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6a:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <HAL_SYSTICK_Config+0x24>)
 8004c6c:	21f0      	movs	r1, #240	; 0xf0
 8004c6e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c72:	2000      	movs	r0, #0
 8004c74:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c76:	2207      	movs	r2, #7
 8004c78:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c7c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004c7e:	4770      	bx	lr
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c84:	6802      	ldr	r2, [r0, #0]
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <DMA_CalcBaseAndBitshift+0x34>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d80a      	bhi.n	8004ca2 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <DMA_CalcBaseAndBitshift+0x38>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <DMA_CalcBaseAndBitshift+0x3c>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x40>)
 8004c9e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004ca0:	4770      	bx	lr
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ca2:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x44>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	4a06      	ldr	r2, [pc, #24]	; (8004cc0 <DMA_CalcBaseAndBitshift+0x3c>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <DMA_CalcBaseAndBitshift+0x48>)
 8004cb4:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004cb6:	4770      	bx	lr
 8004cb8:	40020407 	.word	0x40020407
 8004cbc:	bffdfff8 	.word	0xbffdfff8
 8004cc0:	cccccccd 	.word	0xcccccccd
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	bffdfbf8 	.word	0xbffdfbf8
 8004ccc:	40020400 	.word	0x40020400

08004cd0 <HAL_DMA_Init>:
  if(NULL == hdma)
 8004cd0:	b320      	cbz	r0, 8004d1c <HAL_DMA_Init+0x4c>
{
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8004cdc:	6801      	ldr	r1, [r0, #0]
 8004cde:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ce0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004ce4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8004ce8:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cea:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8004cec:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cee:	68e0      	ldr	r0, [r4, #12]
 8004cf0:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf2:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf6:	6960      	ldr	r0, [r4, #20]
 8004cf8:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cfa:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cfc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cfe:	69e0      	ldr	r0, [r4, #28]
 8004d00:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004d02:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004d04:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff ffbc 	bl	8004c84 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8004d16:	f884 0020 	strb.w	r0, [r4, #32]
}
 8004d1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_DMA_IRQHandler>:
{
 8004d20:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d24:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004d26:	6804      	ldr	r4, [r0, #0]
 8004d28:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004d2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	408b      	lsls	r3, r1
 8004d30:	4213      	tst	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x3c>
 8004d34:	f015 0f04 	tst.w	r5, #4
 8004d38:	d010      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x3c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	f013 0f20 	tst.w	r3, #32
 8004d40:	d103      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x2a>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004d4a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d4e:	2304      	movs	r3, #4
 8004d50:	408b      	lsls	r3, r1
 8004d52:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004d54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004d56:	b103      	cbz	r3, 8004d5a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferHalfCpltCallback(hdma);
 8004d58:	4798      	blx	r3
}
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	408b      	lsls	r3, r1
 8004d60:	4213      	tst	r3, r2
 8004d62:	d01a      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x7a>
 8004d64:	f015 0f02 	tst.w	r5, #2
 8004d68:	d017      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f013 0f20 	tst.w	r3, #32
 8004d70:	d106      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x60>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f023 030a 	bic.w	r3, r3, #10
 8004d78:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004d80:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004d82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d84:	2302      	movs	r3, #2
 8004d86:	408b      	lsls	r3, r1
 8004d88:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0e1      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferCpltCallback(hdma);
 8004d96:	4798      	blx	r3
 8004d98:	e7df      	b.n	8004d5a <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	fa03 f101 	lsl.w	r1, r3, r1
 8004da0:	4211      	tst	r1, r2
 8004da2:	d0da      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x3a>
 8004da4:	f015 0f08 	tst.w	r5, #8
 8004da8:	d0d7      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f023 030e 	bic.w	r3, r3, #14
 8004db0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004db2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004db4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004db6:	2301      	movs	r3, #1
 8004db8:	fa03 f202 	lsl.w	r2, r3, r2
 8004dbc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004dbe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004dc0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8004dca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0c4      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004dd0:	4798      	blx	r3
}
 8004dd2:	e7c2      	b.n	8004d5a <HAL_DMA_IRQHandler+0x3a>

08004dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8004dd8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dda:	e062      	b.n	8004ea2 <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ddc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004dde:	005e      	lsls	r6, r3, #1
 8004de0:	2403      	movs	r4, #3
 8004de2:	40b4      	lsls	r4, r6
 8004de4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de8:	68cc      	ldr	r4, [r1, #12]
 8004dea:	40b4      	lsls	r4, r6
 8004dec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004dee:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004df6:	684c      	ldr	r4, [r1, #4]
 8004df8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004dfc:	409c      	lsls	r4, r3
 8004dfe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004e02:	6044      	str	r4, [r0, #4]
 8004e04:	e05e      	b.n	8004ec4 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e06:	08dd      	lsrs	r5, r3, #3
 8004e08:	3508      	adds	r5, #8
 8004e0a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e0e:	f003 0407 	and.w	r4, r3, #7
 8004e12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e16:	240f      	movs	r4, #15
 8004e18:	fa04 f40c 	lsl.w	r4, r4, ip
 8004e1c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e20:	690c      	ldr	r4, [r1, #16]
 8004e22:	fa04 f40c 	lsl.w	r4, r4, ip
 8004e26:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004e2a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004e2e:	e060      	b.n	8004ef2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e30:	2404      	movs	r4, #4
 8004e32:	e000      	b.n	8004e36 <HAL_GPIO_Init+0x62>
 8004e34:	2400      	movs	r4, #0
 8004e36:	fa04 f40e 	lsl.w	r4, r4, lr
 8004e3a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e3c:	f10c 0c02 	add.w	ip, ip, #2
 8004e40:	4d52      	ldr	r5, [pc, #328]	; (8004f8c <HAL_GPIO_Init+0x1b8>)
 8004e42:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e46:	4c52      	ldr	r4, [pc, #328]	; (8004f90 <HAL_GPIO_Init+0x1bc>)
 8004e48:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004e4a:	43d4      	mvns	r4, r2
 8004e4c:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e50:	684f      	ldr	r7, [r1, #4]
 8004e52:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004e56:	d001      	beq.n	8004e5c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004e58:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8004e5c:	4d4c      	ldr	r5, [pc, #304]	; (8004f90 <HAL_GPIO_Init+0x1bc>)
 8004e5e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8004e60:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8004e62:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e66:	684f      	ldr	r7, [r1, #4]
 8004e68:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004e6c:	d001      	beq.n	8004e72 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8004e6e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8004e72:	4d47      	ldr	r5, [pc, #284]	; (8004f90 <HAL_GPIO_Init+0x1bc>)
 8004e74:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 8004e76:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004e78:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e7c:	684f      	ldr	r7, [r1, #4]
 8004e7e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004e82:	d001      	beq.n	8004e88 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004e84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8004e88:	4d41      	ldr	r5, [pc, #260]	; (8004f90 <HAL_GPIO_Init+0x1bc>)
 8004e8a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e8c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004e8e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e90:	684e      	ldr	r6, [r1, #4]
 8004e92:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004e96:	d001      	beq.n	8004e9c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004e98:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_GPIO_Init+0x1bc>)
 8004e9e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004ea0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ea2:	680a      	ldr	r2, [r1, #0]
 8004ea4:	fa32 f403 	lsrs.w	r4, r2, r3
 8004ea8:	d06e      	beq.n	8004f88 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004eaa:	f04f 0c01 	mov.w	ip, #1
 8004eae:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004eb2:	ea1c 0202 	ands.w	r2, ip, r2
 8004eb6:	d0f3      	beq.n	8004ea0 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eb8:	684c      	ldr	r4, [r1, #4]
 8004eba:	f004 0403 	and.w	r4, r4, #3
 8004ebe:	3c01      	subs	r4, #1
 8004ec0:	2c01      	cmp	r4, #1
 8004ec2:	d98b      	bls.n	8004ddc <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ec4:	684c      	ldr	r4, [r1, #4]
 8004ec6:	f004 0403 	and.w	r4, r4, #3
 8004eca:	2c03      	cmp	r4, #3
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004ece:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ed0:	005d      	lsls	r5, r3, #1
 8004ed2:	f04f 0c03 	mov.w	ip, #3
 8004ed6:	fa0c fc05 	lsl.w	ip, ip, r5
 8004eda:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ede:	688c      	ldr	r4, [r1, #8]
 8004ee0:	40ac      	lsls	r4, r5
 8004ee2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004ee6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee8:	684c      	ldr	r4, [r1, #4]
 8004eea:	f004 0403 	and.w	r4, r4, #3
 8004eee:	2c02      	cmp	r4, #2
 8004ef0:	d089      	beq.n	8004e06 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8004ef2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ef4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004ef8:	f04f 0c03 	mov.w	ip, #3
 8004efc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004f00:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f04:	684c      	ldr	r4, [r1, #4]
 8004f06:	f004 0403 	and.w	r4, r4, #3
 8004f0a:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f0e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004f12:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f14:	684c      	ldr	r4, [r1, #4]
 8004f16:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004f1a:	d0c1      	beq.n	8004ea0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1c:	4c1d      	ldr	r4, [pc, #116]	; (8004f94 <HAL_GPIO_Init+0x1c0>)
 8004f1e:	69a5      	ldr	r5, [r4, #24]
 8004f20:	f045 0501 	orr.w	r5, r5, #1
 8004f24:	61a5      	str	r5, [r4, #24]
 8004f26:	69a4      	ldr	r4, [r4, #24]
 8004f28:	f004 0401 	and.w	r4, r4, #1
 8004f2c:	9401      	str	r4, [sp, #4]
 8004f2e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f30:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004f34:	f10c 0502 	add.w	r5, ip, #2
 8004f38:	4c14      	ldr	r4, [pc, #80]	; (8004f8c <HAL_GPIO_Init+0x1b8>)
 8004f3a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f3e:	f003 0403 	and.w	r4, r3, #3
 8004f42:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004f46:	240f      	movs	r4, #15
 8004f48:	fa04 f40e 	lsl.w	r4, r4, lr
 8004f4c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f50:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004f54:	f43f af6e 	beq.w	8004e34 <HAL_GPIO_Init+0x60>
 8004f58:	4c0f      	ldr	r4, [pc, #60]	; (8004f98 <HAL_GPIO_Init+0x1c4>)
 8004f5a:	42a0      	cmp	r0, r4
 8004f5c:	d00e      	beq.n	8004f7c <HAL_GPIO_Init+0x1a8>
 8004f5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f62:	42a0      	cmp	r0, r4
 8004f64:	d00c      	beq.n	8004f80 <HAL_GPIO_Init+0x1ac>
 8004f66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f6a:	42a0      	cmp	r0, r4
 8004f6c:	d00a      	beq.n	8004f84 <HAL_GPIO_Init+0x1b0>
 8004f6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f72:	42a0      	cmp	r0, r4
 8004f74:	f43f af5c 	beq.w	8004e30 <HAL_GPIO_Init+0x5c>
 8004f78:	2405      	movs	r4, #5
 8004f7a:	e75c      	b.n	8004e36 <HAL_GPIO_Init+0x62>
 8004f7c:	2401      	movs	r4, #1
 8004f7e:	e75a      	b.n	8004e36 <HAL_GPIO_Init+0x62>
 8004f80:	2402      	movs	r4, #2
 8004f82:	e758      	b.n	8004e36 <HAL_GPIO_Init+0x62>
 8004f84:	2403      	movs	r4, #3
 8004f86:	e756      	b.n	8004e36 <HAL_GPIO_Init+0x62>
  }
}
 8004f88:	b003      	add	sp, #12
 8004f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40021000 	.word	0x40021000
 8004f98:	48000400 	.word	0x48000400

08004f9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f9c:	b10a      	cbz	r2, 8004fa2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f9e:	6181      	str	r1, [r0, #24]
 8004fa0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fa2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <HAL_MspInit+0x2c>)
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	f002 0201 	and.w	r2, r2, #1
 8004fba:	9200      	str	r2, [sp, #0]
 8004fbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fc4:	61da      	str	r2, [r3, #28]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd0:	b002      	add	sp, #8
 8004fd2:	4770      	bx	lr
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f000 8301 	beq.w	80055e0 <HAL_RCC_OscConfig+0x608>
{
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe4:	6803      	ldr	r3, [r0, #0]
 8004fe6:	f013 0f01 	tst.w	r3, #1
 8004fea:	d03b      	beq.n	8005064 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fec:	4bb5      	ldr	r3, [pc, #724]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d01e      	beq.n	8005036 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff8:	4bb2      	ldr	r3, [pc, #712]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d013      	beq.n	800502c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d068      	beq.n	80050de <HAL_RCC_OscConfig+0x106>
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8092 	bne.w	8005136 <HAL_RCC_OscConfig+0x15e>
 8005012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005016:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e05d      	b.n	80050e8 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800502c:	4ba5      	ldr	r3, [pc, #660]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005034:	d0e6      	beq.n	8005004 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800503a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503e:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2201      	movs	r2, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	420b      	tst	r3, r1
 800505a:	d003      	beq.n	8005064 <HAL_RCC_OscConfig+0x8c>
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 82c0 	beq.w	80055e4 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f013 0f02 	tst.w	r3, #2
 800506a:	f000 80c5 	beq.w	80051f8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800506e:	4b95      	ldr	r3, [pc, #596]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f013 0f0c 	tst.w	r3, #12
 8005076:	f000 809c 	beq.w	80051b2 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800507a:	4b92      	ldr	r3, [pc, #584]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b08      	cmp	r3, #8
 8005084:	f000 808f 	beq.w	80051a6 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80f2 	beq.w	8005274 <HAL_RCC_OscConfig+0x29c>
 8005090:	2201      	movs	r2, #1
 8005092:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800509e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7ff fd67 	bl	8004b78 <HAL_GetTick>
 80050aa:	4605      	mov	r5, r0
 80050ac:	2302      	movs	r3, #2
 80050ae:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b2:	4b84      	ldr	r3, [pc, #528]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	2302      	movs	r3, #2
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	420b      	tst	r3, r1
 80050cc:	f040 80c3 	bne.w	8005256 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d0:	f7ff fd52 	bl	8004b78 <HAL_GetTick>
 80050d4:	1b40      	subs	r0, r0, r5
 80050d6:	2802      	cmp	r0, #2
 80050d8:	d9e8      	bls.n	80050ac <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80050da:	2003      	movs	r0, #3
 80050dc:	e28b      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050de:	4a79      	ldr	r2, [pc, #484]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e6:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050e8:	4a76      	ldr	r2, [pc, #472]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80050ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050ec:	f023 030f 	bic.w	r3, r3, #15
 80050f0:	68a1      	ldr	r1, [r4, #8]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f6:	6863      	ldr	r3, [r4, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d036      	beq.n	800516a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80050fc:	f7ff fd3c 	bl	8004b78 <HAL_GetTick>
 8005100:	4605      	mov	r5, r0
 8005102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005106:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b6e      	ldr	r3, [pc, #440]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	fab3 f383 	clz	r3, r3
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2201      	movs	r2, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	420b      	tst	r3, r1
 8005126:	d19d      	bne.n	8005064 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7ff fd26 	bl	8004b78 <HAL_GetTick>
 800512c:	1b40      	subs	r0, r0, r5
 800512e:	2864      	cmp	r0, #100	; 0x64
 8005130:	d9e7      	bls.n	8005102 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8005132:	2003      	movs	r0, #3
 8005134:	e25f      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800513a:	d009      	beq.n	8005150 <HAL_RCC_OscConfig+0x178>
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e7cb      	b.n	80050e8 <HAL_RCC_OscConfig+0x110>
 8005150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005154:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e7be      	b.n	80050e8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800516a:	f7ff fd05 	bl	8004b78 <HAL_GetTick>
 800516e:	4605      	mov	r5, r0
 8005170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005174:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005178:	4b52      	ldr	r3, [pc, #328]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2201      	movs	r2, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	420b      	tst	r3, r1
 8005194:	f43f af66 	beq.w	8005064 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7ff fcee 	bl	8004b78 <HAL_GetTick>
 800519c:	1b40      	subs	r0, r0, r5
 800519e:	2864      	cmp	r0, #100	; 0x64
 80051a0:	d9e6      	bls.n	8005170 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80051a2:	2003      	movs	r0, #3
 80051a4:	e227      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80051a6:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051ae:	f47f af6b 	bne.w	8005088 <HAL_RCC_OscConfig+0xb0>
 80051b2:	2302      	movs	r3, #2
 80051b4:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b8:	4b42      	ldr	r3, [pc, #264]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	2302      	movs	r3, #2
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	420b      	tst	r3, r1
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_OscConfig+0x204>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f040 8206 	bne.w	80055e8 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4839      	ldr	r0, [pc, #228]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 80051de:	6803      	ldr	r3, [r0, #0]
 80051e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051e4:	6961      	ldr	r1, [r4, #20]
 80051e6:	22f8      	movs	r2, #248	; 0xf8
 80051e8:	fa92 f2a2 	rbit	r2, r2
 80051ec:	fab2 f282 	clz	r2, r2
 80051f0:	fa01 f202 	lsl.w	r2, r1, r2
 80051f4:	4313      	orrs	r3, r2
 80051f6:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f013 0f08 	tst.w	r3, #8
 80051fe:	f000 808d 	beq.w	800531c <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005202:	69a3      	ldr	r3, [r4, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d061      	beq.n	80052cc <HAL_RCC_OscConfig+0x2f4>
 8005208:	2101      	movs	r1, #1
 800520a:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	fab2 f282 	clz	r2, r2
 8005212:	4b2d      	ldr	r3, [pc, #180]	; (80052c8 <HAL_RCC_OscConfig+0x2f0>)
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7ff fcad 	bl	8004b78 <HAL_GetTick>
 800521e:	4605      	mov	r5, r0
 8005220:	2302      	movs	r3, #2
 8005222:	fa93 f2a3 	rbit	r2, r3
 8005226:	fa93 f2a3 	rbit	r2, r3
 800522a:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8005230:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	420b      	tst	r3, r1
 8005246:	d169      	bne.n	800531c <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005248:	f7ff fc96 	bl	8004b78 <HAL_GetTick>
 800524c:	1b40      	subs	r0, r0, r5
 800524e:	2802      	cmp	r0, #2
 8005250:	d9e6      	bls.n	8005220 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8005252:	2003      	movs	r0, #3
 8005254:	e1cf      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005256:	481b      	ldr	r0, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 8005258:	6803      	ldr	r3, [r0, #0]
 800525a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800525e:	6961      	ldr	r1, [r4, #20]
 8005260:	22f8      	movs	r2, #248	; 0xf8
 8005262:	fa92 f2a2 	rbit	r2, r2
 8005266:	fab2 f282 	clz	r2, r2
 800526a:	fa01 f202 	lsl.w	r2, r1, r2
 800526e:	4313      	orrs	r3, r2
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	e7c1      	b.n	80051f8 <HAL_RCC_OscConfig+0x220>
 8005274:	2301      	movs	r3, #1
 8005276:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005282:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800528c:	f7ff fc74 	bl	8004b78 <HAL_GetTick>
 8005290:	4605      	mov	r5, r0
 8005292:	2302      	movs	r3, #2
 8005294:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_OscConfig+0x2ec>)
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	2302      	movs	r3, #2
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	fab3 f383 	clz	r3, r3
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	420b      	tst	r3, r1
 80052b2:	d0a1      	beq.n	80051f8 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7ff fc60 	bl	8004b78 <HAL_GetTick>
 80052b8:	1b40      	subs	r0, r0, r5
 80052ba:	2802      	cmp	r0, #2
 80052bc:	d9e9      	bls.n	8005292 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 80052be:	2003      	movs	r0, #3
 80052c0:	e199      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	10908120 	.word	0x10908120
 80052cc:	2201      	movs	r2, #1
 80052ce:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d2:	fab2 f282 	clz	r2, r2
 80052d6:	4bb7      	ldr	r3, [pc, #732]	; (80055b4 <HAL_RCC_OscConfig+0x5dc>)
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e0:	f7ff fc4a 	bl	8004b78 <HAL_GetTick>
 80052e4:	4605      	mov	r5, r0
 80052e6:	2302      	movs	r3, #2
 80052e8:	fa93 f2a3 	rbit	r2, r3
 80052ec:	fa93 f2a3 	rbit	r2, r3
 80052f0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	4ab0      	ldr	r2, [pc, #704]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80052f6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	fab3 f383 	clz	r3, r3
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2201      	movs	r2, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	420b      	tst	r3, r1
 800530c:	d006      	beq.n	800531c <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530e:	f7ff fc33 	bl	8004b78 <HAL_GetTick>
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	2802      	cmp	r0, #2
 8005316:	d9e6      	bls.n	80052e6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8005318:	2003      	movs	r0, #3
 800531a:	e16c      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	f013 0f04 	tst.w	r3, #4
 8005322:	f000 80a9 	beq.w	8005478 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005326:	4ba4      	ldr	r3, [pc, #656]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800532e:	d120      	bne.n	8005372 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005330:	4ba1      	ldr	r3, [pc, #644]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005344:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b9d      	ldr	r3, [pc, #628]	; (80055bc <HAL_RCC_OscConfig+0x5e4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800534e:	d012      	beq.n	8005376 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005350:	68e3      	ldr	r3, [r4, #12]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d023      	beq.n	800539e <HAL_RCC_OscConfig+0x3c6>
 8005356:	bb73      	cbnz	r3, 80053b6 <HAL_RCC_OscConfig+0x3de>
 8005358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800535c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005360:	6a1a      	ldr	r2, [r3, #32]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	621a      	str	r2, [r3, #32]
 8005368:	6a1a      	ldr	r2, [r3, #32]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	621a      	str	r2, [r3, #32]
 8005370:	e01a      	b.n	80053a8 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8005372:	2500      	movs	r5, #0
 8005374:	e7e7      	b.n	8005346 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005376:	4a91      	ldr	r2, [pc, #580]	; (80055bc <HAL_RCC_OscConfig+0x5e4>)
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005380:	f7ff fbfa 	bl	8004b78 <HAL_GetTick>
 8005384:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005386:	4b8d      	ldr	r3, [pc, #564]	; (80055bc <HAL_RCC_OscConfig+0x5e4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800538e:	d1df      	bne.n	8005350 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005390:	f7ff fbf2 	bl	8004b78 <HAL_GetTick>
 8005394:	1b80      	subs	r0, r0, r6
 8005396:	2864      	cmp	r0, #100	; 0x64
 8005398:	d9f5      	bls.n	8005386 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800539a:	2003      	movs	r0, #3
 800539c:	e12b      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539e:	4a86      	ldr	r2, [pc, #536]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80053a0:	6a13      	ldr	r3, [r2, #32]
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a8:	68e3      	ldr	r3, [r4, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03c      	beq.n	8005428 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7ff fbe3 	bl	8004b78 <HAL_GetTick>
 80053b2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	e02b      	b.n	800540e <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_OscConfig+0x3f6>
 80053ba:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	f022 0201 	bic.w	r2, r2, #1
 80053c2:	621a      	str	r2, [r3, #32]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	f022 0204 	bic.w	r2, r2, #4
 80053ca:	621a      	str	r2, [r3, #32]
 80053cc:	e7ec      	b.n	80053a8 <HAL_RCC_OscConfig+0x3d0>
 80053ce:	4b7a      	ldr	r3, [pc, #488]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f042 0204 	orr.w	r2, r2, #4
 80053d6:	621a      	str	r2, [r3, #32]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	621a      	str	r2, [r3, #32]
 80053e0:	e7e2      	b.n	80053a8 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e2:	4b75      	ldr	r3, [pc, #468]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80053e4:	6a19      	ldr	r1, [r3, #32]
 80053e6:	2302      	movs	r3, #2
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	fab3 f383 	clz	r3, r3
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	4219      	tst	r1, r3
 80053fc:	d13b      	bne.n	8005476 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7ff fbbb 	bl	8004b78 <HAL_GetTick>
 8005402:	1b80      	subs	r0, r0, r6
 8005404:	f241 3388 	movw	r3, #5000	; 0x1388
 8005408:	4298      	cmp	r0, r3
 800540a:	f200 80ef 	bhi.w	80055ec <HAL_RCC_OscConfig+0x614>
 800540e:	2302      	movs	r3, #2
 8005410:	fa93 f2a3 	rbit	r2, r3
 8005414:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e2      	bne.n	80053e2 <HAL_RCC_OscConfig+0x40a>
 800541c:	2302      	movs	r3, #2
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	4b65      	ldr	r3, [pc, #404]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005424:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005426:	e7de      	b.n	80053e6 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005428:	f7ff fba6 	bl	8004b78 <HAL_GetTick>
 800542c:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	e015      	b.n	800545c <HAL_RCC_OscConfig+0x484>
 8005430:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005432:	6a19      	ldr	r1, [r3, #32]
 8005434:	2302      	movs	r3, #2
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2201      	movs	r2, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	4219      	tst	r1, r3
 800544a:	d014      	beq.n	8005476 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7ff fb94 	bl	8004b78 <HAL_GetTick>
 8005450:	1b80      	subs	r0, r0, r6
 8005452:	f241 3388 	movw	r3, #5000	; 0x1388
 8005456:	4298      	cmp	r0, r3
 8005458:	f200 80ca 	bhi.w	80055f0 <HAL_RCC_OscConfig+0x618>
 800545c:	2302      	movs	r3, #2
 800545e:	fa93 f2a3 	rbit	r2, r3
 8005462:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e2      	bne.n	8005430 <HAL_RCC_OscConfig+0x458>
 800546a:	2302      	movs	r3, #2
 800546c:	fa93 f3a3 	rbit	r3, r3
 8005470:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005472:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005474:	e7de      	b.n	8005434 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005476:	bbb5      	cbnz	r5, 80054e6 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005478:	69e3      	ldr	r3, [r4, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80ba 	beq.w	80055f4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005480:	4a4d      	ldr	r2, [pc, #308]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005482:	6852      	ldr	r2, [r2, #4]
 8005484:	f002 020c 	and.w	r2, r2, #12
 8005488:	2a08      	cmp	r2, #8
 800548a:	f000 8099 	beq.w	80055c0 <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	2b02      	cmp	r3, #2
 8005490:	d02f      	beq.n	80054f2 <HAL_RCC_OscConfig+0x51a>
 8005492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005496:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7ff fb64 	bl	8004b78 <HAL_GetTick>
 80054b0:	4604      	mov	r4, r0
 80054b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	4219      	tst	r1, r3
 80054d6:	d06b      	beq.n	80055b0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d8:	f7ff fb4e 	bl	8004b78 <HAL_GetTick>
 80054dc:	1b00      	subs	r0, r0, r4
 80054de:	2802      	cmp	r0, #2
 80054e0:	d9e7      	bls.n	80054b2 <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 80054e2:	2003      	movs	r0, #3
 80054e4:	e087      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 80054e8:	69d3      	ldr	r3, [r2, #28]
 80054ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ee:	61d3      	str	r3, [r2, #28]
 80054f0:	e7c2      	b.n	8005478 <HAL_RCC_OscConfig+0x4a0>
 80054f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005502:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800550c:	f7ff fb34 	bl	8004b78 <HAL_GetTick>
 8005510:	4605      	mov	r5, r0
 8005512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005516:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005522:	fa93 f3a3 	rbit	r3, r3
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2201      	movs	r2, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	4219      	tst	r1, r3
 8005536:	d006      	beq.n	8005546 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005538:	f7ff fb1e 	bl	8004b78 <HAL_GetTick>
 800553c:	1b40      	subs	r0, r0, r5
 800553e:	2802      	cmp	r0, #2
 8005540:	d9e7      	bls.n	8005512 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 8005542:	2003      	movs	r0, #3
 8005544:	e057      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005546:	491c      	ldr	r1, [pc, #112]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005548:	684b      	ldr	r3, [r1, #4]
 800554a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800554e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005550:	6a20      	ldr	r0, [r4, #32]
 8005552:	4302      	orrs	r2, r0
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
 8005558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800555c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005572:	f7ff fb01 	bl	8004b78 <HAL_GetTick>
 8005576:	4604      	mov	r4, r0
 8005578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <HAL_RCC_OscConfig+0x5e0>)
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2201      	movs	r2, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	4219      	tst	r1, r3
 800559c:	d106      	bne.n	80055ac <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559e:	f7ff faeb 	bl	8004b78 <HAL_GetTick>
 80055a2:	1b00      	subs	r0, r0, r4
 80055a4:	2802      	cmp	r0, #2
 80055a6:	d9e7      	bls.n	8005578 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 80055a8:	2003      	movs	r0, #3
 80055aa:	e024      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80055ac:	2000      	movs	r0, #0
 80055ae:	e022      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e020      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
 80055b4:	10908120 	.word	0x10908120
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d01a      	beq.n	80055fa <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCC_OscConfig+0x630>)
 80055c6:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055c8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80055cc:	6a22      	ldr	r2, [r4, #32]
 80055ce:	4291      	cmp	r1, r2
 80055d0:	d115      	bne.n	80055fe <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80055d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055d8:	4293      	cmp	r3, r2
 80055da:	d112      	bne.n	8005602 <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 80055dc:	2000      	movs	r0, #0
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 80055e0:	2001      	movs	r0, #1
}
 80055e2:	4770      	bx	lr
        return HAL_ERROR;
 80055e4:	2001      	movs	r0, #1
 80055e6:	e006      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 80055e8:	2001      	movs	r0, #1
 80055ea:	e004      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80055ec:	2003      	movs	r0, #3
 80055ee:	e002      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 80055f0:	2003      	movs	r0, #3
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 80055f4:	2000      	movs	r0, #0
}
 80055f6:	b002      	add	sp, #8
 80055f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80055fa:	2001      	movs	r0, #1
 80055fc:	e7fb      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 80055fe:	2001      	movs	r0, #1
 8005600:	e7f9      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
 8005602:	2001      	movs	r0, #1
 8005604:	e7f7      	b.n	80055f6 <HAL_RCC_OscConfig+0x61e>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800560c:	4b11      	ldr	r3, [pc, #68]	; (8005654 <HAL_RCC_GetSysClockFreq+0x48>)
 800560e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005610:	f002 030c 	and.w	r3, r2, #12
 8005614:	2b04      	cmp	r3, #4
 8005616:	d018      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x3e>
 8005618:	2b08      	cmp	r3, #8
 800561a:	d118      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800561c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8005620:	490d      	ldr	r1, [pc, #52]	; (8005658 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005622:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_GetSysClockFreq+0x48>)
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	490b      	ldr	r1, [pc, #44]	; (800565c <HAL_RCC_GetSysClockFreq+0x50>)
 800562e:	5cc9      	ldrb	r1, [r1, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005630:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005634:	d005      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x36>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <HAL_RCC_GetSysClockFreq+0x54>)
 8005638:	fbb3 f3f1 	udiv	r3, r3, r1
 800563c:	fb03 f000 	mul.w	r0, r3, r0
 8005640:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCC_GetSysClockFreq+0x58>)
 8005644:	fb03 f000 	mul.w	r0, r3, r0
 8005648:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 800564a:	4805      	ldr	r0, [pc, #20]	; (8005660 <HAL_RCC_GetSysClockFreq+0x54>)
 800564c:	4770      	bx	lr
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800564e:	4806      	ldr	r0, [pc, #24]	; (8005668 <HAL_RCC_GetSysClockFreq+0x5c>)
      break;
    }
  }
  return sysclockfreq;
}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	080072c0 	.word	0x080072c0
 800565c:	080072d0 	.word	0x080072d0
 8005660:	00f42400 	.word	0x00f42400
 8005664:	003d0900 	.word	0x003d0900
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800566c:	2800      	cmp	r0, #0
 800566e:	f000 80be 	beq.w	80057ee <HAL_RCC_ClockConfig+0x182>
{
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	460d      	mov	r5, r1
 8005676:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005678:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_ClockConfig+0x194>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	428b      	cmp	r3, r1
 8005682:	d20b      	bcs.n	800569c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005684:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_RCC_ClockConfig+0x194>)
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	f023 0307 	bic.w	r3, r3, #7
 800568c:	430b      	orrs	r3, r1
 800568e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	428b      	cmp	r3, r1
 8005698:	f040 80ab 	bne.w	80057f2 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	f013 0f02 	tst.w	r3, #2
 80056a2:	d006      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a4:	4a57      	ldr	r2, [pc, #348]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80056a6:	6853      	ldr	r3, [r2, #4]
 80056a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ac:	68a1      	ldr	r1, [r4, #8]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	f013 0f01 	tst.w	r3, #1
 80056b8:	d05a      	beq.n	8005770 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ba:	6863      	ldr	r3, [r4, #4]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d02d      	beq.n	800571c <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d040      	beq.n	8005746 <HAL_RCC_ClockConfig+0xda>
 80056c4:	2202      	movs	r2, #2
 80056c6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ca:	4a4e      	ldr	r2, [pc, #312]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80056cc:	6810      	ldr	r0, [r2, #0]
 80056ce:	2202      	movs	r2, #2
 80056d0:	fa92 f2a2 	rbit	r2, r2
 80056d4:	fab2 f282 	clz	r2, r2
 80056d8:	f002 021f 	and.w	r2, r2, #31
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f202 	lsl.w	r2, r1, r2
 80056e2:	4210      	tst	r0, r2
 80056e4:	f000 8087 	beq.w	80057f6 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056e8:	4946      	ldr	r1, [pc, #280]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80056ea:	684a      	ldr	r2, [r1, #4]
 80056ec:	f022 0203 	bic.w	r2, r2, #3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80056f4:	f7ff fa40 	bl	8004b78 <HAL_GetTick>
 80056f8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	4b42      	ldr	r3, [pc, #264]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005708:	d032      	beq.n	8005770 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570a:	f7ff fa35 	bl	8004b78 <HAL_GetTick>
 800570e:	1b80      	subs	r0, r0, r6
 8005710:	f241 3388 	movw	r3, #5000	; 0x1388
 8005714:	4298      	cmp	r0, r3
 8005716:	d9f0      	bls.n	80056fa <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005718:	2003      	movs	r0, #3
 800571a:	e067      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
 800571c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005720:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005724:	4a37      	ldr	r2, [pc, #220]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 8005726:	6810      	ldr	r0, [r2, #0]
 8005728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800572c:	fa92 f2a2 	rbit	r2, r2
 8005730:	fab2 f282 	clz	r2, r2
 8005734:	f002 021f 	and.w	r2, r2, #31
 8005738:	2101      	movs	r1, #1
 800573a:	fa01 f202 	lsl.w	r2, r1, r2
 800573e:	4202      	tst	r2, r0
 8005740:	d1d2      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8005742:	2001      	movs	r0, #1
 8005744:	e052      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
 8005746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	4a2d      	ldr	r2, [pc, #180]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 8005750:	6810      	ldr	r0, [r2, #0]
 8005752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005756:	fa92 f2a2 	rbit	r2, r2
 800575a:	fab2 f282 	clz	r2, r2
 800575e:	f002 021f 	and.w	r2, r2, #31
 8005762:	2101      	movs	r1, #1
 8005764:	fa01 f202 	lsl.w	r2, r1, r2
 8005768:	4210      	tst	r0, r2
 800576a:	d1bd      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 800576c:	2001      	movs	r0, #1
 800576e:	e03d      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b23      	ldr	r3, [pc, #140]	; (8005800 <HAL_RCC_ClockConfig+0x194>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	42ab      	cmp	r3, r5
 800577a:	d90a      	bls.n	8005792 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <HAL_RCC_ClockConfig+0x194>)
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	f023 0307 	bic.w	r3, r3, #7
 8005784:	432b      	orrs	r3, r5
 8005786:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	42ab      	cmp	r3, r5
 8005790:	d133      	bne.n	80057fa <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f013 0f04 	tst.w	r3, #4
 8005798:	d006      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800579a:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 800579c:	6853      	ldr	r3, [r2, #4]
 800579e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057a2:	68e1      	ldr	r1, [r4, #12]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	f013 0f08 	tst.w	r3, #8
 80057ae:	d007      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b0:	4a14      	ldr	r2, [pc, #80]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80057b2:	6853      	ldr	r3, [r2, #4]
 80057b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057be:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057c0:	f7ff ff24 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <HAL_RCC_ClockConfig+0x198>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057cc:	22f0      	movs	r2, #240	; 0xf0
 80057ce:	fa92 f2a2 	rbit	r2, r2
 80057d2:	fab2 f282 	clz	r2, r2
 80057d6:	40d3      	lsrs	r3, r2
 80057d8:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <HAL_RCC_ClockConfig+0x19c>)
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	40d8      	lsrs	r0, r3
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x1a0>)
 80057e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_ClockConfig+0x1a4>)
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	f7ff f983 	bl	8004af0 <HAL_InitTick>
  return HAL_OK;
 80057ea:	2000      	movs	r0, #0
}
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80057ee:	2001      	movs	r0, #1
}
 80057f0:	4770      	bx	lr
      return HAL_ERROR;
 80057f2:	2001      	movs	r0, #1
 80057f4:	e7fa      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 80057f6:	2001      	movs	r0, #1
 80057f8:	e7f8      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 80057fa:	2001      	movs	r0, #1
 80057fc:	e7f6      	b.n	80057ec <HAL_RCC_ClockConfig+0x180>
 80057fe:	bf00      	nop
 8005800:	40022000 	.word	0x40022000
 8005804:	40021000 	.word	0x40021000
 8005808:	080072e0 	.word	0x080072e0
 800580c:	200000fc 	.word	0x200000fc
 8005810:	200000f8 	.word	0x200000f8

08005814 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <HAL_RCC_GetHCLKFreq+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	200000fc 	.word	0x200000fc

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005822:	f7ff fff7 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800582e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005832:	fa92 f2a2 	rbit	r2, r2
 8005836:	fab2 f282 	clz	r2, r2
 800583a:	40d3      	lsrs	r3, r2
 800583c:	4a02      	ldr	r2, [pc, #8]	; (8005848 <HAL_RCC_GetPCLK1Freq+0x28>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8005840:	40d8      	lsrs	r0, r3
 8005842:	bd08      	pop	{r3, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	080072f0 	.word	0x080072f0

0800584c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800584c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800584e:	f7ff ffe1 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800585a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800585e:	fa92 f2a2 	rbit	r2, r2
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	40d3      	lsrs	r3, r2
 8005868:	4a02      	ldr	r2, [pc, #8]	; (8005874 <HAL_RCC_GetPCLK2Freq+0x28>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800586c:	40d8      	lsrs	r0, r3
 800586e:	bd08      	pop	{r3, pc}
 8005870:	40021000 	.word	0x40021000
 8005874:	080072f0 	.word	0x080072f0

08005878 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587a:	b083      	sub	sp, #12
 800587c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800587e:	6803      	ldr	r3, [r0, #0]
 8005880:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005884:	d048      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005886:	4b91      	ldr	r3, [pc, #580]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800588e:	f040 80d4 	bne.w	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	4b8e      	ldr	r3, [pc, #568]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800589a:	61da      	str	r2, [r3, #28]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058a6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	4b89      	ldr	r3, [pc, #548]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058b0:	f000 80c5 	beq.w	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b4:	4b85      	ldr	r3, [pc, #532]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80058bc:	d022      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d01d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c8:	4880      	ldr	r0, [pc, #512]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058ca:	6a01      	ldr	r1, [r0, #32]
 80058cc:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80058d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058d4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d8:	fab2 f282 	clz	r2, r2
 80058dc:	4f7d      	ldr	r7, [pc, #500]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80058de:	443a      	add	r2, r7
 80058e0:	0092      	lsls	r2, r2, #2
 80058e2:	f04f 0c01 	mov.w	ip, #1
 80058e6:	f8c2 c000 	str.w	ip, [r2]
 80058ea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ee:	fab3 f383 	clz	r3, r3
 80058f2:	443b      	add	r3, r7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058fa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058fc:	f011 0f01 	tst.w	r1, #1
 8005900:	f040 80b2 	bne.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005904:	4a71      	ldr	r2, [pc, #452]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005906:	6a13      	ldr	r3, [r2, #32]
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	6861      	ldr	r1, [r4, #4]
 800590e:	430b      	orrs	r3, r1
 8005910:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005912:	2d00      	cmp	r5, #0
 8005914:	f040 80cf 	bne.w	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	f013 0f01 	tst.w	r3, #1
 800591e:	d006      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005920:	4a6a      	ldr	r2, [pc, #424]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005922:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005924:	f023 0303 	bic.w	r3, r3, #3
 8005928:	68a1      	ldr	r1, [r4, #8]
 800592a:	430b      	orrs	r3, r1
 800592c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f013 0f02 	tst.w	r3, #2
 8005934:	d006      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005936:	4a65      	ldr	r2, [pc, #404]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005938:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800593a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800593e:	68e1      	ldr	r1, [r4, #12]
 8005940:	430b      	orrs	r3, r1
 8005942:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f013 0f04 	tst.w	r3, #4
 800594a:	d006      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800594c:	4a5f      	ldr	r2, [pc, #380]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800594e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005950:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005954:	6921      	ldr	r1, [r4, #16]
 8005956:	430b      	orrs	r3, r1
 8005958:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f013 0f20 	tst.w	r3, #32
 8005960:	d006      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005962:	4a5a      	ldr	r2, [pc, #360]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005964:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	69e1      	ldr	r1, [r4, #28]
 800596c:	430b      	orrs	r3, r1
 800596e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005976:	d006      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005978:	4a54      	ldr	r2, [pc, #336]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800597a:	6853      	ldr	r3, [r2, #4]
 800597c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005980:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005982:	430b      	orrs	r3, r1
 8005984:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f013 0f40 	tst.w	r3, #64	; 0x40
 800598c:	d006      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800598e:	4a4f      	ldr	r2, [pc, #316]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005990:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005992:	f023 0320 	bic.w	r3, r3, #32
 8005996:	6a21      	ldr	r1, [r4, #32]
 8005998:	430b      	orrs	r3, r1
 800599a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	f013 0f08 	tst.w	r3, #8
 80059a2:	d006      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a4:	4a49      	ldr	r2, [pc, #292]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80059a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80059ac:	6961      	ldr	r1, [r4, #20]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	f013 0f10 	tst.w	r3, #16
 80059b8:	d006      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059ba:	4a44      	ldr	r2, [pc, #272]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80059be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80059c2:	69a1      	ldr	r1, [r4, #24]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059ce:	d006      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059d2:	6853      	ldr	r3, [r2, #4]
 80059d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80059d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80059da:	430b      	orrs	r3, r1
 80059dc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059e4:	d006      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059e6:	4a39      	ldr	r2, [pc, #228]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80059ea:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80059ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059f0:	430b      	orrs	r3, r1
 80059f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059fa:	d006      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80059fc:	4a33      	ldr	r2, [pc, #204]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a00:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8005a04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a06:	430b      	orrs	r3, r1
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005a10:	d006      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a12:	4a2e      	ldr	r2, [pc, #184]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005a26:	d04d      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a36:	2000      	movs	r0, #0
 8005a38:	e045      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	e734      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a3e:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a46:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005a48:	f7ff f896 	bl	8004b78 <HAL_GetTick>
 8005a4c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a56:	f47f af2d 	bne.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5a:	f7ff f88d 	bl	8004b78 <HAL_GetTick>
 8005a5e:	1b80      	subs	r0, r0, r6
 8005a60:	2864      	cmp	r0, #100	; 0x64
 8005a62:	d9f4      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8005a64:	2003      	movs	r0, #3
 8005a66:	e02e      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8005a68:	f7ff f886 	bl	8004b78 <HAL_GetTick>
 8005a6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6e:	e015      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a72:	6a19      	ldr	r1, [r3, #32]
 8005a74:	2302      	movs	r3, #2
 8005a76:	fa93 f3a3 	rbit	r3, r3
 8005a7a:	fab3 f383 	clz	r3, r3
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2201      	movs	r2, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	420b      	tst	r3, r1
 8005a8a:	f47f af3b 	bne.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8e:	f7ff f873 	bl	8004b78 <HAL_GetTick>
 8005a92:	1b80      	subs	r0, r0, r6
 8005a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a98:	4298      	cmp	r0, r3
 8005a9a:	d811      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	fa93 f2a3 	rbit	r2, r3
 8005aa2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e2      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ab2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ab4:	e7de      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab6:	69d3      	ldr	r3, [r2, #28]
 8005ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005abc:	61d3      	str	r3, [r2, #28]
 8005abe:	e72b      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8005ac0:	2003      	movs	r0, #3
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8005ac4:	2000      	movs	r0, #0
}
 8005ac6:	b003      	add	sp, #12
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40007000 	.word	0x40007000
 8005ad4:	10908100 	.word	0x10908100

08005ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	4605      	mov	r5, r0
 8005ae0:	4688      	mov	r8, r1
 8005ae2:	4617      	mov	r7, r2
 8005ae4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ae6:	f7ff f847 	bl	8004b78 <HAL_GetTick>
 8005aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aec:	1a1b      	subs	r3, r3, r0
 8005aee:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005af2:	f7ff f841 	bl	8004b78 <HAL_GetTick>
 8005af6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005b00:	fb09 f303 	mul.w	r3, r9, r3
 8005b04:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	689c      	ldr	r4, [r3, #8]
 8005b0a:	ea38 0304 	bics.w	r3, r8, r4
 8005b0e:	bf0c      	ite	eq
 8005b10:	f04f 0c01 	moveq.w	ip, #1
 8005b14:	f04f 0c00 	movne.w	ip, #0
 8005b18:	45bc      	cmp	ip, r7
 8005b1a:	d040      	beq.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005b20:	d0f1      	beq.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b22:	f7ff f829 	bl	8004b78 <HAL_GetTick>
 8005b26:	eba0 000a 	sub.w	r0, r0, sl
 8005b2a:	4548      	cmp	r0, r9
 8005b2c:	d20a      	bcs.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005b2e:	f1b9 0f00 	cmp.w	r9, #0
 8005b32:	d007      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	b102      	cbz	r2, 8005b3a <SPI_WaitFlagStateUntilTimeout+0x62>
 8005b38:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	4691      	mov	r9, r2
 8005b42:	e7e0      	b.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b44:	682a      	ldr	r2, [r5, #0]
 8005b46:	6853      	ldr	r3, [r2, #4]
 8005b48:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005b4c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b4e:	686b      	ldr	r3, [r5, #4]
 8005b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b54:	d00b      	beq.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b56:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5c:	d014      	beq.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005b64:	2300      	movs	r3, #0
 8005b66:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005b6a:	2003      	movs	r0, #3
 8005b6c:	e018      	b.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6e:	68ab      	ldr	r3, [r5, #8]
 8005b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b74:	d002      	beq.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d1ec      	bne.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8005b7c:	682a      	ldr	r2, [r5, #0]
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e7e6      	b.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8005b88:	682a      	ldr	r2, [r5, #0]
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	682a      	ldr	r2, [r5, #0]
 8005b94:	6813      	ldr	r3, [r2, #0]
 8005b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e7df      	b.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8005b9e:	2000      	movs	r0, #0
}
 8005ba0:	b002      	add	sp, #8
 8005ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200000fc 	.word	0x200000fc

08005bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	4615      	mov	r5, r2
 8005bb8:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bc0:	f7fe ffda 	bl	8004b78 <HAL_GetTick>
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	1a1b      	subs	r3, r3, r0
 8005bc8:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8005bcc:	f7fe ffd4 	bl	8004b78 <HAL_GetTick>
 8005bd0:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bd2:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bd6:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005be2:	0d1b      	lsrs	r3, r3, #20
 8005be4:	fb08 f303 	mul.w	r3, r8, r3
 8005be8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bea:	e002      	b.n	8005bf2 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bec:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8005bf0:	d112      	bne.n	8005c18 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	ea03 0c04 	and.w	ip, r3, r4
 8005bfa:	45ac      	cmp	ip, r5
 8005bfc:	d04a      	beq.n	8005c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bfe:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8005c02:	d1f3      	bne.n	8005bec <SPI_WaitFifoStateUntilTimeout+0x40>
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	d1f1      	bne.n	8005bec <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8005c08:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005c12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005c16:	e7e9      	b.n	8005bec <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c18:	f7fe ffae 	bl	8004b78 <HAL_GetTick>
 8005c1c:	eba0 0009 	sub.w	r0, r0, r9
 8005c20:	4540      	cmp	r0, r8
 8005c22:	d20a      	bcs.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x8e>
 8005c24:	f1b8 0f00 	cmp.w	r8, #0
 8005c28:	d007      	beq.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c2a:	9a01      	ldr	r2, [sp, #4]
 8005c2c:	b102      	cbz	r2, 8005c30 <SPI_WaitFifoStateUntilTimeout+0x84>
 8005c2e:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	4690      	mov	r8, r2
 8005c38:	e7db      	b.n	8005bf2 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c3a:	6832      	ldr	r2, [r6, #0]
 8005c3c:	6853      	ldr	r3, [r2, #4]
 8005c3e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005c42:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	6873      	ldr	r3, [r6, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d00b      	beq.n	8005c64 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c52:	d014      	beq.n	8005c7e <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005c60:	2003      	movs	r0, #3
 8005c62:	e018      	b.n	8005c96 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c64:	68b3      	ldr	r3, [r6, #8]
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6a:	d002      	beq.n	8005c72 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d1ec      	bne.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8005c72:	6832      	ldr	r2, [r6, #0]
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e7e6      	b.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8005c7e:	6832      	ldr	r2, [r6, #0]
 8005c80:	6813      	ldr	r3, [r2, #0]
 8005c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e7df      	b.n	8005c54 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8005c94:	2000      	movs	r0, #0
}
 8005c96:	b002      	add	sp, #8
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	200000fc 	.word	0x200000fc

08005ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005caa:	9200      	str	r2, [sp, #0]
 8005cac:	460b      	mov	r3, r1
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cb4:	f7ff ff7a 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005cb8:	b9b0      	cbnz	r0, 8005ce8 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cba:	9600      	str	r6, [sp, #0]
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f7ff ff08 	bl	8005ad8 <SPI_WaitFlagStateUntilTimeout>
 8005cc8:	b9a8      	cbnz	r0, 8005cf6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cca:	9600      	str	r6, [sp, #0]
 8005ccc:	462b      	mov	r3, r5
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7ff ff69 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005cda:	b150      	cbz	r0, 8005cf2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cde:	f043 0320 	orr.w	r3, r3, #32
 8005ce2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ce4:	2003      	movs	r0, #3
 8005ce6:	e004      	b.n	8005cf2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cea:	f043 0320 	orr.w	r3, r3, #32
 8005cee:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cf0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8005cf2:	b002      	add	sp, #8
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfe:	2003      	movs	r0, #3
 8005d00:	e7f7      	b.n	8005cf2 <SPI_EndRxTxTransaction+0x52>

08005d02 <SPI_EndRxTransaction>:
{
 8005d02:	b570      	push	{r4, r5, r6, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	4604      	mov	r4, r0
 8005d08:	460d      	mov	r5, r1
 8005d0a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0c:	6843      	ldr	r3, [r0, #4]
 8005d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d12:	d00d      	beq.n	8005d30 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d14:	9600      	str	r6, [sp, #0]
 8005d16:	462b      	mov	r3, r5
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff fedb 	bl	8005ad8 <SPI_WaitFlagStateUntilTimeout>
 8005d22:	b990      	cbnz	r0, 8005d4a <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2a:	d014      	beq.n	8005d56 <SPI_EndRxTransaction+0x54>
}
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d30:	6883      	ldr	r3, [r0, #8]
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d36:	d002      	beq.n	8005d3e <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3c:	d1ea      	bne.n	8005d14 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e7e4      	b.n	8005d14 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d4c:	f043 0320 	orr.w	r3, r3, #32
 8005d50:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d52:	2003      	movs	r0, #3
 8005d54:	e7ea      	b.n	8005d2c <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5c:	d002      	beq.n	8005d64 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d62:	d1e3      	bne.n	8005d2c <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d64:	9600      	str	r6, [sp, #0]
 8005d66:	462b      	mov	r3, r5
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff ff1c 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0d9      	beq.n	8005d2c <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d7a:	f043 0320 	orr.w	r3, r3, #32
 8005d7e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d80:	2003      	movs	r0, #3
 8005d82:	e7d3      	b.n	8005d2c <SPI_EndRxTransaction+0x2a>

08005d84 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d06f      	beq.n	8005e68 <HAL_SPI_Init+0xe4>
{
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d8e:	b933      	cbnz	r3, 8005d9e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d90:	6843      	ldr	r3, [r0, #4]
 8005d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d96:	d005      	beq.n	8005da4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61c3      	str	r3, [r0, #28]
 8005d9c:	e002      	b.n	8005da4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005da2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d052      	beq.n	8005e56 <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005db0:	2302      	movs	r3, #2
 8005db2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	6813      	ldr	r3, [r2, #0]
 8005dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbe:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc0:	68e3      	ldr	r3, [r4, #12]
 8005dc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc6:	d94c      	bls.n	8005e62 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dc8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dce:	d004      	beq.n	8005dda <HAL_SPI_Init+0x56>
 8005dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd4:	d001      	beq.n	8005dda <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005de0:	68a1      	ldr	r1, [r4, #8]
 8005de2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6921      	ldr	r1, [r4, #16]
 8005dea:	f001 0102 	and.w	r1, r1, #2
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6961      	ldr	r1, [r4, #20]
 8005df2:	f001 0101 	and.w	r1, r1, #1
 8005df6:	430b      	orrs	r3, r1
 8005df8:	69a1      	ldr	r1, [r4, #24]
 8005dfa:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	69e1      	ldr	r1, [r4, #28]
 8005e02:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6a21      	ldr	r1, [r4, #32]
 8005e0a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e12:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005e16:	6820      	ldr	r0, [r4, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e1c:	8b63      	ldrh	r3, [r4, #26]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e24:	f001 0110 	and.w	r1, r1, #16
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2c:	f001 0108 	and.w	r1, r1, #8
 8005e30:	430b      	orrs	r3, r1
 8005e32:	68e1      	ldr	r1, [r4, #12]
 8005e34:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6821      	ldr	r1, [r4, #0]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	69d3      	ldr	r3, [r2, #28]
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e48:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005e54:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005e56:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7fe fe14 	bl	8004a88 <HAL_SPI_MspInit>
 8005e60:	e7a6      	b.n	8005db0 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e66:	e7b0      	b.n	8005dca <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8005e68:	2001      	movs	r0, #1
}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_SPI_Transmit>:
{
 8005e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e70:	b083      	sub	sp, #12
 8005e72:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005e74:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	f000 80f4 	beq.w	8006066 <HAL_SPI_Transmit+0x1fa>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4688      	mov	r8, r1
 8005e82:	4691      	mov	r9, r2
 8005e84:	2301      	movs	r3, #1
 8005e86:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005e8a:	f7fe fe75 	bl	8004b78 <HAL_GetTick>
 8005e8e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e90:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8005e94:	b2f6      	uxtb	r6, r6
 8005e96:	2e01      	cmp	r6, #1
 8005e98:	f040 80dd 	bne.w	8006056 <HAL_SPI_Transmit+0x1ea>
  if ((pData == NULL) || (Size == 0U))
 8005e9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ea0:	f000 80da 	beq.w	8006058 <HAL_SPI_Transmit+0x1ec>
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	f000 80d6 	beq.w	8006058 <HAL_SPI_Transmit+0x1ec>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005eac:	2303      	movs	r3, #3
 8005eae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005eb6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005eba:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ebe:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ec2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ec4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ec8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ecc:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ece:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed0:	68a3      	ldr	r3, [r4, #8]
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed6:	d01e      	beq.n	8005f16 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ee0:	d103      	bne.n	8005eea <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef0:	d944      	bls.n	8005f7c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	b113      	cbz	r3, 8005efc <HAL_SPI_Transmit+0x90>
 8005ef6:	f1b9 0f01 	cmp.w	r9, #1
 8005efa:	d120      	bne.n	8005f3e <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	8812      	ldrh	r2, [r2, #0]
 8005f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f06:	3302      	adds	r3, #2
 8005f08:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005f0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005f14:	e013      	b.n	8005f3e <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	6813      	ldr	r3, [r2, #0]
 8005f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e7d5      	b.n	8005ed8 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2c:	f7fe fe24 	bl	8004b78 <HAL_GetTick>
 8005f30:	1bc0      	subs	r0, r0, r7
 8005f32:	42a8      	cmp	r0, r5
 8005f34:	d302      	bcc.n	8005f3c <HAL_SPI_Transmit+0xd0>
 8005f36:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005f3a:	d11a      	bne.n	8005f72 <HAL_SPI_Transmit+0x106>
 8005f3c:	b1cd      	cbz	r5, 8005f72 <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8005f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d06f      	beq.n	8006026 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	f012 0f02 	tst.w	r2, #2
 8005f4e:	d0ed      	beq.n	8005f2c <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f52:	8812      	ldrh	r2, [r2, #0]
 8005f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f58:	3302      	adds	r3, #2
 8005f5a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005f5c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8005f60:	fa1f fc8c 	uxth.w	ip, ip
 8005f64:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005f68:	fa1f fc8c 	uxth.w	ip, ip
 8005f6c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8005f70:	e7e5      	b.n	8005f3e <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8005f78:	2603      	movs	r6, #3
          goto error;
 8005f7a:	e06d      	b.n	8006058 <HAL_SPI_Transmit+0x1ec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	b113      	cbz	r3, 8005f86 <HAL_SPI_Transmit+0x11a>
 8005f80:	f1b9 0f01 	cmp.w	r9, #1
 8005f84:	d132      	bne.n	8005fec <HAL_SPI_Transmit+0x180>
      if (hspi->TxXferCount > 1U)
 8005f86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d90c      	bls.n	8005fa8 <HAL_SPI_Transmit+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f98:	3302      	adds	r3, #2
 8005f9a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b02      	subs	r3, #2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005fa6:	e021      	b.n	8005fec <HAL_SPI_Transmit+0x180>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005fb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005fc0:	e014      	b.n	8005fec <HAL_SPI_Transmit+0x180>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fca:	3301      	adds	r3, #1
 8005fcc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005fd8:	e008      	b.n	8005fec <HAL_SPI_Transmit+0x180>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fda:	f7fe fdcd 	bl	8004b78 <HAL_GetTick>
 8005fde:	1bc0      	subs	r0, r0, r7
 8005fe0:	42a8      	cmp	r0, r5
 8005fe2:	d302      	bcc.n	8005fea <HAL_SPI_Transmit+0x17e>
 8005fe4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005fe8:	d118      	bne.n	800601c <HAL_SPI_Transmit+0x1b0>
 8005fea:	b1bd      	cbz	r5, 800601c <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8005fec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	b1cb      	cbz	r3, 8006026 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	6893      	ldr	r3, [r2, #8]
 8005ff6:	f013 0f02 	tst.w	r3, #2
 8005ffa:	d0ee      	beq.n	8005fda <HAL_SPI_Transmit+0x16e>
        if (hspi->TxXferCount > 1U)
 8005ffc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d9de      	bls.n	8005fc2 <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800600a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800600c:	3302      	adds	r3, #2
 800600e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006010:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b02      	subs	r3, #2
 8006016:	b29b      	uxth	r3, r3
 8006018:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800601a:	e7e7      	b.n	8005fec <HAL_SPI_Transmit+0x180>
          hspi->State = HAL_SPI_STATE_READY;
 800601c:	2301      	movs	r3, #1
 800601e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8006022:	2603      	movs	r6, #3
          goto error;
 8006024:	e018      	b.n	8006058 <HAL_SPI_Transmit+0x1ec>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006026:	463a      	mov	r2, r7
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff fe38 	bl	8005ca0 <SPI_EndRxTxTransaction>
 8006030:	b108      	cbz	r0, 8006036 <HAL_SPI_Transmit+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006032:	2320      	movs	r3, #32
 8006034:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	b933      	cbnz	r3, 8006048 <HAL_SPI_Transmit+0x1dc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	9201      	str	r2, [sp, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006048:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800604a:	b92b      	cbnz	r3, 8006058 <HAL_SPI_Transmit+0x1ec>
    hspi->State = HAL_SPI_STATE_READY;
 800604c:	2301      	movs	r3, #1
 800604e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006052:	2600      	movs	r6, #0
 8006054:	e000      	b.n	8006058 <HAL_SPI_Transmit+0x1ec>
    errorcode = HAL_BUSY;
 8006056:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8006058:	2300      	movs	r3, #0
 800605a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800605e:	4630      	mov	r0, r6
 8006060:	b003      	add	sp, #12
 8006062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006066:	2602      	movs	r6, #2
 8006068:	e7f9      	b.n	800605e <HAL_SPI_Transmit+0x1f2>

0800606a <HAL_SPI_TransmitReceive>:
{
 800606a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800606e:	461f      	mov	r7, r3
 8006070:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8006072:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006076:	2b01      	cmp	r3, #1
 8006078:	f000 816b 	beq.w	8006352 <HAL_SPI_TransmitReceive+0x2e8>
 800607c:	4604      	mov	r4, r0
 800607e:	4688      	mov	r8, r1
 8006080:	4691      	mov	r9, r2
 8006082:	2301      	movs	r3, #1
 8006084:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006088:	f7fe fd76 	bl	8004b78 <HAL_GetTick>
 800608c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800608e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006092:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006094:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006096:	2b01      	cmp	r3, #1
 8006098:	d00a      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x46>
 800609a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800609e:	f040 8146 	bne.w	800632e <HAL_SPI_TransmitReceive+0x2c4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060a2:	68a2      	ldr	r2, [r4, #8]
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	f040 8148 	bne.w	800633a <HAL_SPI_TransmitReceive+0x2d0>
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	f040 8147 	bne.w	800633e <HAL_SPI_TransmitReceive+0x2d4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b0:	f1b8 0f00 	cmp.w	r8, #0
 80060b4:	f000 8145 	beq.w	8006342 <HAL_SPI_TransmitReceive+0x2d8>
 80060b8:	f1b9 0f00 	cmp.w	r9, #0
 80060bc:	f000 8143 	beq.w	8006346 <HAL_SPI_TransmitReceive+0x2dc>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f000 8142 	beq.w	800634a <HAL_SPI_TransmitReceive+0x2e0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060c6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060d0:	2305      	movs	r3, #5
 80060d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060da:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80060de:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80060e2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060e6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060ea:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80060ec:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80060ee:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060f0:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060f8:	d801      	bhi.n	80060fe <HAL_SPI_TransmitReceive+0x94>
 80060fa:	2f01      	cmp	r7, #1
 80060fc:	d923      	bls.n	8006146 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	6853      	ldr	r3, [r2, #4]
 8006102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006106:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006110:	d103      	bne.n	800611a <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006118:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006120:	d95c      	bls.n	80061dc <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	b10b      	cbz	r3, 800612a <HAL_SPI_TransmitReceive+0xc0>
 8006126:	2f01      	cmp	r7, #1
 8006128:	d10b      	bne.n	8006142 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	8812      	ldrh	r2, [r2, #0]
 8006130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006134:	3302      	adds	r3, #2
 8006136:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8006138:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006142:	2701      	movs	r7, #1
 8006144:	e030      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	6853      	ldr	r3, [r2, #4]
 800614a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800614e:	6053      	str	r3, [r2, #4]
 8006150:	e7da      	b.n	8006108 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800615a:	3302      	adds	r3, #2
 800615c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800615e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29b      	uxth	r3, r3
 8006166:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006168:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	f012 0f01 	tst.w	r2, #1
 8006172:	d011      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x12e>
 8006174:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8006178:	b292      	uxth	r2, r2
 800617a:	b16a      	cbz	r2, 8006198 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006180:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006184:	3302      	adds	r3, #2
 8006186:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006188:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8006196:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006198:	f7fe fcee 	bl	8004b78 <HAL_GetTick>
 800619c:	1b83      	subs	r3, r0, r6
 800619e:	42ab      	cmp	r3, r5
 80061a0:	d302      	bcc.n	80061a8 <HAL_SPI_TransmitReceive+0x13e>
 80061a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80061a6:	d114      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x168>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	b92b      	cbnz	r3, 80061ba <HAL_SPI_TransmitReceive+0x150>
 80061ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80ab 	beq.w	8006310 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	f012 0f02 	tst.w	r2, #2
 80061c2:	d0d2      	beq.n	800616a <HAL_SPI_TransmitReceive+0x100>
 80061c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80061c6:	b292      	uxth	r2, r2
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	d0ce      	beq.n	800616a <HAL_SPI_TransmitReceive+0x100>
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	d0cc      	beq.n	800616a <HAL_SPI_TransmitReceive+0x100>
 80061d0:	e7bf      	b.n	8006152 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 80061d8:	2003      	movs	r0, #3
        goto error;
 80061da:	e0a9      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	b10b      	cbz	r3, 80061e4 <HAL_SPI_TransmitReceive+0x17a>
 80061e0:	2f01      	cmp	r7, #1
 80061e2:	d10f      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 80061e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d90d      	bls.n	8006208 <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	8812      	ldrh	r2, [r2, #0]
 80061f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061f6:	3302      	adds	r3, #2
 80061f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b02      	subs	r3, #2
 8006200:	b29b      	uxth	r3, r3
 8006202:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006204:	2701      	movs	r7, #1
 8006206:	e049      	b.n	800629c <HAL_SPI_TransmitReceive+0x232>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006208:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006212:	3301      	adds	r3, #1
 8006214:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006216:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29b      	uxth	r3, r3
 800621e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006220:	e7f0      	b.n	8006204 <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 8006222:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006224:	b292      	uxth	r2, r2
 8006226:	2a01      	cmp	r2, #1
 8006228:	d90c      	bls.n	8006244 <HAL_SPI_TransmitReceive+0x1da>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800622c:	8812      	ldrh	r2, [r2, #0]
 800622e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006232:	3302      	adds	r3, #2
 8006234:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006236:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b02      	subs	r3, #2
 800623c:	b29b      	uxth	r3, r3
 800623e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006240:	2700      	movs	r7, #0
 8006242:	e03d      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800624a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800624c:	3301      	adds	r3, #1
 800624e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8006250:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29b      	uxth	r3, r3
 8006258:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800625a:	2700      	movs	r7, #0
 800625c:	e030      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	6853      	ldr	r3, [r2, #4]
 8006262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006266:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8006268:	2701      	movs	r7, #1
 800626a:	e00d      	b.n	8006288 <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800626c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800626e:	7b1b      	ldrb	r3, [r3, #12]
 8006270:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8006272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006274:	3301      	adds	r3, #1
 8006276:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8006278:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29b      	uxth	r3, r3
 8006282:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8006286:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006288:	f7fe fc76 	bl	8004b78 <HAL_GetTick>
 800628c:	1b80      	subs	r0, r0, r6
 800628e:	42a8      	cmp	r0, r5
 8006290:	d302      	bcc.n	8006298 <HAL_SPI_TransmitReceive+0x22e>
 8006292:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006296:	d136      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x29c>
 8006298:	2d00      	cmp	r5, #0
 800629a:	d034      	beq.n	8006306 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	b923      	cbnz	r3, 80062ac <HAL_SPI_TransmitReceive+0x242>
 80062a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d031      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	f012 0f02 	tst.w	r2, #2
 80062b4:	d004      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x256>
 80062b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80062b8:	b292      	uxth	r2, r2
 80062ba:	b10a      	cbz	r2, 80062c0 <HAL_SPI_TransmitReceive+0x256>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	d1b0      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	f012 0f01 	tst.w	r2, #1
 80062c8:	d0de      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x21e>
 80062ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80062ce:	b292      	uxth	r2, r2
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d0d9      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 80062d4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80062d8:	b292      	uxth	r2, r2
 80062da:	2a01      	cmp	r2, #1
 80062dc:	d9c6      	bls.n	800626c <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062e6:	3302      	adds	r3, #2
 80062e8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b02      	subs	r3, #2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d9ad      	bls.n	800625e <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8006302:	2701      	movs	r7, #1
 8006304:	e7c0      	b.n	8006288 <HAL_SPI_TransmitReceive+0x21e>
        hspi->State = HAL_SPI_STATE_READY;
 8006306:	2301      	movs	r3, #1
 8006308:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 800630c:	2003      	movs	r0, #3
        goto error;
 800630e:	e00f      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006310:	4632      	mov	r2, r6
 8006312:	4629      	mov	r1, r5
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff fcc3 	bl	8005ca0 <SPI_EndRxTxTransaction>
 800631a:	b110      	cbz	r0, 8006322 <HAL_SPI_TransmitReceive+0x2b8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631c:	2320      	movs	r3, #32
 800631e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006320:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006322:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006324:	b99b      	cbnz	r3, 800634e <HAL_SPI_TransmitReceive+0x2e4>
    hspi->State = HAL_SPI_STATE_READY;
 8006326:	2301      	movs	r3, #1
 8006328:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800632c:	e000      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_BUSY;
 800632e:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8006330:	2300      	movs	r3, #0
 8006332:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800633a:	2002      	movs	r0, #2
 800633c:	e7f8      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
 800633e:	2002      	movs	r0, #2
 8006340:	e7f6      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8006342:	2001      	movs	r0, #1
 8006344:	e7f4      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
 8006346:	2001      	movs	r0, #1
 8006348:	e7f2      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
 800634a:	2001      	movs	r0, #1
 800634c:	e7f0      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 800634e:	2001      	movs	r0, #1
 8006350:	e7ee      	b.n	8006330 <HAL_SPI_TransmitReceive+0x2c6>
  __HAL_LOCK(hspi);
 8006352:	2002      	movs	r0, #2
 8006354:	e7ef      	b.n	8006336 <HAL_SPI_TransmitReceive+0x2cc>

08006356 <HAL_SPI_Receive>:
{
 8006356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800635a:	b083      	sub	sp, #12
 800635c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800635e:	f890 605d 	ldrb.w	r6, [r0, #93]	; 0x5d
 8006362:	b2f6      	uxtb	r6, r6
 8006364:	2e01      	cmp	r6, #1
 8006366:	f040 80c0 	bne.w	80064ea <HAL_SPI_Receive+0x194>
 800636a:	4688      	mov	r8, r1
 800636c:	4691      	mov	r9, r2
 800636e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006370:	6843      	ldr	r3, [r0, #4]
 8006372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006376:	d03d      	beq.n	80063f4 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8006378:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800637c:	2b01      	cmp	r3, #1
 800637e:	f000 80bc 	beq.w	80064fa <HAL_SPI_Receive+0x1a4>
 8006382:	2301      	movs	r3, #1
 8006384:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006388:	f7fe fbf6 	bl	8004b78 <HAL_GetTick>
 800638c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	f000 80ab 	beq.w	80064ec <HAL_SPI_Receive+0x196>
 8006396:	f1b9 0f00 	cmp.w	r9, #0
 800639a:	f000 80a7 	beq.w	80064ec <HAL_SPI_Receive+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800639e:	2304      	movs	r3, #4
 80063a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063a8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80063ac:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80063b0:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063b4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80063b6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80063b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80063ba:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063bc:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063c4:	d923      	bls.n	800640e <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	6853      	ldr	r3, [r2, #4]
 80063ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ce:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d6:	d020      	beq.n	800641a <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80063e0:	d103      	bne.n	80063ea <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063f0:	d927      	bls.n	8006442 <HAL_SPI_Receive+0xec>
 80063f2:	e04c      	b.n	800648e <HAL_SPI_Receive+0x138>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063f4:	6883      	ldr	r3, [r0, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1be      	bne.n	8006378 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063fa:	2304      	movs	r3, #4
 80063fc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006400:	9500      	str	r5, [sp, #0]
 8006402:	4613      	mov	r3, r2
 8006404:	460a      	mov	r2, r1
 8006406:	f7ff fe30 	bl	800606a <HAL_SPI_TransmitReceive>
 800640a:	4606      	mov	r6, r0
 800640c:	e071      	b.n	80064f2 <HAL_SPI_Receive+0x19c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	6853      	ldr	r3, [r2, #4]
 8006412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006416:	6053      	str	r3, [r2, #4]
 8006418:	e7da      	b.n	80063d0 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	6813      	ldr	r3, [r2, #0]
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e7d3      	b.n	80063d8 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006430:	f7fe fba2 	bl	8004b78 <HAL_GetTick>
 8006434:	1bc0      	subs	r0, r0, r7
 8006436:	42a8      	cmp	r0, r5
 8006438:	d302      	bcc.n	8006440 <HAL_SPI_Receive+0xea>
 800643a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800643e:	d118      	bne.n	8006472 <HAL_SPI_Receive+0x11c>
 8006440:	b1bd      	cbz	r5, 8006472 <HAL_SPI_Receive+0x11c>
    while (hspi->RxXferCount > 0U)
 8006442:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d03f      	beq.n	80064cc <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	f012 0f01 	tst.w	r2, #1
 8006454:	d0ec      	beq.n	8006430 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006458:	7b1b      	ldrb	r3, [r3, #12]
 800645a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800645c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800645e:	3301      	adds	r3, #1
 8006460:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006462:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8006470:	e7e7      	b.n	8006442 <HAL_SPI_Receive+0xec>
          hspi->State = HAL_SPI_STATE_READY;
 8006472:	2301      	movs	r3, #1
 8006474:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8006478:	2603      	movs	r6, #3
          goto error;
 800647a:	e037      	b.n	80064ec <HAL_SPI_Receive+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647c:	f7fe fb7c 	bl	8004b78 <HAL_GetTick>
 8006480:	1bc0      	subs	r0, r0, r7
 8006482:	42a8      	cmp	r0, r5
 8006484:	d302      	bcc.n	800648c <HAL_SPI_Receive+0x136>
 8006486:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800648a:	d11a      	bne.n	80064c2 <HAL_SPI_Receive+0x16c>
 800648c:	b1cd      	cbz	r5, 80064c2 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 800648e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006492:	b29b      	uxth	r3, r3
 8006494:	b1d3      	cbz	r3, 80064cc <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	f012 0f01 	tst.w	r2, #1
 800649e:	d0ed      	beq.n	800647c <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a8:	3302      	adds	r3, #2
 80064aa:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80064ac:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 80064b0:	fa1f fc8c 	uxth.w	ip, ip
 80064b4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80064b8:	fa1f fc8c 	uxth.w	ip, ip
 80064bc:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 80064c0:	e7e5      	b.n	800648e <HAL_SPI_Receive+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 80064c8:	2603      	movs	r6, #3
          goto error;
 80064ca:	e00f      	b.n	80064ec <HAL_SPI_Receive+0x196>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064cc:	463a      	mov	r2, r7
 80064ce:	4629      	mov	r1, r5
 80064d0:	4620      	mov	r0, r4
 80064d2:	f7ff fc16 	bl	8005d02 <SPI_EndRxTransaction>
 80064d6:	b108      	cbz	r0, 80064dc <HAL_SPI_Receive+0x186>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064d8:	2320      	movs	r3, #32
 80064da:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80064de:	b92b      	cbnz	r3, 80064ec <HAL_SPI_Receive+0x196>
    hspi->State = HAL_SPI_STATE_READY;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064e6:	2600      	movs	r6, #0
 80064e8:	e000      	b.n	80064ec <HAL_SPI_Receive+0x196>
    errorcode = HAL_BUSY;
 80064ea:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80064ec:	2300      	movs	r3, #0
 80064ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80064f2:	4630      	mov	r0, r6
 80064f4:	b003      	add	sp, #12
 80064f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80064fa:	2602      	movs	r6, #2
 80064fc:	e7f9      	b.n	80064f2 <HAL_SPI_Receive+0x19c>

080064fe <HAL_SPI_GetState>:
  return hspi->State;
 80064fe:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8006502:	4770      	bx	lr

08006504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006504:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006506:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006508:	6a04      	ldr	r4, [r0, #32]
 800650a:	f024 0401 	bic.w	r4, r4, #1
 800650e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006510:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006512:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006516:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800651e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006520:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006522:	6203      	str	r3, [r0, #32]
}
 8006524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006528:	4770      	bx	lr

0800652a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800652a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800652c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652e:	6a04      	ldr	r4, [r0, #32]
 8006530:	f024 0410 	bic.w	r4, r4, #16
 8006534:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006536:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006538:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800653c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006544:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006548:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800654a:	6203      	str	r3, [r0, #32]
}
 800654c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006550:	4770      	bx	lr

08006552 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006552:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006558:	430b      	orrs	r3, r1
 800655a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	6083      	str	r3, [r0, #8]
}
 8006560:	4770      	bx	lr
	...

08006564 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006564:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006566:	4a30      	ldr	r2, [pc, #192]	; (8006628 <TIM_Base_SetConfig+0xc4>)
 8006568:	4290      	cmp	r0, r2
 800656a:	d00e      	beq.n	800658a <TIM_Base_SetConfig+0x26>
 800656c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0x26>
 8006572:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006576:	4290      	cmp	r0, r2
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0x26>
 800657a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800657e:	4290      	cmp	r0, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0x26>
 8006582:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006586:	4290      	cmp	r0, r2
 8006588:	d103      	bne.n	8006592 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800658e:	684a      	ldr	r2, [r1, #4]
 8006590:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006592:	4a25      	ldr	r2, [pc, #148]	; (8006628 <TIM_Base_SetConfig+0xc4>)
 8006594:	4290      	cmp	r0, r2
 8006596:	d01a      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 8006598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 800659e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80065a2:	4290      	cmp	r0, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 80065a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065aa:	4290      	cmp	r0, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 80065ae:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80065b2:	4290      	cmp	r0, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 80065b6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80065ba:	4290      	cmp	r0, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 80065be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c2:	4290      	cmp	r0, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0x6a>
 80065c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ca:	4290      	cmp	r0, r2
 80065cc:	d103      	bne.n	80065d6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d2:	68ca      	ldr	r2, [r1, #12]
 80065d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065da:	694a      	ldr	r2, [r1, #20]
 80065dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80065de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e0:	688b      	ldr	r3, [r1, #8]
 80065e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065e4:	680b      	ldr	r3, [r1, #0]
 80065e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <TIM_Base_SetConfig+0xc4>)
 80065ea:	4298      	cmp	r0, r3
 80065ec:	d00f      	beq.n	800660e <TIM_Base_SetConfig+0xaa>
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	4298      	cmp	r0, r3
 80065f4:	d00b      	beq.n	800660e <TIM_Base_SetConfig+0xaa>
 80065f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80065fa:	4298      	cmp	r0, r3
 80065fc:	d007      	beq.n	800660e <TIM_Base_SetConfig+0xaa>
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	4298      	cmp	r0, r3
 8006604:	d003      	beq.n	800660e <TIM_Base_SetConfig+0xaa>
 8006606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660a:	4298      	cmp	r0, r3
 800660c:	d101      	bne.n	8006612 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 800660e:	690b      	ldr	r3, [r1, #16]
 8006610:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006612:	2301      	movs	r3, #1
 8006614:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006616:	6903      	ldr	r3, [r0, #16]
 8006618:	f013 0f01 	tst.w	r3, #1
 800661c:	d003      	beq.n	8006626 <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800661e:	6903      	ldr	r3, [r0, #16]
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	6103      	str	r3, [r0, #16]
}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00

0800662c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800662c:	b360      	cbz	r0, 8006688 <HAL_TIM_Base_Init+0x5c>
{
 800662e:	b510      	push	{r4, lr}
 8006630:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006636:	b313      	cbz	r3, 800667e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	2302      	movs	r3, #2
 800663a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800663e:	4621      	mov	r1, r4
 8006640:	f851 0b04 	ldr.w	r0, [r1], #4
 8006644:	f7ff ff8e 	bl	8006564 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006648:	2301      	movs	r3, #1
 800664a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006652:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006656:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800665a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800665e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800666a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006672:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800667a:	2000      	movs	r0, #0
}
 800667c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800667e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006682:	f000 fc8d 	bl	8006fa0 <HAL_TIM_Base_MspInit>
 8006686:	e7d7      	b.n	8006638 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006688:	2001      	movs	r0, #1
}
 800668a:	4770      	bx	lr

0800668c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800668c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006690:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006694:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006698:	430a      	orrs	r2, r1
 800669a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669e:	6082      	str	r2, [r0, #8]
}
 80066a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80066a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d076      	beq.n	800679e <HAL_TIM_ConfigClockSource+0xf6>
{
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80066b4:	2301      	movs	r3, #1
 80066b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80066ba:	2302      	movs	r3, #2
 80066bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	6802      	ldr	r2, [r0, #0]
 80066c2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c4:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <HAL_TIM_ConfigClockSource+0xfc>)
 80066c6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80066c8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	2b60      	cmp	r3, #96	; 0x60
 80066ce:	d04c      	beq.n	800676a <HAL_TIM_ConfigClockSource+0xc2>
 80066d0:	d829      	bhi.n	8006726 <HAL_TIM_ConfigClockSource+0x7e>
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d054      	beq.n	8006780 <HAL_TIM_ConfigClockSource+0xd8>
 80066d6:	d90c      	bls.n	80066f2 <HAL_TIM_ConfigClockSource+0x4a>
 80066d8:	2b50      	cmp	r3, #80	; 0x50
 80066da:	d122      	bne.n	8006722 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066dc:	68ca      	ldr	r2, [r1, #12]
 80066de:	6849      	ldr	r1, [r1, #4]
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	f7ff ff0f 	bl	8006504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e6:	2150      	movs	r1, #80	; 0x50
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	f7ff ff32 	bl	8006552 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2000      	movs	r0, #0
      break;
 80066f0:	e005      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d00d      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x6a>
 80066f6:	d909      	bls.n	800670c <HAL_TIM_ConfigClockSource+0x64>
 80066f8:	2b30      	cmp	r3, #48	; 0x30
 80066fa:	d00a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80066fc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80066fe:	2301      	movs	r3, #1
 8006700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006704:	2300      	movs	r3, #0
 8006706:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800670a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800670c:	b10b      	cbz	r3, 8006712 <HAL_TIM_ConfigClockSource+0x6a>
 800670e:	2b10      	cmp	r3, #16
 8006710:	d105      	bne.n	800671e <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006712:	4619      	mov	r1, r3
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	f7ff ff1c 	bl	8006552 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2000      	movs	r0, #0
      break;
 800671c:	e7ef      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800671e:	2001      	movs	r0, #1
 8006720:	e7ed      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
 8006722:	2001      	movs	r0, #1
 8006724:	e7eb      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d034      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xee>
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006730:	d10c      	bne.n	800674c <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	68cb      	ldr	r3, [r1, #12]
 8006734:	684a      	ldr	r2, [r1, #4]
 8006736:	6889      	ldr	r1, [r1, #8]
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	f7ff ffa7 	bl	800668c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	6893      	ldr	r3, [r2, #8]
 8006742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006746:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006748:	2000      	movs	r0, #0
      break;
 800674a:	e7d8      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800674c:	2b70      	cmp	r3, #112	; 0x70
 800674e:	d124      	bne.n	800679a <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8006750:	68cb      	ldr	r3, [r1, #12]
 8006752:	684a      	ldr	r2, [r1, #4]
 8006754:	6889      	ldr	r1, [r1, #8]
 8006756:	6820      	ldr	r0, [r4, #0]
 8006758:	f7ff ff98 	bl	800668c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006764:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006766:	2000      	movs	r0, #0
      break;
 8006768:	e7c9      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800676a:	68ca      	ldr	r2, [r1, #12]
 800676c:	6849      	ldr	r1, [r1, #4]
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	f7ff fedb 	bl	800652a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006774:	2160      	movs	r1, #96	; 0x60
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	f7ff feeb 	bl	8006552 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2000      	movs	r0, #0
      break;
 800677e:	e7be      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006780:	68ca      	ldr	r2, [r1, #12]
 8006782:	6849      	ldr	r1, [r1, #4]
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f7ff febd 	bl	8006504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800678a:	2140      	movs	r1, #64	; 0x40
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	f7ff fee0 	bl	8006552 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006792:	2000      	movs	r0, #0
      break;
 8006794:	e7b3      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006796:	2000      	movs	r0, #0
 8006798:	e7b1      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800679a:	2001      	movs	r0, #1
 800679c:	e7af      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800679e:	2002      	movs	r0, #2
}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	fffe0088 	.word	0xfffe0088

080067a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d03e      	beq.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 80067b0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80067b2:	2301      	movs	r3, #1
 80067b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	2302      	movs	r3, #2
 80067ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067be:	6802      	ldr	r2, [r0, #0]
 80067c0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c2:	6894      	ldr	r4, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067c4:	4d1b      	ldr	r5, [pc, #108]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80067c6:	42aa      	cmp	r2, r5
 80067c8:	d003      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80067ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80067ce:	42aa      	cmp	r2, r5
 80067d0:	d103      	bne.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067d6:	684d      	ldr	r5, [r1, #4]
 80067d8:	432b      	orrs	r3, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067de:	680d      	ldr	r5, [r1, #0]
 80067e0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	6803      	ldr	r3, [r0, #0]
 80067e6:	4a13      	ldr	r2, [pc, #76]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d012      	beq.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d00f      	beq.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80067f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80067fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8006802:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800680a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800680e:	4293      	cmp	r3, r2
 8006810:	d104      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006812:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006816:	688a      	ldr	r2, [r1, #8]
 8006818:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800681a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800681c:	2301      	movs	r3, #1
 800681e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006822:	2300      	movs	r3, #0
 8006824:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006828:	4618      	mov	r0, r3
}
 800682a:	bc30      	pop	{r4, r5}
 800682c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800682e:	2002      	movs	r0, #2
}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00

08006838 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006838:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	e852 3f00 	ldrex	r3, [r2]
 800683e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	e842 3100 	strex	r1, r3, [r2]
 8006846:	2900      	cmp	r1, #0
 8006848:	d1f6      	bne.n	8006838 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	f102 0308 	add.w	r3, r2, #8
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	3208      	adds	r2, #8
 800685a:	e842 3100 	strex	r1, r3, [r2]
 800685e:	2900      	cmp	r1, #0
 8006860:	d1f3      	bne.n	800684a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006862:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006864:	2b01      	cmp	r3, #1
 8006866:	d006      	beq.n	8006876 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	2320      	movs	r3, #32
 800686a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	2300      	movs	r3, #0
 8006870:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006872:	6683      	str	r3, [r0, #104]	; 0x68
}
 8006874:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006876:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	e852 3f00 	ldrex	r3, [r2]
 800687c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	e842 3100 	strex	r1, r3, [r2]
 8006884:	2900      	cmp	r1, #0
 8006886:	d1f6      	bne.n	8006876 <UART_EndRxTransfer+0x3e>
 8006888:	e7ee      	b.n	8006868 <UART_EndRxTransfer+0x30>
	...

0800688c <UART_SetConfig>:
{
 800688c:	b510      	push	{r4, lr}
 800688e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006890:	6883      	ldr	r3, [r0, #8]
 8006892:	6902      	ldr	r2, [r0, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	6942      	ldr	r2, [r0, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	69c2      	ldr	r2, [r0, #28]
 800689c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800689e:	6801      	ldr	r1, [r0, #0]
 80068a0:	680b      	ldr	r3, [r1, #0]
 80068a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068a6:	f023 030c 	bic.w	r3, r3, #12
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ae:	6802      	ldr	r2, [r0, #0]
 80068b0:	6853      	ldr	r3, [r2, #4]
 80068b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068b6:	68c1      	ldr	r1, [r0, #12]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068bc:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80068be:	6a03      	ldr	r3, [r0, #32]
 80068c0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c2:	6801      	ldr	r1, [r0, #0]
 80068c4:	688b      	ldr	r3, [r1, #8]
 80068c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80068ca:	4313      	orrs	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ce:	6803      	ldr	r3, [r0, #0]
 80068d0:	4a7b      	ldr	r2, [pc, #492]	; (8006ac0 <UART_SetConfig+0x234>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00d      	beq.n	80068f2 <UART_SetConfig+0x66>
 80068d6:	4a7b      	ldr	r2, [pc, #492]	; (8006ac4 <UART_SetConfig+0x238>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01c      	beq.n	8006916 <UART_SetConfig+0x8a>
 80068dc:	4a7a      	ldr	r2, [pc, #488]	; (8006ac8 <UART_SetConfig+0x23c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03a      	beq.n	8006958 <UART_SetConfig+0xcc>
 80068e2:	4a7a      	ldr	r2, [pc, #488]	; (8006acc <UART_SetConfig+0x240>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d04a      	beq.n	800697e <UART_SetConfig+0xf2>
 80068e8:	4a79      	ldr	r2, [pc, #484]	; (8006ad0 <UART_SetConfig+0x244>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d05a      	beq.n	80069a4 <UART_SetConfig+0x118>
 80068ee:	2310      	movs	r3, #16
 80068f0:	e01f      	b.n	8006932 <UART_SetConfig+0xa6>
 80068f2:	4b78      	ldr	r3, [pc, #480]	; (8006ad4 <UART_SetConfig+0x248>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d809      	bhi.n	8006912 <UART_SetConfig+0x86>
 80068fe:	e8df f003 	tbb	[pc, r3]
 8006902:	0402      	.short	0x0402
 8006904:	6406      	.short	0x6406
 8006906:	2301      	movs	r3, #1
 8006908:	e013      	b.n	8006932 <UART_SetConfig+0xa6>
 800690a:	2304      	movs	r3, #4
 800690c:	e011      	b.n	8006932 <UART_SetConfig+0xa6>
 800690e:	2308      	movs	r3, #8
 8006910:	e00f      	b.n	8006932 <UART_SetConfig+0xa6>
 8006912:	2310      	movs	r3, #16
 8006914:	e00d      	b.n	8006932 <UART_SetConfig+0xa6>
 8006916:	4b6f      	ldr	r3, [pc, #444]	; (8006ad4 <UART_SetConfig+0x248>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800691e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006922:	d054      	beq.n	80069ce <UART_SetConfig+0x142>
 8006924:	d813      	bhi.n	800694e <UART_SetConfig+0xc2>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d053      	beq.n	80069d2 <UART_SetConfig+0x146>
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692e:	d152      	bne.n	80069d6 <UART_SetConfig+0x14a>
 8006930:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006932:	69e0      	ldr	r0, [r4, #28]
 8006934:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006938:	d069      	beq.n	8006a0e <UART_SetConfig+0x182>
    switch (clocksource)
 800693a:	2b08      	cmp	r3, #8
 800693c:	f200 80b9 	bhi.w	8006ab2 <UART_SetConfig+0x226>
 8006940:	e8df f003 	tbb	[pc, r3]
 8006944:	b790a892 	.word	0xb790a892
 8006948:	b7b7b7ab 	.word	0xb7b7b7ab
 800694c:	ae          	.byte	0xae
 800694d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800694e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006952:	d142      	bne.n	80069da <UART_SetConfig+0x14e>
 8006954:	2302      	movs	r3, #2
 8006956:	e7ec      	b.n	8006932 <UART_SetConfig+0xa6>
 8006958:	4b5e      	ldr	r3, [pc, #376]	; (8006ad4 <UART_SetConfig+0x248>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006960:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006964:	d03b      	beq.n	80069de <UART_SetConfig+0x152>
 8006966:	d805      	bhi.n	8006974 <UART_SetConfig+0xe8>
 8006968:	b3db      	cbz	r3, 80069e2 <UART_SetConfig+0x156>
 800696a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800696e:	d13a      	bne.n	80069e6 <UART_SetConfig+0x15a>
 8006970:	2304      	movs	r3, #4
 8006972:	e7de      	b.n	8006932 <UART_SetConfig+0xa6>
 8006974:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006978:	d137      	bne.n	80069ea <UART_SetConfig+0x15e>
 800697a:	2302      	movs	r3, #2
 800697c:	e7d9      	b.n	8006932 <UART_SetConfig+0xa6>
 800697e:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <UART_SetConfig+0x248>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800698a:	d030      	beq.n	80069ee <UART_SetConfig+0x162>
 800698c:	d805      	bhi.n	800699a <UART_SetConfig+0x10e>
 800698e:	b383      	cbz	r3, 80069f2 <UART_SetConfig+0x166>
 8006990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006994:	d12f      	bne.n	80069f6 <UART_SetConfig+0x16a>
 8006996:	2304      	movs	r3, #4
 8006998:	e7cb      	b.n	8006932 <UART_SetConfig+0xa6>
 800699a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800699e:	d12c      	bne.n	80069fa <UART_SetConfig+0x16e>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e7c6      	b.n	8006932 <UART_SetConfig+0xa6>
 80069a4:	4b4b      	ldr	r3, [pc, #300]	; (8006ad4 <UART_SetConfig+0x248>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b0:	d025      	beq.n	80069fe <UART_SetConfig+0x172>
 80069b2:	d805      	bhi.n	80069c0 <UART_SetConfig+0x134>
 80069b4:	b32b      	cbz	r3, 8006a02 <UART_SetConfig+0x176>
 80069b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ba:	d124      	bne.n	8006a06 <UART_SetConfig+0x17a>
 80069bc:	2304      	movs	r3, #4
 80069be:	e7b8      	b.n	8006932 <UART_SetConfig+0xa6>
 80069c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069c4:	d121      	bne.n	8006a0a <UART_SetConfig+0x17e>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e7b3      	b.n	8006932 <UART_SetConfig+0xa6>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e7b1      	b.n	8006932 <UART_SetConfig+0xa6>
 80069ce:	2308      	movs	r3, #8
 80069d0:	e7af      	b.n	8006932 <UART_SetConfig+0xa6>
 80069d2:	2300      	movs	r3, #0
 80069d4:	e7ad      	b.n	8006932 <UART_SetConfig+0xa6>
 80069d6:	2310      	movs	r3, #16
 80069d8:	e7ab      	b.n	8006932 <UART_SetConfig+0xa6>
 80069da:	2310      	movs	r3, #16
 80069dc:	e7a9      	b.n	8006932 <UART_SetConfig+0xa6>
 80069de:	2308      	movs	r3, #8
 80069e0:	e7a7      	b.n	8006932 <UART_SetConfig+0xa6>
 80069e2:	2300      	movs	r3, #0
 80069e4:	e7a5      	b.n	8006932 <UART_SetConfig+0xa6>
 80069e6:	2310      	movs	r3, #16
 80069e8:	e7a3      	b.n	8006932 <UART_SetConfig+0xa6>
 80069ea:	2310      	movs	r3, #16
 80069ec:	e7a1      	b.n	8006932 <UART_SetConfig+0xa6>
 80069ee:	2308      	movs	r3, #8
 80069f0:	e79f      	b.n	8006932 <UART_SetConfig+0xa6>
 80069f2:	2300      	movs	r3, #0
 80069f4:	e79d      	b.n	8006932 <UART_SetConfig+0xa6>
 80069f6:	2310      	movs	r3, #16
 80069f8:	e79b      	b.n	8006932 <UART_SetConfig+0xa6>
 80069fa:	2310      	movs	r3, #16
 80069fc:	e799      	b.n	8006932 <UART_SetConfig+0xa6>
 80069fe:	2308      	movs	r3, #8
 8006a00:	e797      	b.n	8006932 <UART_SetConfig+0xa6>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e795      	b.n	8006932 <UART_SetConfig+0xa6>
 8006a06:	2310      	movs	r3, #16
 8006a08:	e793      	b.n	8006932 <UART_SetConfig+0xa6>
 8006a0a:	2310      	movs	r3, #16
 8006a0c:	e791      	b.n	8006932 <UART_SetConfig+0xa6>
    switch (clocksource)
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d849      	bhi.n	8006aa6 <UART_SetConfig+0x21a>
 8006a12:	e8df f003 	tbb	[pc, r3]
 8006a16:	1f05      	.short	0x1f05
 8006a18:	48224825 	.word	0x48224825
 8006a1c:	4848      	.short	0x4848
 8006a1e:	09          	.byte	0x09
 8006a1f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fe fefe 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d040      	beq.n	8006aaa <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a28:	6862      	ldr	r2, [r4, #4]
 8006a2a:	0853      	lsrs	r3, r2, #1
 8006a2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006a30:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a34:	f1a0 0210 	sub.w	r2, r0, #16
 8006a38:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d836      	bhi.n	8006aae <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a40:	b283      	uxth	r3, r0
 8006a42:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a46:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006a4a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	60d8      	str	r0, [r3, #12]
 8006a50:	2000      	movs	r0, #0
 8006a52:	e01b      	b.n	8006a8c <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a54:	f7fe fefa 	bl	800584c <HAL_RCC_GetPCLK2Freq>
        break;
 8006a58:	e7e4      	b.n	8006a24 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a5a:	f7fe fdd7 	bl	800560c <HAL_RCC_GetSysClockFreq>
        break;
 8006a5e:	e7e1      	b.n	8006a24 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	481d      	ldr	r0, [pc, #116]	; (8006ad8 <UART_SetConfig+0x24c>)
 8006a62:	e7e1      	b.n	8006a28 <UART_SetConfig+0x19c>
    switch (clocksource)
 8006a64:	481c      	ldr	r0, [pc, #112]	; (8006ad8 <UART_SetConfig+0x24c>)
 8006a66:	e002      	b.n	8006a6e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a68:	f7fe feda 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a6c:	b318      	cbz	r0, 8006ab6 <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006a74:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a78:	f1a0 0210 	sub.w	r2, r0, #16
 8006a7c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d81a      	bhi.n	8006aba <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	b280      	uxth	r0, r0
 8006a88:	60d8      	str	r0, [r3, #12]
 8006a8a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006a90:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006a92:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fe feda 	bl	800584c <HAL_RCC_GetPCLK2Freq>
        break;
 8006a98:	e7e8      	b.n	8006a6c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fe fdb7 	bl	800560c <HAL_RCC_GetSysClockFreq>
        break;
 8006a9e:	e7e5      	b.n	8006a6c <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8006aa0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006aa4:	e7e3      	b.n	8006a6e <UART_SetConfig+0x1e2>
    switch (clocksource)
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	e7f0      	b.n	8006a8c <UART_SetConfig+0x200>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e7ee      	b.n	8006a8c <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7ec      	b.n	8006a8c <UART_SetConfig+0x200>
    switch (clocksource)
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	e7ea      	b.n	8006a8c <UART_SetConfig+0x200>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e7e8      	b.n	8006a8c <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8006aba:	2001      	movs	r0, #1
 8006abc:	e7e6      	b.n	8006a8c <UART_SetConfig+0x200>
 8006abe:	bf00      	nop
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	40004400 	.word	0x40004400
 8006ac8:	40004800 	.word	0x40004800
 8006acc:	40004c00 	.word	0x40004c00
 8006ad0:	40005000 	.word	0x40005000
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	007a1200 	.word	0x007a1200

08006adc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006adc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ade:	f013 0f08 	tst.w	r3, #8
 8006ae2:	d006      	beq.n	8006af2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae4:	6802      	ldr	r2, [r0, #0]
 8006ae6:	6853      	ldr	r3, [r2, #4]
 8006ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006af4:	f013 0f01 	tst.w	r3, #1
 8006af8:	d006      	beq.n	8006b08 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afa:	6802      	ldr	r2, [r0, #0]
 8006afc:	6853      	ldr	r3, [r2, #4]
 8006afe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b02:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b0a:	f013 0f02 	tst.w	r3, #2
 8006b0e:	d006      	beq.n	8006b1e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b10:	6802      	ldr	r2, [r0, #0]
 8006b12:	6853      	ldr	r3, [r2, #4]
 8006b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b18:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b20:	f013 0f04 	tst.w	r3, #4
 8006b24:	d006      	beq.n	8006b34 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b26:	6802      	ldr	r2, [r0, #0]
 8006b28:	6853      	ldr	r3, [r2, #4]
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b36:	f013 0f10 	tst.w	r3, #16
 8006b3a:	d006      	beq.n	8006b4a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b3c:	6802      	ldr	r2, [r0, #0]
 8006b3e:	6893      	ldr	r3, [r2, #8]
 8006b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b44:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b4c:	f013 0f20 	tst.w	r3, #32
 8006b50:	d006      	beq.n	8006b60 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b52:	6802      	ldr	r2, [r0, #0]
 8006b54:	6893      	ldr	r3, [r2, #8]
 8006b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b5a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b68:	6802      	ldr	r2, [r0, #0]
 8006b6a:	6853      	ldr	r3, [r2, #4]
 8006b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b7c:	d00b      	beq.n	8006b96 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b84:	d006      	beq.n	8006b94 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b86:	6802      	ldr	r2, [r0, #0]
 8006b88:	6853      	ldr	r3, [r2, #4]
 8006b8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6053      	str	r3, [r2, #4]
}
 8006b94:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b96:	6802      	ldr	r2, [r0, #0]
 8006b98:	6853      	ldr	r3, [r2, #4]
 8006b9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b9e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6053      	str	r3, [r2, #4]
 8006ba4:	e7eb      	b.n	8006b7e <UART_AdvFeatureConfig+0xa2>

08006ba6 <UART_WaitOnFlagUntilTimeout>:
{
 8006ba6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006baa:	4605      	mov	r5, r0
 8006bac:	460e      	mov	r6, r1
 8006bae:	4617      	mov	r7, r2
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	682c      	ldr	r4, [r5, #0]
 8006bb8:	69e4      	ldr	r4, [r4, #28]
 8006bba:	ea36 0304 	bics.w	r3, r6, r4
 8006bbe:	bf0c      	ite	eq
 8006bc0:	f04f 0c01 	moveq.w	ip, #1
 8006bc4:	f04f 0c00 	movne.w	ip, #0
 8006bc8:	45bc      	cmp	ip, r7
 8006bca:	d136      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x94>
    if (Timeout != HAL_MAX_DELAY)
 8006bcc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006bd0:	d0f1      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fd ffd1 	bl	8004b78 <HAL_GetTick>
 8006bd6:	eba0 0009 	sub.w	r0, r0, r9
 8006bda:	4540      	cmp	r0, r8
 8006bdc:	d830      	bhi.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x9a>
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	d02f      	beq.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x9e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	f012 0f04 	tst.w	r2, #4
 8006bec:	d0e3      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x10>
 8006bee:	2e80      	cmp	r6, #128	; 0x80
 8006bf0:	d0e1      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x10>
 8006bf2:	2e40      	cmp	r6, #64	; 0x40
 8006bf4:	d0df      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	f012 0f08 	tst.w	r2, #8
 8006bfc:	d111      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006c04:	d0d7      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c0a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f7ff fe13 	bl	8006838 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c12:	2320      	movs	r3, #32
 8006c14:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8006c1e:	2003      	movs	r0, #3
 8006c20:	e00c      	b.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c22:	2408      	movs	r4, #8
 8006c24:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fe06 	bl	8006838 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c2c:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006c30:	2300      	movs	r3, #0
 8006c32:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
 8006c38:	e000      	b.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x96>
  return HAL_OK;
 8006c3a:	2000      	movs	r0, #0
}
 8006c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8006c40:	2003      	movs	r0, #3
 8006c42:	e7fb      	b.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x96>
 8006c44:	2003      	movs	r0, #3
 8006c46:	e7f9      	b.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x96>

08006c48 <HAL_UART_Transmit>:
{
 8006c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006c50:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d156      	bne.n	8006d04 <HAL_UART_Transmit+0xbc>
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d055      	beq.n	8006d0c <HAL_UART_Transmit+0xc4>
 8006c60:	b90a      	cbnz	r2, 8006c66 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8006c62:	2001      	movs	r0, #1
 8006c64:	e04f      	b.n	8006d06 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6c:	2321      	movs	r3, #33	; 0x21
 8006c6e:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8006c70:	f7fd ff82 	bl	8004b78 <HAL_GetTick>
 8006c74:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006c76:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c7a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	d002      	beq.n	8006c8c <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	e018      	b.n	8006cbe <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	b113      	cbz	r3, 8006c96 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8006c90:	f04f 0800 	mov.w	r8, #0
 8006c94:	e013      	b.n	8006cbe <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 8006c96:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006c98:	2500      	movs	r5, #0
 8006c9a:	e010      	b.n	8006cbe <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8006ca0:	2003      	movs	r0, #3
 8006ca2:	e030      	b.n	8006d06 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca4:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006cb0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	b292      	uxth	r2, r2
 8006cba:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cbe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	b17b      	cbz	r3, 8006ce6 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc6:	9600      	str	r6, [sp, #0]
 8006cc8:	463b      	mov	r3, r7
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff ff69 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d1e1      	bne.n	8006c9c <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	d0e3      	beq.n	8006ca4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006ce2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ce4:	e7e4      	b.n	8006cb0 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	9600      	str	r6, [sp, #0]
 8006ce8:	463b      	mov	r3, r7
 8006cea:	2200      	movs	r2, #0
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7ff ff59 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006cf4:	b910      	cbnz	r0, 8006cfc <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8006cfa:	e004      	b.n	8006d06 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8006d00:	2003      	movs	r0, #3
 8006d02:	e000      	b.n	8006d06 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8006d04:	2002      	movs	r0, #2
}
 8006d06:	b002      	add	sp, #8
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	e7fa      	b.n	8006d06 <HAL_UART_Transmit+0xbe>

08006d10 <UART_CheckIdleState>:
{
 8006d10:	b530      	push	{r4, r5, lr}
 8006d12:	b083      	sub	sp, #12
 8006d14:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006d1c:	f7fd ff2c 	bl	8004b78 <HAL_GetTick>
 8006d20:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	f012 0f08 	tst.w	r2, #8
 8006d2a:	d10f      	bne.n	8006d4c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f013 0f04 	tst.w	r3, #4
 8006d34:	d126      	bne.n	8006d84 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8006d36:	2320      	movs	r3, #32
 8006d38:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3e:	2000      	movs	r0, #0
 8006d40:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d42:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8006d44:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006d48:	b003      	add	sp, #12
 8006d4a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4603      	mov	r3, r0
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff23 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d0e3      	beq.n	8006d2c <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	e852 3f00 	ldrex	r3, [r2]
 8006d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	e842 3100 	strex	r1, r3, [r2]
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d1f6      	bne.n	8006d64 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8006d76:	2320      	movs	r3, #32
 8006d78:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8006d80:	2003      	movs	r0, #3
 8006d82:	e7e1      	b.n	8006d48 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d92:	4620      	mov	r0, r4
 8006d94:	f7ff ff07 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0cc      	beq.n	8006d36 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	e852 3f00 	ldrex	r3, [r2]
 8006da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	e842 3100 	strex	r1, r3, [r2]
 8006daa:	2900      	cmp	r1, #0
 8006dac:	d1f6      	bne.n	8006d9c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f102 0308 	add.w	r3, r2, #8
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	3208      	adds	r2, #8
 8006dbe:	e842 3100 	strex	r1, r3, [r2]
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d1f3      	bne.n	8006dae <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	2320      	movs	r3, #32
 8006dc8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8006dd2:	2003      	movs	r0, #3
 8006dd4:	e7b8      	b.n	8006d48 <UART_CheckIdleState+0x38>

08006dd6 <HAL_UART_Init>:
  if (huart == NULL)
 8006dd6:	b368      	cbz	r0, 8006e34 <HAL_UART_Init+0x5e>
{
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ddc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006dde:	b303      	cbz	r3, 8006e22 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006de0:	2324      	movs	r3, #36	; 0x24
 8006de2:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	6813      	ldr	r3, [r2, #0]
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df0:	b9e3      	cbnz	r3, 8006e2c <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff fd4a 	bl	800688c <UART_SetConfig>
 8006df8:	2801      	cmp	r0, #1
 8006dfa:	d011      	beq.n	8006e20 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	6853      	ldr	r3, [r2, #4]
 8006e00:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006e04:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	6893      	ldr	r3, [r2, #8]
 8006e0a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006e0e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff ff78 	bl	8006d10 <UART_CheckIdleState>
}
 8006e20:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006e22:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006e26:	f000 f8eb 	bl	8007000 <HAL_UART_MspInit>
 8006e2a:	e7d9      	b.n	8006de0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fe55 	bl	8006adc <UART_AdvFeatureConfig>
 8006e32:	e7de      	b.n	8006df2 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8006e34:	2001      	movs	r0, #1
}
 8006e36:	4770      	bx	lr

08006e38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e38:	e7fe      	b.n	8006e38 <NMI_Handler>

08006e3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e3a:	e7fe      	b.n	8006e3a <HardFault_Handler>

08006e3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e3c:	e7fe      	b.n	8006e3c <MemManage_Handler>

08006e3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e3e:	e7fe      	b.n	8006e3e <BusFault_Handler>

08006e40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e40:	e7fe      	b.n	8006e40 <UsageFault_Handler>

08006e42 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e42:	4770      	bx	lr

08006e44 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e44:	4770      	bx	lr

08006e46 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e46:	4770      	bx	lr

08006e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e4a:	f7fd fe89 	bl	8004b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e4e:	bd08      	pop	{r3, pc}

08006e50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006e52:	4802      	ldr	r0, [pc, #8]	; (8006e5c <DMA1_Channel4_IRQHandler+0xc>)
 8006e54:	f7fd ff64 	bl	8004d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006e58:	bd08      	pop	{r3, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200003d0 	.word	0x200003d0

08006e60 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006e60:	2001      	movs	r0, #1
 8006e62:	4770      	bx	lr

08006e64 <_kill>:

int _kill(int pid, int sig)
{
 8006e64:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e66:	f7f9 fa15 	bl	8000294 <__errno>
 8006e6a:	2316      	movs	r3, #22
 8006e6c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e72:	bd08      	pop	{r3, pc}

08006e74 <_exit>:

void _exit (int status)
{
 8006e74:	b508      	push	{r3, lr}
  _kill(status, -1);
 8006e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e7a:	f7ff fff3 	bl	8006e64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e7e:	e7fe      	b.n	8006e7e <_exit+0xa>

08006e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e86:	2500      	movs	r5, #0
 8006e88:	e006      	b.n	8006e98 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8006e8a:	f3af 8000 	nop.w
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e94:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8006e96:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e98:	42b5      	cmp	r5, r6
 8006e9a:	dbf6      	blt.n	8006e8a <_read+0xa>
  }

  return len;
}
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}

08006ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	e004      	b.n	8006eb4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8006eaa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	42b5      	cmp	r5, r6
 8006eb6:	dbf8      	blt.n	8006eaa <_write+0xa>
  }
  return len;
}
 8006eb8:	4630      	mov	r0, r6
 8006eba:	bd70      	pop	{r4, r5, r6, pc}

08006ebc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ec0:	4770      	bx	lr

08006ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ec6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr

08006ecc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006ecc:	2001      	movs	r0, #1
 8006ece:	4770      	bx	lr

08006ed0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	4770      	bx	lr

08006ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <_sbrk+0x38>)
 8006eda:	490d      	ldr	r1, [pc, #52]	; (8006f10 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006edc:	480d      	ldr	r0, [pc, #52]	; (8006f14 <_sbrk+0x40>)
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	b140      	cbz	r0, 8006ef4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ee2:	480c      	ldr	r0, [pc, #48]	; (8006f14 <_sbrk+0x40>)
 8006ee4:	6800      	ldr	r0, [r0, #0]
 8006ee6:	4403      	add	r3, r0
 8006ee8:	1a52      	subs	r2, r2, r1
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d806      	bhi.n	8006efc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <_sbrk+0x40>)
 8006ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006ef2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006ef4:	4807      	ldr	r0, [pc, #28]	; (8006f14 <_sbrk+0x40>)
 8006ef6:	4c08      	ldr	r4, [pc, #32]	; (8006f18 <_sbrk+0x44>)
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	e7f2      	b.n	8006ee2 <_sbrk+0xe>
    errno = ENOMEM;
 8006efc:	f7f9 f9ca 	bl	8000294 <__errno>
 8006f00:	230c      	movs	r3, #12
 8006f02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f08:	e7f3      	b.n	8006ef2 <_sbrk+0x1e>
 8006f0a:	bf00      	nop
 8006f0c:	20008000 	.word	0x20008000
 8006f10:	00000400 	.word	0x00000400
 8006f14:	20000380 	.word	0x20000380
 8006f18:	200004a0 	.word	0x200004a0

08006f1c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f1c:	4a03      	ldr	r2, [pc, #12]	; (8006f2c <SystemInit+0x10>)
 8006f1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006f22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f2a:	4770      	bx	lr
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006f30:	b500      	push	{lr}
 8006f32:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f34:	2300      	movs	r3, #0
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	9306      	str	r3, [sp, #24]
 8006f3c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	9302      	str	r3, [sp, #8]
 8006f42:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006f44:	4815      	ldr	r0, [pc, #84]	; (8006f9c <MX_TIM2_Init+0x6c>)
 8006f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f4a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 8006f4c:	2247      	movs	r2, #71	; 0x47
 8006f4e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f50:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8006f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f56:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f58:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006f5c:	f7ff fb66 	bl	800662c <HAL_TIM_Base_Init>
 8006f60:	b990      	cbnz	r0, 8006f88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f66:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	480c      	ldr	r0, [pc, #48]	; (8006f9c <MX_TIM2_Init+0x6c>)
 8006f6c:	f7ff fb9c 	bl	80066a8 <HAL_TIM_ConfigClockSource>
 8006f70:	b968      	cbnz	r0, 8006f8e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f72:	2300      	movs	r3, #0
 8006f74:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f76:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f78:	a901      	add	r1, sp, #4
 8006f7a:	4808      	ldr	r0, [pc, #32]	; (8006f9c <MX_TIM2_Init+0x6c>)
 8006f7c:	f7ff fc14 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8006f80:	b940      	cbnz	r0, 8006f94 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006f82:	b009      	add	sp, #36	; 0x24
 8006f84:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006f88:	f7fd fb70 	bl	800466c <Error_Handler>
 8006f8c:	e7e9      	b.n	8006f62 <MX_TIM2_Init+0x32>
    Error_Handler();
 8006f8e:	f7fd fb6d 	bl	800466c <Error_Handler>
 8006f92:	e7ee      	b.n	8006f72 <MX_TIM2_Init+0x42>
    Error_Handler();
 8006f94:	f7fd fb6a 	bl	800466c <Error_Handler>
}
 8006f98:	e7f3      	b.n	8006f82 <MX_TIM2_Init+0x52>
 8006f9a:	bf00      	nop
 8006f9c:	20000384 	.word	0x20000384

08006fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8006fa0:	6803      	ldr	r3, [r0, #0]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d000      	beq.n	8006faa <HAL_TIM_Base_MspInit+0xa>
 8006fa8:	4770      	bx	lr
{
 8006faa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006fac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006fb0:	69da      	ldr	r2, [r3, #28]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	61da      	str	r2, [r3, #28]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006fc2:	b002      	add	sp, #8
 8006fc4:	4770      	bx	lr
	...

08006fc8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006fc8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006fca:	480b      	ldr	r0, [pc, #44]	; (8006ff8 <MX_USART1_UART_Init+0x30>)
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <MX_USART1_UART_Init+0x34>)
 8006fce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8006fd0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006fd4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006fda:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006fdc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006fde:	220c      	movs	r2, #12
 8006fe0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fe2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fe4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fe6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fe8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006fea:	f7ff fef4 	bl	8006dd6 <HAL_UART_Init>
 8006fee:	b900      	cbnz	r0, 8006ff2 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006ff0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006ff2:	f7fd fb3b 	bl	800466c <Error_Handler>
}
 8006ff6:	e7fb      	b.n	8006ff0 <MX_USART1_UART_Init+0x28>
 8006ff8:	20000414 	.word	0x20000414
 8006ffc:	40013800 	.word	0x40013800

08007000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007000:	b510      	push	{r4, lr}
 8007002:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007004:	2300      	movs	r3, #0
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	9306      	str	r3, [sp, #24]
 800700e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8007010:	6802      	ldr	r2, [r0, #0]
 8007012:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <HAL_UART_MspInit+0x90>)
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007018:	b008      	add	sp, #32
 800701a:	bd10      	pop	{r4, pc}
 800701c:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800701e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007028:	619a      	str	r2, [r3, #24]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007030:	9201      	str	r2, [sp, #4]
 8007032:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800703a:	615a      	str	r2, [r3, #20]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	9302      	str	r3, [sp, #8]
 8007044:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800704a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704c:	2302      	movs	r3, #2
 800704e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007050:	2303      	movs	r3, #3
 8007052:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007054:	2307      	movs	r3, #7
 8007056:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007058:	a903      	add	r1, sp, #12
 800705a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800705e:	f7fd feb9 	bl	8004dd4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007062:	480c      	ldr	r0, [pc, #48]	; (8007094 <HAL_UART_MspInit+0x94>)
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <HAL_UART_MspInit+0x98>)
 8007066:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007068:	2310      	movs	r3, #16
 800706a:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800706c:	2300      	movs	r3, #0
 800706e:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007074:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007076:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007078:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800707a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800707c:	f7fd fe28 	bl	8004cd0 <HAL_DMA_Init>
 8007080:	b918      	cbnz	r0, 800708a <HAL_UART_MspInit+0x8a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007082:	4b04      	ldr	r3, [pc, #16]	; (8007094 <HAL_UART_MspInit+0x94>)
 8007084:	6723      	str	r3, [r4, #112]	; 0x70
 8007086:	625c      	str	r4, [r3, #36]	; 0x24
}
 8007088:	e7c6      	b.n	8007018 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800708a:	f7fd faef 	bl	800466c <Error_Handler>
 800708e:	e7f8      	b.n	8007082 <HAL_UART_MspInit+0x82>
 8007090:	40013800 	.word	0x40013800
 8007094:	200003d0 	.word	0x200003d0
 8007098:	40020044 	.word	0x40020044

0800709c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800709c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80070a0:	f7ff ff3c 	bl	8006f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80070a4:	480c      	ldr	r0, [pc, #48]	; (80070d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80070a6:	490d      	ldr	r1, [pc, #52]	; (80070dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80070a8:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <LoopForever+0xe>)
  movs r3, #0
 80070aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070ac:	e002      	b.n	80070b4 <LoopCopyDataInit>

080070ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070b2:	3304      	adds	r3, #4

080070b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070b8:	d3f9      	bcc.n	80070ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80070bc:	4c0a      	ldr	r4, [pc, #40]	; (80070e8 <LoopForever+0x16>)
  movs r3, #0
 80070be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070c0:	e001      	b.n	80070c6 <LoopFillZerobss>

080070c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070c4:	3204      	adds	r2, #4

080070c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070c8:	d3fb      	bcc.n	80070c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80070ca:	f7f9 f90b 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80070ce:	f7fd fb11 	bl	80046f4 <main>

080070d2 <LoopForever>:

LoopForever:
    b LoopForever
 80070d2:	e7fe      	b.n	80070d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80070d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80070d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070dc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80070e0:	0800737c 	.word	0x0800737c
  ldr r2, =_sbss
 80070e4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80070e8:	2000049c 	.word	0x2000049c

080070ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80070ec:	e7fe      	b.n	80070ec <ADC1_2_IRQHandler>
	...

080070f0 <_init>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr

080070fc <_fini>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr
